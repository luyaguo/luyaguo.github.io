<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二十一、JavaScript symbol类型</title>
      <link href="/posts/51ab95fe.html"/>
      <url>/posts/51ab95fe.html</url>
      
        <content type="html"><![CDATA[<h1 id="二十一、JavaScript-symbol-类型"><a href="#二十一、JavaScript-symbol-类型" class="headerlink" title="二十一、JavaScript symbol 类型"></a>二十一、JavaScript symbol 类型</h1><p>根据规范，只有两种原始类型可以用作对象属性键：</p><ul><li>字符串类型</li><li>symbol 类型</li></ul><p>否则，如果使用另一种类型，例如数字，它会被自动转换为字符串。所以 <code>obj[1]</code> 与 <code>obj[&quot;1&quot;]</code> 相同，而 <code>obj[true]</code> 与 <code>obj[&quot;true&quot;]</code> 相同。</p><p>到目前为止，我们一直只使用字符串。现在我们来看看 symbol 能给我们带来什么。</p><h2 id="1、symbol"><a href="#1、symbol" class="headerlink" title="1、symbol"></a>1、symbol</h2><p><strong><code>symbol</code> 值表示唯一的标识符。</strong></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>可以使用 <code>Symbol()</code> 来创建这种类型的值：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建时，我们可以给 symbol 一个描述（也称为 symbol 名），这在代码调试时非常有用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// id 是描述为 "id" 的 symbol</span><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p><strong>symbol 保证是唯一的。即使我们创建了许多具有相同描述的 symbol，它们的值也是不同。描述只是一个标签，不影响任何东西。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> id1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> id2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>id1 <span class="token operator">==</span> id2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="symbol-不会被自动转换为字符串"><a href="#symbol-不会被自动转换为字符串" class="headerlink" title="symbol 不会被自动转换为字符串"></a>symbol 不会被自动转换为字符串</h3><p><strong>JavaScript 中的大多数值都支持字符串的隐式转换。例如，我们可以 <code>alert</code> 任何值，都可以生效。symbol 比较特殊，它不会被自动转换。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 类型错误：无法将 symbol 值转换为字符串。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>这是一种防止混乱的“语言保护”，因为字符串和 symbol 有本质上的不同，不应该意外地将它们转换成另一个。</li></ul><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p>如果我们真的想显示一个 symbol，我们需要在它上面调用 <code>.toString()</code>，如下所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Symbol(id)，现在它有效了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="description-属性"><a href="#description-属性" class="headerlink" title="description 属性"></a>description 属性</h3><p>或者获取 <code>symbol.description</code> 属性，只显示描述（description）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2、隐藏属性"><a href="#2、隐藏属性" class="headerlink" title="2、隐藏属性"></a>2、隐藏属性</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>symbol 允许我们创建对象的“隐藏”属性，代码的任何其他部分都不能意外访问或重写这些属性。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 属于另一个代码</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> user<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>我们可以使用 symbol 作为键来访问数据</li></ul><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>由于对象属于另一个代码库，向它们添加字段是不安全的，因为我们可能会影响代码库中的其他预定义行为。但 symbol 属性不会被意外访问到。第三方代码不会知道新定义的 symbol，因此是安全的。</p><p>假设另一个脚本希望在 <code>user</code> 中有自己的标识符，以实现自己的目的。那么，该脚本可以创建自己的 <code>Symbol(&quot;id&quot;)</code>，像这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ...</span><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Their id value"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>我们的标识符和它们的标识符之间不会有冲突，因为 symbol 总是不同的，即使它们有相同的名字。</li></ul><p>但如果我们处于同样的目的，使用字符串 <code>&quot;id&quot;</code> 而不是用 symbol，那么 <strong>就会</strong> 出现冲突：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 我们的脚本使用了 "id" 属性。</span>user<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">"Our id value"</span><span class="token punctuation">;</span><span class="token comment">// ……另一个脚本也想将 "id" 用于它的目的……</span>user<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">"Their id value"</span><span class="token comment">// 砰！无意中被另一个脚本重写了 id！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对象字面量中的-symbol"><a href="#对象字面量中的-symbol" class="headerlink" title="对象字面量中的 symbol"></a>对象字面量中的 symbol</h3><p><strong>如果我们要在对象字面量 <code>&#123;...&#125;</code> 中使用 symbol，则需要使用方括号把它括起来。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">123</span> <span class="token comment">// 而不是 "id"：123</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这是因为我们需要变量 <code>id</code> 的值作为键，而不是字符串 “id”。</li></ul><h3 id="symbol-在-for…in-中会被跳过"><a href="#symbol-在-for…in-中会被跳过" class="headerlink" title="symbol 在 for…in 中会被跳过"></a>symbol 在 for…in 中会被跳过</h3><p><strong>symbol 属性不参与 <code>for..in</code> 循环。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> user<span class="token punctuation">)</span> <span class="token function">alert</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name, age（没有 symbol）</span><span class="token comment">// 使用 symbol 任务直接访问</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Direct: "</span> <span class="token operator">+</span> user<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Direct: 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="symbol-在-Object-keys-user-中会被忽略"><a href="#symbol-在-Object-keys-user-中会被忽略" class="headerlink" title="symbol 在 Object.keys(user)  中会被忽略"></a>symbol 在 Object.keys(user)  中会被忽略</h3><p>这是一般“隐藏符号属性”原则的一部分。如果另一个脚本或库遍历我们的对象，它不会意外地访问到符号属性。</p><h3 id="symbol-在-Object-assign-中不会被忽略"><a href="#symbol-在-Object-assign-中不会被忽略" class="headerlink" title="symbol 在 Object.assign  中不会被忽略"></a>symbol 在 Object.assign  中不会被忽略</h3><p><strong>symbol 在 Object.assign  中会同时复制字符串和 symbol 属性。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> clone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> clone<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里的想法是当我们克隆或者合并一个 object 时，通常希望 <strong>所有</strong> 属性被复制（包括像 <code>id</code> 这样的 symbol）。</p></blockquote><h2 id="3、全局-symbol"><a href="#3、全局-symbol" class="headerlink" title="3、全局 symbol"></a>3、全局 symbol</h2><p>正如我们所看到的，通常所有的 symbol 都是不同的，即使它们有相同的名字。</p><p>但有时我们想要名字相同的 symbol 具有相同的实体。例如，应用程序的不同部分想要访问的 symbol <code>&quot;id&quot;</code> 指的是完全相同的属性。</p><h3 id="全局-symbol-注册表"><a href="#全局-symbol-注册表" class="headerlink" title="全局 symbol 注册表"></a>全局 symbol 注册表</h3><p>为了实现这一点，这里有一个 <strong>全局 symbol 注册表</strong>。我们可以在其中创建 symbol 并在稍后访问它们，它可以确保每次访问相同名字的 symbol 时，返回的都是相同的 symbol。</p><h4 id="Symbol-for-key"><a href="#Symbol-for-key" class="headerlink" title="Symbol.for(key)"></a>Symbol.for(key)</h4><p>要从注册表中读取（不存在则创建）symbol，请使用 <code>Symbol.for(key)</code>。</p><ul><li>该调用会检查全局注册表，如果有一个描述为 <code>key</code> 的 symbol，则返回该 symbol；</li><li>否则将创建一个新 symbol（<code>Symbol(key)</code>），并通过给定的 <code>key</code> 将其存储在注册表中。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 从全局注册表中读取</span><span class="token keyword">let</span> id <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果该 symbol 不存在，则创建它</span><span class="token comment">// 再次读取（可能是在代码中的另一个位置）</span><span class="token keyword">let</span> idAgain <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 相同的 symbol</span><span class="token function">alert</span><span class="token punctuation">(</span> id <span class="token operator">===</span> idAgain <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注册表内的 symbol 被称为 全局 symbol。如果我们想要一个应用程序范围内的 symbol，可以在代码中随处访问 —— 这就是它们的用途。</strong></p><h3 id="Symbol-keyFor"><a href="#Symbol-keyFor" class="headerlink" title="Symbol.keyFor"></a>Symbol.keyFor</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>我们已经看到，对于全局 symbol，<code>Symbol.for(key)</code> 按名字返回一个 symbol。</p><p><strong>相反，通过全局 symbol 返回一个名字，我们可以使用 <code>Symbol.keyFor(sym)</code>：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 通过 name 获取 symbol</span><span class="token keyword">let</span> sym <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> sym2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过 symbol 获取 name</span><span class="token function">alert</span><span class="token punctuation">(</span> Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>sym<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name</span><span class="token function">alert</span><span class="token punctuation">(</span> Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>sym2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="用途-1"><a href="#用途-1" class="headerlink" title="用途"></a>用途</h4><p><strong><code>Symbol.keyFor</code> 内部使用全局 symbol 注册表来查找 symbol 的键。所以它不适用于非全局 symbol。如果 symbol 不是全局的，它将无法找到它并返回 <code>undefined</code>。</strong></p><p><strong>但是，所有 symbol 都具有 <code>description</code> 属性。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> globalSymbol <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> localSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>globalSymbol<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name，全局 symbol</span><span class="token function">alert</span><span class="token punctuation">(</span> Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>localSymbol<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined，非全局</span><span class="token function">alert</span><span class="token punctuation">(</span> localSymbol<span class="token punctuation">.</span>description <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、系统-symbol"><a href="#4、系统-symbol" class="headerlink" title="4、系统 symbol"></a>4、系统 symbol</h2><p>JavaScript 内部有很多“系统” symbol，我们可以使用它们来微调对象的各个方面。</p><p>它们都被列在了 <a href="https://tc39.github.io/ecma262/#sec-well-known-symbols">众所周知的 symbol</a> 表的规范中：</p><ul><li><code>Symbol.hasInstance</code></li><li><code>Symbol.isConcatSpreadable</code></li><li><code>Symbol.iterator</code></li><li><code>Symbol.toPrimitive</code></li><li>……等等。</li></ul><p>例如，<code>Symbol.toPrimitive</code> 允许我们将对象描述为原始值转换。</p><p>当我们研究相应的语言特征时，我们对其他的 symbol 也会慢慢熟悉起来。</p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p><code>symbol</code> 是唯一标识符的基本类型</p><p>symbol 是使用带有可选描述（name）的 <code>Symbol()</code> 调用创建的。</p><p>symbol 总是不同的值，即使它们有相同的名字。如果我们希望同名的 symbol 相等，那么我们应该使用全局注册表：<code>Symbol.for(key)</code> 返回（如果需要的话则创建）一个以 <code>key</code> 作为名字的全局 symbol。使用 <code>Symbol.for</code> 多次调用 <code>key</code> 相同的 symbol 时，返回的就是同一个 symbol。</p><p>symbol 有两个主要的使用场景：</p><ol><li><p>“隐藏” 对象属性。</p><p>如果我们想要向“属于”另一个脚本或者库的对象添加一个属性，我们可以创建一个 symbol 并使用它作为属性的键。symbol 属性不会出现在 <code>for..in</code> 中，因此它不会意外地被与其他属性一起处理。并且，它不会被直接访问，因为另一个脚本没有我们的 symbol。因此，该属性将受到保护，防止被意外使用或重写。</p><p>因此我们可以使用 symbol 属性“秘密地”将一些东西隐藏到我们需要的对象中，但其他地方看不到它。</p></li><li><p>JavaScript 使用了许多系统 symbol，这些 symbol 可以作为 <code>Symbol.*</code> 访问。我们可以使用它们来改变一些内建行为。例如，在本教程的后面部分，我们将使用 <code>Symbol.iterator</code> 来进行 <a href="https://zh.javascript.info/iterable">迭代</a> 操作，使用 <code>Symbol.toPrimitive</code> 来设置 <a href="https://zh.javascript.info/object-toprimitive">对象原始值的转换</a> 等等。</p></li></ol><p>从技术上说，symbol 不是 100% 隐藏的。有一个内建方法 <a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols">Object.getOwnPropertySymbols(obj)</a> 允许我们获取所有的 symbol。还有一个名为 <a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys">Reflect.ownKeys(obj)</a> 的方法可以返回一个对象的 <strong>所有</strong> 键，包括 symbol。但大多数库、内建方法和语法结构都没有使用这些方法。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二十、JavaScript构造器</title>
      <link href="/posts/2666e31f.html"/>
      <url>/posts/2666e31f.html</url>
      
        <content type="html"><![CDATA[<h1 id="二十、JavaScript-构造器"><a href="#二十、JavaScript-构造器" class="headerlink" title="二十、JavaScript 构造器"></a>二十、JavaScript 构造器</h1><p>常规的 <code>&#123;...&#125;</code> 语法允许创建一个对象。但是我们经常需要创建很多类似的对象，例如多个用户或菜单项等。</p><p>这时候就使用到构造函数和 <code>&quot;new&quot;</code> 操作符。</p><h2 id="1、构造函数"><a href="#1、构造函数" class="headerlink" title="1、构造函数"></a>1、构造函数</h2><h3 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h3><p>构造函数在技术上是常规函数。不过有两个约定：</p><ol><li><strong>它们的命名以大写字母开头。</strong></li><li><strong>它们只能由 <code>&quot;new&quot;</code> 操作符来执行。</strong></li></ol><blockquote><p>“首字母大写”是一个共同的约定，以明确表示一个函数将被使用 <code>new</code> 来运行。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>isAdmin <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Jack</span><span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>isAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="new-操作符"><a href="#new-操作符" class="headerlink" title="new 操作符"></a><code>new</code> 操作符</h3><p>当一个函数被使用 <code>new</code> 操作符执行时，它按照以下步骤：</p><ol><li><strong>一个新的空对象被创建并分配给 <code>this</code>。</strong></li><li><strong>函数体执行。通常它会修改 <code>this</code>，为其添加新的属性。</strong></li><li><strong>返回 <code>this</code> 的值。</strong></li></ol><p>换句话说，<code>new User(...)</code> 做的就是类似的事情：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// this = &#123;&#125;;（隐式创建）</span>  <span class="token comment">// 添加属性到 this</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>isAdmin <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// return this;（隐式返回）</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以 <code>new User(&quot;Jack&quot;)</code> 的结果是相同的对象：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span>  <span class="token literal-property property">isAdmin</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在，如果我们想创建其他用户，我们可以调用  等。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Ann"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>比每次都使用字面量创建要短得多，而且更易于阅读。</li></ul><blockquote><p>这是构造器的主要目的 —— <strong>实现可重用的对象创建代码。</strong></p></blockquote><h3 id="new-function-…"><a href="#new-function-…" class="headerlink" title="new function() { … }"></a>new function() { … }</h3><p><strong>如果我们有许多行用于创建单个复杂对象的代码，我们可以将它们封装在一个立即调用的构造函数中。</strong></p><p>像这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建一个函数并立即使用 new 调用它</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"John"</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>isAdmin <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// ……用于用户创建的其他代码</span>  <span class="token comment">// 也许是复杂的逻辑和语句</span>  <span class="token comment">// 局部变量等</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这个构造函数不能被再次调用，因为它不保存在任何地方，只是被创建和调用。</li></ul><blockquote><p><strong>这个技巧旨在封装构建单个对象的代码，而无需将来重用。</strong></p></blockquote><h2 id="2、构造器模式测试：new-target"><a href="#2、构造器模式测试：new-target" class="headerlink" title="2、构造器模式测试：new.target"></a>2、构造器模式测试：new.target</h2><p><strong>在一个函数内部，我们可以使用 <code>new.target</code> 属性来检查它是否被使用 <code>new</code> 进行调用了。</strong></p><ul><li><strong>对于常规调用，它为 undefined；</strong></li><li><strong>对于使用 <code>new</code> 的调用，则等于该函数；</strong></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 不带 "new"：</span><span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span class="token comment">// 带 "new"：</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function User &#123; ... &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们也可以让 <code>new</code> 调用和常规调用做相同的工作，像这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">new</span><span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果你没有通过 new 运行我</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ……我会给你添加 new</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> john <span class="token operator">=</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将调用重定向到新用户</span><span class="token function">alert</span><span class="token punctuation">(</span>john<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这种方法有时被用在库中以使语法更加灵活。这样人们在调用函数时，无论是否使用了 <code>new</code>，程序都能工作。</li><li>不过，到处都使用它并不是一件好事，因为省略了 <code>new</code> 使得很难观察到代码中正在发生什么。而通过 <code>new</code> 我们都可以知道这创建了一个新对象。</li></ul><h2 id="3、构造器的-return"><a href="#3、构造器的-return" class="headerlink" title="3、构造器的 return"></a>3、构造器的 return</h2><p><strong>通常，构造器没有 <code>return</code> 语句。它们的任务是将所有必要的东西写入 <code>this</code>，并自动转换为结果。</strong></p><p>但是，如果这有一个 <code>return</code> 语句，那么规则就简单了：</p><ul><li>如果 <code>return</code> 返回的是一个对象，则返回这个对象，而不是 <code>this</code>。</li><li>如果 <code>return</code> 返回的是一个原始类型，则忽略。</li></ul><p><strong>换句话说，带有对象的 <code>return</code> 返回该对象，在所有其他情况下返回 <code>this</code>。</strong></p><p>例如，这里 <code>return</code> 通过返回一个对象覆盖 <code>this</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">BigUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"John"</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Godzilla"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// &lt;-- 返回这个对象</span><span class="token punctuation">&#125;</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">BigUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Godzilla，得到了那个对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有一个 <code>return</code> 为空的例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SmallUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"John"</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- 返回 this</span><span class="token punctuation">&#125;</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">SmallUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// John</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、省略括号"><a href="#4、省略括号" class="headerlink" title="4、省略括号"></a>4、省略括号</h2><p><strong>如果没有参数，我们可以省略 <code>new</code> 后的括号。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- 没有参数</span><span class="token comment">// 等同于</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>这里省略括号不被认为是一种“好风格”，但是规范允许使用该语法。</li></ul><h2 id="5、构造器中的方法"><a href="#5、构造器中的方法" class="headerlink" title="5、构造器中的方法"></a>5、构造器中的方法</h2><p>使用构造函数来创建对象会带来很大的灵活性，我们不仅可以将属性添加到 <code>this</code> 中，还可以添加方法。</p><p>例如，下面的 <code>new User(name)</code> 用给定的 <code>name</code> 和方法 <code>sayHi</code> 创建了一个对象：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">"My name is: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> john <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>john<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// My name is: John</span><span class="token comment">/*john = &#123;   name: "John",   sayHi: function() &#123; ... &#125;&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://zh.javascript.info/classes">类</a> 是用于创建复杂对象的一个更高级的语法，我们稍后会讲到。</li></ul><h2 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h2><ul><li>构造函数，或简称构造器，就是常规函数，但大家对于构造器有个共同的约定，就是其命名首字母要大写。</li><li>构造函数只能使用 <code>new</code> 来调用。这样的调用意味着在开始时创建了空的 <code>this</code>，并在最后返回填充了值的 <code>this</code>。</li><li>我们可以使用构造函数来创建多个类似的对象。JavaScript 为许多内建的对象提供了构造函数：比如日期 <code>Date</code>、集合 <code>Set</code> 以及其他。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十八、JavaScript对象引用和复制</title>
      <link href="/posts/5008bf9a.html"/>
      <url>/posts/5008bf9a.html</url>
      
        <content type="html"><![CDATA[<h1 id="十八、JavaScript-对象引用和复制"><a href="#十八、JavaScript-对象引用和复制" class="headerlink" title="十八、JavaScript 对象引用和复制"></a>十八、JavaScript 对象引用和复制</h1><p>对象与原始类型的根本区别之一是，对象是“通过引用”存储和复制的，而原始类型：字符串、数字、布尔值等 —— 总是“作为一个整体”复制。</p><h2 id="1、原始类型"><a href="#1、原始类型" class="headerlink" title="1、原始类型"></a>1、原始类型</h2><p>这里我们将 <code>message</code> 复制到 <code>phrase</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">"Hello!"</span><span class="token punctuation">;</span><span class="token keyword">let</span> phrase <span class="token operator">=</span> message<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果得到 <strong>两个独立的变量</strong>，每个都存储着字符串 <code>&quot;Hello!&quot;</code>。<br><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/javascript-base/202408100154718.svg" alt="variable-copy-value"></p><h2 id="2、对象"><a href="#2、对象" class="headerlink" title="2、对象"></a>2、对象</h2><p><strong>赋值了对象的变量存储的不是对象本身，而是该对象“在内存中的地址” —— 换句话说就是对该对象的“引用”。</strong></p><p>让我们看一个这样的变量的例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这是它实际存储在内存中的方式：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/javascript-base/202408100155434.svg" alt="variable-contains-reference"></p><p>该对象被存储在内存中的某个位置（在图片的右侧），而变量 <code>user</code>（在左侧）保存的是对其的“引用”。</p><p><strong>当一个对象变量被复制 —— 引用被复制，而该对象自身并没有被复制。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> admin <span class="token operator">=</span> user<span class="token punctuation">;</span> <span class="token comment">// 复制引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里仍然只有一个对象，但现在有两个引用它的变量：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/javascript-base/202408100155539.svg" alt="variable-copy-reference"></p><p><strong>我们可以通过其中任意一个变量来访问该对象并修改它的内容</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'John'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> admin <span class="token operator">=</span> user<span class="token punctuation">;</span>admin<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Pete'</span><span class="token punctuation">;</span> <span class="token comment">// 通过 "admin" 引用来修改</span><span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'Pete'，修改能通过 "user" 引用看到</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就像我们有一个带有两把钥匙的柜子，使用其中一把钥匙（<code>admin</code>）打开柜子并更改了里面的东西。那么，如果我们稍后用另一把钥匙（<code>user</code>），我们仍然可以打开同一个柜子并且可以访问更改的内容。</p><h2 id="3、通过引用比较"><a href="#3、通过引用比较" class="headerlink" title="3、通过引用比较"></a>3、通过引用比较</h2><p><strong>仅当两个对象为同一对象时，两者才相等。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// 复制引用</span><span class="token function">alert</span><span class="token punctuation">(</span> a <span class="token operator">==</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，都引用同一对象</span><span class="token function">alert</span><span class="token punctuation">(</span> a <span class="token operator">===</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这里 <code>a</code> 和 <code>b</code> 两个变量都引用同一个对象，所以它们相等</li></ul><p>而这里两个独立的对象则并不相等，即使它们看起来很像（都为空）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 两个独立的对象</span><span class="token function">alert</span><span class="token punctuation">(</span> a <span class="token operator">==</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、克隆"><a href="#4、克隆" class="headerlink" title="4、克隆"></a>4、克隆</h2><p>那么，拷贝一个对象变量会又创建一个对相同对象的引用。但是，如果我们想要复制一个对象，那该怎么做呢？</p><p>答：<strong>我们可以创建一个新对象，通过遍历已有对象的属性，并在原始类型值的层面复制它们，以实现对已有对象结构的复制。</strong></p><p>就像这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> clone <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 新的空对象</span><span class="token comment">// 将 user 中所有的属性拷贝到其中</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  clone<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> user<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 现在 clone 是带有相同内容的完全独立的对象</span>clone<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Pete"</span><span class="token punctuation">;</span> <span class="token comment">// 改变了其中的数据</span><span class="token function">alert</span><span class="token punctuation">(</span> user<span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 原来的对象中的 name 属性依然是 John</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、Object-assign合并"><a href="#5、Object-assign合并" class="headerlink" title="5、Object.assign合并"></a>5、Object.assign合并</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> <span class="token punctuation">[</span>src1<span class="token punctuation">,</span> src2<span class="token punctuation">,</span> src3<span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>第一个参数 <code>dest</code> 是指目标对象。</li><li>更后面的参数 <code>src1, ..., srcN</code>（可按需传递多个参数）是源对象。</li><li>该方法将所有源对象的属性拷贝到目标对象 <code>dest</code> 中。换句话说，从第二个开始的所有参数的属性都被拷贝到第一个参数的对象中。</li><li>调用结果返回 <code>dest</code>。</li></ul><p>例如，我们可以用它来合并多个对象：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> permissions1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">canView</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> permissions2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">canEdit</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 将 permissions1 和 permissions2 中的所有属性都拷贝到 user 中</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> permissions1<span class="token punctuation">,</span> permissions2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 现在 user = &#123; name: "John", canView: true, canEdit: true &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果被拷贝的属性的属性名已经存在，那么它会被覆盖</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Pete"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 现在 user = &#123; name: "Pete" &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们也可以用 <code>Object.assign</code> 代替 <code>for..in</code> 循环来进行简单克隆：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> clone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>它将 <code>user</code> 中的所有属性拷贝到了一个空对象中，并返回这个新的对象。</li></ul><p>还有其他克隆对象的方法，例如使用 <a href="https://zh.javascript.info/rest-parameters-spread">spread 语法</a> <code>clone = &#123;...user&#125;</code>，在后面的章节中我们会讲到。</p><h2 id="6、深层克隆"><a href="#6、深层克隆" class="headerlink" title="6、深层克隆"></a>6、深层克隆</h2><p>上面克隆对象的所有属性均为原始类型，但属性可以是对其他对象的引用，此时该如何进行克隆呢？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">182</span><span class="token punctuation">,</span>    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">50</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> clone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> user<span class="token punctuation">.</span>sizes <span class="token operator">===</span> clone<span class="token punctuation">.</span>sizes <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，同一个对象</span><span class="token comment">// user 和 clone 分享同一个 sizes</span>user<span class="token punctuation">.</span>sizes<span class="token punctuation">.</span>width<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token comment">// 通过其中一个改变属性值</span><span class="token function">alert</span><span class="token punctuation">(</span>clone<span class="token punctuation">.</span>sizes<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 51，能从另外一个获取到变更后的结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答：<strong>我们应该使用一个拷贝循环来检查 <code>obj[key]</code> 的每个值，如果它是一个对象，那么也复制它的结构。这就是所谓的“深拷贝”。</strong></p><p>我们可以使用递归来实现它。或者为了不重复造轮子，采用现有的实现，例如 <a href="https://lodash.com/">lodash</a> 库的 <a href="https://lodash.com/docs#cloneDeep">_.cloneDeep(obj)</a>。</p><h2 id="7、const-修饰对象"><a href="#7、const-修饰对象" class="headerlink" title="7、const 修饰对象"></a>7、const 修饰对象</h2><p><strong>使用 const 声明的对象也是可以被修改的。</strong></p><p><strong>通过引用对对象进行存储的一个重要的副作用是声明为 <code>const</code> 的对象 可以 被修改。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Pete"</span><span class="token punctuation">;</span> <span class="token comment">// (*)</span><span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Pete</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>看起来 <code>(*)</code> 行的代码会触发一个错误，但实际并没有。<code>user</code> 的值是一个常量，它必须始终引用同一个对象，但该对象的属性可以被自由修改。</li><li>换句话说，只有当我们尝试将 <code>user=...</code> 作为一个整体进行赋值时，<code>const user</code> 才会报错。</li></ul><h2 id="8、总结"><a href="#8、总结" class="headerlink" title="8、总结"></a>8、总结</h2><ul><li>对象通过引用被赋值和拷贝。换句话说，一个变量存储的不是“对象的值”，而是一个对值的“引用”（内存地址）。因此，拷贝此类变量或将其作为函数参数传递时，所拷贝的是引用，而不是对象本身。</li><li>所有通过被拷贝的引用的操作（如添加、删除属性）都作用在同一个对象上。</li><li>为了创建“真正的拷贝”（一个克隆），我们可以使用 <code>Object.assign</code> 来做所谓的“浅拷贝”（嵌套对象被通过引用进行拷贝）或者使用“深拷贝”函数，例如 <a href="https://lodash.com/docs#cloneDeep">_.cloneDeep(obj)</a>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十九、JavaScript对象方法</title>
      <link href="/posts/2be449a9.html"/>
      <url>/posts/2be449a9.html</url>
      
        <content type="html"><![CDATA[<h1 id="十九、JavaScript-对象方法"><a href="#十九、JavaScript-对象方法" class="headerlink" title="十九、JavaScript 对象方法"></a>十九、JavaScript 对象方法</h1><p>在 JavaScript 中，行为（action）由属性中的函数来表示。</p><h2 id="1、方法"><a href="#1、方法" class="headerlink" title="1、方法"></a>1、方法</h2><p><strong>作为对象属性的函数被称为 方法。</strong></p><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><p>刚开始，我们来教 <code>user</code> 说 hello：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这里我们使用函数表达式创建了一个函数，并将其指定给对象的 <code>user.sayHi</code> 属性。</li><li>随后我们像这样 <code>user.sayHi()</code> 调用它。用户现在可以说话了！</li></ul><h3 id="预先声明函数"><a href="#预先声明函数" class="headerlink" title="预先声明函数"></a>预先声明函数</h3><p>当然，我们也可以使用预先声明的函数作为方法，就像这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 首先，声明函数</span><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 然后将其作为一个方法添加</span>user<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> sayHi<span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>面向对象编程</strong></p><p>当我们在代码中用对象表示实体时，就是所谓的 <a href="https://en.wikipedia.org/wiki/Object-oriented_programming">面向对象编程</a>，简称为 “OOP”。</p></blockquote><h3 id="方法简写"><a href="#方法简写" class="headerlink" title="方法简写"></a>方法简写</h3><p>在对象字面量中，有一种更短的（声明）方法的语法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 方法简写</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 与 "sayHi: function()&#123;...&#125;" 一样</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>如上所示，我们可以省略 <code>&quot;function&quot;</code>，只写 <code>sayHi()</code>。</strong></li></ul><p>说实话，这种表示法还是有些不同。在对象继承方面有一些细微的差别（稍后将会介绍），但目前它们并不重要。在几乎所有的情况下，更短的语法是首选的。</p><h2 id="2、方法中-this"><a href="#2、方法中-this" class="headerlink" title="2、方法中 this"></a>2、方法中 this</h2><p>通常，对象方法需要访问对象中存储的信息才能完成其工作。例如，<code>user.sayHi()</code> 中的代码可能需要用到 <code>user</code> 的 name 属性。</p><h3 id="this-引用"><a href="#this-引用" class="headerlink" title="this 引用"></a>this 引用</h3><p><strong>为了访问该对象，方法中可以使用 <code>this</code> 关键字。<code>this</code> 的值就是在点之前的这个对象，即调用该方法的对象。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// "this" 指的是“当前的对象”</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在这里 <code>user.sayHi()</code> 执行过程中，<code>this</code> 的值是 <code>user</code>。</li></ul><h3 id="外部变量名引用"><a href="#外部变量名引用" class="headerlink" title="外部变量名引用"></a>外部变量名引用</h3><p>技术上讲，也可以在不使用 <code>this</code> 的情况下，通过外部变量名来引用它：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "user" 替代 "this"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>但这样的代码是不可靠的。如果我们决定将 <code>user</code> 复制给另一个变量，例如 <code>admin = user</code>，并赋另外的值给 <code>user</code>，那么它将访问到错误的对象。</li></ul><p>下面这个示例证实了这一点：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span> user<span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 导致错误</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> admin <span class="token operator">=</span> user<span class="token punctuation">;</span>user <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 重写让其更明显</span>admin<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Cannot read property 'name' of null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果我们在 <code>alert</code> 中以 <code>this.name</code> 替换 <code>user.name</code>，那么代码就会正常运行。</li></ul><h2 id="3、this-不受限制"><a href="#3、this-不受限制" class="headerlink" title="3、this 不受限制"></a>3、this 不受限制</h2><p><strong>1）在 JavaScript 中，<code>this</code> 关键字与其他大多数编程语言中的不同。JavaScript 中的 <code>this</code> 可以用于任何函数，即使它不是对象的方法。</strong></p><p><strong>2）在没有对象的情况下调用：<code>this == undefined</code></strong></p><p>下面这样的代码没有语法错误：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>this</code> 的值是在代码运行时计算出来的，它取决于代码上下文。</li></ul><p>我们甚至可以在没有对象的情况下调用函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3）这里相同的函数被分配给两个不同的对象，在调用中有着不同的 “this” 值</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> admin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Admin"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 在两个对象中使用相同的函数</span>user<span class="token punctuation">.</span>f <span class="token operator">=</span> sayHi<span class="token punctuation">;</span>admin<span class="token punctuation">.</span>f <span class="token operator">=</span> sayHi<span class="token punctuation">;</span><span class="token comment">// 这两个调用有不同的 this 值</span><span class="token comment">// 函数内部的 "this" 是“点符号前面”的那个对象</span>user<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John（this == user）</span>admin<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Admin（this == admin）</span>admin<span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Admin（使用点符号或方括号语法来访问这个方法，都没有关系。）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这个规则很简单：如果 <code>obj.f()</code> 被调用了，则 <code>this</code> 在 <code>f</code> 函数调用期间是 <code>obj</code>。</li><li>所以在上面的例子中 this 先是 <code>user</code>，之后是 <code>admin</code>。</li></ul><blockquote><p><strong>解除 <code>this</code> 绑定的后果：</strong></p><p>如果你经常使用其他的编程语言，那么你可能已经习惯了“绑定 <code>this</code>”的概念，即在对象中定义的方法总是有指向该对象的 <code>this</code>。</p><p>在 JavaScript 中，<code>this</code> 是“自由”的，它的值是在调用时计算出来的，它的值并不取决于方法声明的位置，而是取决于在“点符号前”的是什么对象。</p><p>在运行时对 <code>this</code> 求值的这个概念既有优点也有缺点。一方面，函数可以被重用于不同的对象。另一方面，更大的灵活性造成了更大的出错的可能。</p></blockquote><h2 id="4、箭头函数没有自己的-this"><a href="#4、箭头函数没有自己的-this" class="headerlink" title="4、箭头函数没有自己的 this"></a>4、箭头函数没有自己的 <code>this</code></h2><p><strong>箭头函数有些特别：它们没有自己的 <code>this</code>。如果我们在这样的函数中引用 <code>this</code>，<code>this</code> 值取决于外部“正常的”函数。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">"Ilya"</span><span class="token punctuation">,</span>  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token function-variable function">arrow</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">arrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ilya</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当我们并不想要一个独立的 <code>this</code>，反而想从外部上下文中获取时，它很有用。</li><li>这里的 <code>arrow()</code> 使用的 <code>this</code> 来自于外部的 <code>user.sayHi()</code> 方法。</li></ul><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><ul><li>存储在对象属性中的函数被称为“方法”。</li><li>方法允许对象进行像 <code>object.doSomething()</code> 这样的“操作”。</li><li>方法可以将对象引用为 <code>this</code>。</li></ul><p><code>this</code> 的值是在程序运行时得到的。</p><ul><li>一个函数在声明时，可能就使用了 <code>this</code>，但是这个 <code>this</code> 只有在函数被调用时才会有值。</li><li>可以在对象之间复制函数。</li><li>以“方法”的语法调用函数时：<code>object.method()</code>，调用过程中的 <code>this</code> 值是 <code>object</code>。</li></ul><p>请注意箭头函数有些特别：它们没有 <code>this</code>。在箭头函数内部访问到的 <code>this</code> 都是从外部获取的。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十七、JavaScript Object对象</title>
      <link href="/posts/127df953.html"/>
      <url>/posts/127df953.html</url>
      
        <content type="html"><![CDATA[<h1 id="十七、JavaScript-Object-对象"><a href="#十七、JavaScript-Object-对象" class="headerlink" title="十七、JavaScript Object 对象"></a>十七、JavaScript Object 对象</h1><p>JavaScript 中有八种数据类型。有七种原始类型，因为它们的值只包含一种东西（字符串，数字或者其他）。</p><p>相反，对象则用来存储键值对和更复杂的实体。在 JavaScript 中，对象几乎渗透到了这门编程语言的方方面面。所以，在我们深入理解这门语言之前，必须先理解对象。</p><h2 id="1、Object-对象创建"><a href="#1、Object-对象创建" class="headerlink" title="1、Object 对象创建"></a>1、Object 对象创建</h2><p>我们可以通过使用带有可选 <strong>属性列表</strong> 的花括号 <code>&#123;…&#125;</code> 来创建对象。</p><ul><li>一个属性就是一个键值对（“key: value”）；</li><li>键（<code>key</code>）是一个字符串（也叫做属性名），值（<code>value</code>）可以是任何值。</li></ul><h2 id="2、空对象"><a href="#2、空对象" class="headerlink" title="2、空对象"></a>2、空对象</h2><p>我们可以用下面两种语法中的任一种来创建一个空的对象（“空柜子”）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// “构造函数” 的语法</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// “字面量” 的语法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通常，我们用花括号。这种方式我们叫做 <strong>字面量</strong>。</p><h2 id="3、文本和属性"><a href="#3、文本和属性" class="headerlink" title="3、文本和属性"></a>3、文本和属性</h2><p><strong>我们可以在创建对象的时候，立即将一些属性以键值对的形式放到 <code>&#123;...&#125;</code> 中。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 一个对象</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token comment">// 键 "name"，值 "John"</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span>        <span class="token comment">// 键 "age"，值 30</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>属性有键（或者也可以叫做“名字”或“标识符”），位于冒号 <code>&quot;:&quot;</code> 的前面，值在冒号的右边。</li></ul><h2 id="4、属性访问"><a href="#4、属性访问" class="headerlink" title="4、属性访问"></a>4、属性访问</h2><h3 id="点符号"><a href="#点符号" class="headerlink" title="点符号"></a>点符号</h3><p>可以使用点符号访问属性值：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 读取文件的属性：</span><span class="token function">alert</span><span class="token punctuation">(</span> user<span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John</span><span class="token function">alert</span><span class="token punctuation">(</span> user<span class="token punctuation">.</span>age <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用点符号添加属性：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">user<span class="token punctuation">.</span>isAdmin <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以用 <code>delete</code> 操作符移除属性：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">delete</span> user<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以用多字词语来作为属性名，但必须给它们加上引号：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token string-property property">"likes birds"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">// 多词属性名必须加引号</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列表中的最后一个属性应以逗号结尾：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这叫做尾随（trailing）或悬挂（hanging）逗号。这样便于我们添加、删除和移动属性，因为所有的行都是相似的。</p><h3 id="方括号"><a href="#方括号" class="headerlink" title="方括号"></a>方括号</h3><p>对于多词属性，点操作就不能用了：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 这将提示有语法错误</span>user<span class="token punctuation">.</span>likes birds <span class="token operator">=</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>JavaScript 理解不了。它认为我们在处理 <code>user.likes</code>，然后在遇到意外的 <code>birds</code> 时给出了语法错误。</li></ul><blockquote><p><strong>点符号要求 <code>key</code> 是有效的变量标识符。这意味着：不包含空格，不以数字开头，也不包含特殊字符（允许使用 <code>$</code> 和 <code>_</code>）。</strong></p></blockquote><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>使用方括号，可用于任何字符串：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 设置</span>user<span class="token punctuation">[</span><span class="token string">"likes birds"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// 读取</span>user<span class="token punctuation">[</span><span class="token string">"likes birds"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token comment">// 删除</span><span class="token keyword">delete</span> user<span class="token punctuation">[</span><span class="token string">"likes birds"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>请注意方括号中的字符串要放在引号中，单引号或双引号都可以。</strong></li></ul><h4 id="表达式获取属性名"><a href="#表达式获取属性名" class="headerlink" title="表达式获取属性名"></a>表达式获取属性名</h4><p>方括号同样提供了一种可以通过任意表达式来获取属性名的方式 —— 与文本字符串不同 —— 例如下面的变量：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token string">"likes birds"</span><span class="token punctuation">;</span>user<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 跟 user["likes birds"] = true; 一样</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>在这里，变量 <code>key</code> 可以是程序运行时计算得到的，也可以是根据用户的输入得到的。然后我们可以用它来访问属性。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"What do you want to know about the user?"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 访问变量</span><span class="token function">alert</span><span class="token punctuation">(</span> user<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John（如果输入 "name"）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>点符号不能以类似的方式使用：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> user<span class="token punctuation">.</span>key <span class="token punctuation">)</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p>当创建一个对象时，我们可以在对象字面量中使用方括号。这叫做 <strong>计算属性</strong>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> fruit <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"Which fruit to buy?"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> bag <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>fruit<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// 属性名是从 fruit 变量中得到的</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> bag<span class="token punctuation">.</span>apple <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5 如果 fruit="apple"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>[fruit]</code> 含义是<strong>属性名</strong>应该从 <code>fruit</code> 变量中获取。</li><li>用户输入 <code>&quot;apple&quot;</code>，<code>bag</code> 将变为 <code>&#123;apple: 5&#125;</code>。</li></ul><p>本质上，这跟下面的语法效果相同：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> fruit <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"Which fruit to buy?"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> bag <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 从 fruit 变量中获取值</span>bag<span class="token punctuation">[</span>fruit<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以在方括号中使用更复杂的表达式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> fruit <span class="token operator">=</span> <span class="token string">'apple'</span><span class="token punctuation">;</span><span class="token keyword">let</span> bag <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>fruit <span class="token operator">+</span> <span class="token string">'Computers'</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token comment">// bag.appleComputers = 5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>方括号比点符号更强大。它允许任何属性名和变量，但写起来也更加麻烦。</p><p><strong>所以，当属性名是已知且简单的时候，就使用点符号。如果我们需要一些更复杂的内容，那么就用方括号。</strong></p><h2 id="5、属性值简写"><a href="#5、属性值简写" class="headerlink" title="5、属性值简写"></a>5、属性值简写</h2><h3 id="初始"><a href="#初始" class="headerlink" title="初始"></a>初始</h3><p>在实际开发中，我们通常用已存在的变量当做属性名。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">makeUser</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> age<span class="token punctuation">,</span>    <span class="token comment">// ……其他的属性</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token function">makeUser</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在上面的例子中，属性名跟变量名一样。</li></ul><h3 id="改进-属性值缩写"><a href="#改进-属性值缩写" class="headerlink" title="改进-属性值缩写"></a>改进-属性值缩写</h3><p>在这有一种特殊的 <strong>属性值缩写</strong> 方法，使属性名变得更短。可以用 <code>name</code> 来代替 <code>name:name</code> 像下面那样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">makeUser</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    name<span class="token punctuation">,</span> <span class="token comment">// 与 name: name 相同</span>    age<span class="token punctuation">,</span>  <span class="token comment">// 与 age: age 相同</span>    <span class="token comment">// ...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以把属性名简写方式和正常方式混用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token punctuation">,</span>  <span class="token comment">// 与 name:name 相同</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、属性命名"><a href="#6、属性命名" class="headerlink" title="6、属性命名"></a>6、属性命名</h2><p>我们已经知道，变量名不能是编程语言的某个保留字，如 “for”、“let”、“return” 等……但对象的属性名并不受此限制：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 这些属性都没问题</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token keyword">let</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token keyword">return</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> obj<span class="token punctuation">.</span>for <span class="token operator">+</span> obj<span class="token punctuation">.</span>let <span class="token operator">+</span> obj<span class="token punctuation">.</span>return <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>简而言之，属性命名没有限制。属性名可以是任何字符串或者 symbol（一种特殊的标志符类型）。其他类型会被自动地转换为字符串。</p></blockquote><p>当数字 <code>0</code> 被用作对象的属性的键时，会被转换为字符串 <code>&quot;0&quot;</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">"test"</span> <span class="token comment">// 等同于 "0": "test"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 都会输出相同的属性（数字 0 被转为字符串 "0"）</span><span class="token function">alert</span><span class="token punctuation">(</span> obj<span class="token punctuation">[</span><span class="token string">"0"</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// test</span><span class="token function">alert</span><span class="token punctuation">(</span> obj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// test (相同的属性)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有个小陷阱：一个名为 <code>__proto__</code> 的属性。我们不能将它设置为一个非对象的值：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 分配一个数字</span><span class="token function">alert</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Object] —— 值为对象，与预期结果不同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="7、属性存在性判断"><a href="#7、属性存在性判断" class="headerlink" title="7、属性存在性判断"></a>7、属性存在性判断</h2><p>相比于其他语言，JavaScript 的对象有一个需要注意的特性：能够被访问任何属性。即使属性不存在也不会报错！</p><h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><p><strong>读取不存在的属性只会得到 <code>undefined</code>。</strong></p><p>所以我们可以很容易地判断一个属性是否存在：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> user<span class="token punctuation">.</span>noSuchProperty <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 意思是没有这个属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="in-操作符"><a href="#in-操作符" class="headerlink" title="in 操作符"></a><code>in</code> 操作符</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p><strong>操作符 <code>&quot;in&quot;</code>：检查属性是否存在。</strong></p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"key"</span> <span class="token keyword">in</span> object<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">"age"</span> <span class="token keyword">in</span> user <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，user.age 存在</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">"blabla"</span> <span class="token keyword">in</span> user <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false，user.blabla 不存在。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>请注意，<code>in</code> 的左边必须是 <strong>属性名</strong>。通常是一个带引号的字符串。</p><p>如果我们省略引号，就意味着左边是一个变量，它应该包含要判断的实际属性名。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> key <span class="token keyword">in</span> user <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，属性 "age" 存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="undefined-VS-in-操作符"><a href="#undefined-VS-in-操作符" class="headerlink" title="undefined VS in 操作符"></a>undefined VS <code>in</code> 操作符</h3><p>为何会有 <code>in</code> 运算符呢？与 <code>undefined</code> 进行比较来判断还不够吗？</p><p>答：大部分情况下与 <code>undefined</code> 进行比较来判断就可以了。但有一个例外情况，这种比对方式会有问题，但 <code>in</code> 运算符的判断结果仍是对的。</p><p><strong>那就是属性存在，但存储的值是 <code>undefined</code> 的时候</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> obj<span class="token punctuation">.</span>test <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显示 undefined，所以属性不存在？</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">"test"</span> <span class="token keyword">in</span> obj <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，属性存在！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>属性 <code>obj.test</code> 事实上是存在的，所以 <code>in</code> 操作符检查通过。</li><li>这种情况很少发生，因为通常情况下不应该给对象赋值 <code>undefined</code>。</li></ul><p>我们通常会用 <code>null</code> 来表示未知的或者空的值。因此，<code>in</code> 运算符是代码中的特殊来宾。</p><h2 id="8、for-in-循环"><a href="#8、for-in-循环" class="headerlink" title="8、for..in 循环"></a>8、for..in 循环</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>为了遍历一个对象的所有键（key），可以使用一个特殊形式的循环：<code>for..in</code>。</p><blockquote><p>这跟我们在前面学到的 <code>for(;;)</code> 循环是完全不一样的东西。</p></blockquote><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 对此对象属性中的每个键执行的代码</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意，所有的 “for” 结构体都允许我们在循环中定义变量，像这里的 <code>let key</code>。</p><p>同样，我们可以用其他属性名来替代 <code>key</code>。例如 <code>&quot;for(let prop in obj)&quot;</code> 也很常用。</p></blockquote><p>列出 <code>user</code> 所有的属性：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token literal-property property">isAdmin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// keys</span>  <span class="token function">alert</span><span class="token punctuation">(</span> key <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// name, age, isAdmin</span>  <span class="token comment">// 属性键的值</span>  <span class="token function">alert</span><span class="token punctuation">(</span> user<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John, 30, true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9、属性排序"><a href="#9、属性排序" class="headerlink" title="9、属性排序"></a>9、属性排序</h2><h3 id="排序规则"><a href="#排序规则" class="headerlink" title="排序规则"></a>排序规则</h3><p>当我们遍历一个对象，我们获取属性的顺序是和属性添加时的顺序相同吗？</p><p>答：<strong>“有特别的顺序”：整数属性会被进行排序，其他属性则按照创建的顺序显示。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> codes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"49"</span><span class="token operator">:</span> <span class="token string">"Germany"</span><span class="token punctuation">,</span>  <span class="token string-property property">"41"</span><span class="token operator">:</span> <span class="token string">"Switzerland"</span><span class="token punctuation">,</span>  <span class="token string-property property">"44"</span><span class="token operator">:</span> <span class="token string">"Great Britain"</span><span class="token punctuation">,</span>  <span class="token string-property property">"1"</span><span class="token operator">:</span> <span class="token string">"USA"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> code <span class="token keyword">in</span> codes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 41, 44, 49</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="整数属性"><a href="#整数属性" class="headerlink" title="整数属性"></a>整数属性</h3><p><strong>整数属性：指的是一个可以在不做任何更改的情况下与一个整数进行相互转换的字符串。</strong></p><p>所以，<code>&quot;49&quot;</code> 是一个整数属性名，因为我们把它转换成整数，再转换回来，它还是一样的。但是 “+49” 和 “1.2” 就不行了：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">String</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"49"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "49"，相同，整数属性</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">String</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"+49"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "49"，不同于 "+49" ⇒ 不是整数属性</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">String</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"1.2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "1"，不同于 "1.2" ⇒ 不是整数属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>Number(…) 显式转换为数字</li><li>Math.trunc 是内建的去除小数部分的方法。</li></ul><h3 id="非整数"><a href="#非整数" class="headerlink" title="非整数"></a>非整数</h3><p><strong>如果属性名不是整数，那它们就按照创建时的顺序来排序</strong>，例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token literal-property property">surname</span><span class="token operator">:</span> <span class="token string">"Smith"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span> <span class="token comment">// 增加一个</span><span class="token comment">// 非整数属性是按照创建的顺序来排列的</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span> prop <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name, surname, age</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以，为了解决电话号码的问题，我们可以使用非整数属性名来 <strong>欺骗</strong> 程序。只需要给每个键名加一个加号 <code>&quot;+&quot;</code> 前缀就行了。像这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> codes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"+49"</span><span class="token operator">:</span> <span class="token string">"Germany"</span><span class="token punctuation">,</span>  <span class="token string-property property">"+41"</span><span class="token operator">:</span> <span class="token string">"Switzerland"</span><span class="token punctuation">,</span>  <span class="token string-property property">"+44"</span><span class="token operator">:</span> <span class="token string">"Great Britain"</span><span class="token punctuation">,</span>  <span class="token string-property property">"+1"</span><span class="token operator">:</span> <span class="token string">"USA"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> code <span class="token keyword">in</span> codes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token operator">+</span>code <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 49, 41, 44, 1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10、总结"><a href="#10、总结" class="headerlink" title="10、总结"></a>10、总结</h2><p><strong>对象是具有一些特殊特性的关联数组。</strong></p><p>它们存储属性（键值对），其中：</p><ul><li>属性的键必须是字符串或者 symbol（通常是字符串）。</li><li>值可以是任何类型。</li></ul><p>我们可以用下面的方法访问属性：</p><ul><li>点符号: <code>obj.property</code>。</li><li>方括号 <code>obj[&quot;property&quot;]</code>，方括号允许从变量中获取键，例如 <code>obj[varWithKey]</code>。</li></ul><p>其他操作：</p><ul><li>删除属性：<code>delete obj.prop</code>。</li><li>检查是否存在给定键的属性：<code>&quot;key&quot; in obj</code>。</li><li>遍历对象：<code>for(let key in obj)</code> 循环。</li></ul><p>我们在这一章学习的叫做“普通对象（plain object）”，或者就叫对象。</p><p>JavaScript 中还有很多其他类型的对象：</p><ul><li><code>Array</code> 用于存储有序数据集合，</li><li><code>Date</code> 用于存储时间日期，</li><li><code>Error</code> 用于存储错误信息。</li><li>……等等。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十六、JavaScript注释</title>
      <link href="/posts/bc30564b.html"/>
      <url>/posts/bc30564b.html</url>
      
        <content type="html"><![CDATA[<h1 id="十六、JavaScript-注释"><a href="#十六、JavaScript-注释" class="headerlink" title="十六、JavaScript 注释"></a>十六、JavaScript 注释</h1><p>我们通常通过注释来描述代码怎样工作和为什么这样工作。乍一看，写注释可能很简单，但初学者在编程的时候，经常错误地使用注释。</p><p>注释可以是以 <code>//</code> 开始的单行注释，也可以是 <code>/* ... */</code> 结构的多行注释。</p><h2 id="1、糟糕的注释"><a href="#1、糟糕的注释" class="headerlink" title="1、糟糕的注释"></a>1、糟糕的注释</h2><p>新手倾向于使用注释来解释“代码中发生了什么”。就像这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 这里的代码会先做这件事（……）然后做那件事（……）</span><span class="token comment">// ……谁知道还有什么……</span>very<span class="token punctuation">;</span>complex<span class="token punctuation">;</span>code<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>但在好的代码中，这种“解释性”注释的数量应该是最少的。</li><li>严格地说，就算没有它们，代码也应该很容易理解。</li></ul><blockquote><p>关于这一点有一个很棒的原则：<strong>“如果代码不够清晰以至于需要一个注释，那么或许它应该被重写。”</strong></p></blockquote><h3 id="配方：分解函数"><a href="#配方：分解函数" class="headerlink" title="配方：分解函数"></a>配方：分解函数</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showPrimes</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">nextPrime</span><span class="token operator">:</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 检测 i 是否是一个质数（素数）</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span> nextPrime<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有时候，用一个函数来代替一个代码片段是更好的。改进如下，使用一个分解出来的函数 <code>isPrime</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showPrimes</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPrime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>现在我们可以很容易地理解代码了，<strong>函数自己就变成了一个注释。</strong></li><li>这种代码被称为 <strong>自描述型</strong> 代码。</li></ul><h3 id="配方：创建函数"><a href="#配方：创建函数" class="headerlink" title="配方：创建函数"></a>配方：创建函数</h3><p>如果我们有一个像下面这样很长的代码块：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在这里我们添加威士忌（译注：国外的一种酒）</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> drop <span class="token operator">=</span> <span class="token function">getWhiskey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">smell</span><span class="token punctuation">(</span>drop<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">add</span><span class="token punctuation">(</span>drop<span class="token punctuation">,</span> glass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 在这里我们添加果汁</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> tomato <span class="token operator">=</span> <span class="token function">getTomato</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">examine</span><span class="token punctuation">(</span>tomato<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> juice <span class="token operator">=</span> <span class="token function">press</span><span class="token punctuation">(</span>tomato<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">add</span><span class="token punctuation">(</span>juice<span class="token punctuation">,</span> glass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改进，将上面的代码重构为函数，可能会是一个更好的变体：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">addWhiskey</span><span class="token punctuation">(</span>glass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addJuice</span><span class="token punctuation">(</span>glass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">addWhiskey</span><span class="token punctuation">(</span><span class="token parameter">container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> drop <span class="token operator">=</span> <span class="token function">getWhiskey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">addJuice</span><span class="token punctuation">(</span><span class="token parameter">container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> tomato <span class="token operator">=</span> <span class="token function">getTomato</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>同样，函数本身就可以告诉我们发生了什么。没有什么地方需要注释。</strong>并且分割之后代码的结构也更好了。</li><li>每一个函数做什么、需要什么和返回什么都非常地清晰。</li></ul><p>实际上，我们不能完全避免“解释型”注释。例如在一些复杂的算法中，会有一些出于优化的目的而做的一些巧妙的“调整”。</p><blockquote><p>通常情况下，我们应该尽可能地保持代码的简单和“自我描述”性。</p></blockquote><h2 id="2、好的注释"><a href="#2、好的注释" class="headerlink" title="2、好的注释"></a>2、好的注释</h2><p>所以，解释性注释通常来说都是不好的。那么哪一种注释才是好的呢？</p><h3 id="描述架构"><a href="#描述架构" class="headerlink" title="描述架构"></a>描述架构</h3><p>对组件进行高层次的整体概括，它们如何相互作用、各种情况下的控制流程是什么样的……简而言之 —— 代码的鸟瞰图。有一个专门用于构建代码的高层次架构图，以对代码进行解释的特殊编程语言 <a href="http://wikipedia.org/wiki/Unified_Modeling_Language">UML</a>。绝对值得学习。</p><h3 id="记录函数的参数和用法"><a href="#记录函数的参数和用法" class="headerlink" title="记录函数的参数和用法"></a>记录函数的参数和用法</h3><p>有一个专门用于记录函数的语法 <a href="http://en.wikipedia.org/wiki/JSDoc">JSDoc</a>：用法、参数和返回值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 返回 x 的 n 次幂的值。 * * @param &#123;number&#125; x 要改变的值。 * @param &#123;number&#125; n 幂数，必须是一个自然数。 * @return &#123;number&#125; x 的 n 次幂的值。 */</span><span class="token keyword">function</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这种注释可以帮助我们理解函数的目的，并且不需要研究其内部的实现代码，就可以直接正确地使用它。</li></ul><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p>一个好的开发者的标志之一就是他的注释：它们的存在甚至它们的缺席（译注：在该注释的地方注释，在不需要注释的地方则不注释，甚至写得好的自描述函数本身就是一种注释）。</p><p>好的注释可以使我们更好地维护代码，一段时间之后依然可以更高效地回到代码高效开发。</p><p><strong>注释这些内容：</strong></p><ul><li>整体架构，高层次的观点。</li><li>函数的用法。</li><li>重要的解决方案，特别是在不是很明显时。</li></ul><p><strong>避免注释：</strong></p><ul><li>描述“代码如何工作”和“代码做了什么”。</li><li>避免在代码已经足够简单或代码有很好的自描述性而不需要注释的情况下，还写些没必要的注释。</li></ul><p>注释也被用于一些如 JSDoc3 等文档自动生成工具：它们读取注释然后生成 HTML 文档（或者其他格式的文档）。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十五、JavaScript代码风格</title>
      <link href="/posts/e9615e7b.html"/>
      <url>/posts/e9615e7b.html</url>
      
        <content type="html"><![CDATA[<h1 id="十五、JavaScript-代码风格"><a href="#十五、JavaScript-代码风格" class="headerlink" title="十五、JavaScript 代码风格"></a>十五、JavaScript 代码风格</h1><p>我们的代码必须尽可能的<strong>清晰</strong>和<strong>易读</strong>。</p><p>这实际上是一种编程艺术 —— 以一种正确并且人们易读的方式编码来完成一个复杂的任务。一个良好的代码风格大大有助于实现这一点。</p><h2 id="1、语法"><a href="#1、语法" class="headerlink" title="1、语法"></a>1、语法</h2><p>下面是一个备忘单，其中列出了一些建议的规则（详情请参阅下文）：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/javascript-base/202408062347460.svg" alt="code-style"></p><h3 id="花括号"><a href="#花括号" class="headerlink" title="花括号"></a>花括号</h3><p>在大多数的 JavaScript 项目中，花括号以 “Egyptian” 风格（又称 K&amp;R 风格）： 代码段的开括号位于一行的末尾，而不是另起一行的风格书写。</p><ul><li><p>左花括号与相应的关键词在同一行上 —— 而不是新起一行。</p></li><li><p>左括号前还应该有一个空格。</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// do this</span>  <span class="token comment">// ...and that</span>  <span class="token comment">// ...and that</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单行构造"><a href="#单行构造" class="headerlink" title="单行构造"></a>单行构造</h3><p>单行构造（如 <code>if (condition) doSomething()</code>）也是一个重要的用例。我们是否应该使用花括号？如果是，那么在哪里？</p><p>下面是这几种情况的注释，你可以自己判断一下它们的可读性：</p><ol><li><p>初学者常这样写。非常不好！这里不需要花括号😠 ：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Power </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>n<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> is not supported</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>拆分为单独的行，不带花括号。永远不要这样做，添加新行很容易出错😠 ：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Power </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>n<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> is not supported</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>写成一行，不带花括号 —— 如果短的话，也是可以的😏 ：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Power </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>n<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> is not supported</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>最好的方式😃 ：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Power </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>n<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> is not supported</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p>对于很短的代码，写成一行是可以接受的：例如 <code>if (cond) return null</code>。但是代码块（最后一个示例）通常更具可读性。</p><h3 id="行的长度"><a href="#行的长度" class="headerlink" title="行的长度"></a>行的长度</h3><p>没有人喜欢读一长串代码，最好将代码分割一下。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 回勾引号 ` 允许将字符串拆分为多行</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  ECMA International's TC39 is a group of JavaScript developers,  implementers, academics, and more, collaborating with the community  to maintain and evolve the definition of JavaScript.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于 <code>if</code> 语句：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>  id <span class="token operator">===</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span>  moonPhase <span class="token operator">===</span> <span class="token string">'Waning Gibbous'</span> <span class="token operator">&amp;&amp;</span>  zodiacSign <span class="token operator">===</span> <span class="token string">'Libra'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">letTheSorceryBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一行代码的最大长度应该在团队层面上达成一致。通常是 80 或 120 个字符。</p></blockquote><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><h4 id="水平方向"><a href="#水平方向" class="headerlink" title="水平方向"></a>水平方向</h4><p><strong>水平方向上的缩进：2 或 4 个空格。</strong></p><ul><li>一个水平缩进通常由 2 或 4 个空格或者 “Tab” 制表符（Tab 键）构成。选择哪一个方式是一场古老的圣战。如今空格更普遍一点。</li><li>选择空格而不是 tabs 的优点之一是，这允许你做出比 “Tab” 制表符更加灵活的缩进配置。</li></ul><p>例如，我们可以将参数与左括号对齐，像下面这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">show</span><span class="token punctuation">(</span>parameters<span class="token punctuation">,</span>     aligned<span class="token punctuation">,</span> <span class="token comment">// 左边有 5 个空格</span>     one<span class="token punctuation">,</span>     after<span class="token punctuation">,</span>     another  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="垂直方向"><a href="#垂直方向" class="headerlink" title="垂直方向"></a>垂直方向</h4><p><strong>垂直方向上的缩进：用于将代码拆分成逻辑块的空行。</strong>即使是单个函数通常也被分割为数个逻辑块。</p><p>在下面的示例中，初始化的变量、主循环结构和返回值都被垂直分割了：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//              &lt;--</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    result <span class="token operator">*=</span> x<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//              &lt;--</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>插入一个额外的空行有助于使代码更具可读性。</strong></li></ul><blockquote><p><strong>写代码时，不应该出现连续超过 9 行都没有被垂直分割的代码。</strong></p></blockquote><h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><p><strong>每一个语句后面都应该有一个分号。即使它可以被跳过。</strong></p><p>有一些编程语言的分号确实是可选的，那些语言中也很少使用分号。但是在 JavaScript 中，极少数情况下，换行符有时不会被解释为分号，这时代码就容易出错。</p><p>如果你是一个有经验的 JavaScript 程序员，你可以选择像 <a href="https://standardjs.com/">StandardJS</a> 这样的无分号的代码风格。否则，最好使用分号以避免可能出现的陷阱。大多数开发人员都应该使用分号。</p><h3 id="嵌套的层级"><a href="#嵌套的层级" class="headerlink" title="嵌套的层级"></a>嵌套的层级</h3><p><strong>尽量避免代码嵌套层级过深。</strong></p><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a><code>continue</code></h4><p>在循环中，有时候使用 <code>continue</code> 指令以避免额外的嵌套是一个好主意。</p><p>例如，不应该像下面这样添加嵌套的 <code>if</code> 条件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cond<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span> <span class="token comment">// &lt;- 又一层嵌套</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改进：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cond<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token operator">...</span>  <span class="token comment">// &lt;- 没有额外的嵌套</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="if-else-和-return"><a href="#if-else-和-return" class="headerlink" title="if/else 和 return"></a><code>if/else</code> 和 <code>return</code></h4><p>下面的两个结构是相同的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Negative 'n' not supported"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result <span class="token operator">*=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改进：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Negative 'n' not supported"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    result <span class="token operator">*=</span> x<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是第二个更具可读性，因为 <code>n &lt; 0</code> 这个“特殊情况”在一开始就被处理了。<strong>一旦条件通过检查，代码执行就可以进入到“主”代码流，而不需要额外的嵌套。</strong></p><h2 id="2、函数位置"><a href="#2、函数位置" class="headerlink" title="2、函数位置"></a>2、函数位置</h2><p>如果你正在写几个“辅助”函数和一些使用它们的代码，那么有三种方式来组织这些函数。</p><h3 id="2-1、在调用函数代码的上方声明"><a href="#2-1、在调用函数代码的上方声明" class="headerlink" title="2-1、在调用函数代码的上方声明"></a>2-1、在调用函数代码的上方声明</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 函数声明</span><span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">setHandler</span><span class="token punctuation">(</span><span class="token parameter">elem</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">walkAround</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token comment">// 调用函数的代码</span><span class="token keyword">let</span> elem <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setHandler</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">walkAround</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2、先写调用代码，再写函数"><a href="#2-2、先写调用代码，再写函数" class="headerlink" title="2-2、先写调用代码，再写函数"></a>2-2、先写调用代码，再写函数</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 调用函数的代码</span><span class="token keyword">let</span> elem <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setHandler</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">walkAround</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// --- 辅助函数 ---</span><span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">setHandler</span><span class="token punctuation">(</span><span class="token parameter">elem</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">walkAround</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3、混合：在第一次使用函数时对该函数进行声明"><a href="#2-3、混合：在第一次使用函数时对该函数进行声明" class="headerlink" title="2-3、混合：在第一次使用函数时对该函数进行声明"></a>2-3、混合：在第一次使用函数时对该函数进行声明</h3><h3 id="2-4、总结"><a href="#2-4、总结" class="headerlink" title="2-4、总结"></a>2-4、总结</h3><p>大多数情况下，第二种方式更好。这是因为阅读代码时，我们首先想要知道的是“<strong>它做了什么</strong>”。</p><p><strong>如果代码先行，那么在整个程序的最开始就展示出了这些信息。之后，可能我们就不需要阅读这些函数了，尤其是它们的名字清晰地展示出了它们的功能的时候。</strong></p><h2 id="3、风格指南"><a href="#3、风格指南" class="headerlink" title="3、风格指南"></a>3、风格指南</h2><p>风格指南包含了“如何编写”代码的通用规则，例如：使用哪个引号、用多少空格来缩进、一行代码最大长度等非常多的细节。</p><p>当团队中的所有成员都使用相同的风格指南时，代码看起来将是统一的。无论是团队中谁写的，都是一样的风格。</p><p>当然，一个团队可以制定他们自己的风格指南，但是没必要这样做。现在已经有了很多制定好的代码风格指南可供选择。</p><p>一些受欢迎的选择：</p><ul><li><a href="https://google.github.io/styleguide/jsguide.html">Google JavaScript 风格指南</a></li><li><a href="https://github.com/airbnb/javascript">Airbnb JavaScript 风格指南</a></li><li><a href="https://github.com/rwaldron/idiomatic.js">Idiomatic.JS</a></li><li><a href="https://standardjs.com/">StandardJS</a></li><li>还有很多……</li></ul><p>你可以浏览其他风格指南，并选择一个你最喜欢的。</p><h2 id="4、自动检查器"><a href="#4、自动检查器" class="headerlink" title="4、自动检查器"></a>4、自动检查器</h2><h3 id="检查器"><a href="#检查器" class="headerlink" title="检查器"></a>检查器</h3><p>检查器（Linters）是可以自动检查代码样式，并提出改进建议的工具。</p><p>它们的妙处在于进行代码风格检查时，还可以发现一些代码错误，例如变量或函数名中的错别字。因此，即使你不想坚持某一种特定的代码风格，我也建议你安装一个检查器。</p><h3 id="检查工具"><a href="#检查工具" class="headerlink" title="检查工具"></a>检查工具</h3><p>下面是一些最出名的代码检查工具：</p><ul><li><a href="https://www.jslint.com/">JSLint</a> —— 第一批检查器之一。</li><li><a href="https://www.jshint.com/">JSHint</a> —— 比 JSLint 多了更多设置。</li><li><a href="https://eslint.org/">ESLint</a> —— 应该是最新的一个。</li></ul><p>它们都能够做好代码检查。我使用的是 <a href="https://eslint.org/">ESLint</a>。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>大多数检查器都可以与编辑器集成在一起：只需在编辑器中启用插件并配置代码风格即可。</p><p>例如，要使用 ESLint 你应该这样做：</p><ol><li>安装 <a href="https://nodejs.org/">Node.JS</a>。</li><li>使用 <code>npm install -g eslint</code> 命令（npm 是一个 JavaScript 包安装工具）安装 ESLint。</li><li>在你的 JavaScript 项目的根目录（包含该项目的所有文件的那个文件夹）创建一个名为 <code>.eslintrc</code> 的配置文件。</li><li>在集成了 ESLint 的编辑器中安装&#x2F;启用插件。大多数编辑器都有这个选项。</li></ol><p>下面是一个 <code>.eslintrc</code> 文件的例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token string-property property">"extends"</span><span class="token operator">:</span> <span class="token string">"eslint:recommended"</span><span class="token punctuation">,</span>  <span class="token string-property property">"env"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"browser"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string-property property">"node"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string-property property">"es6"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string-property property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"no-console"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string-property property">"indent"</span><span class="token operator">:</span> <span class="token number">2</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这里的 <code>&quot;extends&quot;</code> 指令表示我们是基于 “eslint:recommended” 的设置项而进行设置的。之后，我们制定我们自己的规则。</li></ul><p>你也可以从网上下载风格规则集并进行扩展。有关安装的更多详细信息，请参见 <a href="https://eslint.org/docs/user-guide/getting-started%E3%80%82">https://eslint.org/docs/user-guide/getting-started。</a></p><p>此外，某些 IDE 有内建的检查器，这非常方便，但是不像 ESLint 那样可自定义。</p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>当我们思考如何写“更好”的代码的时候，我们应该问自己的问题是：“什么可以让代码可读性更高，更容易被理解？”和“什么可以帮助我们避免错误？”这些是我们讨论和选择代码风格时要牢记的主要原则。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十四、JavaScript浏览器调试</title>
      <link href="/posts/4b959f13.html"/>
      <url>/posts/4b959f13.html</url>
      
        <content type="html"><![CDATA[<h1 id="十四、JavaScript-浏览器调试"><a href="#十四、JavaScript-浏览器调试" class="headerlink" title="十四、JavaScript 浏览器调试"></a>十四、JavaScript 浏览器调试</h1><h2 id="1、调试"><a href="#1、调试" class="headerlink" title="1、调试"></a>1、调试</h2><p>调试是指在一个脚本中找出并修复错误的过程。所有的现代浏览器和大多数其他环境都支持调试工具 —— <strong>开发者工具</strong>中的一个令调试更加容易的特殊用户界面。它也可以让我们一步步地跟踪代码以查看当前实际运行情况。</p><p>在这里我们将会使用 Chrome（谷歌浏览器），因为它拥有足够多的功能，其他大部分浏览器的功能也与之类似。</p><h2 id="2、资源（Sources）面板"><a href="#2、资源（Sources）面板" class="headerlink" title="2、资源（Sources）面板"></a>2、资源（Sources）面板</h2><p>你的 Chrome 版本可能看起来有一点不同，但是它应该还是处于很明显的位置。</p><ul><li>在 Chrome 中打开 <a href="https://zh.javascript.info/article/debugging-chrome/debugging/index.html">示例页面</a>。</li><li>使用快捷键 F12（Mac：Cmd+Opt+I）打开开发者工具。</li><li>选择 <code>Sources（资源）</code> 面板。</li></ul><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/javascript-base/202408052250805.svg" alt="chrome-open-sources"></p><p>切换按钮  <span class="devtools" style="background-position:-172px -98px"></span>  会打开文件列表的选项卡。</p><p>让我们在预览树中点击和选择 <code>hello.js</code>。这里应该会如下图所示：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/javascript-base/202408052250480.svg" alt="chrome-tabs"></p><p>资源（Sources）面板包含三个部分：</p><ol><li><strong>文件导航（File Navigator）</strong> 区域列出了 HTML、JavaScript、CSS 和包括图片在内的其他依附于此页面的文件。Chrome 扩展程序也会显示在这。</li><li><strong>代码编辑（Code Editor）</strong> 区域展示源码。</li><li><strong>JavaScript 调试（JavaScript Debugging）</strong> 区域是用于调试的，我们很快就会来探索它。</li></ol><h2 id="3、控制台（Console）"><a href="#3、控制台（Console）" class="headerlink" title="3、控制台（Console）"></a>3、控制台（Console）</h2><p>如果我们按下 <code>key:Esc</code>，下面会出现一个控制台，我们可以输入一些命令然后按下 <code>key:Enter</code> 来执行。语句执行完毕之后，其执行结果会显示在下面。</p><p>例如，<code>1+2</code> 将会返回 <code>3</code>，而 <code>hello(&quot;debugger&quot;)</code> 函数调用什么也没返回，所以结果是 <code>undefined</code>：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/javascript-base/202408052250774.svg" alt="chrome-sources-console"></p><h2 id="4、断点（Breakpoints）"><a href="#4、断点（Breakpoints）" class="headerlink" title="4、断点（Breakpoints）"></a>4、断点（Breakpoints）</h2><p><strong>断点 是调试器会自动暂停 JavaScript 执行的地方。</strong>当代码被暂停时，我们可以检查当前的变量，在控制台执行命令等等。换句话说，我们可以调试它。</p><p><strong>我们可以在右侧的面板中找到断点的列表。</strong>当我们在数个文件中有许多断点时，这是非常有用的。它允许我们：</p><ul><li>快速跳转至代码中的断点（通过点击右侧面板中的对应的断点）。</li><li>通过取消选中断点来临时禁用对应的断点。</li><li>通过右键单击并选择移除来删除一个断点。</li><li>……等等。</li></ul><p>在 <code>hello.js</code> 中，点击第 <code>4</code> 行。是的，就点击数字 <code>&quot;4&quot;</code> 上，不是点击代码。恭喜你！你已经设置了一个断点。现在，请在第 <code>8</code> 行的数字上也点击一下。看起来应该是这样的（蓝色是你应该点击的地方）：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/javascript-base/202408052251164.svg" alt="chrome-sources-breakpoint"></p><blockquote><p>在行号上 <strong>右键单击</strong> 允许你创建一个 <strong>条件</strong> 断点。只有当给定的表达式（你创建条件断点时提供的表达式）为真时才会被触发。</p><p>当我们需要在特定的变量值或参数的情况下暂停程序执行时，这种调试方法就很有用了。</p></blockquote><h2 id="5、debugger-命令"><a href="#5、debugger-命令" class="headerlink" title="5、debugger 命令"></a>5、debugger 命令</h2><p>我们也可以使用 <code>debugger</code> 命令来暂停代码，像这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> phrase <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token keyword">debugger</span><span class="token punctuation">;</span>  <span class="token comment">// &lt;-- 调试器会在这停止</span>  <span class="token function">say</span><span class="token punctuation">(</span>phrase<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>这样的命令只有在开发者工具打开时才有效，否则浏览器会忽略它。</strong></li></ul><h2 id="6、暂停并查看"><a href="#6、暂停并查看" class="headerlink" title="6、暂停并查看"></a>6、暂停并查看</h2><p>在我们的例子中，<code>hello()</code> 函数在页面加载期间被调用，<strong>因此激活调试器的最简单的方法（在我们已经设置了断点后）就是 —— 重新加载页面。因此让我们按下 <code>key:F5</code>（Windows，Linux）或 <code>key:Cmd+R</code>（Mac）吧。</strong></p><p>设置断点之后，程序会在第 4 行暂停执行：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/javascript-base/202408052251820.svg" alt="chrome-sources-debugger-pause"></p><p>请打开右侧的信息下拉列表（箭头指示出的地方）。这里允许你查看当前的代码状态：</p><ol><li><p><strong><code>察看（Watch）</code> —— 显示任意表达式的当前值。</strong></p><p>你可以点击加号 <code>+</code> 然后输入一个表达式。调试器将显示它的值，并在执行过程中自动重新计算该表达式。</p></li><li><p><strong><code>调用栈（Call Stack）</code> —— 显示嵌套的调用链。</strong></p><p>此时，调试器正在 <code>hello()</code> 的调用链中，被 <code>index.html</code> 中的一个脚本调用（这里没有函数，因此显示 “anonymous”）</p><p>如果你点击了一个堆栈项，调试器将跳到对应的代码处，并且还可以查看其所有变量。</p></li><li><p><strong><code>作用域（Scope）</code> —— 显示当前的变量。</strong></p><p><code>Local</code> 显示当前函数中的变量，你还可以在源代码中看到它们的值高亮显示了出来。</p><p><code>Global</code> 显示全局变量（不在任何函数中）。</p></li></ol><p>这里还有一个 <code>this</code> 关键字，目前我们还没有学到它，不过我们很快就会学习它了。</p><h2 id="7、跟踪执行"><a href="#7、跟踪执行" class="headerlink" title="7、跟踪执行"></a>7、跟踪执行</h2><p>现在是 <strong>跟踪</strong> 脚本的时候了。</p><p>在右侧面板的顶部是一些关于跟踪脚本的按钮。让我们来使用它们吧。</p><h3 id="恢复（Resume）"><a href="#恢复（Resume）" class="headerlink" title="恢复（Resume）"></a>恢复（Resume）</h3><p><span class="devtools" style="background-position:-146px -168px"></span> —— “恢复（Resume）”：继续执行，快捷键 F8。</p><ul><li>继续执行。如果没有其他的断点，那么程序就会继续执行，并且调试器不会再控制程序。我们点击它一下之后，我们会看到这样的情况：</li></ul><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/javascript-base/202408052251707.svg" alt="chrome-sources-debugger-trace-1"></p><ul><li>执行到 <code>say()</code> 函数中的另外一个断点后暂停在了那里。看一下右边的 “Call stack”。它已经增加了一个调用信息。我们现在在 <code>say()</code> 里面。</li></ul><h3 id="下一步（Step）"><a href="#下一步（Step）" class="headerlink" title="下一步（Step）"></a>下一步（Step）</h3><p><span class="devtools" style="background-position:-200px -190px"></span> —— “下一步（Step）”：运行下一条（即当前行）指令，快捷键 <code>key:F9</code>。</p><ol><li>运行下一条语句。如果我们现在点击它，<code>alert</code> 会被显示出来。</li><li>一次接一次地点击此按钮，整个脚本的所有语句会被逐个执行。</li></ol><h3 id="跨步（Step-over）"><a href="#跨步（Step-over）" class="headerlink" title="跨步（Step over）"></a>跨步（Step over）</h3><p><span class="devtools" style="background-position:-62px -192px"></span> —— “跨步（Step over）”：运行下一条（即当前行）指令，但 <strong>不会进入到一个函数中</strong>，快捷键 <code>key:F10</code>。</p><ol><li>跟上一条命令“下一步（Step）”类似，但如果下一条语句是函数调用则表现不同。这里的函数指的是：不是内建的如 <code>alert</code> 函数等，而是我们自己写的函数。</li><li>如果我们对比一下，“下一步（Step）”命令会进入嵌套函数调用并在其第一行暂停执行，而“跨步（Step over）”对我们不可见地执行嵌套函数调用，跳过了函数内部。</li><li>执行会在该函数调用后立即暂停。</li></ol><p>如果我们对该函数的内部执行不感兴趣，这命令会很有用。</p><h3 id="步入（Step-into）"><a href="#步入（Step-into）" class="headerlink" title="步入（Step into）"></a>步入（Step into）</h3><p><span class="devtools" style="background-position:-4px -194px"></span> —— “步入（Step into）”，快捷键 <code>key:F11</code>。</p><ol><li>和“下一步（Step）”类似，但在异步函数调用情况下表现不同。如果你刚刚才开始学 JavaScript，那么你可以先忽略此差异，因为我们还没有用到异步调用。</li><li>至于之后，只需要记住“下一步（Step）”命令会忽略异步行为，例如 <code>setTimeout</code>（计划的函数调用），它会过一段时间再执行。而“步入（Step into）”会进入到代码中并等待（如果需要）。详见 <a href="https://developers.google.com/web/updates/2018/01/devtools#async">DevTools 手册</a>。</li></ol><h3 id="步出（Step-out）"><a href="#步出（Step-out）" class="headerlink" title="步出（Step out）"></a>步出（Step out）</h3><p><span class="devtools" style="background-position:-32px -194px"></span> —— “步出（Step out）”：继续执行到当前函数的末尾，快捷键 <code>key:Shift+F11</code>。</p><ol><li>继续执行当前函数内的剩余代码，并暂停在调用当前函数的下一行代码处。</li><li>当我们使用 <span class="devtools" style="background-position:-200px -190px"></span> 偶然地进入到一个嵌套调用，但是我们又对这个函数不感兴趣时，我们想要尽可能的继续执行到最后的时候是非常方便的。</li></ol><h3 id="启用-禁用所有的断点"><a href="#启用-禁用所有的断点" class="headerlink" title="启用&#x2F;禁用所有的断点"></a>启用&#x2F;禁用所有的断点</h3><p><span class="devtools" style="background-position:-61px -74px"></span> —— 启用&#x2F;禁用所有的断点。</p><ul><li>这个按钮不会影响程序的执行。只是一个批量操作断点的开&#x2F;关。</li></ul><h3 id="启用-禁用出现错误时自动暂停脚本执行"><a href="#启用-禁用出现错误时自动暂停脚本执行" class="headerlink" title="启用&#x2F;禁用出现错误时自动暂停脚本执行"></a>启用&#x2F;禁用出现错误时自动暂停脚本执行</h3><p><span class="devtools" style="background-position:-90px -146px"></span> —— 启用&#x2F;禁用出现错误时自动暂停脚本执行。</p><ul><li>当启动此功能，如果开发者工具是打开着的时候，任何脚本执行错误都会导致该脚本执行自动暂停。然后我们可以在调试器中分析变量来看一下什么出错了。</li><li>因此如果我们的脚本因为错误挂掉的时候，我们可以打开调试器，启用这个选项然后重载页面，查看一下哪里导致它挂掉了和当时的上下文是什么。</li></ul><h3 id="Continue-to-here"><a href="#Continue-to-here" class="headerlink" title="Continue to here"></a>Continue to here</h3><p>在代码中的某一行上右键，在显示的关联菜单（context menu）中点击一个非常有用的名为 “Continue to here” 的选项。</p><p>当你想要向前移动很多步到某一行为止，但是又懒得设置一个断点时非常的方便。</p><h2 id="8、日志记录"><a href="#8、日志记录" class="headerlink" title="8、日志记录"></a>8、日志记录</h2><p><code>console.log</code> 函数可以输出一些东西到控制台上。</p><p>例如：将从 <code>0</code> 到 <code>4</code> 的值输出到控制台上：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 打开控制台来查看</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>普通用户看不到这个输出，它是在控制台里面的。要想看到它 —— 要么打开开发者工具中的 Console（控制台）选项卡，要么在一个其他的选项卡中按下 <code>key:Esc</code>：这会在下方打开一个控制台。</p><p>如果我们在代码中有足够的日志记录，那么我们可以从记录中看到刚刚发生了什么，而不需要借助调试器。</p><h2 id="9、总结"><a href="#9、总结" class="headerlink" title="9、总结"></a>9、总结</h2><p>我们可以看到，这里有 3 种方式来暂停一个脚本：</p><ol><li>断点。</li><li><code>debugger</code> 语句。</li><li>error（如果开发者工具是打开状态，并且按钮 是开启的状态）。</li></ol><p>当脚本执行暂停时，我们就可以进行调试：检查变量，跟踪代码来查看执行出错的位置。</p><p>开发人员工具中的选项比本文介绍的多得多。完整的手册请点击这个链接查看：<a href="https://developers.google.com/web/tools/chrome-devtools%E3%80%82">https://developers.google.com/web/tools/chrome-devtools。</a></p><p>本章节的内容足够让你上手代码调试了，但是之后，尤其是你做了大量关于浏览器的东西后，推荐你查看上面那个链接中讲的开发者工具更高级的功能。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十三、JavaScript箭头函数</title>
      <link href="/posts/77f3bef4.html"/>
      <url>/posts/77f3bef4.html</url>
      
        <content type="html"><![CDATA[<h1 id="十三、JavaScript-箭头函数"><a href="#十三、JavaScript-箭头函数" class="headerlink" title="十三、JavaScript 箭头函数"></a>十三、JavaScript 箭头函数</h1><h2 id="1、箭头函数"><a href="#1、箭头函数" class="headerlink" title="1、箭头函数"></a>1、箭头函数</h2><p>创建函数另外一种非常简单的语法，并且这种方法通常比函数表达式更好。它被称为“箭头函数”。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>创建函数 <code>func</code>，接收参数 <code>arg1..argN</code>，然后使用参数对右侧的 <code>expression</code> 求值并返回其结果。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> argN</span><span class="token punctuation">)</span> <span class="token operator">=></span> expression<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等价于：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> argN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> expression<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>让我们来看一个具体的例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token comment">// 这个箭头函数是下面这个函数的更短的版本：</span><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以看到 <code>(a, b) =&gt; a + b</code> 表示一个函数接受两个名为 <code>a</code> 和 <code>b</code> 的参数。</li><li>在执行时，它将对表达式 <code>a + b</code> 求值，并返回计算结果。</li></ul><h3 id="一个参数"><a href="#一个参数" class="headerlink" title="一个参数"></a>一个参数</h3><p><strong>如果我们只有一个参数，还可以省略掉参数外的圆括号，使代码更短。</strong></p><p>例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">double</span> <span class="token operator">=</span> <span class="token parameter">n</span> <span class="token operator">=></span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 差不多等同于：let double = function(n) &#123; return n * 2 &#125;</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="没有参数"><a href="#没有参数" class="headerlink" title="没有参数"></a>没有参数</h3><p>如果没有参数，括号则是空的（但括号必须保留）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><strong>箭头函数可以像函数表达式一样使用。</strong></p><p>例如，动态创建一个函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"What is your age?"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> welcome <span class="token operator">=</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">?</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span> <span class="token operator">:</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Greetings!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>箭头函数对于简单的单行行为（action）来说非常方便，尤其是当我们懒得打太多字的时候。</p><h2 id="2、多行的箭头函数"><a href="#2、多行的箭头函数" class="headerlink" title="2、多行的箭头函数"></a>2、多行的箭头函数</h2><p>有时我们需要更复杂一点的函数，比如带有多行的表达式或语句。在这种情况下，我们可以使用<strong>花括号</strong>将它们括起来。</p><p><strong>主要区别在于，用花括号括起来之后，需要包含 <code>return</code> 才能返回值（就像常规函数一样）。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 花括号表示开始一个多行函数</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span> <span class="token comment">// 如果我们使用了花括号，需要一个显式的 “return”</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p>箭头函数对于简单的操作很方便，特别是对于单行的函数。它具体有两种形式：</p><ol><li>不带花括号：<code>(...args) =&gt; expression</code> —— 右侧是一个表达式：函数计算表达式并返回其结果。如果只有一个参数，则可以省略括号，例如 <code>n =&gt; n*2</code>。</li><li>带花括号：<code>(...args) =&gt; &#123; body &#125;</code> —— 花括号允许我们在函数中编写多个语句，但是我们需要显式地 <code>return</code> 来返回一些内容。</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十二、JavaScript函数表达式</title>
      <link href="/posts/265ab001.html"/>
      <url>/posts/265ab001.html</url>
      
        <content type="html"><![CDATA[<h1 id="十二、JavaScript-函数表达式"><a href="#十二、JavaScript-函数表达式" class="headerlink" title="十二、JavaScript 函数表达式"></a>十二、JavaScript 函数表达式</h1><p>在 JavaScript 中，函数不是“神奇的语言结构”，而是一种特殊的值。<strong>一个函数是表示一个“行为”的值</strong></p><ul><li>字符串或数字等常规值代表 <strong>数据</strong>。</li><li>函数可以被视为一个 <strong>行为（action）</strong>。</li></ul><p>我们可以在变量之间传递它们，并在需要时运行。</p><h2 id="1、函数表达式"><a href="#1、函数表达式" class="headerlink" title="1、函数表达式"></a>1、函数表达式</h2><p>我们在上一节创建函数的语法称为 <strong>函数声明</strong>，另一种创建函数的语法称为 <strong>函数表达式</strong>。它允许我们在任何表达式的中间创建一个新函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">varNum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>由于函数创建发生在赋值表达式的上下文中（在 <code>=</code> 的右侧），因此这是一个 <strong>函数表达式</strong>。</li><li><strong>请注意 <code>function</code> 关键字后面没有函数名。函数表达式允许省略函数名。</strong></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">"Hello"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>变量 <code>sayHi</code> 得到了一个值，新函数 <code>function() &#123; alert(&quot;Hello&quot;); &#125;</code>。</li><li>即创建一个函数并将其放入变量 <code>sayHi</code> 中。</li></ul><h2 id="2、函数是一个值"><a href="#2、函数是一个值" class="headerlink" title="2、函数是一个值"></a>2、函数是一个值</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>在 JavaScript 中，函数是一个值，所以我们可以把它当成值对待，即函数的源码。</strong></p><p>我们还可以用 <code>alert</code> 显示 <code>sayHi</code> 变量的值：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">"Hello"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">alert</span><span class="token punctuation">(</span> sayHi <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显示函数代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意，最后一行代码并不会运行函数，因为 <code>sayHi</code> 后没有括号。</li></ul><p>结果如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  alert<span class="token punctuation">(</span> <span class="token string">"Hello"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="赋值给变量"><a href="#赋值给变量" class="headerlink" title="赋值给变量"></a>赋值给变量</h3><p>在某种意义上说一个函数是一个特殊值，我们可以像 <code>sayHi()</code> 这样调用它。我们可以复制函数到其他变量：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// (1) 创建</span>  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">"Hello"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> func <span class="token operator">=</span> sayHi<span class="token punctuation">;</span>    <span class="token comment">// (2) 复制</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello     // (3) 运行复制的值（正常运行）！</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello    //     这里也能运行（为什么不行呢）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>(1)</code> 行声明创建了函数，并把它放入到变量 <code>sayHi</code>。</li><li><code>(2)</code> 行将 <code>sayHi</code> 复制到了变量 <code>func</code>。请注意：<code>sayHi</code> 后面没有括号。如果有括号，<code>func = sayHi()</code> 会把 <code>sayHi()</code> 的调用结果写进<code>func</code>，而不是 <code>sayHi</code> <strong>函数</strong> 本身。</li><li>现在函数可以通过 <code>sayHi()</code> 和 <code>func()</code> 两种方式进行调用。</li></ol><p>我们也可以在第一行中使用函数表达式来声明 <code>sayHi</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// (1) 创建</span>  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">"Hello"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> func <span class="token operator">=</span> sayHi<span class="token punctuation">;</span><span class="token comment">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这两种声明的函数是一样的。</li></ul><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>&#x3D;&#x3D;为什么函数表达式结尾有一个分号 <code>;</code>，而函数声明没有？&#x3D;&#x3D;</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答案很简单：这里函数表达式是在赋值语句 <code>let sayHi = ...;</code> 中以 <code>function(…) &#123;…&#125;</code> 的形式创建的。建议在语句末尾加上分号 <code>;</code>，它不是函数语法的一部分。</p><h2 id="3、回调函数"><a href="#3、回调函数" class="headerlink" title="3、回调函数"></a>3、回调函数</h2><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>我们写一个包含三个参数的函数 <code>ask(question, yes, no)</code>：</p><ul><li><p><code>question</code></p><p>关于问题的文本</p></li><li><p><code>yes</code></p><p>当回答为 “Yes” 时，要运行的脚本</p></li><li><p><code>no</code></p><p>当回答为 “No” 时，要运行的脚本</p></li></ul><p>函数需要提出 <code>question</code>（问题），并根据用户的回答，调用 <code>yes()</code> 或 <code>no()</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ask</span><span class="token punctuation">(</span><span class="token parameter">question<span class="token punctuation">,</span> yes<span class="token punctuation">,</span> no</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span>question<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">yes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">else</span> <span class="token function">no</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">showOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">"You agreed."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">showCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">"You canceled the execution."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 用法：函数 showOk 和 showCancel 被作为参数传入到 ask</span><span class="token function">ask</span><span class="token punctuation">(</span><span class="token string">"Do you agree?"</span><span class="token punctuation">,</span> showOk<span class="token punctuation">,</span> showCancel<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在实际开发中，这样的函数是非常有用的。</li></ul><p><code>ask</code> 的两个参数值 <code>showOk</code> 和 <code>showCancel</code> 可以被称为 <strong>回调函数</strong> 或简称 <strong>回调</strong>。</p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>主要思想是我们传递一个函数，并期望在稍后必要时将其“回调”。</p><p>在上面的例子中，<code>showOk</code> 是回答 “yes” 的回调，<code>showCancel</code> 是回答 “no” 的回调。</p><p>我们可以使用函数表达式来编写一个等价的、更简洁的函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ask</span><span class="token punctuation">(</span><span class="token parameter">question<span class="token punctuation">,</span> yes<span class="token punctuation">,</span> no</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span>question<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">yes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">no</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 函数调用</span><span class="token function">ask</span><span class="token punctuation">(</span>  <span class="token string">"Do you agree?"</span><span class="token punctuation">,</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"You agreed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"You canceled the execution."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>直接在 <code>ask(...)</code> 调用内进行函数声明。</li><li>这两个函数没有名字，所以叫 <strong>匿名函数</strong>。并且在 <code>ask</code> 外无法访问，因为没有对它们分配变量。</li></ul><h2 id="4、函数表达式-vs-函数声明"><a href="#4、函数表达式-vs-函数声明" class="headerlink" title="4、函数表达式 vs 函数声明"></a>4、函数表达式 vs 函数声明</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>首先是语法：如何通过代码对它们进行区分。</p><ul><li><p><strong>函数声明</strong>：在主代码流中声明为单独的语句的函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 函数声明</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>函数表达式</strong>：在一个表达式中或另一个语法结构中创建的函数。下面这个函数是在赋值表达式 <code>=</code> 右侧创建的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 函数表达式</span><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="JavaScript-引擎创建函数时间"><a href="#JavaScript-引擎创建函数时间" class="headerlink" title="JavaScript 引擎创建函数时间"></a>JavaScript 引擎创建函数时间</h3><p>1）<strong>函数表达式是在代码执行到达时被创建，并且仅从那一刻起可用。</strong>一旦代码执行到赋值表达式 <code>let sum = function…</code> 的右侧，此时就会开始创建该函数，并且可以从现在开始使用（分配，调用等）。</p><p>2）<strong>函数声明在函数声明被定义之前，它就可以被调用。</strong>当 JavaScript <strong>准备</strong> 运行脚本时，首先会在脚本中寻找全局函数声明，并创建这些函数。我们可以将其视为“初始化阶段”。在处理完所有函数声明后，代码才被执行。所以运行时能够使用这些函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, John</span><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>函数声明 <code>sayHi</code> 是在 JavaScript 准备运行脚本时被创建的，在这个脚本的任何位置都可见。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error!</span><span class="token keyword">let</span> <span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// (*) no magic any more</span>  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>函数表达式在代码执行到它时才会被创建。只会发生在 <code>(*)</code> 行。为时已晚。</li></ul><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p><strong>严格模式下，当一个函数声明在一个代码块内时，它在该代码块内的任何位置都是可见的。但在代码块外不可见。</strong></p><p>如果我们使用函数声明，则以下代码无法像预期那样工作：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token comment">// 拿 16 作为例子</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// \   (运行)</span>                           <span class="token comment">//  |</span>  <span class="token keyword">function</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">//  |</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//  |  函数声明在声明它的代码块内任意位置都可用</span>  <span class="token punctuation">&#125;</span>                        <span class="token comment">//  |</span>                           <span class="token comment">//  |</span>  <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// /   (运行)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Greetings!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 在这里，我们在花括号外部调用函数，我们看不到它们内部的函数声明。</span><span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: welcome is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这是因为函数声明只在它所在的代码块中可见。</li></ul><p>&#x3D;&#x3D;怎么才能让 <code>welcome</code> 在 <code>if</code> 外可见呢？&#x3D;&#x3D;</p><p>正确的做法是使用函数表达式，并将 <code>welcome</code> 赋值给在 <code>if</code> 外声明的变量，并具有正确的可见性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"What is your age?"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> welcome <span class="token operator">=</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">?</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token operator">:</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Greetings!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 现在可以了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><ul><li>函数是值。它们可以在代码的任何地方被分配，复制或声明。</li><li>如果函数在主代码流中被声明为单独的语句，则称为“函数声明”。</li><li>如果该函数是作为表达式的一部分创建的，则称其“函数表达式”。</li><li>在执行代码块之前，内部算法会先处理函数声明。所以函数声明在其被声明的代码块内的任何位置都是可见的。</li><li>函数表达式在执行流程到达时创建。</li></ul><p>在大多数情况下，当我们需要声明一个函数时，最好使用函数声明，因为函数在被声明之前也是可见的。这使我们在代码组织方面更具灵活性，通常也会使得代码可读性更高。</p><p>所以，仅当函数声明不适合对应的任务时，才应使用函数表达式。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十一、JavaScript函数</title>
      <link href="/posts/cbae3b4f.html"/>
      <url>/posts/cbae3b4f.html</url>
      
        <content type="html"><![CDATA[<h1 id="十一、JavaScript-函数"><a href="#十一、JavaScript-函数" class="headerlink" title="十一、JavaScript 函数"></a>十一、JavaScript 函数</h1><p>我们经常需要在脚本的许多地方执行很相似的操作。函数是程序的主要“构建模块”。函数使该段代码可以被调用很多次，而不需要写重复的代码。</p><p>我们已经看到了内建函数的示例，如 <code>alert(message)</code>、<code>prompt(message, default)</code> 和 <code>confirm(question)</code>。但我们也可以创建自己的函数。</p><h2 id="1、函数声明"><a href="#1、函数声明" class="headerlink" title="1、函数声明"></a>1、函数声明</h2><p>使用 <strong>函数声明</strong> 创建函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">funName</span><span class="token punctuation">(</span><span class="token parameter">parameter1<span class="token punctuation">,</span> parameter2<span class="token punctuation">,</span> <span class="token operator">...</span> parameterN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...body...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>function</code> 关键字首先出现，然后是 <strong>函数名</strong>，然后是括号之间的 <strong>参数</strong> 列表（用逗号分隔）</li><li>最后是花括号之间的代码（即“函数体”）</li></ul><h2 id="2、函数调用"><a href="#2、函数调用" class="headerlink" title="2、函数调用"></a>2、函数调用</h2><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p><strong>函数可以通过名称调用：<code>funName()</code>。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">funName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'Hello everyone!'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Hello everyone!</span><span class="token comment">// Hello everyone!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这里我们会看到显示两次消息。</li><li>这个例子清楚地演示了函数的主要目的之一：避免代码重复。</li></ul><h2 id="3、局部变量"><a href="#3、局部变量" class="headerlink" title="3、局部变量"></a>3、局部变量</h2><p><strong>在函数中声明的变量只在该函数内部可见。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">"Hello, I'm JavaScript!"</span><span class="token punctuation">;</span> <span class="token comment">// 局部变量</span>  <span class="token function">alert</span><span class="token punctuation">(</span> message <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, I'm JavaScript!</span><span class="token function">alert</span><span class="token punctuation">(</span> message <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- 错误！变量是函数的局部变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、全局变量"><a href="#4、全局变量" class="headerlink" title="4、全局变量"></a>4、全局变量</h2><ul><li>任何函数之外声明的变量，都被称为 <strong>全局</strong> 变量。</li><li>全局变量在任意函数中都是可见的（除非被局部变量遮蔽）。</li></ul><h3 id="函数可以访问外部变量"><a href="#函数可以访问外部变量" class="headerlink" title="函数可以访问外部变量"></a>函数可以访问外部变量</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> userName <span class="token operator">=</span> <span class="token string">'John'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">'Hello, '</span> <span class="token operator">+</span> userName<span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, John</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数可以修改外部变量"><a href="#函数可以修改外部变量" class="headerlink" title="函数可以修改外部变量"></a>函数可以修改外部变量</h3><p>函数对外部变量拥有全部的访问权限。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> userName <span class="token operator">=</span> <span class="token string">'John'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  userName <span class="token operator">=</span> <span class="token string">"Bob"</span><span class="token punctuation">;</span> <span class="token comment">// (1) 改变外部变量</span>  <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">'Hello, '</span> <span class="token operator">+</span> userName<span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">alert</span><span class="token punctuation">(</span> userName <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John 在函数调用之前</span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> userName <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Bob，值被函数修改了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>只有在没有局部变量的情况下才会使用外部变量。</p></blockquote><p><strong>如果在函数内部声明了同名变量，那么函数会 遮蔽 外部变量。</strong></p><p>例如，在下面的代码中，函数使用局部的 <code>userName</code>，而外部变量被忽略：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> userName <span class="token operator">=</span> <span class="token string">'John'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> userName <span class="token operator">=</span> <span class="token string">"Bob"</span><span class="token punctuation">;</span> <span class="token comment">// 声明一个局部变量</span>  <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">'Hello, '</span> <span class="token operator">+</span> userName<span class="token punctuation">;</span> <span class="token comment">// Bob</span>  <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 函数会创建并使用它自己的 userName</span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> userName <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John，未被更改，函数没有访问外部变量。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>减少全局变量的使用是一种很好的做法。现代的代码有很少甚至没有全局变量。大多数变量存在于它们的函数中。但是有时候，全局变量能够用于存储项目级别的数据。</p><h2 id="5、参数"><a href="#5、参数" class="headerlink" title="5、参数"></a>5、参数</h2><h3 id="通过参数将任意数据传递给函数"><a href="#通过参数将任意数据传递给函数" class="headerlink" title="通过参数将任意数据传递给函数"></a>通过参数将任意数据传递给函数</h3><p>在如下示例中，函数有两个参数：<code>from</code> 和 <code>text</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token parameter">from<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 参数：from 和 text</span>  <span class="token function">alert</span><span class="token punctuation">(</span>from <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token string">'Ann'</span><span class="token punctuation">,</span> <span class="token string">'Hello!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ann: Hello! (*)</span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token string">'Ann'</span><span class="token punctuation">,</span> <span class="token string">"What's up?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ann: What's up? (**)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当函数在 <code>(*)</code> 和 <code>(**)</code> 行中被调用时，给定值被复制到了局部变量 <code>from</code> 和 <code>text</code>。然后函数使用它们进行计算。</li></ul><h3 id="形参-实参"><a href="#形参-实参" class="headerlink" title="形参&amp;实参"></a>形参&amp;实参</h3><p>我们声明函数时列出它们的参数（parameters），然后调用它们传递参数（arguments）。</p><h4 id="形参"><a href="#形参" class="headerlink" title="形参"></a>形参</h4><p>参数（parameter）是函数声明中括号内列出的变量（它是函数声明时的术语）。</p><h4 id="实参"><a href="#实参" class="headerlink" title="实参"></a>实参</h4><p>参数（argument）是调用函数时传递给函数的值（它是函数调用时的术语）。</p><h4 id="Case-1"><a href="#Case-1" class="headerlink" title="Case"></a>Case</h4><p>我们有一个变量 <code>from</code>，并将它传递给函数。</p><blockquote><p><strong>函数会修改 <code>from</code>，但在函数外部看不到更改，因为函数修改的是复制的变量值副本。</strong></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token parameter">from<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  from <span class="token operator">=</span> <span class="token string">'*'</span> <span class="token operator">+</span> from <span class="token operator">+</span> <span class="token string">'*'</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span> from <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> text <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> from <span class="token operator">=</span> <span class="token string">"Ann"</span><span class="token punctuation">;</span><span class="token function">showMessage</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// *Ann*: Hello</span><span class="token comment">// "from" 值相同，函数修改了一个局部的副本。</span><span class="token function">alert</span><span class="token punctuation">(</span> from <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ann</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、默认值"><a href="#6、默认值" class="headerlink" title="6、默认值"></a>6、默认值</h2><p><strong>如果一个函数被调用，但有参数（argument）未被提供，那么相应的值就会变成 <code>undefined</code>。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token parameter">from<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  from <span class="token operator">=</span> <span class="token string">'*'</span> <span class="token operator">+</span> from <span class="token operator">+</span> <span class="token string">'*'</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span> from <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> text <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token string">"Ann"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// *Ann*: undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>因为参数 <code>text</code> 的值未被传递，所以变成了 <code>undefined</code>。</li></ul><h3 id="设置默认值"><a href="#设置默认值" class="headerlink" title="设置默认值"></a>设置默认值</h3><p><strong>如果对应参数的值未被传递时，可以使用 <code>=</code> 为函数声明中的参数指定所谓的“默认”值。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> text <span class="token operator">=</span> <span class="token string">"no text given"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span> from <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> text <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token string">"Ann"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ann: no text given</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>现在如果 <code>text</code> 参数未被传递，它将会得到值 <code>&quot;no text given&quot;</code>。</li></ul><h3 id="默认值是表达式"><a href="#默认值是表达式" class="headerlink" title="默认值是表达式"></a>默认值是表达式</h3><p>默认值只会在缺少参数时才会被计算和分配。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token parameter">from<span class="token punctuation">,</span> text <span class="token operator">=</span> <span class="token function">anotherFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// anotherFunction() 仅在没有给定 text 时执行</span>  <span class="token comment">// 其运行结果将成为 text 的值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果传递了参数 <code>text</code>，那么 <code>anotherFunction()</code> 就不会被调用。</li><li>如果没传递参数 <code>text</code>，那么 <code>anotherFunction()</code> 就会被调用。</li></ul><h2 id="7、返回值"><a href="#7、返回值" class="headerlink" title="7、返回值"></a>7、返回值</h2><ul><li>函数可以将一个值返回到调用代码中作为结果。</li><li>指令 <code>return</code> 可以在函数的任意位置。当执行到达时，函数停止，并将值返回给调用代码。</li><li>在一个函数中可能会出现很多次 <code>return</code>。</li><li>只使用 <code>return</code> 但没有返回值也是可行的。但这会导致函数立即退出。</li><li><strong>空值的</strong> <code>return</code> <strong>或没有</strong> <code>return</code> <strong>的函数返回值为</strong> <code>undefined</code>。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>不要在</strong> <code>return</code> <strong>与返回值之间添加新行</strong>，因为 JavaScript 默认会在 <code>return</code> 之后加上分号。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">return</span> <span class="token punctuation">(</span>some <span class="token operator">+</span> long <span class="token operator">+</span> expression <span class="token operator">+</span> or <span class="token operator">+</span> whatever <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>some <span class="token operator">+</span> long <span class="token operator">+</span> expression <span class="token operator">+</span> or <span class="token operator">+</span> whatever <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="8、函数命名"><a href="#8、函数命名" class="headerlink" title="8、函数命名"></a>8、函数命名</h2><h3 id="命名方式"><a href="#命名方式" class="headerlink" title="命名方式"></a>命名方式</h3><p>函数就是行为（action）。所以它们的名字通常是<strong>动词</strong>。它应该简短且尽可能准确地描述函数的作用。这样读代码的人就能清楚地知道这个函数的功能。</p><p><strong>一种普遍的做法是用动词前缀来开始一个函数，这个前缀模糊地描述了这个行为。</strong></p><ul><li><code>&quot;get…&quot;</code> —— 返回一个值，</li><li><code>&quot;calc…&quot;</code> —— 计算某些内容，</li><li><code>&quot;create…&quot;</code> —— 创建某些内容，</li><li><code>&quot;check…&quot;</code> —— 检查某些内容并返回 boolean 值等。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>     <span class="token comment">// 显示信息</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>          <span class="token comment">// 返回 age（gets it somehow）</span><span class="token function">calcSum</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>         <span class="token comment">// 计算求和并返回结果</span><span class="token function">createForm</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>      <span class="token comment">// 创建表单（通常会返回它）</span><span class="token function">checkPermission</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment">// 检查权限并返回 true/false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>有了前缀，只需瞥一眼函数名，就可以了解它的功能是什么，返回什么样的值。</li></ul><h3 id="一个函数一个行为"><a href="#一个函数一个行为" class="headerlink" title="一个函数一个行为"></a>一个函数一个行为</h3><p>一个函数应该只包含函数名所指定的功能，而不是做更多与函数名无关的功能。</p><p>两个独立的行为通常需要两个函数，即使它们通常被一起调用（在这种情况下，我们可以创建第三个函数来调用这两个函数）。</p><p>通过函数名就可以看出函数的行为，而不需要通过代码。人们通常把这样的代码称为 <strong>自描述</strong>。</p><h2 id="9、总结"><a href="#9、总结" class="headerlink" title="9、总结"></a>9、总结</h2><p>1）函数声明方式如下所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">parameters<span class="token punctuation">,</span> delimited<span class="token punctuation">,</span> by<span class="token punctuation">,</span> comma</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* code */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>作为参数传递给函数的值，会被复制到函数的局部变量。</li><li>函数可以访问外部变量。但它只能从内到外起作用。函数外部的代码看不到函数内的局部变量。</li><li>函数可以返回值。如果没有返回值，则其返回的结果是 <code>undefined</code>。</li></ul><p>2）为了使代码简洁易懂，建议在函数中主要使用局部变量和参数，而不是外部变量。</p><p>3）与不获取参数但将修改外部变量作为副作用的函数相比，获取参数、使用参数并返回结果的函数更容易理解。</p><p>4）函数命名：</p><ul><li>函数名应该清楚地描述函数的功能。当我们在代码中看到一个函数调用时，一个好的函数名能够让我们马上知道这个函数的功能是什么，会返回什么。</li><li>一个函数是一个行为，所以函数名通常是动词。</li><li>目前有许多优秀的函数名前缀，如 <code>create…</code>、<code>show…</code>、<code>get…</code>、<code>check…</code> 等等。使用它们来提示函数的作用吧。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十一、Spring Bean的autowire-candidate属性</title>
      <link href="/posts/30210473.html"/>
      <url>/posts/30210473.html</url>
      
        <content type="html"><![CDATA[<h1 id="十一、Spring-Bean的autowire-candidate属性"><a href="#十一、Spring-Bean的autowire-candidate属性" class="headerlink" title="十一、Spring Bean的autowire-candidate属性"></a>十一、Spring Bean的autowire-candidate属性</h1><p>上一篇文章中，我们知道当容器中某种类型的 Bean 存在多个的时候，此时如果我们从容器中查找这种类型的bean的时候，会报下面这个异常：<code>org.springframework.beans.factory.NoUniqueBeanDefinitionException</code>。</p><p><strong>原因：当从容器中按照类型查找一个 Bean 对象的时候，容器中却找到了多个匹配的 Bean，此时 Spring 不知道如何选择了，处于懵逼状态，就会报这个异常。</strong></p><p>Spring 还有一种方法也可以解决这个问题，可以设置某个 Bean 是否在自动注入的时候是否为作为候选 Bean，通过 Bean 元素的 autowire-candidate 属性类配置</p><h2 id="1、autowire-candidate属性"><a href="#1、autowire-candidate属性" class="headerlink" title="1、autowire-candidate属性"></a>1、autowire-candidate属性</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong><code>autowire-candidate</code>：设置当前 Bean 在被其他对象作为自动注入对象的时候，是否作为候选 Bean，默认值是 true。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"serviceA"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.javacode.lesson.demo8.SetterBean$ServiceA"</span> autowire<span class="token operator">-</span>candidate<span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>来举例说明一下，以上面的 setter 注入的案例先来说一下注入的过程：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>serviceA<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo8.SetterBean$ServiceA<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>serviceB<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo8.SetterBean$ServiceB<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setterBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo8.SetterBean<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Bean-注入步骤"><a href="#Bean-注入步骤" class="headerlink" title="Bean 注入步骤"></a>Bean 注入步骤</h4><p><strong>1）容器在创建 setterBean 的时候，发现其 autowire 为 byType，即按类型自动注入，此时会在 SetterBean 类中查找所有 setter 方法列表，其中就包含了setService 方法。</strong></p><p><strong>2）setService 方法参数类型是 IService，然后就会去容器中按照 IService 类型查找所有符合条件的 Bean 列表，此时容器中会返回满足 IService 这种类型并且autowire-candidate&#x3D;”true”的Bean，刚才有说过Bean元素的autowire-candidate 的默认值是 true，所以容器中符合条件的候选 Bean 有 2 个：serviceA 和 serviceB。</strong></p><p><strong>3）setService 方法只需要一个满足条件的 Bean，此时会再去看这个列表中是否只有一个主要的 Bean（即 Bean 元素的 primary&#x3D;“ture” 的 Bean），而 Bean 元素的 primary 默认值都是 false，所以没有 primary 为 true 的 Bean，此时 Spring 容器懵了，不知道选哪个了，此时就报错了，抛出 NoUniqueBeanDefinitionException 异常。</strong></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul><li>将某个候选 Bean 的 primary 置为 true 就可以解决问题了。</li><li>或者只保留一个 Bean 的 autowire-candidate 为 true，将其余的满足条件的 bean 的 autowire-candidate 置为 false，此时也可以解决这个问题。</li></ul><h3 id="autowire-candidate-解决"><a href="#autowire-candidate-解决" class="headerlink" title="autowire-candidate 解决"></a>autowire-candidate 解决</h3><p>下面我们使用 autowire-candidate 来解决上面问题，看一下效果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetterBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IService</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//@1</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ServiceA</span> <span class="token keyword">implements</span> <span class="token class-name">IService</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//@2</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ServiceB</span> <span class="token keyword">implements</span> <span class="token class-name">IService</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//@3</span>    <span class="token keyword">private</span> <span class="token class-name">IService</span> service<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setService</span><span class="token punctuation">(</span><span class="token class-name">IService</span> service<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>service <span class="token operator">=</span> service<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将-serviceA-的-autowire-candidate-置为-false"><a href="#将-serviceA-的-autowire-candidate-置为-false" class="headerlink" title="将 serviceA 的 autowire-candidate 置为 false"></a>将 serviceA 的 autowire-candidate 置为 false</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>serviceA<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo9.SetterBean$ServiceA<span class="token punctuation">"</span></span> <span class="token attr-name">autowire-candidate</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>serviceB<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo9.SetterBean$ServiceB<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setterBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo9.SetterBean<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将 serviceA 的 autowire-candidate 置为 false 了，serviceA 在被其他 bean 自动按照类型注入的时候，将不再放入候选名单中。</li></ul><h4 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutowireCandidateTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setterBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo9/autowireCandidateBean.xml"</span><span class="token punctuation">;</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">IocUtils</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">SetterBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//@1</span>              <span class="token class-name">SetterBean<span class="token punctuation">.</span>IService</span> service <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">SetterBean<span class="token punctuation">.</span>IService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//@2</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>@1：查找容器中 SetterBean 类型的 Bean 对象</li><li>@2：查找容器中 SetterBean.IService 接口类型的 Bean，实际上面容器中 serviceA 和 serviceB 都是这种类型的</li></ul><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SetterBean<span class="token punctuation">&#123;</span>service<span class="token operator">=</span>com.javacode.lesson.demo9.SetterBean<span class="token variable">$ServiceB</span>@29176cc1<span class="token punctuation">&#125;</span>com.javacode.lesson.demo9.SetterBean<span class="token variable">$ServiceB</span>@29176cc1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意一下输出，2 行输出中都是 ServiceB，因为 serviceB 的 autowire-candidate 是默认值 true，自动注入的时候作为候选 bean，而 serviceA 的autowire-candidate 是 false，自动注入的时候不作为候选 bean，所以上面输出的都是 serviceB。</p><h2 id="2、autowire-candidates-属性源码解析"><a href="#2、autowire-candidates-属性源码解析" class="headerlink" title="2、autowire-candidates 属性源码解析"></a>2、autowire-candidates 属性源码解析</h2><h3 id="default-autowire-candidates"><a href="#default-autowire-candidates" class="headerlink" title="default-autowire-candidates"></a>default-autowire-candidates</h3><p>beans 元素是 xml 中定义 bean的根元素，beans元素有个<code>default-autowire-candidates</code> 属性，用于定义哪些 bean 可以作为候选者，d efault-autowire-candidates 的值是个通配符如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">default-autowire-candidates="*Service"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="autowire-candidate"><a href="#autowire-candidate" class="headerlink" title="autowire-candidate"></a>autowire-candidate</h3><p>bean 元素的<code>autowire-candidate</code>属性有 3 个可选值：</p><ul><li><code>default</code>：这个是默认值，autowire-candidate 如果不设置，其值就是 default</li><li><code>true</code>：作为候选者</li><li><code>false</code>：不作为候选者</li></ul><h3 id="autowire-candidates-源码"><a href="#autowire-candidates-源码" class="headerlink" title="autowire-candidates 源码"></a>autowire-candidates 源码</h3><p>spring 中由beans 元素的 default-autowire-candidates 和 bean 元素的 autowire-candidate 来决定最终 bean 元素 autowire-candidate 的值，我们来看一下 bean 元素 autowire-candidates 的解析源码：</p><h4 id="源码位置"><a href="#源码位置" class="headerlink" title="源码位置"></a>源码位置</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>xml<span class="token punctuation">.</span></span>BeanDefinitionParserDelegate</span>#parseBeanDefinitionAttributes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取bean元素的autowire-candidate元素，autowire-candidate如果不设置，其值就是default</span><span class="token class-name">String</span> autowireCandidate <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token constant">AUTOWIRE_CANDIDATE_ATTRIBUTE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断bean元素的autowire-candidate元素是否等于"default"或者是否等于""</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDefaultValue</span><span class="token punctuation">(</span>autowireCandidate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 获取beans元素default-autowire-candidates属性值</span>    <span class="token class-name">String</span> candidatePattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaults<span class="token punctuation">.</span><span class="token function">getAutowireCandidates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 判断获取beans元素default-autowire-candidates属性值是否为空，default-autowire-candidates默认值就是null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>candidatePattern <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断bean的名称是否和default-autowire-candidates的值匹配，如果匹配就将bean的autowireCandidate置为true，否则置为false</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> patterns <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span>candidatePattern<span class="token punctuation">)</span><span class="token punctuation">;</span>        bd<span class="token punctuation">.</span><span class="token function">setAutowireCandidate</span><span class="token punctuation">(</span><span class="token class-name">PatternMatchUtils</span><span class="token punctuation">.</span><span class="token function">simpleMatch</span><span class="token punctuation">(</span>patterns<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//判断bean的autowire-candidate的值是否等于"true"</span>    bd<span class="token punctuation">.</span><span class="token function">setAutowireCandidate</span><span class="token punctuation">(</span><span class="token constant">TRUE_VALUE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>autowireCandidate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果上面判断都没有进去，autowireCandidate 属性默认值就是 true，这个在下面定义的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>AbstractBeanDefinition</span>#autowireCandidate  <span class="token keyword">private</span> <span class="token keyword">boolean</span> autowireCandidate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3、问题思考"><a href="#3、问题思考" class="headerlink" title="3、问题思考"></a>3、问题思考</h2><p><strong>对上面的案例做个扩展，SetterBean 类中加个方法：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setService1</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IService</span><span class="token punctuation">></span></span> service<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//@0</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//@1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>@0：需要注入一个IService的集合，判断一下@1输出的是容器中的serviceA，还是serviceB，还是2个都有呢？为什么？</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十、Spring primary候选者</title>
      <link href="/posts/c04a7906.html"/>
      <url>/posts/c04a7906.html</url>
      
        <content type="html"><![CDATA[<h1 id="十、Spring-primary-候选者"><a href="#十、Spring-primary-候选者" class="headerlink" title="十、Spring primary 候选者"></a>十、Spring primary 候选者</h1><h2 id="1、存在的问题"><a href="#1、存在的问题" class="headerlink" title="1、存在的问题"></a>1、存在的问题</h2><p>直接上案例，通过案例来看技术是如何使用的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalBean</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IService</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//@1</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ServiceA</span> <span class="token keyword">implements</span> <span class="token class-name">IService</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//@2</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ServiceB</span> <span class="token keyword">implements</span> <span class="token class-name">IService</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//@3</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>@1：定义了一个 IService 接口</li><li>@2和@3：创建了两个类都实现了 IService 接口</li></ul><p>下面我们通过 Spring 来定义 ServiceA 和 ServiceB 两个 bean，配置文件（normalBean.xml）如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>serviceA<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo8.NormalBean$ServiceA<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>serviceB<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo8.NormalBean$ServiceB<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来个测试用例来从 spring 容器中获取上面定义的 bean 对象，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * bean 元素的 primary 属性可以解决什么问题？ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrimaryTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">normalBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo8/normalBean.xml"</span><span class="token punctuation">;</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">IocUtils</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//下面我们通过spring容器的 T getBean(Class&lt;T> requiredType)方法获取容器中对应的 bean</span>        <span class="token class-name">NormalBean<span class="token punctuation">.</span>IService</span> service <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">NormalBean<span class="token punctuation">.</span>IService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//@1</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意 @1 的代码，从 spring 容器中在容器中查找 NormalBean.IService.class 类型的 bean 对象，我们来运行一下看看效果，部分输出如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of <span class="token builtin class-name">type</span> <span class="token string">'com.javacode.lesson.demo8.NormalBean$IService'</span> available: expected single matching bean but found <span class="token number">2</span>: serviceA,serviceB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个详细说出了错误原因：spring 容器中定义了 2 个 bean，分别是 serviceA和 serviceB，这两个 bean 对象都实现了 IService 接口，<strong>而用例中我们想从容器中获取 IService 接口对应的 bean，此时容器中有 2 个候选者（serviceA 和serviceB）满足我们的需求，此时 spring容器不知道如何选择，到底是返回 serviceA 呢还是返回 serviceB呢？所以报错了。</strong></p><p>再来看一个通过 setter 方法注入的案例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetterBean</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IService</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//@1</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ServiceA</span> <span class="token keyword">implements</span> <span class="token class-name">IService</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//@2</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ServiceB</span> <span class="token keyword">implements</span> <span class="token class-name">IService</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//@3</span>      <span class="token keyword">private</span> <span class="token class-name">IService</span> service<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setService</span><span class="token punctuation">(</span><span class="token class-name">IService</span> service<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>service <span class="token operator">=</span> service<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们通过 xml 来定义 SetterBean，并且使用 setter方式将 IService注入到 SetterBean中，配置如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>serviceA<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo8.SetterBean$ServiceA<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>serviceB<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo8.SetterBean$ServiceA<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setterBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo8.SetterBean<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意上面setterBean的定义，autowire&#x3D;”byType” 采用了按照类型自动注入的方式，容器启动的时候，会自动取调用 SetterBean 的 setService 方法，在容器中查找和这个方法参数类型匹配的 bean，将查找的 bean 通过 setService 方法注入进去。</p><p>来个测试用例，PrimaryTest 中加个方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setterBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo8/setterBean.xml"</span><span class="token punctuation">;</span>    <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">IocUtils</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​运行输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name <span class="token string">'setterBean'</span> defined <span class="token keyword">in</span> class path resource <span class="token punctuation">[</span>com/javacode/lesson/demo8/setterBean.xml<span class="token punctuation">]</span>: Unsatisfied dependency expressed through bean property <span class="token string">'service'</span><span class="token punctuation">;</span> nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of <span class="token builtin class-name">type</span> <span class="token string">'com.javacode.lesson.demo8.SetterBean$IService'</span> available: expected single matching bean but found <span class="token number">2</span>: serviceA,serviceB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>容器中去找 IService 接口对应的 bean，期望有一个匹配的，实际上却找到了 2 个匹配的，不知道如何选择，报错了。上面 2 个案例报的异常都是下面这个异常：</p><p><code>org.springframework.beans.factory.NoUniqueBeanDefinitionException</code></p><p><strong>当希望从容器中获取到一个 bean 对象的时候，容器中却找到了多个匹配的bean，此时 spring 不知道如何选择了，处于懵逼状态，就会报这个异常。</strong></p><h2 id="2、primary-属性设置候选者"><a href="#2、primary-属性设置候选者" class="headerlink" title="2、primary 属性设置候选者"></a>2、primary 属性设置候选者</h2><p><strong>Spring 中可以通过 Bean 元素的 primary 属性来解决这个问题，可以通过这个属性来指定当前 Bean 为主要候选者，当容器查询一个 Bean 的时候，如果容器中有多个候选者匹配的时候，此时 Spring 会返回主要的候选者。</strong></p><p>下面我们使用 primary 来解决上面案例的问题：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrimaryBean</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IService</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//@1</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ServiceA</span> <span class="token keyword">implements</span> <span class="token class-name">IService</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//@2</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ServiceB</span> <span class="token keyword">implements</span> <span class="token class-name">IService</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//@3</span>      <span class="token keyword">private</span> <span class="token class-name">IService</span> service<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setService</span><span class="token punctuation">(</span><span class="token class-name">IService</span> service<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>service <span class="token operator">=</span> service<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Spring 配置文件如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>serviceA<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo8.PrimaryBean$ServiceA<span class="token punctuation">"</span></span> <span class="token attr-name">primary</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>serviceB<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo8.PrimaryBean$ServiceA<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setterBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo8.PrimaryBean<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上面配置中我们将 serviceA 的 primary 属性置为 true 了，将其置为主要候选者，容器中如果查找 Bean 的时候，如果有多个匹配的，就以它为主。</li></ul><p>我们来个测试用例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">primaryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo8/primaryBean.xml"</span><span class="token punctuation">;</span>  <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">IocUtils</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PrimaryBean<span class="token punctuation">.</span>IService</span> service <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">PrimaryBean<span class="token punctuation">.</span>IService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//@1</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PrimaryBean</span> primaryBean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">PrimaryBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//@2</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>primaryBean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>@1：从容器中查找 IService 类型匹配的 Bean，这个接口有 2 个实现类（ServiceA 和 Service2），这类在容器中都定义了，但是 serviceA 为主要的 Bean，所以这行代码会返回 serviceA。</li><li>@2：从容器中查找 PrimaryBean 类型的 Bean，容器中有一个，这个 bean 按照 byType 默认注入 IService 接口匹配的 Bean，注入的时候如果候选者有多个，以 primary&#x3D;”true” 的 Bean 为主来注入，所以此处会注入 service2。</li></ul><p>我们来运行一下，看看和分析的是否一致，运行输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">com.javacode.lesson.demo8.PrimaryBean<span class="token variable">$ServiceA</span>@7b227d8dPrimaryBean<span class="token punctuation">&#123;</span>service<span class="token operator">=</span>com.javacode.lesson.demo8.PrimaryBean<span class="token variable">$ServiceA</span>@7b227d8d<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>上面输出确实都是 ServiceA，和我们分析的一致。还有当候选者中如果有多个 Bean 都将 primary 置为 true，此时 spring 还是会懵逼的，也会报错，不知道如何选择了。</li></ul><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p><strong>当从容器中查找一个 Bean 的时候，如果容器中出现多个 Bean 候选者时，可以通过 primary&#x3D;”true” 将当前 Bean 置为首选者，那么查找的时候就会返回主要的候选者，否则将抛出异常。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十、JavaScript循环</title>
      <link href="/posts/fb6139d8.html"/>
      <url>/posts/fb6139d8.html</url>
      
        <content type="html"><![CDATA[<h1 id="十、JavaScript-循环"><a href="#十、JavaScript-循环" class="headerlink" title="十、JavaScript 循环"></a>十、JavaScript 循环</h1><p><strong>循环</strong> 是一种重复运行同一代码的方法。</p><h2 id="1、while-循环"><a href="#1、while-循环" class="headerlink" title="1、while 循环"></a>1、while 循环</h2><p><code>while</code> 循环的语法如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 代码</span>  <span class="token comment">// 所谓的“循环体”</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当 <code>condition</code> 为真时，执行循环体的 <code>code</code>。</li></ul><p>例如，以下将循环输出当 <code>i &lt; 3</code> 时的 <code>i</code> 值：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 依次显示 0、1 和 2</span>  <span class="token function">alert</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>  i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>循环体的单次执行叫作 <strong>一次迭代</strong>。上面示例中的循环进行了三次迭代。</li></ul><p><strong>任何表达式或变量都可以是循环条件，而不仅仅是比较。在 <code>while</code> 中的循环条件会被计算，计算结果会被转化为布尔值。</strong></p><p>例如，<code>while (i != 0)</code> 可简写为 <code>while (i)</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 当 i 变成 0 时，条件为假，循环终止</span>  <span class="token function">alert</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>  i<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>单行循环体不需要大括号</strong></p><p>如果循环体只有一条语句，则可以省略大括号 <code>&#123;…&#125;</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2、do…while-循环"><a href="#2、do…while-循环" class="headerlink" title="2、do…while 循环"></a>2、do…while 循环</h2><p>使用 <code>do..while</code> 语法可以将条件检查移至循环体 <strong>下面</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 循环体</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>循环首先执行循环体，然后检查条件，当条件为真时，重复执行循环体。</strong></li></ul><p>例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>  i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种形式的语法很少使用，除非你希望不管条件是否为真，循环体 <strong>至少执行一次</strong>。通常我们更倾向于使用另一个形式：<code>while(…) &#123;…&#125;</code>。</p><h2 id="3、for-循环"><a href="#3、for-循环" class="headerlink" title="3、for 循环"></a>3、for 循环</h2><p><code>for</code> 循环更加复杂，但它是最常使用的循环形式。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span>begin<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> step<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ……循环体……</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下述循环从 <code>i</code> 等于 <code>0</code> 到 <code>3</code>（但不包括 <code>3</code>）运行 <code>alert(i)</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 结果为 0、1、2</span>  <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们逐个部分分析 <code>for</code> 循环：</p><table><thead><tr><th align="left">语句段</th><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">begin</td><td align="left"><code>let i = 0</code></td><td align="left">进入循环时执行一次。</td></tr><tr><td align="left">condition</td><td align="left"><code>i &lt; 3</code></td><td align="left">在每次循环迭代之前检查，如果为 false，停止循环。</td></tr><tr><td align="left">body（循环体）</td><td align="left"><code>alert(i)</code></td><td align="left">条件为真时，重复运行。</td></tr><tr><td align="left">step</td><td align="left"><code>i++</code></td><td align="left">在每次循环体迭代后执行。</td></tr></tbody></table><h3 id="内联变量声明"><a href="#内联变量声明" class="headerlink" title="内联变量声明"></a>内联变量声明</h3><p>这里“计数”变量 <code>i</code> 是在循环中声明的。这叫做“内联”变量声明。这样的变量只在循环中可见。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0, 1, 2</span><span class="token punctuation">&#125;</span><span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 错误，没有这个变量。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>除了定义一个变量，我们也可以使用现有的变量：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 使用现有的变量</span>  <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0, 1, 2</span><span class="token punctuation">&#125;</span><span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3，可见，因为是在循环之外声明的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="省略语句段"><a href="#省略语句段" class="headerlink" title="省略语句段"></a>省略语句段</h3><p><code>for</code> 循环的任何语句段都可以被省略。</p><p>例如，如果我们在循环开始时不需要做任何事，我们就可以省略 <code>begin</code> 语句段。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 我们已经声明了 i 并对它进行了赋值</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 不再需要 "begin" 语句段</span>  <span class="token function">alert</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0, 1, 2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们也可以移除 <code>step</code> 语句段：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>该循环与 <code>while (i &lt; 3)</code> 等价。</li></ul><p>实际上我们可以删除所有内容，从而创建一个<strong>无限循环</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 无限循环</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>请注意 <code>for</code> 的两个 <code>;</code> 必须存在，否则会出现语法错误。</p></blockquote><h2 id="4、break-跳出循环"><a href="#4、break-跳出循环" class="headerlink" title="4、break 跳出循环"></a>4、break 跳出循环</h2><p>我们随时可以使用 <code>break</code> 指令强制退出。</p><p>例如，下面这个循环要求用户输入一系列数字，在输入的内容不是数字时“终止”循环。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token operator">+</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"Enter a number"</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// (*)</span>  sum <span class="token operator">+=</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'Sum: '</span> <span class="token operator">+</span> sum <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果用户输入空行或取消输入，在 <code>(*)</code> 行的 <code>break</code> 指令会被激活。它立刻终止循环，将控制权传递给循环后的第一行，即，<code>alert</code>。</li></ul><blockquote><p>根据需要，”无限循环 + <code>break</code>“ 的组合非常适用于不必在循环开始&#x2F;结束时检查条件，但需要在中间甚至是主体的多个位置进行条件检查的情况。</p></blockquote><h2 id="5、continue-继续下一次迭代"><a href="#5、continue-继续下一次迭代" class="headerlink" title="5、continue 继续下一次迭代"></a>5、continue 继续下一次迭代</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><code>continue</code> 指令是 <code>break</code> 的“轻量版”。它不会停掉整个循环。而是停止当前这一次迭代，并强制启动新一轮循环（如果条件允许的话）。</p><p>如果我们完成了当前的迭代，并且希望继续执行下一次迭代，我们就可以使用它。</p><h3 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h3><p>下面这个循环使用 <code>continue</code> 来只输出奇数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//如果为真，跳过循环体的剩余部分。</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1，然后 3，5，7，9</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对于偶数的 <code>i</code> 值，<code>continue</code> 指令会停止本次循环的继续执行，将控制权传递给下一次 <code>for</code> 循环的迭代（使用下一个数字）。因此 <code>alert</code> 仅被奇数值调用。</li></ul><h3 id="continue-指令利于减少嵌套"><a href="#continue-指令利于减少嵌套" class="headerlink" title="continue 指令利于减少嵌套"></a><code>continue</code> 指令利于减少嵌套</h3><p>显示奇数的循环可以像下面这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>从技术角度看，它与上一个示例完全相同。当然，我们可以将代码包装在 <code>if</code> 块而不使用 <code>continue</code>。</li><li>但在副作用方面，它多创建了一层嵌套（大括号内的 <code>alert</code> 调用）。如果 <code>if</code> 中代码有多行，则可能会降低代码整体的可读性。</li></ul><h3 id="禁止-break-continue-在-的右边"><a href="#禁止-break-continue-在-的右边" class="headerlink" title="禁止 break/continue 在 ? 的右边"></a>禁止 <code>break/continue</code> 在 <code>?</code> 的右边</h3><p>请注意非表达式的语法结构不能与三元运算符 <code>?</code> 一起使用。特别是 <code>break/continue</code> 这样的指令是不允许这样使用的。</p><p>例如，我们使用如下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用问号重写：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// continue 不允许在这个位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>代码会停止运行，并显示有语法错误。</strong></p><h2 id="6、break-continue-标签"><a href="#6、break-continue-标签" class="headerlink" title="6、break&#x2F;continue 标签"></a>6、break&#x2F;continue 标签</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>有时候我们需要一次从多层嵌套的循环中跳出来。</p><p>例如，下述代码中我们的循环使用了 <code>i</code> 和 <code>j</code>，从 <code>(0,0)</code> 到 <code>(3,3)</code> 提示坐标 <code>(i, j)</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Value at coords (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>j<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果我想从这里退出并直接执行 alert('Done!')</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Done!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们需要提供一种方法，以在用户取消输入时来停止这个过程。</p><p>在 <code>input</code> 之后的普通 <code>break</code> 只会打破内部循环。这还不够 —— 标签可以实现这一功能！</p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p><strong>标签</strong> 是在循环之前带有冒号的标识符：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">labelName</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们还可以将标签移至单独一行：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">labelName</span><span class="token operator">:</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// ... </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="break-标签"><a href="#break-标签" class="headerlink" title="break 标签"></a>break 标签</h4><p><code>break &lt;labelName&gt;</code> 语句跳出循环至标签处：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">labelName</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token keyword">break</span> labelName<span class="token punctuation">;</span> <span class="token comment">// 有效</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Value at coords (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>j<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果是空字符串或被取消，则中断并跳出这两个循环。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">break</span> outer<span class="token punctuation">;</span> <span class="token comment">// (*)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// ……</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Done!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>break outer</code> 向上寻找名为 <code>outer</code> 的标签并跳出当前循环。控制权直接从 <code>(*)</code> 转至 <code>alert(&#39;Done!&#39;)</code>。</li></ul><h4 id="continue-标签"><a href="#continue-标签" class="headerlink" title="continue 标签"></a>continue 标签</h4><p><code>continue</code> 指令也可以与标签一起使用。在这种情况下，执行跳转到标记循环的下一次迭代。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">labelName</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token keyword">continue</span> labelName<span class="token punctuation">;</span> <span class="token comment">// 有效</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、for-in-循环"><a href="#7、for-in-循环" class="headerlink" title="7、for..in 循环"></a>7、for..in 循环</h2><p><strong>为了遍历一个对象的所有键（key），可以使用一个特殊形式的循环：<code>for..in</code>。</strong></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 对此对象属性中的每个键执行的代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Case-1"><a href="#Case-1" class="headerlink" title="Case"></a>Case</h3><p>例如，让我们列出 <code>user</code> 所有的属性：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token literal-property property">isAdmin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// keys</span>  <span class="token function">alert</span><span class="token punctuation">(</span> key <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// name, age, isAdmin</span>  <span class="token comment">// 属性键的值</span>  <span class="token function">alert</span><span class="token punctuation">(</span> user<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John, 30, true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意，所有的 “for” 结构体都允许我们在循环中定义变量，像这里的 <code>let key</code>。</p><p>同样，我们可以用其他属性名来替代 <code>key</code>。例如 <code>&quot;for(let prop in obj)&quot;</code> 也很常用。</p></blockquote><h2 id="8、for-of-循环"><a href="#8、for-of-循环" class="headerlink" title="8、for..of 循环"></a>8、for..of 循环</h2><p><strong><code>for..of</code> 不能获取当前元素的索引，只是获取元素值</strong>，但大多数情况是够用的。而且这样写更短。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Plum"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 遍历数组元素</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> fruit <span class="token keyword">of</span> fruits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span> fruit <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  Apple, Orange, Pear</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九、JavaScript条件判断</title>
      <link href="/posts/ddf17900.html"/>
      <url>/posts/ddf17900.html</url>
      
        <content type="html"><![CDATA[<h1 id="九、JavaScript-条件判断"><a href="#九、JavaScript-条件判断" class="headerlink" title="九、JavaScript 条件判断"></a>九、JavaScript 条件判断</h1><h2 id="1、条件分支"><a href="#1、条件分支" class="headerlink" title="1、条件分支"></a>1、条件分支</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><ul><li><p><code>if(...)</code> 语句计算括号里的条件表达式，如果计算结果是 <code>true</code>，就会执行对应的代码块。</p></li><li><p><code>if (…)</code> 语句会计算圆括号内的表达式，并将计算结果转换为布尔型。</p></li></ul><blockquote><p><strong>布尔转换规则：</strong></p><ul><li>数字 <code>0</code>、空字符串 <code>&quot;&quot;</code>、<code>null</code>、<code>undefined</code> 和 <code>NaN</code> 都会被转换成 <code>false</code>。因为它们被称为“假值（falsy）”。</li><li>其他值被转换为 <code>true</code>，所以它们被称为“真值（truthy）”。</li></ul></blockquote><h3 id="else-语句"><a href="#else-语句" class="headerlink" title="else 语句"></a>else 语句</h3><p><code>if</code> 语句有时会包含一个可选的 “else” 块。如果判断条件不成立，就会执行它内部的代码。</p><h3 id="else-if-多条件语句"><a href="#else-if-多条件语句" class="headerlink" title="else if 多条件语句"></a>else if 多条件语句</h3><p>有时我们需要测试一个条件的几个变体。我们可以通过使用 <code>else if</code> 子句实现。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> year <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'In which year was ECMAScript-2015 specification published?'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">&lt;</span> <span class="token number">2015</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'Too early...'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">></span> <span class="token number">2015</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'Too late'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'Exactly!'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JavaScript 先检查 <code>year &lt; 2015</code>。</li><li>如果条件不符合，就会转到下一个条件 <code>year &gt; 2015</code>。</li><li>如果这个条件也不符合，则会显示最后一个 <code>alert</code>。</li></ul><h2 id="2、条件运算符"><a href="#2、条件运算符" class="headerlink" title="2、条件运算符 ?"></a>2、条件运算符 <code>?</code></h2><p>有时我们需要根据一个条件去赋值一个变量。</p><p>这个运算符通过问号 <code>?</code> 表示。有时它被称为三元运算符，被称为“三元”是因为该运算符中有三个操作数。实际上它是 JavaScript 中唯一一个有这么多操作数的运算符。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> result <span class="token operator">=</span> condition <span class="token operator">?</span> value1 <span class="token operator">:</span> value2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>condition 如果结果为真，则返回 <code>value1</code>，否则返回 <code>value2</code>。</li></ul><h3 id="多个"><a href="#多个" class="headerlink" title="多个 ?"></a>多个 <code>?</code></h3><p>使用一系列问号 <code>?</code> 运算符可以返回一个取决于多个条件的值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'age?'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'Hi, baby!'</span> <span class="token operator">:</span>  <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'Hello!'</span> <span class="token operator">:</span>  <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'Greetings!'</span> <span class="token operator">:</span>  <span class="token string">'What an unusual age!'</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> message <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可能很难一下子看出发生了什么。但经过仔细观察，我们可以看到它只是一个普通的检查序列：</p><ol><li>第一个问号检查 <code>age &lt; 3</code>。</li><li>如果为真 — 返回 <code>&#39;Hi, baby!&#39;</code>。否则，会继续执行冒号 <code>&quot;:&quot;</code> 后的表达式，检查 <code>age &lt; 18</code>。</li><li>如果为真 — 返回 <code>&#39;Hello!&#39;</code>。否则，会继续执行下一个冒号 <code>&quot;:&quot;</code> 后的表达式，检查 <code>age &lt; 100</code>。</li><li>如果为真 — 返回 <code>&#39;Greetings!&#39;</code>。否则，会继续执行最后一个冒号 <code>&quot;:&quot;</code> 后面的表达式，返回 <code>&#39;What an unusual age!&#39;</code>。</li></ol><p>这是使用 <code>if..else</code> 实现上面的逻辑的写法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  message <span class="token operator">=</span> <span class="token string">'Hi, baby!'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  message <span class="token operator">=</span> <span class="token string">'Hello!'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  message <span class="token operator">=</span> <span class="token string">'Greetings!'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  message <span class="token operator">=</span> <span class="token string">'What an unusual age!'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、逻辑运算符"><a href="#3、逻辑运算符" class="headerlink" title="3、逻辑运算符"></a>3、逻辑运算符</h2><h3 id="（或）"><a href="#（或）" class="headerlink" title="||（或）"></a>||（或）</h3><p>两个竖线符号表示“或”运算符：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">result <span class="token operator">=</span> a <span class="token operator">||</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在传统的编程中，逻辑或仅能够操作布尔值。如果参与运算的任意一个参数为 <code>true</code>，返回的结果就为 <code>true</code>，否则返回 <code>false</code>。</p><h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><p>下面是四种可能的逻辑组合：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>除了两个操作数都是 <code>false</code> 的情况，结果都是 <code>true</code>。</li></ul><p>如果操作数不是布尔值，那么它将会被转化为布尔值来参与运算。例如，数字 <code>1</code> 被作为 <code>true</code> 处理，数字 <code>0</code> 则被作为 <code>false</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 工作原理相当于 if( true || false )</span>  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'truthy!'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>大多数情况下，逻辑或 <code>||</code> 会被用在 <code>if</code> 语句中，用来测试是否有 <strong>任何</strong> 给定的条件为 <code>true</code>。</p></blockquote><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>一个或运算 <code>||</code> 的链，将返回第一个真值，如果不存在真值，就返回该链的最后一个值。</p><p><strong>返回的值是操作数的初始形式，不会做布尔转换。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1（1 是真值）</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1（1 是第一个真值）</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1（第一个真值）</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0（都是假值，返回最后一个值）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="具体执行步骤"><a href="#具体执行步骤" class="headerlink" title="具体执行步骤"></a>具体执行步骤</h5><p>给定多个参与或运算的值：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">result <span class="token operator">=</span> value1 <span class="token operator">||</span> value2 <span class="token operator">||</span> value3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或运算符 <code>||</code> 做了如下的事情：</p><ul><li>从左到右依次计算操作数。</li><li>处理每一个操作数时，都将其转化为布尔值。如果结果是 <code>true</code>，就停止计算，返回这个操作数的初始值。</li><li>如果所有的操作数都被计算过（也就是，转换结果都是 <code>false</code>），则返回最后一个操作数。</li></ul><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><p><strong>用途一：获取变量列表或者表达式中的第一个真值。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> firstName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">let</span> lastName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">let</span> nickName <span class="token operator">=</span> <span class="token string">"SuperCoder"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> firstName <span class="token operator">||</span> lastName <span class="token operator">||</span> nickName <span class="token operator">||</span> <span class="token string">"Anonymous"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SuperCoder</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果所有变量的值都为假，结果就是 <code>&quot;Anonymous&quot;</code>。</li></ul><p><strong>用途二：短路求值（Short-circuit evaluation）。</strong></p><p><code>||</code> 对其参数进行处理，直到达到第一个真值，然后立即返回该值，而无需处理其他参数。</p><p>在下面这个例子中，只会打印第二条信息：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"not printed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"printed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在第一行中，或运算符 <code>||</code> 在遇到 <code>true</code> 时立即停止运算，所以 <code>alert</code> 没有运行。</li><li>有时人们利用这个特性，只在左侧的条件为假时才执行命令。</li></ul><h4 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">2</span> <span class="token operator">||</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对 <code>alert</code> 的调用没有返回值。或者说返回的是 <code>undefined</code>。</p><ol><li>第一个或运算 <code>||</code> 对它的左值 <code>alert(1)</code> 进行了计算。这就显示了第一条信息 <code>1</code>。</li><li>函数 <code>alert</code> 返回了 <code>undefined</code>，所以或运算继续检查第二个操作数以寻找真值。</li><li>第二个操作数 <code>2</code> 是真值，所以执行就中断了。<code>2</code> 被返回，并且被外层的 alert 显示。</li></ol><p>这里不会显示 <code>3</code>，因为运算没有抵达 <code>alert(3)</code>。</p><h3 id="（与）"><a href="#（与）" class="headerlink" title="&amp;&amp;（与）"></a>&amp;&amp;（与）</h3><p>当两个操作数都是真值时，与运算返回 <code>true</code>，否则返回 <code>false</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>就像或运算一样，与运算的操作数可以是任意类型的值：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 作为 true &amp;&amp; false 来执行</span>  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">"won't work, because the result is falsy"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><p>给出多个参加与运算的值：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">result <span class="token operator">=</span> value1 <span class="token operator">&amp;&amp;</span> value2 <span class="token operator">&amp;&amp;</span> value3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>从左到右依次计算操作数。</li><li>在处理每一个操作数时，都将其转化为布尔值。如果结果是 <code>false</code>，就停止计算，并返回这个操作数的初始值。</li><li>如果所有的操作数都被计算过（例如都是真值），则返回最后一个操作数。</li></ul><p><strong>换句话说，与运算返回第一个假值，如果没有假值就返回最后一个值。</strong>上面的规则和或运算很像。<strong>区别就是与运算返回第一个假值，而或运算返回第一个真值。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 如果第一个操作数是真值，与运算返回第二个操作数：</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span><span class="token comment">// 如果第一个操作数是假值，与运算将直接返回它。第二个操作数会被忽略</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"no matter what"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span class="token comment">// 一行代码上串联多个值</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span><span class="token comment">// 所有的值都是真值，最后一个值将会被返回</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3，最后一个值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>与运算 <code>&amp;&amp;</code> 在 或运算 <code>||</code> 之前进行</strong></p><p>与运算 <code>&amp;&amp;</code> 的优先级比或运算 <code>||</code> 要高。所以代码 <code>a &amp;&amp; b || c &amp;&amp; d</code> 跟 <code>&amp;&amp;</code> 表达式加了括号完全一样：<code>(a &amp;&amp; b) || (c &amp;&amp; d)</code>。</p></blockquote><h3 id="（非）"><a href="#（非）" class="headerlink" title="!（非）"></a>!（非）</h3><p>感叹符号 <code>!</code> 表示布尔非运算符。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">result <span class="token operator">=</span> <span class="token operator">!</span>value<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>逻辑非运算符接受一个参数，并按如下运作：</p><ol><li>将操作数转化为布尔类型：<code>true/false</code>。</li><li>返回相反的值。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p><strong>应用一、两个非运算 <code>!!</code> 有时候用来将某个值转化为布尔类型。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token string">"non-empty string"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>第一个非运算将该值转化为布尔类型并取反</li><li>第二个非运算再次取反</li><li>最后我们就得到了一个任意值到布尔值的转化</li></ul><h4 id="Boolean-函数"><a href="#Boolean-函数" class="headerlink" title="Boolean 函数"></a><code>Boolean</code> 函数</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"non-empty string"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>非运算符 <code>!</code> 的优先级在所有逻辑运算符里面最高，所以它总是在 <code>&amp;&amp;</code> 和 <code>||</code> 之前执行。</p></blockquote><h2 id="4、空值合并运算符"><a href="#4、空值合并运算符" class="headerlink" title="4、空值合并运算符 ??"></a>4、空值合并运算符 ??</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>空值合并运算符（nullish coalescing operator）的写法为两个问号 <code>??</code>。</p><p>当一个值既不是 <code>null</code> 也不是 <code>undefined</code> 时，我们将其称为“已定义的（defined）”。</p><p><code>a ?? b</code> 的结果是：</p><ul><li>如果 <code>a</code> 是已定义的，则结果为 <code>a</code>，</li><li>如果 <code>a</code> 不是已定义的，则结果为 <code>b</code>。</li></ul><p>如果第一个参数不是 <code>null/undefined</code>，则 <code>??</code> 返回第一个参数。否则返回第二个参数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">??</span> b<span class="token comment">// 等价于</span>result <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>??</code> 可以从一系列的值中选择出第一个非 <code>null/undefined</code> 的值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> firstName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">let</span> lastName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">let</span> nickName <span class="token operator">=</span> <span class="token string">"Supercoder"</span><span class="token punctuation">;</span><span class="token comment">// 显示第一个已定义的值：</span><span class="token function">alert</span><span class="token punctuation">(</span>firstName <span class="token operator">??</span> lastName <span class="token operator">??</span> nickName <span class="token operator">??</span> <span class="token string">"匿名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Supercoder</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="VS"><a href="#VS" class="headerlink" title="?? VS ||"></a>?? VS ||</h3><p>?? VS ||  之间重要的区别是：</p><ul><li><code>||</code> 返回第一个 <strong>真</strong> 值。</li><li><code>??</code> 返回第一个 <strong>已定义的</strong> 值。</li></ul><p>换句话说，<code>||</code> 无法区分 <code>false</code>、<code>0</code>、空字符串 <code>&quot;&quot;</code> 和 <code>null/undefined</code>。它们都一样 —— 假值（falsy values）。如果其中任何一个是 <code>||</code> 的第一个参数，那么我们将得到第二个参数作为结果。</p><p>不过在实际中，我们可能只想在变量的值为 <code>null/undefined</code> 时使用默认值。也就是说，当该值确实未知或未被设置时。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>height <span class="token operator">||</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span><span class="token function">alert</span><span class="token punctuation">(</span>height <span class="token operator">??</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>height || 100</code> 首先会检查 <code>height</code> 是否为一个假值，它是 <code>0</code>，确实是假值。所以，<code>||</code> 运算的结果为第二个参数，<code>100</code>。</li><li><code>height ?? 100</code> 首先会检查 <code>height</code> 是否为 <code>null/undefined</code>，发现它不是。所以，结果为 <code>height</code> 的原始值，<code>0</code>。</li></ul><p>实际上，高度 <code>0</code> 通常是一个有效值，它不应该被替换为默认值。所以 <code>??</code> 运算得到的是正确的结果。</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p><code>??</code> 运算符的优先级与 <code>||</code> 相同，它们的优先级都为 <code>3</code>，空值合并运算符在 <code>=</code> 和 <code>?</code> 运算前计算，但在大多数其他运算（例如 <code>+</code> 和 <code>*</code>）之后计算。所以我们可能需要在这样的表达式中添加括号：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> height <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">let</span> width <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 重要：使用括号</span><span class="token keyword">let</span> area <span class="token operator">=</span> <span class="token punctuation">(</span>height <span class="token operator">??</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>width <span class="token operator">??</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、switch-语句"><a href="#5、switch-语句" class="headerlink" title="5、switch 语句"></a>5、switch 语句</h2><p><code>switch</code> 语句可以替代多个 <code>if</code> 判断。</p><p><code>switch</code> 语句为多分支选择的情况提供了一个更具描述性的方式。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p><code>switch</code> 语句有至少一个 <code>case</code> 代码块和一个可选的 <code>default</code> 代码块。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">switch</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> <span class="token string">'value1'</span><span class="token operator">:</span>  <span class="token comment">// if (x === 'value1')</span>    <span class="token operator">...</span>    <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">]</span>  <span class="token keyword">case</span> <span class="token string">'value2'</span><span class="token operator">:</span>  <span class="token comment">// if (x === 'value2')</span>    <span class="token operator">...</span>    <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">]</span>  <span class="token keyword">default</span><span class="token operator">:</span>    <span class="token operator">...</span>    <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>比较 <code>x</code> 值与第一个 <code>case</code>（也就是 <code>value1</code>）是否严格相等，然后比较第二个 <code>case</code>（<code>value2</code>）以此类推。</li><li>如果相等，<code>switch</code> 语句就执行相应 <code>case</code> 下的代码块，直到遇到最靠近的 <code>break</code> 语句（或者直到 <code>switch</code> 语句末尾）。</li><li>如果没有符合的 case，则执行 <code>default</code> 代码块（如果 <code>default</code> 存在）。</li></ul><blockquote><p><strong>如果没有 <code>break</code>，程序将不经过任何检查就会继续执行下一个 <code>case</code>。</strong></p></blockquote><p>无 <code>break</code> 的例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>    <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'Too small'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>    <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'Exactly!'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>    <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'Too big'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token operator">:</span>    <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">"I don't know such values"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果会连续执行三个 <code>alert</code>：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'Exactly!'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'Too big'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">"I don't know such values"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>任何表达式都可以成为</strong> <code>switch/case</code> <strong>的参数</strong></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token operator">+</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">:</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"this runs, because +a is 1, exactly equals b+1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token operator">:</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"this doesn't run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这里 <code>+a</code> 返回 <code>1</code>，这个值跟 <code>case</code> 中 <code>b + 1</code> 相比较，然后执行对应的代码。</li></ul><h3 id="case-分组"><a href="#case-分组" class="headerlink" title="case 分组"></a>case 分组</h3><p>共享同一段代码的几个 <code>case</code> 分支可以被分为一组：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Right!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token comment">// (*) 下面这两个 case 被分在一组</span>  <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Wrong!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Why don't you take a math class?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token operator">:</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'The result is strange. Really.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>现在 <code>3</code> 和 <code>5</code> 都显示相同的信息。</li></ul><p><code>switch/case</code> 有通过 case 进行“分组”的能力，其实是 switch 语句没有 <code>break</code> 时的副作用。因为没有 <code>break</code>，<code>case 3</code> 会从 <code>(*)</code> 行执行到 <code>case 5</code>。</p><h3 id="类型很关键"><a href="#类型很关键" class="headerlink" title="类型很关键"></a>类型很关键</h3><p><strong>强调一下，这里的相等是严格相等。被比较的值必须是相同的类型才能进行匹配。</strong></p><p>比如，我们来看下面的代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arg <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"Enter a value?"</span><span class="token punctuation">)</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> <span class="token string">'0'</span><span class="token operator">:</span>  <span class="token keyword">case</span> <span class="token string">'1'</span><span class="token operator">:</span>    <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'One or zero'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">'2'</span><span class="token operator">:</span>    <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'Two'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>    <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'Never executes!'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token operator">:</span>    <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'An unknown value'</span> <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在 <code>prompt</code> 对话框输入 <code>0</code>、<code>1</code>，第一个 <code>alert</code> 弹出。</li><li>输入 <code>2</code>，第二个 <code>alert</code> 弹出。</li><li>但是输入 <code>3</code>，因为 <code>prompt</code> 的结果是字符串类型的 <code>&quot;3&quot;</code>，不严格相等 <code>===</code> 于数字类型的 <code>3</code>，所以 <code>case 3</code> 不会执行！因此 <code>case 3</code> 部分是一段无效代码。所以会执行 <code>default</code> 分支。</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八、JavaScript值的比较</title>
      <link href="/posts/bbe02296.html"/>
      <url>/posts/bbe02296.html</url>
      
        <content type="html"><![CDATA[<h1 id="八、JavaScript-值的比较"><a href="#八、JavaScript-值的比较" class="headerlink" title="八、JavaScript 值的比较"></a>八、JavaScript 值的比较</h1><h2 id="1、比较结果为-Boolean-类型"><a href="#1、比较结果为-Boolean-类型" class="headerlink" title="1、比较结果为 Boolean 类型"></a>1、比较结果为 Boolean 类型</h2><p>所有比较运算符均返回布尔值：</p><ul><li><code>true</code> —— 表示“yes（是）”，“correct（正确）”或“the truth（真）”。</li><li><code>false</code> —— 表示“no（否）”，“wrong（错误）”或“not the truth（非真）”。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true（正确）</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false（错误）</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true（正确）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>和其他类型的值一样，比较的结果可以被赋值给任意变量：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 把比较的结果赋值给 result</span><span class="token function">alert</span><span class="token punctuation">(</span> result <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2、字符串比较"><a href="#2、字符串比较" class="headerlink" title="2、字符串比较"></a>2、字符串比较</h2><p>在比较字符串的大小时，JavaScript 会使用“字典（dictionary）”或“词典（lexicographical）”顺序进行判定。</p><p><strong>换言之，字符串是按字符（母）逐个进行比较的。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'Z'</span> <span class="token operator">></span> <span class="token string">'A'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'Glow'</span> <span class="token operator">></span> <span class="token string">'Glee'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'Bee'</span> <span class="token operator">></span> <span class="token string">'Be'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="字符串的比较算法"><a href="#字符串的比较算法" class="headerlink" title="字符串的比较算法"></a>字符串的比较算法</h3><ol><li>首先比较两个字符串的首位字符大小。</li><li>如果一方字符较大（或较小），则该字符串大于（或小于）另一个字符串。算法结束。</li><li>否则，如果两个字符串的首位字符相等，则继续取出两个字符串各自的后一位字符进行比较。</li><li>重复上述步骤进行比较，直到比较完成某字符串的所有字符为止。</li><li>如果两个字符串的字符同时用完，那么则判定它们相等，否则未结束（还有未比较的字符）的字符串更大。</li></ol><p>在第二个例子中，字符串 <code>Glow</code> 与 <code>Glee</code> 的比较则需要更多步骤，因为需要逐个字符进行比较：</p><ol><li><code>G</code> 和 <code>G</code> 相等。</li><li><code>l</code> 和 <code>l</code> 相等。</li><li><code>o</code> 比 <code>e</code> 大，算法停止，第一个字符串大于第二个。</li></ol><blockquote><p><strong>非真正的字典顺序，而是 Unicode 编码顺序</strong></p></blockquote><h2 id="3、不同类型间的比较"><a href="#3、不同类型间的比较" class="headerlink" title="3、不同类型间的比较"></a>3、不同类型间的比较</h2><p>当对不同类型的值进行比较时，JavaScript 会首先将其转化为数字（number）再判定大小。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'2'</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，字符串 '2' 会被转化为数字 2</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'01'</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，字符串 '01' 会被转化为数字 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于布尔类型值，<code>true</code> 会被转化为 <code>1</code>、<code>false</code> 转化为 <code>0</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">false</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4、严格相等"><a href="#4、严格相等" class="headerlink" title="4、严格相等"></a>4、严格相等</h2><h3 id="Why？"><a href="#Why？" class="headerlink" title="Why？"></a>Why？</h3><p>普通的相等性检查 <code>==</code> 存在一个问题，它不能区分出 <code>0</code> 和 <code>false</code>，也同样无法区分空字符串和 <code>false</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">''</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>这是因为在比较不同类型的值时，处于相等判断符号 <code>==</code> 两侧的值会先被转化为数字。空字符串和 <code>false</code> 也是如此，转化后它们都为数字 0。</li></ul><p>如果我们需要区分 <code>0</code> 和 <code>false</code>，该怎么办？</p><h3 id="严格相等"><a href="#严格相等" class="headerlink" title="严格相等 &#x3D;&#x3D;&#x3D;"></a>严格相等 &#x3D;&#x3D;&#x3D;</h3><p><strong>严格相等运算符 <code>===</code> 在进行比较时不会做任何的类型转换，“严格不相等”表示为 <code>!==</code>。</strong></p><p>换句话说，如果 <code>a</code> 和 <code>b</code> 属于不同的数据类型，那么 <code>a === b</code> 不会做任何的类型转换而立刻返回 <code>false</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false，因为被比较值的数据类型不同</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>严格相等的运算符虽然写起来稍微长一些，但是它能够很清楚地显示代码意图，降低你犯错的可能性。</p></blockquote><h2 id="5、null-和-undefined-比较"><a href="#5、null-和-undefined-比较" class="headerlink" title="5、null 和 undefined 比较"></a>5、null 和 undefined 比较</h2><p>当使用 <code>null</code> 或 <code>undefined</code> 与其他值进行比较时，其返回结果常常出乎你的意料：</p><h3 id="使用严格相等-比较"><a href="#使用严格相等-比较" class="headerlink" title="使用严格相等 === 比较"></a>使用严格相等 <code>===</code> 比较</h3><p>它们不相等，因为它们属于不同的类型。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用非严格相等-比较"><a href="#使用非严格相等-比较" class="headerlink" title="使用非严格相等 == 比较"></a>使用非严格相等 <code>==</code> 比较</h3><p>JavaScript 存在一个特殊的规则，会判定它们相等。它们俩就像“一对恋人”，仅仅等于对方而不等于其他任何的值（只在非严格相等下成立）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong><code>undefined</code> 只与 <code>null</code> 相等，不会与其他值相等。</strong></li></ul><h3 id="使用数学式或-比较"><a href="#使用数学式或-比较" class="headerlink" title="使用数学式或 &lt; &gt; &lt;= &gt;= 比较"></a>使用数学式或 <code>&lt; &gt; &lt;= &gt;=</code> 比较</h3><p><code>null/undefined</code> 会被转化为数字：<code>null</code> 被转化为 <code>0</code>，<code>undefined</code> 被转化为 <code>NaN</code>。</p><h3 id="奇怪的结果：null-vs-0"><a href="#奇怪的结果：null-vs-0" class="headerlink" title="奇怪的结果：null vs 0"></a>奇怪的结果：null vs 0</h3><p>通过比较 <code>null</code> 和 0 可得：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (1) false</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (2) false</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (3) true ???????</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为什么会出现这种反常结果，这是因为相等性检查 <code>==</code> 和普通比较符 <code>&gt; &lt; &gt;= &lt;=</code> 的代码逻辑是相互独立的。进行值的比较时，<code>null</code> 会被转化为数字，因此它被转化为了 <code>0</code>。这就是为什么（3）中 <code>null &gt;= 0</code> 返回值是 true，（1）中 <code>null &gt; 0</code> 返回值是 false。</p><p>另一方面，<code>undefined</code> 和 <code>null</code> 在相等性检查 <code>==</code> 中不会进行任何的类型转换，它们有自己独立的比较规则，所以除了它们之间互等外，不会等于任何其他的值。这就解释了为什么（2）中 <code>null == 0</code> 会返回 false。</p><h3 id="特立独行的-undefined"><a href="#特立独行的-undefined" class="headerlink" title="特立独行的 undefined"></a>特立独行的 undefined</h3><p><code>undefined</code> 不应该被与其他值进行比较：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">undefined</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false (1)</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">undefined</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false (2)</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false (3)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>(1)</code> 和 <code>(2)</code> 都返回 <code>false</code> 是因为 <code>undefined</code> 在比较中被转换为了 <code>NaN</code>，而 <code>NaN</code> 是一个特殊的数值型值，它与任何值进行比较都会返回 <code>false</code>。</li><li><code>(3)</code> 返回 <code>false</code> 是因为这是一个相等性检查，而 <code>undefined</code> 只与 <code>null</code> 相等，不会与其他值相等。</li></ul><h3 id="避免问题"><a href="#避免问题" class="headerlink" title="避免问题"></a>避免问题</h3><ul><li>除了严格相等 <code>===</code> 外，其他但凡是有 <code>undefined/null</code> 参与的比较，我们都需要格外小心。</li><li>除非你非常清楚自己在做什么，否则永远不要使用 <code>&gt;= &gt; &lt; &lt;=</code> 去比较一个可能为 <code>null/undefined</code> 的变量。对于取值可能是 <code>null/undefined</code> 的变量，请按需要分别检查它的取值情况。</li></ul><h2 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h2><ul><li>比较运算符始终返回布尔值。</li><li>字符串的比较，会按照“词典”顺序逐字符地比较大小。</li><li>当对不同类型的值进行比较时，它们会先被转化为数字（不包括严格相等检查）再进行比较。</li><li>在非严格相等 <code>==</code> 下，<code>null</code> 和 <code>undefined</code> 相等且各自不等于任何其他的值。</li><li>在使用 <code>&gt;</code> 或 <code>&lt;</code> 进行比较时，需要注意变量可能为 <code>null/undefined</code> 的情况。比较好的方法是单独检查变量是否等于 <code>null/undefined</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七、JavaScript逻辑运算</title>
      <link href="/posts/7fd84e3b.html"/>
      <url>/posts/7fd84e3b.html</url>
      
        <content type="html"><![CDATA[<h1 id="七、JavaScript-逻辑运算"><a href="#七、JavaScript-逻辑运算" class="headerlink" title="七、JavaScript 逻辑运算"></a>七、JavaScript 逻辑运算</h1><h2 id="1、基本术语"><a href="#1、基本术语" class="headerlink" title="1、基本术语"></a>1、基本术语</h2><h3 id="运算元"><a href="#运算元" class="headerlink" title="运算元"></a>运算元</h3><ul><li><strong>运算元</strong> —— 运算符应用的对象。比如说乘法运算 <code>5 * 2</code>，有两个运算元：左运算元 <code>5</code> 和右运算元 <code>2</code>。有时候人们也称其为“参数”而不是“运算元”。</li></ul><h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h3><ul><li><p>如果一个运算符对应的只有一个运算元，那么它是 <strong>一元运算符</strong>。比如说一元负号运算符（unary negation）<code>-</code>，它的作用是对数字进行正负转换：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1，一元负号运算符生效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a>二元运算符</h3><p>如果一个运算符拥有两个运算元，那么它是 <strong>二元运算符</strong>。减号还存在二元运算符形式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> y <span class="token operator">-</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2，二元运算符减号做减运算</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>严格地说，在上面的示例中，我们使用一个相同的符号表征了两个不同的运算符：</p><ol><li><strong>负号运算符</strong>，即反转符号的一元运算符</li><li><strong>减法运算符</strong>，是从另一个数减去一个数的二元运算符</li></ol></blockquote><h2 id="2、数学运算"><a href="#2、数学运算" class="headerlink" title="2、数学运算"></a>2、数学运算</h2><p>支持以下数学运算：</p><ul><li>加法 <code>+</code>,</li><li>减法 <code>-</code>,</li><li>乘法 <code>*</code>,</li><li>除法 <code>/</code>,</li><li>取余 <code>%</code>,</li><li>求幂 <code>**</code>.</li></ul><h3 id="取余"><a href="#取余" class="headerlink" title="取余 %"></a>取余 %</h3><p>取余运算符是 <code>%</code>，尽管它看起来很像百分数，但实际并无关联。</p><p><code>a % b</code> 的结果是 <code>a</code> 整除 <code>b</code> 的 余数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">5</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1，5 除以 2 的余数</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">8</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2，8 除以 3 的余数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="求幂"><a href="#求幂" class="headerlink" title="求幂 **"></a>求幂 **</h3><p>求幂运算 <code>a ** b</code> 将 <code>a</code> 提升至 <code>a</code> 的 <code>b</code> 次幂。在数学运算中我们将其表示为 a ^ b。</p><p>幂运算也适用于非整数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2² = 4</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2³ = 8</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2⁴ = 16</span><span class="token comment">// 平方根是指数为 ½ 的幂运算</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2（1/2 次方与平方根相同)</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">8</span> <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2（1/3 次方与立方根相同)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title="+"></a>+</h3><h4 id="二元运算符-1"><a href="#二元运算符-1" class="headerlink" title="二元运算符"></a>二元运算符</h4><ul><li>通常，加号 <code>+</code> 用于求和。</li><li>如果加号 <code>+</code> 被应用于字符串，它将合并（连接）各个字符串</li><li><strong>运算符是按顺序工作。</strong></li><li>注意：只要任意一个运算元是字符串，那么另一个运算元也将被转化为字符串。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">"my"</span> <span class="token operator">+</span> <span class="token string">"string"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mystring</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'1'</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "12"</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'1'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "21"</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'1'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "41"，不是 "221"</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'1'</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "122"，不是 "14"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>二元 <code>+</code> 是唯一一个以这种方式支持字符串的运算符。其他算术运算符只对数字起作用，并且总是将其运算元转换为数字。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">6</span> <span class="token operator">-</span> <span class="token string">'2'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4，将 '2' 转换为数字</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'6'</span> <span class="token operator">/</span> <span class="token string">'2'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3，将两个运算元都转换为数字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="一元运算符-1"><a href="#一元运算符-1" class="headerlink" title="一元运算符"></a>一元运算符</h4><p>加号 <code>+</code> 应用于单个值，对数字没有任何作用。但是如果运算元不是数字，加号 <code>+</code> 则会将其转化为数字。</p><p>它的效果和 <code>Number(...)</code> 相同，但是更加简短。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 对数字无效</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token operator">+</span>x <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token operator">+</span>y <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -2</span><span class="token comment">// 转化非数字</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token operator">+</span><span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token operator">+</span><span class="token string">""</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二元运算符加号会把它们合并成字符串：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> apples <span class="token operator">=</span> <span class="token string">"2"</span><span class="token punctuation">;</span><span class="token keyword">let</span> oranges <span class="token operator">=</span> <span class="token string">"3"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> apples <span class="token operator">+</span> oranges <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "23"，二元运算符加号合并字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们想把它们当做数字对待，我们需要转化它们，然后再求和：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> apples <span class="token operator">=</span> <span class="token string">"2"</span><span class="token punctuation">;</span><span class="token keyword">let</span> oranges <span class="token operator">=</span> <span class="token string">"3"</span><span class="token punctuation">;</span><span class="token comment">// 在二元运算符加号起作用之前，所有的值都被转化为了数字</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token operator">+</span>apples <span class="token operator">+</span> <span class="token operator">+</span>oranges <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span><span class="token comment">// 更长的写法</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Number</span><span class="token punctuation">(</span>apples<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>oranges<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、运算符优先级"><a href="#3、运算符优先级" class="headerlink" title="3、运算符优先级"></a>3、运算符优先级</h2><p>如果一个表达式拥有超过一个运算符，执行的顺序则由 <strong>优先级</strong> 决定。换句话说，所有的运算符中都隐含着优先级顺序。</p><p><strong>在 JavaScript 中有众多运算符。每个运算符都有对应的优先级数字。数字越大，越先执行。如果优先级相同，则按照由左至右的顺序执行。</strong></p><table><thead><tr><th align="left">优先级</th><th align="left">名称</th><th align="left">符号</th></tr></thead><tbody><tr><td align="left">…</td><td align="left">…</td><td align="left">…</td></tr><tr><td align="left">15</td><td align="left">一元加号</td><td align="left"><code>+</code></td></tr><tr><td align="left">15</td><td align="left">一元负号</td><td align="left"><code>-</code></td></tr><tr><td align="left">14</td><td align="left">求幂</td><td align="left"><code>**</code></td></tr><tr><td align="left">13</td><td align="left">乘号</td><td align="left"><code>*</code></td></tr><tr><td align="left">13</td><td align="left">除号</td><td align="left"><code>/</code></td></tr><tr><td align="left">12</td><td align="left">加号</td><td align="left"><code>+</code></td></tr><tr><td align="left">12</td><td align="left">减号</td><td align="left"><code>-</code></td></tr><tr><td align="left">…</td><td align="left">…</td><td align="left">…</td></tr><tr><td align="left">2</td><td align="left">赋值符</td><td align="left"><code>=</code></td></tr><tr><td align="left">…</td><td align="left">…</td><td align="left">…</td></tr></tbody></table><p>注：摘自 Mozilla 的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">优先级表</a></p><p>我们可以看到，“一元加号运算符”的优先级是 <code>15</code>，高于“二元加号运算符”的优先级 <code>12</code>。这也是为什么表达式 <code>&quot;+apples + +oranges&quot;</code> 中的一元加号先生效，然后才是二元加法。</p><h2 id="4、赋值运算符"><a href="#4、赋值运算符" class="headerlink" title="4、赋值运算符"></a>4、赋值运算符</h2><p>我们知道赋值符号 <code>=</code> 也是一个运算符。<strong>从优先级表中可以看到它的优先级非常低，只有 <code>2</code>。</strong></p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值 &#x3D;"></a>赋值 &#x3D;</h3><p><strong><code>=</code> 是一个运算符，语句 <code>x = value</code> 将值 <code>value</code> 写入 <code>x</code> 然后返回 value</strong>。</p><p>在 JavaScript 中，所有运算符都会返回一个值。这对于 <code>+</code> 和 <code>-</code> 来说是显而易见的，但对于 <code>=</code> 来说也是如此。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token function">alert</span><span class="token punctuation">(</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链式赋值"><a href="#链式赋值" class="headerlink" title="链式赋值"></a>链式赋值</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span><span class="token function">alert</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span><span class="token function">alert</span><span class="token punctuation">(</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>链式赋值从右到左进行计算。首先，对最右边的表达式 <code>2 + 2</code> 求值，然后将其赋给左边的变量：<code>c</code>、<code>b</code> 和 <code>a</code>。最后，所有的变量共享一个值。</li></ul><p>同样出于可读性，最好将这种代码分成几行：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">c <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>b <span class="token operator">=</span> c<span class="token punctuation">;</span>a <span class="token operator">=</span> c<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样可读性更强，尤其是在快速浏览代码的时候。</p><h2 id="5、原地修改"><a href="#5、原地修改" class="headerlink" title="5、原地修改"></a>5、原地修改</h2><p>我们经常需要对一个变量做运算，并 <strong>将新的结果存储在同一个变量中</strong>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>n <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以使用运算符 <code>+=</code> 和 <code>*=</code> 来缩写这种表示。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>n <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 现在 n = 7（等同于 n = n + 5）</span>n <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 现在 n = 14（等同于 n = n * 2）</span><span class="token function">alert</span><span class="token punctuation">(</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>所有算术和位运算符都有简短的“修改并赋值”运算符：<code>/=</code> 和 <code>-=</code> 等。</strong></p><p>这类运算符的优先级与普通赋值运算符的优先级相同，所以它们在大多数其他运算之后执行：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>n <span class="token operator">*=</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 16 （右边部分先被计算，等同于 n *= 8）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、自增-自减"><a href="#6、自增-自减" class="headerlink" title="6、自增&#x2F;自减"></a>6、自增&#x2F;自减</h2><p>对一个数进行加一、减一是最常见的数学运算符之一。所以，对此有一些专门的运算符。</p><h3 id="自增"><a href="#自增" class="headerlink" title="自增 ++"></a>自增 ++</h3><p><strong>自增</strong> <code>++</code> 将变量与 1 相加：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>counter<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token function">alert</span><span class="token punctuation">(</span> counter <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>和 counter &#x3D; counter + 1 效果一样，但是更简洁</li></ul><h3 id="自减-–"><a href="#自减-–" class="headerlink" title="自减 –"></a>自减 –</h3><p><strong>自减</strong> <code>--</code> 将变量与 1 相减：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>counter<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span> counter <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>和 counter &#x3D; counter - 1 效果一样，但是更简洁</li></ul><blockquote><p>自增&#x2F;自减只能应用于变量。试一下，将其应用于数值（比如 <code>5++</code>）则会报错。</p></blockquote><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>运算符 <code>++</code> 和 <code>--</code> 可以置于变量前，也可以置于变量后：</p><ul><li>当运算符置于变量后，被称为“后置形式”：<code>counter++</code>。</li><li>当运算符置于变量前，被称为“前置形式”：<code>++counter</code>。</li><li><strong>前置形式返回一个新的值，后置返回原来的值。</strong></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token operator">++</span>counter<span class="token punctuation">;</span> <span class="token comment">// (*)</span><span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> counter<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// (*) 将 ++counter 改为 counter++</span><span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、位运算符"><a href="#7、位运算符" class="headerlink" title="7、位运算符"></a>7、位运算符</h2><p>位运算符把运算元当做 32 位整数，并在它们的二进制表现形式上操作。</p><p>下面是位运算符：</p><ul><li>按位与 ( <code>&amp;</code> )</li><li>按位或 ( <code>|</code> )</li><li>按位异或 ( <code>^</code> )</li><li>按位非 ( <code>~</code> )</li><li>左移 ( <code>&lt;&lt;</code> )</li><li>右移 ( <code>&gt;&gt;</code> )</li><li>无符号右移 ( <code>&gt;&gt;&gt;</code> )</li></ul><p>这些运算符很少被使用，一般是我们需要在最低级别（位）上操作数字时才使用。</p><h2 id="8、逗号运算符"><a href="#8、逗号运算符" class="headerlink" title="8、逗号运算符"></a>8、逗号运算符</h2><h3 id="How-use？"><a href="#How-use？" class="headerlink" title="How use？"></a>How use？</h3><p>逗号运算符 <code>,</code> 是最少见最不常使用的运算符之一。</p><p><strong>逗号运算符能让我们处理多个表达式，使用 <code>,</code> 将它们分开。每个表达式都运行了，但是只有最后一个的结果会被返回。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7（3 + 4 的结果）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里，第一个表达式 <code>1 + 2</code> 运行了，但是它的结果被丢弃了。随后计算 <code>3 + 4</code>，并且该计算结果被返回。</p><h3 id="优先级非常低"><a href="#优先级非常低" class="headerlink" title="优先级非常低"></a>优先级非常低</h3><p><strong>请注意逗号运算符的优先级非常低，比 <code>=</code> 还要低。</strong>因此上面你的例子中圆括号非常重要。</p><p>如果没有圆括号：<code>a = 1 + 2, 3 + 4</code> 会先执行 <code>+</code>，将数值相加得到 <code>a = 3, 7</code>，然后赋值运算符 <code>=</code> 执行 <code>a = 3</code>，然后逗号之后的数值 <code>7</code> 不会再执行，它被忽略掉了。相当于 <code>(a = 1 + 2), 3 + 4</code>。</p><h3 id="Why-use？"><a href="#Why-use？" class="headerlink" title="Why use？"></a>Why use？</h3><p>为什么我们需要这样一个运算符，它只返回最后一个值呢？</p><p>有时候，人们会使用它把几个行为放在一行上来进行复杂的运算。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 一行上有三个运算符</span><span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> c <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> a <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、JavaScript类型转换</title>
      <link href="/posts/7260d53d.html"/>
      <url>/posts/7260d53d.html</url>
      
        <content type="html"><![CDATA[<h1 id="六、JavaScript-类型转换"><a href="#六、JavaScript-类型转换" class="headerlink" title="六、JavaScript 类型转换"></a>六、JavaScript 类型转换</h1><p>大多数情况下，运算符和函数会自动将赋予它们的值转换为正确的类型。在某些情况下，我们需要将值显式地转换为我们期望的类型。</p><p>有三种常用的类型转换：转换为 string 类型、转换为 number 类型和转换为 boolean 类型。</p><h2 id="1、字符串转换"><a href="#1、字符串转换" class="headerlink" title="1、字符串转换"></a>1、字符串转换</h2><p>当我们需要一个字符串形式的值时，就会进行字符串转换。比如，<code>alert(value)</code> 将 <code>value</code> 转换为字符串类型，然后显示这个值。</p><p>我们也可以显式地调用 <code>String(value)</code> 来将 <code>value</code> 转换为字符串类型：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boolean</span>value <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 现在，值是一个字符串形式的 "true"</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字符串转换最明显。<code>false</code> 变成 <code>&quot;false&quot;</code>，<code>null</code> 变成 <code>&quot;null&quot;</code> 等。</li></ul><h2 id="2、数字型转换"><a href="#2、数字型转换" class="headerlink" title="2、数字型转换"></a>2、数字型转换</h2><h3 id="转换方式"><a href="#转换方式" class="headerlink" title="转换方式"></a>转换方式</h3><p><strong>在算术函数和表达式中，会自动进行 number 类型转换。</strong></p><p>比如，当把除法 <code>/</code> 用于非 number 类型：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">"6"</span> <span class="token operator">/</span> <span class="token string">"2"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3, string 类型的值被自动转换成 number 类型后进行计算</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们也可以使用 <code>Number(value)</code> 显式地将这个 <code>value</code> 转换为 number 类型。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 变成 number 类型 123</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当我们从 string 类型源（如文本表单）中读取一个值，但期望输入一个数字时，通常需要进行显式转换。</li></ul><p><strong>如果该字符串不是一个有效的数字，转换的结果会是 <code>NaN</code>。</strong>例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"an arbitrary string instead of a number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN，转换失败</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="number-类型转换规则"><a href="#number-类型转换规则" class="headerlink" title="number 类型转换规则"></a>number 类型转换规则</h3><table><thead><tr><th align="left">值</th><th align="left">变成……</th></tr></thead><tbody><tr><td align="left"><code>undefined</code></td><td align="left"><code>NaN</code></td></tr><tr><td align="left"><code>null</code></td><td align="left"><code>0</code></td></tr><tr><td align="left"><code>true 和 false</code></td><td align="left"><code>1</code> and <code>0</code></td></tr><tr><td align="left"><code>string</code></td><td align="left">去掉首尾空白字符（空格、换行符 <code>\n</code>、制表符 <code>\t</code> 等）后的纯数字字符串中含有的数字。如果剩余字符串为空，则转换结果为 <code>0</code>。否则，将会从剩余字符串中“读取”数字。当类型转换出现 error 时返回 <code>NaN</code>。</td></tr></tbody></table><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/javascript-note/20240725100003.png" alt="number 类型转换"></p><blockquote><p>请注意 <code>null</code> 和 <code>undefined</code> 在这有点不同：<code>null</code> 变成数字 <code>0</code>，<code>undefined</code> 变成 <code>NaN</code>。</p></blockquote><h2 id="3、布尔型转换"><a href="#3、布尔型转换" class="headerlink" title="3、布尔型转换"></a>3、布尔型转换</h2><p><strong>布尔（boolean）类型转换是最简单的一个。</strong></p><p>它发生在逻辑运算中（稍后我们将进行条件判断和其他类似的东西），但是也可以通过调用 Boolean(value) 显式地进行转换。</p><h3 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h3><table><thead><tr><th align="left">值</th><th align="left">变成……</th></tr></thead><tbody><tr><td align="left"><code>0</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code>, <code>&quot;&quot;</code></td><td align="left"><code>false</code></td></tr><tr><td align="left">其他值</td><td align="left"><code>true</code></td></tr></tbody></table><ul><li>直观上为“空”的值（如 <code>0</code>、空字符串、<code>null</code>、<code>undefined</code> 和 <code>NaN</code>）将变为 <code>false</code>。其他值变成 <code>true</code>。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>请注意：包含 0 的字符串 <code>&quot;0&quot;</code> 是 <code>true</code></strong></p></blockquote><p><strong>在 JavaScript 中，非空的字符串总是 <code>true</code>。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空格，也是 true（任何非空字符串都是 true）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Poems For You</title>
      <link href="/posts/67e7e410.html"/>
      <url>/posts/67e7e410.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>九、Spring depend-on使用方式</title>
      <link href="/posts/8a50cf4c.html"/>
      <url>/posts/8a50cf4c.html</url>
      
        <content type="html"><![CDATA[<h1 id="九、Spring-depend-on-使用方式"><a href="#九、Spring-depend-on-使用方式" class="headerlink" title="九、Spring depend-on 使用方式"></a>九、Spring depend-on 使用方式</h1><h2 id="1、无依赖-Bean-创建和销毁执行顺序"><a href="#1、无依赖-Bean-创建和销毁执行顺序" class="headerlink" title="1、无依赖 Bean 创建和销毁执行顺序"></a>1、无依赖 Bean 创建和销毁执行顺序</h2><p>我们先来看一下没有任何依赖的 bean 的创建和销毁的顺序。下面的 xml 中定义了 3 个 bean：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo7.NormalBean$Bean3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo7.NormalBean$Bean2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo7.NormalBean$Bean1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意上面 xml 中 bean 定义顺序是：bean3、bean2、bean1。</li></ul><p>对应 java 代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 无任何依赖的bean创建的顺序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalBean</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean1</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" constructor!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" destroy()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean2</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">Bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" constructor!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" destroy()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean3</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">Bean3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" constructor!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" destroy()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>   <strong>DisposableBean 接口</strong></p><p>   DisposableBean 是 spring 容器提供的一个接口，接口中有个 destroy 方法，我们的 bean 类可以实现这个接口，当我们调用容器的 close 方法关闭容器的时候，spring 会调用容器中所有 bean 的 destory 方法，用来做一些清理的工作。</p></blockquote><p>下面我们来测试一下 spring 容器启动和关闭的过程中，定义的 3 个 bean 的创建和销毁的顺序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependOnTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 无依赖的bean创建和销毁的顺序     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">normalBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"容器启动中!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo7/normalBean.xml"</span><span class="token punctuation">;</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">IocUtils</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"容器启动完毕，准备关闭spring容器!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭容器</span>        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"spring容器已关闭!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行上面的 <code>normalBean </code>方法，输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">容器启动中<span class="token operator">!</span>class com.javacode.lesson.demo7.NormalBean<span class="token variable">$Bean3</span> constructor<span class="token operator">!</span>class com.javacode.lesson.demo7.NormalBean<span class="token variable">$Bean2</span> constructor<span class="token operator">!</span>class com.javacode.lesson.demo7.NormalBean<span class="token variable">$Bean1</span> constructor<span class="token operator">!</span>容器启动完毕，准备关闭spring容器<span class="token operator">!</span>class com.javacode.lesson.demo7.NormalBean<span class="token variable">$Bean1</span> destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>class com.javacode.lesson.demo7.NormalBean<span class="token variable">$Bean2</span> destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>class com.javacode.lesson.demo7.NormalBean<span class="token variable">$Bean3</span> destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>spring容器已关闭<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Bean 的定义结合上面输出我们来对比一下：</p><table><thead><tr><th>Bean 定义顺序</th><th>创建顺序</th><th>销毁顺序</th></tr></thead><tbody><tr><td>bean3</td><td>bean3</td><td>bean1</td></tr><tr><td>bean2</td><td>bean2</td><td>bean2</td></tr><tr><td>bean1</td><td>bean1</td><td>bean3</td></tr></tbody></table><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>从输出中可以得到 2 点结论：</p><ol><li><strong>Bean 对象的创建顺序和 Bean xml 中定义的顺序一致</strong></li><li><strong>Bean 销毁的顺序和 Bean xml 中定义的顺序相反</strong></li></ol><h2 id="2、通过构造器强依赖-Bean-创建和销毁顺序"><a href="#2、通过构造器强依赖-Bean-创建和销毁顺序" class="headerlink" title="2、通过构造器强依赖 Bean 创建和销毁顺序"></a>2、通过构造器强依赖 Bean 创建和销毁顺序</h2><p>我们将上面案例改造一下，通过构造函数注入的方式使 Bean 之间产生强依赖。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 强依赖的bean创建和销毁顺序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StrongDependenceBean</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean1</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" constructor!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" destroy()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean2</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Bean1</span> bean1<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Bean2</span><span class="token punctuation">(</span><span class="token class-name">Bean1</span> bean1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//@1</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>bean1 <span class="token operator">=</span> bean1<span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" constructor!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" destroy()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean3</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Bean2</span> bean2<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Bean3</span><span class="token punctuation">(</span><span class="token class-name">Bean2</span> bean2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//@2</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>bean2 <span class="token operator">=</span> bean2<span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" constructor!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" destroy()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>@1：创建 Bean2 的时候需要传入一个 Bean1 对象，对 Bean1 产生了强依赖</li><li>@2：创建 Bean3 的时候需要传入一个 Bean2 对象，对 Bean2 产生了强依赖</li></ul><p>依赖关系是：<code>Bean3 -&gt; Bean2 -&gt; Bean1</code></p><p>对应的配置 ( strongDependenceBean.xml ) ：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span> xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"bean3"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.javacode.lesson.demo7.StrongDependenceBean$Bean3"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg index<span class="token operator">=</span><span class="token string">"0"</span> ref<span class="token operator">=</span><span class="token string">"bean2"</span><span class="token operator">/</span><span class="token operator">></span> <span class="token comment">//@1</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>          <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"bean2"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.javacode.lesson.demo7.StrongDependenceBean$Bean2"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg index<span class="token operator">=</span><span class="token string">"0"</span> ref<span class="token operator">=</span><span class="token string">"bean1"</span><span class="token operator">/</span><span class="token operator">></span> <span class="token comment">//@2</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>          <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"bean1"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.javacode.lesson.demo7.StrongDependenceBean$Bean1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意上面 xml 中 bean 定义顺序是：bean3、bean2、bean1。</p><ul><li>@1：bean3 中通过构造器注入 bean2</li><li>@2：bean2 中通过构造器注入 bean1</li></ul><p>DependOnTest 中创建一个测试用例，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 强依赖的bean的创建和销毁顺序测试 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">strongDependenceBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"容器启动中!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo7/strongDependenceBean.xml"</span><span class="token punctuation">;</span>    <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">IocUtils</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"容器启动完毕，准备关闭spring容器!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"spring容器已关闭!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行<code>strongDependenceBean</code>方法输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">容器启动中<span class="token operator">!</span>class com.javacode.lesson.demo7.StrongDependenceBean<span class="token variable">$Bean1</span> constructor<span class="token operator">!</span>class com.javacode.lesson.demo7.StrongDependenceBean<span class="token variable">$Bean2</span> constructor<span class="token operator">!</span>class com.javacode.lesson.demo7.StrongDependenceBean<span class="token variable">$Bean3</span> constructor<span class="token operator">!</span>容器启动完毕，准备关闭spring容器<span class="token operator">!</span>class com.javacode.lesson.demo7.StrongDependenceBean<span class="token variable">$Bean3</span> destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>class com.javacode.lesson.demo7.StrongDependenceBean<span class="token variable">$Bean2</span> destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>class com.javacode.lesson.demo7.StrongDependenceBean<span class="token variable">$Bean1</span> destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>spring容器已关闭<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bean 的定义结合上面输出我们来对比一下：</p><table><thead><tr><th>bean 定义顺序</th><th>依赖顺序（下面依赖上面的）</th><th>创建顺序</th><th>销毁顺序</th></tr></thead><tbody><tr><td>bean3</td><td>bean1</td><td>bean1</td><td>bean3</td></tr><tr><td>bean2</td><td>bean2</td><td>bean2</td><td>bean2</td></tr><tr><td>bean1</td><td>bean3</td><td>bean3</td><td>bean1</td></tr></tbody></table><h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><p>从输出中可以得到两点结论：</p><ol><li><strong>Bean 对象的创建顺序和 Bean 依赖的顺序一致</strong></li><li><strong>Bean 销毁的顺序和 Bean 创建的顺序相反</strong></li></ol><h2 id="3、depend-on-如何干预-Bean-创建和销毁？"><a href="#3、depend-on-如何干预-Bean-创建和销毁？" class="headerlink" title="3、depend-on 如何干预 Bean 创建和销毁？"></a>3、depend-on 如何干预 Bean 创建和销毁？</h2><h3 id="Why-use？"><a href="#Why-use？" class="headerlink" title="Why use？"></a>Why use？</h3><p>上面看到了对于无依赖的 Bean，通过定义的顺序确实可以干预 Bean 的创建顺序，通过强依赖也可以干预 Bean 的创建顺序。</p><p>那么如果 xml 中定义的 Bean 特别多，而有些 Bean 之间也没有强依赖关系，此时如果想去调整 Bean 的创建和销毁的顺序，得去调整 xml 中 bean 的定义顺序，或者去加强依赖，这样是非常不好的。</p><p><strong>spring 中在不调整 bean 的定义顺序和强加依赖的情况下，可以通过 depend-on 属性来设置当前 bean 的依赖于哪些 bean，那么可以保证 depend-on 指定的 bean 在当前 bean 之前先创建好，销毁的时候在当前 bean 之后进行销毁。</strong></p><h3 id="How-to-use？"><a href="#How-to-use？" class="headerlink" title="How to use？"></a>How to use？</h3><p><strong>depend-on：设置当前 bean 依赖的 bean 名称，可以指定多个，多个之间可以用 <code>, ; 空格</code> 进行分割</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">depend-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean2, bean3; bean4<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>不管 bean2,bean3,bean4 在任何地方定义，都可以确保在 bean1 创建之前，会先将 bean2,bean3,bean4 创建好，表示 bean1 依赖于这 3 个 bean;</li><li>没有强制去在 bean1 类中通过属性定义强依赖的方式去依赖于 bean2、bean3、bean4；</li><li>销毁的时候会先销毁当前 bean，再去销毁被依赖的 bean，即先销毁 bean1，再去销毁 depend-on 指定的 bean。</li></ul><h3 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h3><h4 id="dependOnBean-xml"><a href="#dependOnBean-xml" class="headerlink" title="dependOnBean.xml"></a>dependOnBean.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo7.NormalBean$Bean3<span class="token punctuation">"</span></span> <span class="token attr-name">depends-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean2,bean1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo7.NormalBean$Bean2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo7.NormalBean$Bean1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上面 xml 中先定义的 bean3，然后定义了 bean2 和 bean1，并且指定了 bean3 的 depend-on&#x3D;“bean2,bean1”。</li><li>根据 depend-on 的规则，所以会先创建 bean2 和 bean1,然后再创建 bean3，销毁的时候会按照和创建相反的顺序，下面我们来看看效果是不是这样。</li></ul><p>上面 xml 对应的 java 代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 通过depend-on来干预bean创建和销毁顺序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependOnBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean1</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" constructor!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" destroy()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean2</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">Bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" constructor!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" destroy()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean3</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">Bean3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" constructor!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" destroy()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DependOnTest 中创建测试用例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 通过depend-on来干预bean创建和销毁顺序 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dependOnBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"容器启动中!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo7/dependOnBean.xml"</span><span class="token punctuation">;</span>  <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">IocUtils</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"容器启动完毕，准备关闭spring容器!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"spring容器已关闭!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">容器启动中<span class="token operator">!</span>class com.javacode.lesson.demo7.NormalBean<span class="token variable">$Bean2</span> constructor<span class="token operator">!</span>class com.javacode.lesson.demo7.NormalBean<span class="token variable">$Bean1</span> constructor<span class="token operator">!</span>class com.javacode.lesson.demo7.NormalBean<span class="token variable">$Bean3</span> constructor<span class="token operator">!</span>容器启动完毕，准备关闭spring容器<span class="token operator">!</span>class com.javacode.lesson.demo7.NormalBean<span class="token variable">$Bean3</span> destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>class com.javacode.lesson.demo7.NormalBean<span class="token variable">$Bean1</span> destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>class com.javacode.lesson.demo7.NormalBean<span class="token variable">$Bean2</span> destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>spring容器已关闭<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><ol><li><strong>无依赖的 Bean 创建顺序和定义的顺序一致，销毁顺序刚好相反；</strong></li><li><strong>通过构造器强依赖的 Bean，会先创建构造器参数中对应的 Bean，然后才会创建当前 Bean，销毁顺序刚好相反；</strong></li><li><strong>depend-on 可以指定当前 Bean 依赖的 Bean，通过这个可以确保depend-on 指定的 Bean 在当前 Bean 创建之前先创建好，销毁顺序刚好相反。</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、JavaScript数据类型</title>
      <link href="/posts/c9fa9533.html"/>
      <url>/posts/c9fa9533.html</url>
      
        <content type="html"><![CDATA[<h1 id="五、JavaScript-数据类型"><a href="#五、JavaScript-数据类型" class="headerlink" title="五、JavaScript 数据类型"></a>五、JavaScript 数据类型</h1><p>在 JavaScript 中有 8 种基本的数据类型（译注：7 种原始类型和 1 种引用类型）。</p><p>我们可以将任何类型的值存入变量。例如，一个变量可以在前一刻是个字符串，下一刻就存储一个数字：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 没有错误</span><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>message <span class="token operator">=</span> <span class="token number">123456</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>允许这种操作的编程语言，例如 JavaScript，被称为“动态类型”（dynamically typed）的编程语言，意思是 <strong>虽然编程语言中有不同的数据类型，但是你定义的变量并不会在定义后，被限制为某一数据类型。</strong></p><h2 id="1、Number-类型"><a href="#1、Number-类型" class="headerlink" title="1、Number 类型"></a>1、Number 类型</h2><p><em>number</em> 类型代表整数和浮点数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>n <span class="token operator">=</span> <span class="token number">12.345</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>数字可以有很多操作，比如，乘法 <code>*</code>、除法 <code>/</code>、加法 <code>+</code>、减法 <code>-</code> 等等。</p><p>除了常规的数字，还包括所谓的“特殊数值（”special numeric values”）”也属于这种类型：<code>Infinity</code>、<code>-Infinity</code> 和 <code>NaN</code>。</p><h3 id="Infinity"><a href="#Infinity" class="headerlink" title="Infinity"></a>Infinity</h3><p><code>Infinity</code> 代表数学概念中的 无穷大 ∞。是一个比任何数字都大的特殊值。</p><p>我们可以通过除以 0 来得到它：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Infinity</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者在代码中直接使用它：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">Infinity</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Infinity</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><p><code>NaN</code> 代表一个计算错误。它是一个不正确的或者一个未定义的数学操作所得到的结果，比如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">"not a number"</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN，这样的除法是错误的</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>NaN</code> 是粘性的。任何对 <code>NaN</code> 的进一步数学运算都会返回 <code>NaN</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">NaN</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">NaN</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">"not a number"</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以，如果在数学表达式中有一个 <code>NaN</code>，会被传播到最终结果（只有一个例外：<code>NaN ** 0</code> 结果为 <code>1</code>）。</p><blockquote><p>在 JavaScript 中做数学运算是安全的。我们可以做任何事：除以 0，将非数字字符串视为数字，等等。</p><p>脚本永远不会因为一个致命的错误（“死亡”）而停止。最坏的情况下，我们会得到 <code>NaN</code> 的结果。</p></blockquote><p>特殊的数值属于 “number” 类型。当然，对“特殊的数值”这个词的一般认识是，它们并不是数字。</p><h2 id="2、BigInt-类型"><a href="#2、BigInt-类型" class="headerlink" title="2、BigInt 类型"></a>2、BigInt 类型</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在 JavaScript 中，”number” 类型无法安全地表示大于 <code>(2^53-1)</code>（即 <code>9007199254740991</code>），或小于 <code>-(2^53-1)</code> 的整数。</p><p>更准确的说，”number” 类型可以存储更大的整数（最多 <code>1.7976931348623157 * 10^308</code>），但超出安全整数范围 <code>±(2^53-1)</code> 会出现精度问题，因为并非所有数字都适合固定的 64 位存储。因此，可能存储的是“近似值”。</p><p>例如，这两个数字（正好超出了安全整数范围）是相同的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9007199254740991</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9007199254740992</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9007199254740991</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9007199254740992</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>所有大于 <code>(2^53-1)</code> 的奇数都不能用 “number” 类型存储。</li></ul><p>在大多数情况下，<code>±(2^53-1)</code> 范围就足够了，但有时候我们需要整个范围非常大的整数，例如用于密码学或微秒精度的时间戳。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><code>BigInt</code> 类型用于表示任意长度的整数，可以通过将 <code>n</code> 附加到整数字段的末尾来创建 <code>BigInt</code> 值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 尾部的 "n" 表示这是一个 BigInt 类型</span><span class="token keyword">const</span> bigInt <span class="token operator">=</span> <span class="token number">1234567890123456789012345678901234567890n</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>目前 Firefox&#x2F;Chrome&#x2F;Edge&#x2F;Safari 已经支持 <code>BigInt</code> 了，但 IE 还没有。你可以查看 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#Browser_compatibility"><em>MDN</em> BigInt 兼容性表</a> 以了解哪些版本的浏览器已经支持 BigInt 了。</p></blockquote><h2 id="3、String-类型"><a href="#3、String-类型" class="headerlink" title="3、String 类型"></a>3、String 类型</h2><p>JavaScript 中的字符串必须被括在引号里，有三种包含字符串的方式：</p><ol><li>双引号：<code>&quot;Hello&quot;</code></li><li>单引号：<code>&#39;Hello&#39;</code></li><li>反引号：<code>Hello</code></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">'Single quotes are ok too'</span><span class="token punctuation">;</span><span class="token keyword">let</span> phrase <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">can embed another </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>双引号和单引号都是“简单”引用，在 JavaScript 中两者几乎没有什么差别。</p><p><strong>反引号是 功能扩展 引号。它们允许我们通过将变量和表达式包装在 <code>$&#123;…&#125;</code> 中，来将它们嵌入到字符串中。</strong>例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"John"</span><span class="token punctuation">;</span><span class="token comment">// 嵌入一个变量</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, John!</span><span class="token comment">// 嵌入一个表达式</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">the result is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// the result is 3</span><span class="token comment">// 表达式是一个字符串 "name"</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">"name"</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>$&#123;…&#125;</code> 内的表达式会被计算，计算结果会成为字符串的一部分。可以在 <code>$&#123;…&#125;</code> 内放置任何东西：诸如名为 <code>name</code> 的变量，或者诸如 <code>1 + 2</code> 的算数表达式，或者其他一些更复杂的。</p><p>需要注意的是，这仅仅在反引号内有效，其他引号不允许这种嵌入。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">"the result is $&#123;1 + 2&#125;"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// the result is $&#123;1 + 2&#125;（使用双引号则不会计算 $&#123;…&#125; 中的内容）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>JavaScript 中没有 *character* 类型。</strong>只有一种 <code>string</code> 类型，一个字符串可以包含零个（为空）、一个或多个字符。</p><p>在一些语言中，单个字符有一个特殊的 “character” 类型，在 C 语言和 Java 语言中被称为 “char”。</p></blockquote><h2 id="4、Boolean-类型（逻辑类型）"><a href="#4、Boolean-类型（逻辑类型）" class="headerlink" title="4、Boolean 类型（逻辑类型）"></a>4、Boolean 类型（逻辑类型）</h2><p>boolean 类型仅包含两个值：<code>true</code> 和 <code>false</code>。</p><p>这种类型通常用于存储表示 yes 或 no 的值：<code>true</code> 意味着 “yes，正确”，<code>false</code> 意味着 “no，不正确”。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> nameFieldChecked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// yes, name field is checked</span><span class="token keyword">let</span> ageFieldChecked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// no, age field is not checked</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>布尔值也可作为比较的结果：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> isGreater <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> isGreater <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true（比较的结果是 "yes"）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5、null-值"><a href="#5、null-值" class="headerlink" title="5、null 值"></a>5、null 值</h2><p>特殊的 <code>null</code> 值不属于上述任何一种类型。它构成了一个独立的类型，只包含 <code>null</code> 值：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>表示 <code>age</code> 是未知的</li></ul><p>相比较于其他编程语言，JavaScript 中的 <code>null</code> 不是一个“对不存在的 <code>object</code> 的引用”或者 “null 指针”。</p><p><strong>JavaScript 中的 <code>null</code> 仅仅是一个代表“无”、“空”或“值未知”的特殊值。</strong></p><h2 id="6、undefined-值"><a href="#6、undefined-值" class="headerlink" title="6、undefined 值"></a>6、undefined 值</h2><p>特殊值 <code>undefined</code> 和 <code>null</code> 一样自成类型。</p><p><strong><code>undefined</code> 的含义是 <code>未被赋值</code>。</strong>如果一个变量已被声明，但未被赋值，那么它的值就是 <code>undefined</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> age<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 弹出 "undefined"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从技术上讲，可以显式地将 <code>undefined</code> 赋值给变量：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">// 将值修改为 undefined</span>age <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "undefined"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>但是不建议这样做。</li><li>通常，使用 <code>null</code> 将一个“空”或者“未知”的值写入变量中，而 <code>undefined</code> 则保留作为未进行初始化的事物的默认初始值。</li></ul><h2 id="7、Object-类型和-Symbol-类型"><a href="#7、Object-类型和-Symbol-类型" class="headerlink" title="7、Object 类型和 Symbol 类型"></a>7、Object 类型和 Symbol 类型</h2><p><code>object</code> 类型是一个特殊的类型：</p><ul><li>其他所有的数据类型都被称为“原始类型”，因为它们的值只包含一个单独的内容（字符串、数字或者其他）。</li><li>相反，<code>object</code> 则用于储存数据集合和更复杂的实体。</li></ul><p><code>symbol</code> 类型用于创建对象的唯一标识符。</p><h2 id="8、typeof-运算符"><a href="#8、typeof-运算符" class="headerlink" title="8、typeof 运算符"></a>8、typeof 运算符</h2><p><strong><code>typeof</code> 运算符返回参数的类型，并以字符串的形式返回数据类型。</strong></p><p>当我们想要分别处理不同类型值的时候，或者想快速进行数据类型检验时，非常有用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">typeof</span> <span class="token keyword">undefined</span> <span class="token comment">// "undefined"</span><span class="token keyword">typeof</span> <span class="token number">0</span> <span class="token comment">// "number"</span><span class="token keyword">typeof</span> <span class="token number">10n</span> <span class="token comment">// "bigint"</span><span class="token keyword">typeof</span> <span class="token boolean">true</span> <span class="token comment">// "boolean"</span><span class="token keyword">typeof</span> <span class="token string">"foo"</span> <span class="token comment">// "string"</span><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token comment">// "symbol"</span><span class="token keyword">typeof</span> Math <span class="token comment">// "object"  (1)</span><span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token comment">// "object"  (2)</span><span class="token keyword">typeof</span> alert <span class="token comment">// "function"  (3)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后三行可能需要额外的说明：</p><ol><li><code>Math</code> 是一个提供数学运算的内建 <code>object</code>。</li><li><code>typeof null</code> 的结果为 <code>&quot;object&quot;</code>。这是官方承认的 <code>typeof</code> 的错误，这个问题来自于 JavaScript 语言的早期阶段，并为了兼容性而保留了下来。<code>null</code> 绝对不是一个 <code>object</code>。<code>null</code> 有自己的类型，它是一个特殊值。<code>typeof</code> 的行为在这里是错误的。</li><li><code>typeof alert</code> 的结果是 <code>&quot;function&quot;</code>，因为 <code>alert</code> 在 JavaScript 语言中是一个函数。在 JavaScript 语言中没有一个特别的 “function” 类型。函数隶属于 <code>object</code> 类型。但是 <code>typeof</code> 会对函数区分对待，并返回 <code>&quot;function&quot;</code>。这也是来自于 JavaScript 语言早期的问题。从技术上讲，这种行为是不正确的，但在实际编程中却非常方便。</li></ol><blockquote><p><strong><code>typeof(x)</code> 语法</strong></p><p>你可能还会遇到另一种语法：<code>typeof(x)</code>，它与 <code>typeof x</code> 相同。</p><p><strong>简单点说：<code>typeof</code> 是一个操作符，不是一个函数。这里的括号不是 <code>typeof</code> 的一部分。它是数学运算分组的括号。</strong></p><p>通常，这样的括号里包含的是一个数学表达式，例如 <code>(2 + 2)</code>，但这里它只包含一个参数 <code>(x)</code>。从语法上讲，它们允许在 <code>typeof</code> 运算符和其参数之间不打空格，有些人喜欢这样的风格。</p></blockquote><h2 id="9、总结"><a href="#9、总结" class="headerlink" title="9、总结"></a>9、总结</h2><p>JavaScript 中有八种基本的数据类型。</p><p><strong>七种原始数据类型（基本数据类型）</strong>：</p><ul><li><code>number</code> 用于任何类型的数字：整数或浮点数，在 <code>±(253-1)</code> 范围内的整数。</li><li><code>bigint</code> 用于任意长度的整数。</li><li><code>string</code> 用于字符串：一个字符串可以包含 0 个或多个字符，所以没有单独的单字符类型。</li><li><code>boolean</code> 用于 <code>true</code> 和 <code>false</code>。</li><li><code>null</code> 用于未知的值 —— 只有一个 <code>null</code> 值的独立类型。</li><li><code>undefined</code> 用于未定义的值 —— 只有一个 <code>undefined</code> 值的独立类型。</li><li><code>symbol</code> 用于唯一的标识符。</li></ul><p><strong>一种非原始数据类型（复杂数据类型）</strong>：</p><ul><li><code>object</code> 用于更复杂的数据结构。</li></ul><p>我们可以通过 <code>typeof</code> 运算符查看存储在变量中的数据类型：</p><ul><li>通常用作 <code>typeof x</code>，但 <code>typeof(x)</code> 也可行。</li><li>以字符串的形式返回类型名称，例如 <code>&quot;string&quot;</code>。</li><li><code>typeof null</code> 会返回 <code>&quot;object&quot;</code> —— 这是 JavaScript 编程语言的一个错误，实际上它并不是一个 <code>object</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、JavaScript变量</title>
      <link href="/posts/c7cda946.html"/>
      <url>/posts/c7cda946.html</url>
      
        <content type="html"><![CDATA[<h1 id="四、JavaScript-变量"><a href="#四、JavaScript-变量" class="headerlink" title="四、JavaScript 变量"></a>四、JavaScript 变量</h1><h2 id="1、变量"><a href="#1、变量" class="headerlink" title="1、变量"></a>1、变量</h2><h3 id="let-定义-声明"><a href="#let-定义-声明" class="headerlink" title="let 定义&#x2F;声明"></a>let 定义&#x2F;声明</h3><p><strong>变量是数据的“命名存储”。在 JavaScript 中创建一个变量，我们需要用到 <code>let</code> 关键字。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> message<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以在一行中声明多个变量：</p><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>no-beautify</span></div><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">'John'</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>看上去代码长度更短，但并不推荐这样。为了更好的可读性，请一行只声明一个变量。</li><li>多行变量声明有点长，但更容易阅读：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">'John'</span><span class="token punctuation">;</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一些程序员采用下面的形式书写多个变量：</p><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>no-beautify</span></div><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">'John'</span><span class="token punctuation">,</span>  age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">,</span>  message <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>甚至使用“逗号在前”的形式：</p><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>no-beautify</span></div><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">'John'</span>  <span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">25</span>  <span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>技术上讲，这些变体都有一样的效果。所以，这是个个人品味和审美方面的问题。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>一个变量应该只被声明一次，对同一个变量进行重复声明会触发 error：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">"This"</span><span class="token punctuation">;</span><span class="token comment">// 重复 'let' 会导致 error</span><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">"That"</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError: 'message' has already been declared</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，我们对同一个变量应该只声明一次，之后在不使用 <code>let</code> 的情况下对其进行引用。</p><h3 id="赋值"><a href="#赋值" class="headerlink" title="&#x3D; 赋值"></a>&#x3D; 赋值</h3><p>通过赋值运算符 <code>=</code> 为变量添加一些数据：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> message<span class="token punctuation">;</span>message <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span> <span class="token comment">// 将字符串 'Hello' 保存在名为 message 的变量中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>这个字符串保存到与该变量相关联的内存区域</li></ul><p>简洁一点，我们可以将变量定义和赋值合并成一行：</p><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>run</span></div><code class="language-javascript"><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">'Hello!'</span><span class="token punctuation">;</span> <span class="token comment">// 定义变量，并且赋值</span><span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><p>在较老的脚本中，你也可能发现另一个关键字 <code>var</code>，而不是 <code>let</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>let</code> 和 <code>var</code> 之间有些微妙的差别，但目前对于我们来说并不重要。</p><h2 id="2、变量命名"><a href="#2、变量命名" class="headerlink" title="2、变量命名"></a>2、变量命名</h2><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>JavaScript 的变量命名有两个限制：</p><ol><li>变量名称必须仅包含字母、数字、符号 <code>$</code> 和 <code>_</code>。</li><li>首字符必须非数字。</li><li>可以使用任何语言，包括西里尔字母（cyrillic letters）甚至是象形文字</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> userName<span class="token punctuation">;</span><span class="token keyword">let</span> test123<span class="token punctuation">;</span><span class="token keyword">let</span> $ <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 使用 "$" 声明一个变量</span><span class="token keyword">let</span> _ <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 现在用 "_" 声明一个变量</span><span class="token function">alert</span><span class="token punctuation">(</span>$ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token keyword">let</span> имя <span class="token operator">=</span> <span class="token string">'...'</span><span class="token punctuation">;</span><span class="token keyword">let</span> 我 <span class="token operator">=</span> <span class="token string">'...'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果命名包括多个单词，通常采用驼峰式命名法。也就是，单词一个接一个，除了第一个单词，其他的每个单词都以大写字母开头：<code>myVeryLongName</code>。</p><p>错误的变量命名：</p><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>no-beautify</span></div><code class="language-javascript"><span class="token keyword">let</span> 1a<span class="token punctuation">;</span> <span class="token comment">// 不能以数字开始</span><span class="token keyword">let</span> my<span class="token operator">-</span>name<span class="token punctuation">;</span> <span class="token comment">// 连字符 '-' 不允许用于变量命名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="区分大小写"><a href="#区分大小写" class="headerlink" title="区分大小写"></a>区分大小写</h3><p>命名为 <code>apple</code> 和 <code>APPLE</code> 的变量是不同的两个变量。</p><h3 id="允许非英文字母，但不推荐"><a href="#允许非英文字母，但不推荐" class="headerlink" title="允许非英文字母，但不推荐"></a>允许非英文字母，但不推荐</h3><p>可以使用任何语言，包括西里尔字母（cyrillic letters）甚至是象形文字，就像这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> имя <span class="token operator">=</span> <span class="token string">'...'</span><span class="token punctuation">;</span><span class="token keyword">let</span> 我 <span class="token operator">=</span> <span class="token string">'...'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><p>有一张 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords">保留字列表</a>，这张表中的保留字无法用作变量命名，因为它们被用于编程语言本身了。比如，<code>let</code>、<code>class</code>、<code>return</code>、<code>function</code> 都被保留了。</p><p>下面的代码将会抛出一个语法错误：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token keyword">let</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 不能用 "let" 来命名一个变量，错误！</span><span class="token keyword">let</span> <span class="token keyword">return</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 同样，不能使用 "return"，错误！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3、常量"><a href="#3、常量" class="headerlink" title="3、常量"></a>3、常量</h2><p>使用 <code>const</code> 声明的变量称为“常量”。它们不能被修改，如果你尝试修改就会发现报错：</p><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>run</span></div><code class="language-javascript"><span class="token keyword">const</span> myBirthday <span class="token operator">=</span> <span class="token string">'18.04.1982'</span><span class="token punctuation">;</span>myBirthday <span class="token operator">=</span> <span class="token string">'01.01.2001'</span><span class="token punctuation">;</span> <span class="token comment">// 错误，不能对常量重新赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当程序员能确定这个变量永远不会改变的时候，就可以使用 <code>const</code> 来确保这种行为，并且清楚地向别人传递这一事实。</p><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><p><strong>使用大写字母和下划线来命名这些常量。</strong></p><p>例如，让我们以所谓的“web”（十六进制）格式为颜色声明常量：</p><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>run</span></div><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">COLOR_RED</span> <span class="token operator">=</span> <span class="token string">"#F00"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">COLOR_GREEN</span> <span class="token operator">=</span> <span class="token string">"#0F0"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">COLOR_BLUE</span> <span class="token operator">=</span> <span class="token string">"#00F"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">COLOR_ORANGE</span> <span class="token operator">=</span> <span class="token string">"#FF7F00"</span><span class="token punctuation">;</span><span class="token comment">// ……当我们需要选择一个颜色</span><span class="token keyword">let</span> color <span class="token operator">=</span> <span class="token constant">COLOR_ORANGE</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// #FF7F00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>COLOR_ORANGE</code> 比 <code>&quot;#FF7F00&quot;</code> 更容易记忆。</li><li>比起 <code>COLOR_ORANGE</code> 而言，<code>&quot;#FF7F00&quot;</code> 更容易输错。</li><li>阅读代码时，<code>COLOR_ORANGE</code> 比 <code>#FF7F00</code> 更易懂。</li></ul><h3 id="应用规则"><a href="#应用规则" class="headerlink" title="应用规则"></a>应用规则</h3><p>什么时候该为常量使用大写命名，什么时候进行常规命名？</p><p>作为一个“常数”，意味着值永远不变。但是有些常量在执行之前就已知了（比如红色的十六进制值），还有些在执行期间被“计算”出来，但初始赋值之后就不会改变。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> pageLoadTime <span class="token operator">=</span> <span class="token comment">/* 网页加载所需的时间 */</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>pageLoadTime</code> 的值在页面加载之前是未知的，所以采用常规命名。但是它仍然是个常量，因为赋值之后不会改变。</p><p><strong>换句话说，大写命名的常量仅用作“硬编码（hard-coded）”值的别名。</strong></p><h2 id="4、变量正确命名"><a href="#4、变量正确命名" class="headerlink" title="4、变量正确命名"></a>4、变量正确命名</h2><p>一个变量名应该有一个清晰、明显的含义，对其存储的数据进行描述。</p><p>变量命名是编程过程中最重要且最复杂的技能之一。快速地浏览变量的命名就知道代码是一个初学者还是有经验的开发者写的。</p><p>声明变量之前，多花点时间思考它的更好的命名。你会受益良多。</p><h3 id="可以遵循的规则"><a href="#可以遵循的规则" class="headerlink" title="可以遵循的规则"></a>可以遵循的规则</h3><ul><li>使用易读的命名，比如 <code>userName</code> 或者 <code>shoppingCart</code>。</li><li>离诸如 <code>a</code>、<code>b</code>、<code>c</code> 这种缩写和短名称远一点，除非你真的知道你在干什么。</li><li>变量名在能够准确描述变量的同时要足够简洁。不好的例子就是 <code>data</code> 和 <code>value</code>，这样的名称等于什么都没说。如果能够非常明显地从上下文知道数据和值所表达的含义，这样使用它们也是可以的。</li><li>脑海中的术语要和团队保持一致。如果网站的访客称为“用户”，则我们采用相关的变量命名，比如 <code>currentUser</code> 或者 <code>newUser</code>，而不要使用 <code>currentVisitor</code> 或者一个 <code>newManInTown</code>。</li></ul><p>听上去很简单？确实如此，但是在实践中选择一个一目了然的变量名称并非如此简单。大胆试试吧。</p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>我们可以使用 <code>var</code>、<code>let</code> 或 <code>const</code> 声明变量来存储数据。</p><ul><li><code>let</code> — 现代的变量声明方式。</li><li><code>var</code> — 老旧的变量声明方式。一般情况下，我们不会再使用它。</li><li><code>const</code> — 类似于 <code>let</code>，但是变量的值无法被修改。</li></ul><p>变量应当以一种容易理解变量内部是什么的方式进行命名。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、JavaScript代码结构</title>
      <link href="/posts/2773433c.html"/>
      <url>/posts/2773433c.html</url>
      
        <content type="html"><![CDATA[<h1 id="三、JavaScript代码结构"><a href="#三、JavaScript代码结构" class="headerlink" title="三、JavaScript代码结构"></a>三、JavaScript代码结构</h1><h2 id="1、语句"><a href="#1、语句" class="headerlink" title="1、语句"></a>1、语句</h2><p><strong>语句是执行行为（action）的语法结构和命令。</strong></p><p>语句之间可以使用 <strong>分号</strong> 进行分割。</p><p>例如，我们将 “Hello World” 这条信息一分为二：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通常，每条语句独占一行，以提高代码的可读性：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2、分号"><a href="#2、分号" class="headerlink" title="2、分号"></a>2、分号</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>当存在换行符（line break）时，在大多数情况下可以省略分号，因为换行意味着一个分号。但是“大多数情况”并不意味着“总是”！</strong></p><p>下面的代码也是可以运行的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>JavaScript 将换行符理解成“隐式”的分号。</li></ul><p>有很多换行并不是分号的例子，例如：</p><pre class="line-numbers language-none"><code class="language-none">alert(3 +1+ 2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>代码输出 <code>6</code>，因为 JavaScript 并没有在这里插入分号。</p><p><strong>但存在 JavaScript 无法确定是否真的需要自动插入分号的情况。</strong></p><p>这种情况下发生的错误是很难被找到和解决的。可以看看下面这段代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 先显示 `Hello`，然后显示 `1`，然后 `2`。</span><span class="token comment">// 删除 `alert` 语句后的分号：</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只有第一个 `Hello` 会被显示出来（并且有一个报错，你可能需要打开控制台才能看到它）。并且不会再有数字被显示出来。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为，JavaScript 引擎并没有假设在方括号 <code>[...]</code> 前有一个分号。因此，最后一个示例中的代码被视为了单个语句。</p><p>对于引擎来说，它是这样的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在这种情况下，这样将两行代码合并到一起是不对的。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>即使语句被换行符分隔了，我们依然建议在它们之间加分号。这个规则被社区广泛采用。</p><blockquote><p>再次强调一下 —— 大部分时候可以省略分号，但是最好不要省略分号。</p></blockquote><h2 id="3、注释"><a href="#3、注释" class="headerlink" title="3、注释"></a>3、注释</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>随着时间推移，程序变得越来越复杂。为代码添加 <strong>注释</strong> 来描述它做了什么和为什么要这样做，变得非常有必要了。</p><p>你可以在脚本的任何地方添加注释，它们并不会影响代码的执行，因为引擎会直接忽略它们。</p><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p><strong>单行注释以两个正斜杠字符 <code>//</code> 开始。</strong></p><p>这一行的剩余部分是注释。它可能独占一行或者跟随在一条语句的后面。</p><p>就像这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 这行注释独占一行</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这行注释跟随在语句后面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p><strong>多行注释以一个正斜杠和星号开始 <code>&quot;/*&quot;</code> 并以一个星号和正斜杠结束 <code>&quot;*/&quot;</code>。</strong></p><p>就像这样:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 两个消息的例子。这是一个多行注释。*/</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释的内容被忽略了，所以如果我们在 <code>/* ... */</code> 中放入代码，并不会执行。</p><p><strong>可以很方便地临时禁用代码：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 注释代码alert('Hello');*/</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>在大多数的编辑器中，一行代码可以使用 <code>key:Ctrl+/</code> 快捷键进行单行注释，诸如 <code>key:Ctrl+Shift+/</code> 的快捷键可以进行多行注释（选择代码，然后按下快捷键）。对于 Mac 电脑，应使用 <code>key:Cmd</code> 而不是 <code>key:Ctrl</code>，使用 <code>key:Option</code> 而不是 <code>key:Shift</code>。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>不要在 <code>/*...*/</code> 内嵌套另一个 <code>/*...*/</code>。下面这段代码报错而无法执行：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*  /* 嵌套注释 ?!? */</span><span class="token operator">*</span><span class="token operator">/</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">'World'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注释会增加代码总量，但这一点也不是什么问题。有很多工具可以帮你在把代码部署到服务器之前缩减代码。这些工具会移除注释，这样注释就不会出现在发布的脚本中。所以，注释对我们的生产没有任何负面影响。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八、Spring依赖注入之自动注入</title>
      <link href="/posts/ca252733.html"/>
      <url>/posts/ca252733.html</url>
      
        <content type="html"><![CDATA[<h1 id="八、Spring-依赖注入之自动注入"><a href="#八、Spring-依赖注入之自动注入" class="headerlink" title="八、Spring 依赖注入之自动注入"></a>八、Spring 依赖注入之自动注入</h1><h2 id="1、本文内容"><a href="#1、本文内容" class="headerlink" title="1、本文内容"></a>1、本文内容</h2><ul><li><strong>手动注入的不足</strong></li><li><strong>Class.isAssignableFrom 方法介绍</strong></li><li><strong>三种自动注入方式详解及案例</strong></li><li><strong>按名称自动注入</strong></li><li><strong>按类型自动注入</strong></li><li><strong>按构造器进行自动注入</strong></li><li><strong>按类型自动注入某种类型的所有 bean给 List和 Map（重点）</strong></li><li><strong>autowire&#x3D;default 介绍</strong></li><li><strong>总结</strong></li><li><strong>案例源码</strong></li></ul><h2 id="2、手动注入的不足"><a href="#2、手动注入的不足" class="headerlink" title="2、手动注入的不足"></a>2、手动注入的不足</h2><p>​上篇文章中介绍了依赖注入中的手动注入，所谓手动注入是指在 xml 中采用硬编码的方式来配置注入的对象，比如通过构造器注入或者 set 方法注入，这些注入的方式都存在不足，比如下面代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">C</span> c<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">D</span> d<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">E</span> e<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token class-name">N</span> n<span class="token punctuation">;</span>    <span class="token comment">//上面每个private属性的get和set方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 spring 容器来管理，xml配置如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>C<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>D<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>e<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>E<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>e<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>e<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的注入存在的问题：</p><ul><li><strong>如果需要注入的对象比较多，比如 A 类中有几十个属性，那么上面的 property 属性是不是需要写几十个，此时配置文件代码量暴增</strong></li><li><strong>如果 A 类中新增或者删除了一些依赖，还需要手动去调整 bean xml 中的依赖配置信息，否则会报错</strong></li><li><strong>总的来说就是不利于维护和扩展</strong></li></ul><p><strong>为了解决上面这些问题，spring 为我们提供了更强大的功能：自动注入</strong></p><p>在介绍自动注入之前需要先介绍一些基础知识。</p><h2 id="3、Class-isAssignableFrom-方法"><a href="#3、Class-isAssignableFrom-方法" class="headerlink" title="3、Class.isAssignableFrom 方法"></a>3、Class.isAssignableFrom 方法</h2><h3 id="3-1、用法"><a href="#3-1、用法" class="headerlink" title="3-1、用法"></a>3-1、用法</h3><p><code>isAssignableFrom</code> 是 Class 类中的一个方法，看一下这个方法的定义：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> cls<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">c1<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用来判断 c2 和 c1 是否相等，或者 <strong>c2 是否是 c1 的子类</strong>。</p><h3 id="3-2、案例"><a href="#3-2、案例" class="headerlink" title="3-2、案例"></a>3-2、案例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、自动注入"><a href="#4、自动注入" class="headerlink" title="4、自动注入"></a>4、自动注入</h2><p>​<strong>自动注入是采用约定大约配置的方式来实现的，程序和 spring 容器之间约定好，遵守某一种都认同的规则，来实现自动注入。</strong></p><p>xml 中可以在 bean 元素中通过 autowire 属性来设置自动注入的方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">""</span> autowire<span class="token operator">=</span><span class="token string">"byType|byName|constructor|default"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>byteName：按照名称进行注入</strong></li><li><strong>byType：按类型进行注入</strong></li><li><strong>constructor：按照构造方法进行注入</strong></li><li><strong>default：默认注入方式</strong></li></ul><p>下面我们详解每种注入方式的用法。</p><h3 id="4-1、按照名称进行注入（byName）"><a href="#4-1、按照名称进行注入（byName）" class="headerlink" title="4-1、按照名称进行注入（byName）"></a>4-1、按照名称进行注入（byName）</h3><h4 id="4-1-1、用法"><a href="#4-1-1、用法" class="headerlink" title="4-1-1、用法"></a>4-1-1、用法</h4><p><strong>autowire 设置为 byName</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X类<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>   spring 容器会按照 set 属性的名称去容器中查找同名的 bean 对象，然后将查找到的对象通过 set 方法注入到对应的 bean 中，未找到对应名称的 bean 对象则 set 方法不进行注入。需要注入的 set 属性的名称和被注入的 bean 的名称必须一致。</p></blockquote><h4 id="4-1-2、案例"><a href="#4-1-2、案例" class="headerlink" title="4-1-2、案例"></a>4-1-2、案例</h4><h5 id="DiByName-java"><a href="#DiByName-java" class="headerlink" title="DiByName.java"></a>DiByName.java</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 按照名称自动注入 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiAutowireByName</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Service1</span> <span class="token punctuation">&#123;</span> <span class="token comment">//@1</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> desc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"Service1&#123;"</span> <span class="token operator">+</span>                    <span class="token string">"desc='"</span> <span class="token operator">+</span> desc <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                    <span class="token char">'&#125;'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Service2</span> <span class="token punctuation">&#123;</span> <span class="token comment">//@1</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> desc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"Service2&#123;"</span> <span class="token operator">+</span>                    <span class="token string">"desc='"</span> <span class="token operator">+</span> desc <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                    <span class="token char">'&#125;'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Service1</span> service1<span class="token punctuation">;</span><span class="token comment">//@3</span>    <span class="token keyword">private</span> <span class="token class-name">Service2</span> service2<span class="token punctuation">;</span><span class="token comment">//@4</span>    <span class="token keyword">public</span> <span class="token class-name">Service1</span> <span class="token function">getService1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> service1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setService1</span><span class="token punctuation">(</span><span class="token class-name">Service1</span> service1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setService1->"</span> <span class="token operator">+</span> service1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>service1 <span class="token operator">=</span> service1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Service2</span> <span class="token function">getService2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> service2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setService2</span><span class="token punctuation">(</span><span class="token class-name">Service2</span> service2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setService2->"</span> <span class="token operator">+</span> service2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>service2 <span class="token operator">=</span> service2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"DiAutowireByName&#123;"</span> <span class="token operator">+</span>                <span class="token string">"service1="</span> <span class="token operator">+</span> service1 <span class="token operator">+</span>                <span class="token string">", service2="</span> <span class="token operator">+</span> service2 <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个类中有 2 个属性，名称为：</p><ul><li>service1</li><li>service2</li></ul><p>这两个属性都有对应的 set 方法。</p><p>下面我们在 bean xml 中定义 2 个和这 2 个属性同名的 bean，然后使用按照名称进行自动注入。</p><h5 id="diAutowireByName-xml"><a href="#diAutowireByName-xml" class="headerlink" title="diAutowireByName.xml"></a>diAutowireByName.xml</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo6.DiAutowireByName$Service1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo6.DiAutowireByName$Service2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service2-1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo6.DiAutowireByName$Service2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service2-1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- autowire：byName 配置按照name进行自动注入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diAutowireByName1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo6.DiAutowireByName<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 当配置了自动注入，还可以使用手动的方式自动注入进行覆盖，手动的优先级更高一些 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diAutowireByName2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo6.DiAutowireByName<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service2<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service2-1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面注释认真看一下：</p><ul><li>@1：定义了一个名称为 service1 的 bean</li><li>@2：定义了一个名称为 service2 的 bean</li><li>@3：定义 diAutowireByName 需要将 autowire 的值置为 byName，表示按名称进行自动注入。</li></ul><blockquote><p>   <strong>spring容器创建diAutowireByName对应的bean时，会遍历DiAutowireByName 类中的所有 set 方法，然后得到 set 对应的属性名称列表：{“service1”,”service2”}，然后遍历这属性列表，在容器中查找和属性同名的 bean 对象，然后调用属性对应的 set 方法，将 bean 对象注入进去</strong></p></blockquote><h5 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * xml中自动注入配置案例 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiAutowireTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 按照名称进行注入     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">diAutowireByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo6/diAutowireByName.xml"</span><span class="token punctuation">;</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">IocUtils</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"diAutowireByName"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p>运行 diAutowireByName 输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">setService1-<span class="token operator">></span>Service1<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1'</span><span class="token punctuation">&#125;</span>setService2-<span class="token operator">></span>Service2<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service2'</span><span class="token punctuation">&#125;</span>setService2-<span class="token operator">></span>Service2<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service2-1'</span><span class="token punctuation">&#125;</span>setService1-<span class="token operator">></span>Service1<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1'</span><span class="token punctuation">&#125;</span>DiAutowireByName<span class="token punctuation">&#123;</span>service1<span class="token operator">=</span>Service1<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1'</span><span class="token punctuation">&#125;</span>, <span class="token assign-left variable">service2</span><span class="token operator">=</span>Service2<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service2'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>DiAutowireByName<span class="token punctuation">&#123;</span>service1<span class="token operator">=</span>Service1<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1'</span><span class="token punctuation">&#125;</span>, <span class="token assign-left variable">service2</span><span class="token operator">=</span>Service2<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service2-1'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-3、优缺点"><a href="#4-1-3、优缺点" class="headerlink" title="4-1-3、优缺点"></a>4-1-3、优缺点</h4><p>按名称进行注入的时候，要求名称和 set 属性的名称必须同名，相对于硬编码的方式注入，确实节省了不少代码。</p><h3 id="4-2、按照类型进行自动注入"><a href="#4-2、按照类型进行自动注入" class="headerlink" title="4-2、按照类型进行自动注入"></a>4-2、按照类型进行自动注入</h3><h4 id="4-2-1、用法"><a href="#4-2-1、用法" class="headerlink" title="4-2-1、用法"></a>4-2-1、用法</h4><p><strong>autowire 设置为 byType</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X类<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>spring 容器会遍历 x 类中所有的 set 方法，会在容器中查找和 set 参数类型相同的 bean 对象，将其通过 set 方法进行注入，未找到对应类型的 bean 对象则 set 方法不进行注入。</p></li><li><p><strong>需要注入的 set 属性的类型和被注入的 bean 的类型需要满足 isAssignableFrom 关系。</strong></p></li><li><p>按照类型自动装配的时候，如果按照类型找到了多个符合条件的 bean，系统会报错。</p></li><li><p><strong>set 方法的参数如果是下面的类型或者下面类型的数组的时候，这个 set 方法会被跳过注入：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Boolean</span><span class="token punctuation">,</span><span class="token keyword">boolean</span><span class="token punctuation">,</span><span class="token class-name">Byte</span><span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">,</span><span class="token class-name">Character</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token class-name">Double</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token class-name">Float</span><span class="token punctuation">,</span><span class="token keyword">float</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">,</span><span class="token class-name">Short</span><span class="token punctuation">,</span>shot<span class="token punctuation">,</span><span class="token class-name">Enum</span><span class="token punctuation">,</span><span class="token class-name">CharSequence</span><span class="token punctuation">,</span><span class="token class-name">Number</span><span class="token punctuation">,</span><span class="token class-name">Date</span><span class="token punctuation">,</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>temporal<span class="token punctuation">.</span></span>Temporal</span><span class="token punctuation">,</span>java<span class="token punctuation">.</span>net<span class="token punctuation">.</span><span class="token constant">URI</span><span class="token punctuation">,</span>java<span class="token punctuation">.</span>net<span class="token punctuation">.</span><span class="token constant">URI</span><span class="token punctuation">,</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Locale</span><span class="token punctuation">,</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Class</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="4-2-2、案例"><a href="#4-2-2、案例" class="headerlink" title="4-2-2、案例"></a>4-2-2、案例</h4><h5 id="DiByType-java"><a href="#DiByType-java" class="headerlink" title="DiByType.java"></a>DiByType.java</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 按照类型自动注入 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiAutowireByType</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Service1</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> desc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"Service1&#123;"</span> <span class="token operator">+</span>                    <span class="token string">"desc='"</span> <span class="token operator">+</span> desc <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                    <span class="token char">'&#125;'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Service2</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> desc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"Service2&#123;"</span> <span class="token operator">+</span>                    <span class="token string">"desc='"</span> <span class="token operator">+</span> desc <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                    <span class="token char">'&#125;'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Service1</span> service1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Service2</span> service2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Service1</span> <span class="token function">getService1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> service1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setService1</span><span class="token punctuation">(</span><span class="token class-name">Service1</span> service1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setService1->"</span> <span class="token operator">+</span> service1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//@1</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>service1 <span class="token operator">=</span> service1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Service2</span> <span class="token function">getService2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> service2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setService2</span><span class="token punctuation">(</span><span class="token class-name">Service2</span> service2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setService2->"</span> <span class="token operator">+</span> service2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//@2</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>service2 <span class="token operator">=</span> service2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="diAutowireByName-xml-1"><a href="#diAutowireByName-xml-1" class="headerlink" title="diAutowireByName.xml"></a>diAutowireByName.xml</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo6.DiAutowireByName$Service1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo6.DiAutowireByName$Service2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service2-1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo6.DiAutowireByName$Service2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service2-1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- autowire：byType 配置按照type进行自动注入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diAutowireByType1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo6.DiAutowireByName<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 当配置了自动注入，还可以使用手动的方式自动注入进行覆盖，手动的优先级更高一些 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diAutowireByType2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo6.DiAutowireByName<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service2<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service2-1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="测试用例-1"><a href="#测试用例-1" class="headerlink" title="测试用例"></a>测试用例</h5><p>DiAutowireTest 类中添加一个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 按照set方法参数类型进行注入 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">diAutowireByType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo6/diAutowireByType.xml"</span><span class="token punctuation">;</span>    <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">IocUtils</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"diAutowireByType1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h5><p>运行 diAutowireByType 输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">setService1-<span class="token operator">></span>Service1<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1'</span><span class="token punctuation">&#125;</span>setService2-<span class="token operator">></span>Service2<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service2'</span><span class="token punctuation">&#125;</span>DiByType<span class="token punctuation">&#123;</span>service1<span class="token operator">=</span>Service1<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1'</span><span class="token punctuation">&#125;</span>, <span class="token assign-left variable">service2</span><span class="token operator">=</span>Service2<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service2'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3、优缺点"><a href="#4-2-3、优缺点" class="headerlink" title="4-2-3、优缺点"></a>4-2-3、优缺点</h4><p>相对于手动注入，节省了不少代码，新增或者删除属性，只需要增减对应的 set 方法就可以了，更容易扩展了。</p><h4 id="4-2-4、注入类型匹配的所有-Bean-重点"><a href="#4-2-4、注入类型匹配的所有-Bean-重点" class="headerlink" title="4-2-4、注入类型匹配的所有 Bean(重点)"></a>4-2-4、注入类型匹配的所有 Bean(重点)</h4><p><strong>按照类型注入还有两个比较牛逼的用法：</strong></p><ul><li><strong>一个容器中满足某种类型的 bean 可以有很多个，将容器中某种类型的所有 bean，通过 set 方法注入给一个 java.util.List&lt;需要注入的Bean的类型或者其父类型或者其接口&gt; 对象</strong></li><li><strong>将容器中某种类型中的所有 bean，通过 set 方法注入给一个 java.util.Map&lt;String,需要注入的Bean的类型或者其父类型或者其接口&gt;对象</strong></li></ul><h5 id="DiAutowireByTypeExtend-java"><a href="#DiAutowireByTypeExtend-java" class="headerlink" title="DiAutowireByTypeExtend.java"></a>DiAutowireByTypeExtend.java</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 满足条件的 bean 注入到集合中(重点) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiAutowireByTypeExtend</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义了一个接口</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IService1</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BaseServie</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> desc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Service1实现了IService1接口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Service1</span> <span class="token keyword">extends</span> <span class="token class-name">BaseServie</span> <span class="token keyword">implements</span> <span class="token class-name">IService1</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Service2</span> <span class="token keyword">extends</span> <span class="token class-name">BaseServie</span> <span class="token keyword">implements</span> <span class="token class-name">IService1</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IService1</span><span class="token punctuation">></span></span> serviceList<span class="token punctuation">;</span><span class="token comment">//@1</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BaseServie</span><span class="token punctuation">></span></span> baseServieList<span class="token punctuation">;</span><span class="token comment">//@2</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">IService1</span><span class="token punctuation">></span></span> service1Map<span class="token punctuation">;</span><span class="token comment">//@3</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BaseServie</span><span class="token punctuation">></span></span> baseServieMap<span class="token punctuation">;</span><span class="token comment">//@4</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IService1</span><span class="token punctuation">></span></span> <span class="token function">getServiceList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> serviceList<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setServiceList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IService1</span><span class="token punctuation">></span></span> serviceList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//@5</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>serviceList <span class="token operator">=</span> serviceList<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BaseServie</span><span class="token punctuation">></span></span> <span class="token function">getBaseServieList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> baseServieList<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBaseServieList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BaseServie</span><span class="token punctuation">></span></span> baseServieList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//@6</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>baseServieList <span class="token operator">=</span> baseServieList<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">IService1</span><span class="token punctuation">></span></span> <span class="token function">getService1Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> service1Map<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setService1Map</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">IService1</span><span class="token punctuation">></span></span> service1Map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//@7</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>service1Map <span class="token operator">=</span> service1Map<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BaseServie</span><span class="token punctuation">></span></span> <span class="token function">getBaseServieMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> baseServieMap<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBaseServieMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BaseServie</span><span class="token punctuation">></span></span> baseServieMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//@8</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>baseServieMap <span class="token operator">=</span> baseServieMap<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>   @1,@2,@3,@4：定义了 4 个属性，都是泛型类型的，都有对应的 set 方法。</p><p>   @5：参数类型是List&lt; BaseServie &gt;，这个集合中元素的类型是BaseServie，spring 会 到容器中所有满足 BaseServie. isAssignableFrom(bean的类型) 的 bean 列表，将其通过@5 的 set 方法进行注入。</p><p>   @6：同 @5 的代码</p><p>   @7：这个参数类型是一个 map 了，map 的 key 是 string 类型，value 是 IService1 类型，spring 容器会将所有满足 IService1 类型的 bean 找到，按照 name-&gt;bean 对象这种方式丢到一个 map 中，然后调用 @7 的 set 方法进行注入，最后注入的这个 map 就是 <strong>bean 的名称和 bean 对象</strong>进行映射的一个 map 对象。</p><p>   @8：同@7的代码</p></blockquote><h5 id="测试用例-2"><a href="#测试用例-2" class="headerlink" title="测试用例"></a>测试用例</h5><p>DiAutowireTest 新增一个方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 按照类型注入集合 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">diAutowireByTypeExtend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo6/diAutowireByTypeExtend.xml"</span><span class="token punctuation">;</span>    <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">IocUtils</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 从容器中获取 DiAutowireByTypeExtend</span>    <span class="token class-name">DiAutowireByTypeExtend</span> diAutowireByTypeExtend <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DiAutowireByTypeExtend</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出 diAutowireByTypeExtend 中的属性看一下</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"serviceList："</span> <span class="token operator">+</span> diAutowireByTypeExtend<span class="token punctuation">.</span><span class="token function">getServiceList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"baseServieList："</span> <span class="token operator">+</span> diAutowireByTypeExtend<span class="token punctuation">.</span><span class="token function">getBaseServieList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service1Map："</span> <span class="token operator">+</span> diAutowireByTypeExtend<span class="token punctuation">.</span><span class="token function">getService1Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"baseServieMap："</span> <span class="token operator">+</span> diAutowireByTypeExtend<span class="token punctuation">.</span><span class="token function">getBaseServieMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h5><p>运行 diAutowireByTypeExtend 输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">serviceList：<span class="token punctuation">[</span>BaseServie<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1-1'</span><span class="token punctuation">&#125;</span>, BaseServie<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1-2'</span><span class="token punctuation">&#125;</span>, BaseServie<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service2-1'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>baseServieList：<span class="token punctuation">[</span>BaseServie<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1-1'</span><span class="token punctuation">&#125;</span>, BaseServie<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1-2'</span><span class="token punctuation">&#125;</span>, BaseServie<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service2-1'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>service1Map：<span class="token punctuation">&#123;</span>service1-1<span class="token operator">=</span>BaseServie<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1-1'</span><span class="token punctuation">&#125;</span>, service1-2<span class="token operator">=</span>BaseServie<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1-2'</span><span class="token punctuation">&#125;</span>, service2-1<span class="token operator">=</span>BaseServie<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service2-1'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>baseServieMap：<span class="token punctuation">&#123;</span>service1-1<span class="token operator">=</span>BaseServie<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1-1'</span><span class="token punctuation">&#125;</span>, service1-2<span class="token operator">=</span>BaseServie<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1-2'</span><span class="token punctuation">&#125;</span>, service2-1<span class="token operator">=</span>BaseServie<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service2-1'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们来介绍另外一种自动注入方式。</p><h3 id="4-3、按照构造函数进行自动注入"><a href="#4-3、按照构造函数进行自动注入" class="headerlink" title="4-3、按照构造函数进行自动注入"></a>4-3、按照构造函数进行自动注入</h3><h4 id="4-3-1、用法"><a href="#4-3-1、用法" class="headerlink" title="4-3-1、用法"></a>4-3-1、用法</h4><p><strong>autowire 设置为 constructor</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X类<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>constructor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>   <strong>spring 会找到 x 类中所有的构造方法（一个类可能有多个构造方法），然后将这些构造方法进行排序（先按修饰符进行排序，public 的在前面，其他的在后面，如果修饰符一样的，会按照构造函数参数数量倒叙，也就是采用贪婪的模式进行匹配，spring 容器会尽量多注入一些需要的对象）得到一个构造函数列表，会轮询这个构造器列表，判断当前构造器所有参数是否在容器中都可以找到匹配的 bean 对象，如果可以找到就使用这个构造器进行注入，如果不能找到，那么就会跳过这个构造器，继续采用同样的方式匹配下一个构造器，直到找到一个合适的为止。</strong></p></blockquote><h4 id="4-3-2、案例"><a href="#4-3-2、案例" class="headerlink" title="4-3-2、案例"></a>4-3-2、案例</h4><h5 id="DiAutowireByConstructor-java"><a href="#DiAutowireByConstructor-java" class="headerlink" title="DiAutowireByConstructor.java"></a>DiAutowireByConstructor.java</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 构造函数的方式进行自动注入 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiAutowireByConstructor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BaseServie</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> desc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"BaseServie&#123;"</span> <span class="token operator">+</span>                    <span class="token string">"desc='"</span> <span class="token operator">+</span> desc <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                    <span class="token char">'&#125;'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//Service1实现了IService1接口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Service1</span> <span class="token keyword">extends</span> <span class="token class-name">BaseServie</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//Service1实现了IService1接口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Service2</span> <span class="token keyword">extends</span> <span class="token class-name">BaseServie</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Service1</span> service1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Service2</span> service2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DiAutowireByConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//@0</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">DiAutowireByConstructor</span><span class="token punctuation">(</span><span class="token class-name">Service1</span> service1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//@1</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DiAutowireByConstructor(Service1 service1)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>service1 <span class="token operator">=</span> service1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">DiAutowireByConstructor</span><span class="token punctuation">(</span><span class="token class-name">Service1</span> service1<span class="token punctuation">,</span> <span class="token class-name">Service2</span> service2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//@2</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DiAutowireByConstructor(Service1 service1, Service2 service2)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>service1 <span class="token operator">=</span> service1<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>service2 <span class="token operator">=</span> service2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Service1</span> <span class="token function">getService1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> service1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setService1</span><span class="token punctuation">(</span><span class="token class-name">Service1</span> service1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>service1 <span class="token operator">=</span> service1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Service2</span> <span class="token function">getService2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> service2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setService2</span><span class="token punctuation">(</span><span class="token class-name">Service2</span> service2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>service2 <span class="token operator">=</span> service2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>   @1：1 个参数的构造函数</p><p>   @2：2 个参数的构造函数</p><p>   2 个有参构造函数第一行都打印了一段文字，一会在输出中可以看到代码是调用了那个构造函数创建对象。</p></blockquote><h5 id="diAutowireByConstructor-xml"><a href="#diAutowireByConstructor-xml" class="headerlink" title="diAutowireByConstructor.xml"></a>diAutowireByConstructor.xml</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo6.DiAutowireByConstructor$Service1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diAutowireByConstructor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo6.DiAutowireByConstructor<span class="token punctuation">"</span></span>          <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>constructor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="测试用例-3"><a href="#测试用例-3" class="headerlink" title="测试用例"></a>测试用例</h5><p>DiAutowireTest 新增一个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 构造函数的方式进行自动注入 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">diAutowireByConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo6/diAutowireByConstructor.xml"</span><span class="token punctuation">;</span>    <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">IocUtils</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"diAutowireByConstructor"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h5><p>运行 diAutowireByConstructor 输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">DiAutowireByConstructor<span class="token punctuation">(</span>Service1 service1<span class="token punctuation">)</span>DiAutowireByConstructor<span class="token punctuation">&#123;</span>service1<span class="token operator">=</span>BaseServie<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1'</span><span class="token punctuation">&#125;</span>, <span class="token assign-left variable">service2</span><span class="token operator">=</span>null<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>   从输出中可以看到调用的是 DiAutowireByConstructor 类中的第一个构造函数注入了 service1 bean。</p><p>   <strong>构造函数匹配采用贪婪匹配，多个构造函数结合容器找到一个合适的构造函数，最先匹配的就是第一个有参构造函数，而第二个有参构造函数的第二个参数在 spring 容器中找不到匹配的 bean 对象，所以被跳过了。</strong></p></blockquote><p>我们在 diAutowireByConstructor.xml 加入 Service2 的配置：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo6.DiAutowireByConstructor$Service2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再来运行一下 diAutowireByConstructor 输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">DiAutowireByConstructor<span class="token punctuation">(</span>Service1 service1, Service2 service2<span class="token punctuation">)</span>DiAutowireByConstructor<span class="token punctuation">&#123;</span>service1<span class="token operator">=</span>BaseServie<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1'</span><span class="token punctuation">&#125;</span>, <span class="token assign-left variable">service2</span><span class="token operator">=</span>BaseServie<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service2'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>此时可以看到第二个有参构造函数被调用了，满足了贪婪方式的注入原则，最大限度的注入所有依赖的对象。</strong></p><h2 id="5、autowire-default"><a href="#5、autowire-default" class="headerlink" title="5、autowire&#x3D;default"></a>5、autowire&#x3D;default</h2><h3 id="5-1、用法"><a href="#5-1、用法" class="headerlink" title="5-1、用法"></a>5-1、用法</h3><p>​bean xml 的根元素为 beans，注意根元素有个 <code>default-autowire</code> 属性，这个属性可选值有 (no|byName|byType|constructor|default)，这个属性可以批量设置当前文件中所有 bean 的自动注入的方式，bean 元素中如果省略了 autowire 属性，那么会取<code>default-autowire</code>的值作为其<code>autowire</code>的值，而每个 bean 元素还可以单独设置自己的 <code>autowire</code> 覆盖 <code>default-autowire</code> 的配置，如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span>       <span class="token attr-name">default-autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2、案例"><a href="#5-2、案例" class="headerlink" title="5-2、案例"></a>5-2、案例</h3><h4 id="diAutowireByDefault-xml"><a href="#diAutowireByDefault-xml" class="headerlink" title="diAutowireByDefault.xml"></a>diAutowireByDefault.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span>       <span class="token attr-name">default-autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> //@1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo6.DiAutowireByName$Service1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo6.DiAutowireByName$Service2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service2-1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo6.DiAutowireByName$Service2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service2-1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- autowire：default，会采用beans中的default-autowire指定的配置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diAutowireByDefault1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo6.DiAutowireByName<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> //@2    <span class="token comment">&lt;!-- 还可以使用手动的方式自动注入进行覆盖，手动的优先级更高一些 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diAutowireByDefault2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo6.DiAutowireByName<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> //@3        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service2<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service2-1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意上面的 @1 配置的default-autowire&#x3D;”byName”，表示全局默认的自动注入方式是：按名称注入。@2 和 @3 的<code>autowire=default</code>，那么注入方式会取 <code>default-autowire</code> 的值。</p><h4 id="测试用例-4"><a href="#测试用例-4" class="headerlink" title="测试用例"></a>测试用例</h4><p>DiAutowireTest 中新增一个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * autowire=default */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">diAutowireByDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo6/diAutowireByDefault.xml"</span><span class="token punctuation">;</span>    <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">IocUtils</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"diAutowireByDefault1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"diAutowireByDefault2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="效果-4"><a href="#效果-4" class="headerlink" title="效果"></a>效果</h4><p>运行输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">setService1-<span class="token operator">></span>Service1<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1'</span><span class="token punctuation">&#125;</span>setService2-<span class="token operator">></span>Service2<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service2'</span><span class="token punctuation">&#125;</span>setService2-<span class="token operator">></span>Service2<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service2-1'</span><span class="token punctuation">&#125;</span>setService1-<span class="token operator">></span>Service1<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1'</span><span class="token punctuation">&#125;</span>DiAutowireByName<span class="token punctuation">&#123;</span>service1<span class="token operator">=</span>Service1<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1'</span><span class="token punctuation">&#125;</span>, <span class="token assign-left variable">service2</span><span class="token operator">=</span>Service2<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service2'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>DiAutowireByName<span class="token punctuation">&#123;</span>service1<span class="token operator">=</span>Service1<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service1'</span><span class="token punctuation">&#125;</span>, <span class="token assign-left variable">service2</span><span class="token operator">=</span>Service2<span class="token punctuation">&#123;</span>desc<span class="token operator">=</span><span class="token string">'service2-1'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h2><ul><li><strong>xml 中手动注入存在的不足之处，可以通过自动注入的方式来解决，本文介绍了 3 中自动注入：通过名称自动注入、通过类型自动注入、通过构造器自动注入</strong></li><li><strong>按类型注入中有个比较重要的是注入匹配类型所有的 bean，可以将某种类型所有的 bean 注入给一个 List 对象，可以将某种类型的所有 bean 按照<code>bean 名称-&gt;bean 对象</code>的映射方式注入给一个 Map 对象，这种用法比较重要，用途比较大，要掌握</strong></li><li><strong>spring 中还有其他自动注入的方式，用起来会更爽，后面的文章中我们会详细介绍。</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七、Spring依赖注入之手动注入</title>
      <link href="/posts/e35541a1.html"/>
      <url>/posts/e35541a1.html</url>
      
        <content type="html"><![CDATA[<h1 id="七、Spring依赖注入之手动注入"><a href="#七、Spring依赖注入之手动注入" class="headerlink" title="七、Spring依赖注入之手动注入"></a>七、Spring依赖注入之手动注入</h1><h2 id="1、依赖回顾"><a href="#1、依赖回顾" class="headerlink" title="1、依赖回顾"></a>1、依赖回顾</h2><p>​通常情况下，系统中类和类之间是有依赖关系的，如果一个类对外提供的功能需要通过调用其他类的方法来实现的时候，说明这两个类之间存在依赖关系，如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">UserModel</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//插入用户信息</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">UserModel</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>UserController 中的 insert 方法中需要调用 userService 的 insert 方法，说明 UserController依赖于 UserService，如果userService 不存在，此时 UserControler 无法对外提供 insert 操作。</p><p>那么我们创建 UserController 对象的时候如何将给 userService 设置值呢？通常有 2 种方法。</p><h3 id="1-1、依赖对象的初始化方式"><a href="#1-1、依赖对象的初始化方式" class="headerlink" title="1-1、依赖对象的初始化方式"></a>1-1、依赖对象的初始化方式</h3><h4 id="通过构造器设置依赖对象"><a href="#通过构造器设置依赖对象" class="headerlink" title="通过构造器设置依赖对象"></a>通过构造器设置依赖对象</h4><p>UserController 中添加一个有参构造方法，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UserController</span><span class="token punctuation">(</span><span class="token class-name">UserService</span> userService<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">UserModel</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//UserController使用</span><span class="token class-name">UserSerivce</span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UserController</span> userController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserController</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//然后就可以使用userController对象了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通过-set-方法设置依赖对象"><a href="#通过-set-方法设置依赖对象" class="headerlink" title="通过 set 方法设置依赖对象"></a>通过 set 方法设置依赖对象</h4><p>可以在UserController中给userService添加一个set方法，如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">setUserService</span><span class="token punctuation">(</span><span class="token class-name">UserService</span> userService<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">UserModel</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//UserController使用</span><span class="token class-name">UserSerivce</span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UserController</span> userController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userController<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//然后就可以使用userController对象了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这些操作，将被依赖的对象设置到依赖的对象中，spring 容器内部都提供了支持，这个在 spirng 中叫做依赖注入。</p><h2 id="2、Spring-依赖注入"><a href="#2、Spring-依赖注入" class="headerlink" title="2、Spring 依赖注入"></a>2、Spring 依赖注入</h2><p>​spring 中依赖注入主要分为手动注入和自动注入，本文我们主要说一下手动注入，手动注入需要我们明确配置需要注入的对象。</p><p>​将被依赖方注入到依赖方通常有 2 种方式：构造函数的方式和 set 属性的方式，spring 中也是通过这两种方式实现注入的，下面详解 2 种方式。</p><h2 id="3、通过构造器注入"><a href="#3、通过构造器注入" class="headerlink" title="3、通过构造器注入"></a>3、通过构造器注入</h2><p>构造器的参数就是被依赖的对象，构造器注入又分为 3 种注入方式：</p><ul><li>根据构造器参数索引注入</li><li>根据构造器参数类型注入</li><li>根据构造器参数名称注入</li></ul><h3 id="3-1、根据构造器参数索引注入"><a href="#3-1、根据构造器参数索引注入" class="headerlink" title="3-1、根据构造器参数索引注入"></a>3-1、根据构造器参数索引注入</h3><h4 id="3-1-1、用法"><a href="#3-1-1、用法" class="headerlink" title="3-1-1、用法"></a>3-1-1、用法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"diByConstructorParamIndex"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.javacode.lesson.demo5.UserModel"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg index<span class="token operator">=</span><span class="token string">"0"</span> value<span class="token operator">=</span><span class="token string">"Java"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg index<span class="token operator">=</span><span class="token string">"1"</span> value<span class="token operator">=</span><span class="token string">"上海市"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>   <code>constructor-arg</code> 用户指定构造器的参数</p><ol><li>index：构造器参数的位置，从 0 开始</li><li>value：构造器参数的值<ul><li>value 只能用来给简单的类型设置值</li><li>value 对应的属性类型只能为byte, int, long, float, double, boolean, Byte, Long, Float, Double, 枚举</li><li>spring 容器内部注入的时候会将 value 的值转换为对应的类型</li></ul></li></ol></blockquote><h4 id="3-1-2、案例"><a href="#3-1-2、案例" class="headerlink" title="3-1-2、案例"></a>3-1-2、案例</h4><h5 id="UserModel-java"><a href="#UserModel-java" class="headerlink" title="UserModel.java"></a>UserModel.java</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">//描述信息</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"UserModel&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", desc='"</span> <span class="token operator">+</span> desc <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>   注意上面的 3 个构造函数。</p></blockquote><h5 id="diByConstructorParamIndex-xml"><a href="#diByConstructorParamIndex-xml" class="headerlink" title="diByConstructorParamIndex.xml"></a>diByConstructorParamIndex.xml</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 通过构造器参数的索引注入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diByConstructorParamIndex<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo5.UserModel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>我是通过构造器参数位置注入的<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面创建UserModel实例代码相当于下面代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">UserModel</span> userModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span><span class="token string">"我是通过构造器参数类型注入的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="工具类-IoUtils-java"><a href="#工具类-IoUtils-java" class="headerlink" title="工具类 IoUtils.java"></a>工具类 IoUtils.java</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IocUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ClassPathXmlApplicationContext</span> <span class="token function">context</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanXml<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="测试用例-DiTest-java"><a href="#测试用例-DiTest-java" class="headerlink" title="测试用例 DiTest.java"></a>测试用例 DiTest.java</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 通过构造器的参数位置注入     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">diByConstructorParamIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo5/diByConstructorParamIndex.xml"</span><span class="token punctuation">;</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">IocUtils</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"diByConstructorParamIndex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p>运行 diByConstructorParamIndex 输出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">UserModel<span class="token punctuation">&#123;</span>name<span class="token operator">=</span><span class="token string">'Java'</span>, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">desc</span><span class="token operator">=</span><span class="token string">'我是通过构造器参数位置注入的'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-1-3、优缺点"><a href="#3-1-3、优缺点" class="headerlink" title="3-1-3、优缺点"></a>3-1-3、优缺点</h4><p>​<strong>参数位置的注入对参数顺序有很强的依赖性，若构造函数参数位置被人调整过，会导致注入出错。</strong></p><p>​<strong>不过通常情况下，不建议去在代码中修改构造函数，如果需要新增参数的，可以新增一个构造函数来实现，这算是一种扩展，不会影响目前已有的功能。</strong></p><h3 id="3-2、根据构造器参数类型注入"><a href="#3-2、根据构造器参数类型注入" class="headerlink" title="3-2、根据构造器参数类型注入"></a>3-2、根据构造器参数类型注入</h3><h4 id="3-2-1、用法"><a href="#3-2-1、用法" class="headerlink" title="3-2-1、用法"></a>3-2-1、用法</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diByConstructorParamType<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo5.UserModel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>参数类型<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>参数值<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>参数类型<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>参数值<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>   <code>constructor-arg</code> 用户指定构造器的参数</p><ol><li>type：构造函数参数的完整类型，如：java.lang.String,int,double</li><li>value：构造器参数的值，value 只能用来给简单的类型设置值</li></ol></blockquote><h4 id="3-2-2、案例"><a href="#3-2-2、案例" class="headerlink" title="3-2-2、案例"></a>3-2-2、案例</h4><h5 id="diByConstructorParamType-xml"><a href="#diByConstructorParamType-xml" class="headerlink" title="diByConstructorParamType.xml"></a>diByConstructorParamType.xml</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 通过构造器参数的类型注入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diByConstructorParamType<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo5.UserModel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>我是通过构造器参数类型注入的<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面创建 UserModel 实例代码相当于下面代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">UserModel</span> userModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token string">"我是通过构造器参数类型注入的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="新增测试用例"><a href="#新增测试用例" class="headerlink" title="新增测试用例"></a>新增测试用例</h5><p>DiTest类中新增一个测试用例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 通过构造器的参数类型注入 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">diByConstructorParamType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo5/diByConstructorParamType.xml"</span><span class="token punctuation">;</span>    <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">IocUtils</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"diByConstructorParamType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h5><p>运行diByConstructorParamType输出</p><pre class="line-numbers language-none"><code class="language-none">UserModel&#123;name&#x3D;&#39;Java&#39;, age&#x3D;30, desc&#x3D;&#39;我是通过构造器参数类型注入的&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-3、优缺点"><a href="#3-2-3、优缺点" class="headerlink" title="3-2-3、优缺点"></a>3-2-3、优缺点</h4><p>​<strong>实际上按照参数位置或者按照参数的类型注入，都有一个问题，很难通过 bean 的配置文件，知道这个参数是对应 UserModel 中的那个属性的，代码的可读性不好，比如我想知道这每个参数对应 UserModel 中的那个属性，必须要去看 UserModel 的源码，下面要介绍按照参数名称注入的方式比上面这 2 种更优秀一些。</strong></p><h3 id="3-3、根据构造器参数名称注入"><a href="#3-3、根据构造器参数名称注入" class="headerlink" title="3-3、根据构造器参数名称注入"></a>3-3、根据构造器参数名称注入</h3><h4 id="3-3-1、用法"><a href="#3-3-1、用法" class="headerlink" title="3-3-1、用法"></a>3-3-1、用法</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diByConstructorParamName<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo5.UserModel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>参数名称<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>参数值<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>参数名称<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>参数值<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>   constructor-arg 用户指定构造器的参数</p><ol><li>name：构造参数名称</li><li>value：构造器参数的值，value 只能用来给简单的类型设置值</li></ol></blockquote><h4 id="3-3-2、关于方法参数名称的问题"><a href="#3-3-2、关于方法参数名称的问题" class="headerlink" title="3-3-2、关于方法参数名称的问题"></a>3-3-2、关于方法参数名称的问题</h4><p>​java 通过反射的方式可以获取到方法的参数名称，不过源码中的参数通过编译之后会变成 class 对象，通常情况下源码变成 class 文件之后，参数的真实名称会丢失，参数的名称会变成 <strong>arg0,arg1,arg2</strong> 这样的，和实际参数名称不一样了，<strong>如果需要将源码中的参数名称保留在编译之后的 class 文件中，编译的时候需要用下面的命令</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">javac <span class="token parameter variable">-parameters</span> java源码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​但是我们难以保证编译代码的时候，操作人员一定会带上 -parameters 参数，所以方法的参数可能在 class 文件中会丢失，导致反射获取到的参数名称和实际参数名称不符，这个我们需要先了解一下。</p><p>​<strong>参数名称可能不稳定的问题，spring提供了解决方案，通过ConstructorProperties 注解来定义参数的名称，将这个注解加在构造方法上面</strong>，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ConstructorProperties</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"第一个参数名称"</span><span class="token punctuation">,</span> <span class="token string">"第二个参数的名称"</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token string">"第n个参数的名称"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> 类名<span class="token punctuation">(</span><span class="token class-name">String</span> p1<span class="token punctuation">,</span> <span class="token class-name">String</span> p2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> 参数 n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-3-1、案例"><a href="#3-3-1、案例" class="headerlink" title="3-3-1、案例"></a>3-3-1、案例</h4><h5 id="CarModel-java"><a href="#CarModel-java" class="headerlink" title="CarModel.java"></a>CarModel.java</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">ConstructorProperties</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarModel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//描述信息</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CarModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@ConstructorProperties</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"desc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CarModel</span><span class="token punctuation">(</span><span class="token class-name">String</span> p1<span class="token punctuation">,</span> <span class="token class-name">String</span> p2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> p1<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> p2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"CarModel&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", desc='"</span> <span class="token operator">+</span> desc <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="diByConstructorParamName-xml"><a href="#diByConstructorParamName-xml" class="headerlink" title="diByConstructorParamName.xml"></a>diByConstructorParamName.xml</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 通过构造器参数的名称注入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diByConstructorParamName<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo5.CarModel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>我是通过构造器参数类型注入的<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>保时捷Macans<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面创建 CarModel 实例代码相当于下面代码：</p><pre class="line-numbers language-none"><code class="language-none">CarModel carModel &#x3D; new CarModel(&quot;保时捷Macans&quot;,&quot;我是通过构造器参数类型注入的&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="新增测试用例-1"><a href="#新增测试用例-1" class="headerlink" title="新增测试用例"></a>新增测试用例</h5><p>DiTest类中新增一个测试用例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 通过构造器的参数名称注入 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">diByConstructorParamName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo5/diByConstructorParamName.xml"</span><span class="token punctuation">;</span>    <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">IocUtils</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"diByConstructorParamName"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h5><p>运行 diByConstructorParamName 输出</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">CarModel&#123;name</span><span class="token punctuation">=</span><span class="token value attr-value">'保时捷Macans', desc='我是通过构造器参数类型注入的'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4、通过-setter-注入"><a href="#4、通过-setter-注入" class="headerlink" title="4、通过 setter 注入"></a>4、通过 setter 注入</h2><p><strong>通常情况下，我们的类都是标准的 javabean，javabean 类的特点：</strong></p><ul><li><strong>属性都是 private 访问级别的</strong></li><li><strong>属性通常情况下通过一组 setter（修改器）和 getter（访问器）方法来访问</strong></li><li><strong>setter 方法，以 set 开头，后跟首字母大写的属性名，如：setUserName，简单属性一般只有一个方法参数，方法返回值通常为 void</strong></li><li><strong>getter 方法，一般属性以 get 开头，对于 boolean 类型一般以 is 开头，后跟首字母大写的属性名，如：getUserName，isOk；</strong></li></ul><p>spring 对符合 javabean 特点类，提供了 setter 方式的注入，会调用对应属性的 setter 方法将被依赖的对象注入进去。</p><h3 id="4-1、用法"><a href="#4-1、用法" class="headerlink" title="4-1、用法"></a>4-1、用法</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性名称<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性值<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性名称<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性值<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>   <code>property</code> 用于对属性的值进行配置，可以有多个</p><ol><li>name：属性的名称</li><li>value：属性的值</li></ol></blockquote><h3 id="4-2、案例"><a href="#4-2、案例" class="headerlink" title="4-2、案例"></a>4-2、案例</h3><h4 id="MenuModel-java"><a href="#MenuModel-java" class="headerlink" title="MenuModel.java"></a>MenuModel.java</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 菜单类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MenuModel</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//菜单名称</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> label<span class="token punctuation">;</span>    <span class="token comment">//同级别排序</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> theSort<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> label<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLabel</span><span class="token punctuation">(</span><span class="token class-name">String</span> label<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token operator">=</span> label<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getTheSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> theSort<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTheSort</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> theSort<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>theSort <span class="token operator">=</span> theSort<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"MenuModel&#123;"</span> <span class="token operator">+</span>                <span class="token string">"label='"</span> <span class="token operator">+</span> label <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", theSort="</span> <span class="token operator">+</span> theSort <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="diBySetter-xml"><a href="#diBySetter-xml" class="headerlink" title="diBySetter.xml"></a>diBySetter.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diBySetter<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo5.MenuModel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>label<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spring系列<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新增测试用例-2"><a href="#新增测试用例-2" class="headerlink" title="新增测试用例"></a>新增测试用例</h4><p>DiTest 类中添加一个测试方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 通过setter方法注入 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">diBySetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo5/diBySetter.xml"</span><span class="token punctuation">;</span>    <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">IocUtils</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"diBySetter"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h4><p>运行 diBySetter 输出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">MenuModel<span class="token punctuation">&#123;</span>label<span class="token operator">=</span><span class="token string">'spring系列'</span>, <span class="token assign-left variable">theSort</span><span class="token operator">=</span>null<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3、优缺点"><a href="#4-3、优缺点" class="headerlink" title="4-3、优缺点"></a>4-3、优缺点</h3><p>​<strong>setter 注入相对于构造函数注入要灵活一些，构造函数需要指定对应构造函数中所有参数的值，而 setter 注入的方式没有这种限制，不需要对所有属性都进行注入，可以按需进行注入。</strong></p><p>​上面介绍的都是注入普通类型的对象，都是通过 value 属性来设置需要注入的对象的值的，value 属性的值是 String 类型的，spring 容器内部自动会将 value 的值转换为对象的实际类型。</p><p>若我们依赖的对象是容器中的其他 bean 对象的时候，需要用下面的方式进行注入。</p><h2 id="5、注入容器中的-bean"><a href="#5、注入容器中的-bean" class="headerlink" title="5、注入容器中的 bean"></a>5、注入容器中的 bean</h2><p><strong>注入容器中的 bean 有两种写法：</strong></p><ul><li><strong>ref 属性方式</strong></li><li><strong>内置 bean 的方式</strong></li></ul><h3 id="5-1、ref-属性方式"><a href="#5-1、ref-属性方式" class="headerlink" title="5-1、ref 属性方式"></a>5-1、ref 属性方式</h3><p>将上面介绍的 constructor-arg 或者 property 元素的 value 属性名称替换为ref，ref 属性的值为容器中其他 bean 的名称，如：</p><ul><li>构造器方式，将 value 替换为 ref：</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>需要注入的bean的名称<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>setter 方式，将 value 替换为 ref：</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性名称<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>需要注入的bean的名称<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-2、内置-bean-的方式"><a href="#5-2、内置-bean-的方式" class="headerlink" title="5-2、内置 bean 的方式"></a>5-2、内置 bean 的方式</h3><ul><li>构造器的方式：</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>setter 方式：</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-3、案例"><a href="#5-3、案例" class="headerlink" title="5-3、案例"></a>5-3、案例</h3><h4 id="PersonModel-java"><a href="#PersonModel-java" class="headerlink" title="PersonModel.java"></a>PersonModel.java</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonModel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">UserModel</span> userModel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">CarModel</span> carModel<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PersonModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">PersonModel</span><span class="token punctuation">(</span><span class="token class-name">UserModel</span> userModel<span class="token punctuation">,</span> <span class="token class-name">CarModel</span> carModel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userModel <span class="token operator">=</span> userModel<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>carModel <span class="token operator">=</span> carModel<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">UserModel</span> <span class="token function">getUserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserModel</span><span class="token punctuation">(</span><span class="token class-name">UserModel</span> userModel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userModel <span class="token operator">=</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">CarModel</span> <span class="token function">getCarModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> carModel<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCarModel</span><span class="token punctuation">(</span><span class="token class-name">CarModel</span> carModel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>carModel <span class="token operator">=</span> carModel<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"PersonModel&#123;"</span> <span class="token operator">+</span>                <span class="token string">"userModel="</span> <span class="token operator">+</span> userModel <span class="token operator">+</span>                <span class="token string">", carModel="</span> <span class="token operator">+</span> carModel <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​PersonModel 中有依赖于2个对象UserModel、CarModel，下面我们通过spring 将 UserModel 和 CarModel 创建好，然后注入到 PersonModel 中，下面创建 bean 配置文件：</p><h4 id="diBean-xml"><a href="#diBean-xml" class="headerlink" title="diBean.xml"></a>diBean.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo5.UserModel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 通过构造器方式注入容器中的bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diBeanByConstructor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo5.PersonModel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 通过ref引用容器中定义的其他bean，user对应上面定义的id="user"的bean --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo5.CarModel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>宾利<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 通过setter方式注入容器中的bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diBeanBySetter<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo5.PersonModel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 通过ref引用容器中定义的其他bean，user对应上面定义的id="user"的bean --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userModel<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carModel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo5.CarModel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>保时捷<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新增测试用例-3"><a href="#新增测试用例-3" class="headerlink" title="新增测试用例"></a>新增测试用例</h4><p>DiTest 中新增一个测试方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">diBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo5/diBean.xml"</span><span class="token punctuation">;</span>    <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">IocUtils</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"diBeanByConstructor"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"diBeanBySetter"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="效果-4"><a href="#效果-4" class="headerlink" title="效果"></a>效果</h4><p>运行 diBean 用例，输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PersonModel<span class="token punctuation">&#123;</span>userModel<span class="token operator">=</span>UserModel<span class="token punctuation">&#123;</span>name<span class="token operator">=</span><span class="token string">'null'</span>, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">desc</span><span class="token operator">=</span><span class="token string">'null'</span><span class="token punctuation">&#125;</span>, <span class="token assign-left variable">carModel</span><span class="token operator">=</span>CarModel<span class="token punctuation">&#123;</span>name<span class="token operator">=</span><span class="token string">'宾利'</span>, <span class="token assign-left variable">desc</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>PersonModel<span class="token punctuation">&#123;</span>userModel<span class="token operator">=</span>UserModel<span class="token punctuation">&#123;</span>name<span class="token operator">=</span><span class="token string">'null'</span>, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">desc</span><span class="token operator">=</span><span class="token string">'null'</span><span class="token punctuation">&#125;</span>, <span class="token assign-left variable">carModel</span><span class="token operator">=</span>CarModel<span class="token punctuation">&#123;</span>name<span class="token operator">=</span><span class="token string">'保时捷'</span>, <span class="token assign-left variable">desc</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-4、其他类型注入"><a href="#5-4、其他类型注入" class="headerlink" title="5-4、其他类型注入"></a>5-4、其他类型注入</h3><h4 id="注入-java-util-List（list元素）"><a href="#注入-java-util-List（list元素）" class="headerlink" title="注入 java.util.List（list元素）"></a>注入 java.util.List（list元素）</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    或    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean名称<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    或    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    或    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    或    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    或    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注入-java-util-Set（set元素）"><a href="#注入-java-util-Set（set元素）" class="headerlink" title="注入 java.util.Set（set元素）"></a>注入 java.util.Set（set元素）</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    或    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean名称<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    或    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    或    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    或    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    或    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注入-java-util-Map（map元素）"><a href="#注入-java-util-Map（map元素）" class="headerlink" title="注入 java.util.Map（map元素）"></a>注入 java.util.Map（map元素）</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">key-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key引用的bean名称<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value引用的bean名称<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    或    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>            key 对应的值，可以为任意类型        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>            value 对应的值，可以为任意类型        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注入数组（array元素）"><a href="#注入数组（array元素）" class="headerlink" title="注入数组（array元素）"></a>注入数组（array元素）</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>    数组中的元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="注入-java-util-Properties（props元素）"><a href="#注入-java-util-Properties（props元素）" class="headerlink" title="注入 java.util.Properties（props元素）"></a>注入 java.util.Properties（props元素）</h4><p>Properties 类相当于键值都是 String 类型的 Map 对象，使用 props 进行注入，如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>java高并发系列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>mybatis系列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>mysql系列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>对于上面这些类型来个综合案例。</p><h5 id="DiOtherTypeModel-java"><a href="#DiOtherTypeModel-java" class="headerlink" title="DiOtherTypeModel.java"></a>DiOtherTypeModel.java</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiOtherTypeModel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserModel</span><span class="token punctuation">></span></span> set1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Properties</span> properties1<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getList1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> list1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setList1</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list1 <span class="token operator">=</span> list1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserModel</span><span class="token punctuation">></span></span> <span class="token function">getSet1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> set1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSet1</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserModel</span><span class="token punctuation">></span></span> set1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>set1 <span class="token operator">=</span> set1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">getMap1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> map1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMap1</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>map1 <span class="token operator">=</span> map1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getArray1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> array1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setArray1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>array1 <span class="token operator">=</span> array1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Properties</span> <span class="token function">getProperties1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> properties1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties1</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties1 <span class="token operator">=</span> properties1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"DiOtherTypeModel&#123;"</span> <span class="token operator">+</span>                <span class="token string">"list1="</span> <span class="token operator">+</span> list1 <span class="token operator">+</span>                <span class="token string">", set1="</span> <span class="token operator">+</span> set1 <span class="token operator">+</span>                <span class="token string">", map1="</span> <span class="token operator">+</span> map1 <span class="token operator">+</span>                <span class="token string">", array1="</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array1<span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">", properties1="</span> <span class="token operator">+</span> properties1 <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个类中包含了刚才我们介绍的各种类型，下面来进行注入。</p><h5 id="diOtherType-xml"><a href="#diOtherType-xml" class="headerlink" title="diOtherType.xml"></a>diOtherType.xml</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo5.UserModel<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo5.UserModel<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diOtherType<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo5.DiOtherTypeModel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 注入java.util.List对象 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>SpringBoot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 注入java.util.Set对象 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>set1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 注入java.util.Map对象 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>路人<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>28<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 注入数组对象 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>array1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 注入java.util.Properties对象 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>properties1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>java高并发系列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>mybatis系列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>mysql系列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="新增测试用例-4"><a href="#新增测试用例-4" class="headerlink" title="新增测试用例"></a>新增测试用例</h5><p>DiTest类中新增一个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 其他各种类型注入 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">diOtherType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo5/diOtherType.xml"</span><span class="token punctuation">;</span>    <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">IocUtils</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"diOtherType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="效果-5"><a href="#效果-5" class="headerlink" title="效果"></a>效果</h4><p>运行测试用例输出：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">DiOtherTypeModel<span class="token punctuation">&#123;</span>  list1=<span class="token punctuation">[</span>  Spring<span class="token punctuation">,</span> SpringBoot  <span class="token punctuation">]</span><span class="token punctuation">,</span> set1=<span class="token punctuation">[</span>    UserModel<span class="token punctuation">&#123;</span>    name='<span class="token null keyword">null</span>'<span class="token punctuation">,</span>     age=<span class="token number">0</span><span class="token punctuation">,</span>     desc='<span class="token null keyword">null</span>'    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> UserModel<span class="token punctuation">&#123;</span>      name='<span class="token null keyword">null</span>'<span class="token punctuation">,</span>       age=<span class="token number">0</span><span class="token punctuation">,</span>       desc='<span class="token null keyword">null</span>'    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> map1=<span class="token punctuation">&#123;</span>    Java=<span class="token number">30</span><span class="token punctuation">,</span>     路人=<span class="token number">28</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> array1=<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> properties1=<span class="token punctuation">&#123;</span>    key3=mysql系列<span class="token punctuation">,</span>     key2=mybatis系列<span class="token punctuation">,</span>     key1=java高并发系列  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5、总结"><a href="#5-5、总结" class="headerlink" title="5-5、总结"></a>5-5、总结</h3><ol><li><strong>本文主要讲解了 xml 中 bean 的依赖注入，都是采用硬编码的方式进行注入的，这种算是手动的方式</strong></li><li><strong>注入普通类型通过 value 属性或者 value 元素设置注入的值；注入对象如果是容器的其他 bean 的时候，需要使用 ref 属性或者 ref 元素或者内置 bean 元素的方式</strong></li><li><strong>还介绍了其他几种类型 List、Set、Map、数组、Properties 类型的注入，多看几遍加深理解</strong></li><li><strong>后面将介绍 spring 为我们提供的更牛逼的自动注入</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、JavaScript入门</title>
      <link href="/posts/7e4cf991.html"/>
      <url>/posts/7e4cf991.html</url>
      
        <content type="html"><![CDATA[<h1 id="二、JavaScript-入门"><a href="#二、JavaScript-入门" class="headerlink" title="二、JavaScript 入门"></a>二、JavaScript 入门</h1><h2 id="1、script-标签"><a href="#1、script-标签" class="headerlink" title="1、script 标签"></a>1、script 标签</h2><p><strong>我们几乎可以使用 <code>&lt;script&gt;</code> 标签将 JavaScript 程序插入到 HTML 文档的任何位置。</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>script 标签之前...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>...script 标签之后<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>&lt;script&gt;</code> 标签中包裹了 JavaScript 代码，当浏览器遇到 <code>&lt;script&gt;</code> 标签，代码会自动运行。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/javascript-note/20240719173421.png"></p><h2 id="2、现代的标记（markup）"><a href="#2、现代的标记（markup）" class="headerlink" title="2、现代的标记（markup）"></a>2、现代的标记（markup）</h2><p><code>&lt;script&gt;</code> 标签有一些现在很少用到的特性（attribute），但是我们可以在老代码中找到它们：</p><h3 id="type-特性"><a href="#type-特性" class="headerlink" title="type 特性"></a><code>type</code> 特性</h3><p><code>&lt;script type=...&gt;</code> : 在老的 HTML4 标准中，要求 script 标签有 <code>type</code> 特性。通常是 <code>type=&quot;text/javascript&quot;</code>。这样的特性声明现在已经不再需要。而且，现代 HTML 标准已经完全改变了此特性的含义。现在，它可以用于 JavaScript 模块。但这是一个高阶话题，我们将在本教程的另一部分中探讨 JavaScript 模块。</p><h3 id="language-特性"><a href="#language-特性" class="headerlink" title="language 特性"></a><code>language</code> 特性</h3><p><code>&lt;script language=...&gt;</code> : 这个特性是为了显示脚本使用的语言。这个特性现在已经没有任何意义，因为语言默认就是 JavaScript。不再需要使用它了。</p><p>脚本前后的注释。 : 在非常古老的书籍和指南中，你可能会在 <code>&lt;script&gt;</code> 标签里面找到注释，就像这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    <span class="token operator">...</span><span class="token comment">//--></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现代 JavaScript 中已经不这样使用了。这些注释是用于不支持 <code>&lt;script&gt;</code> 标签的古老的浏览器隐藏 JavaScript 代码的。由于最近 15 年内发布的浏览器都没有这样的问题，因此这种注释能帮你辨认出一些老掉牙的代码。</p><h2 id="3、外部脚本"><a href="#3、外部脚本" class="headerlink" title="3、外部脚本"></a>3、外部脚本</h2><p>如果你有大量的 JavaScript 代码，我们可以将它放入一个单独的文件。</p><h3 id="src-特性"><a href="#src-特性" class="headerlink" title="src 特性"></a>src 特性</h3><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>脚本文件可以通过 <code>src</code> 特性（attribute）添加到 HTML 文件中。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/path/to/script.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里，<code>/path/to/script.js</code> 是脚本文件从网站根目录开始的绝对路径。当然也可以提供当前页面的相对路径。例如，<code>src =&quot;script.js&quot;</code>，就像 <code>src=&quot;./script.js&quot;</code>，表示当前文件夹中的 <code>&quot;script.js&quot;</code> 文件。</p><p>我们也可以提供一个完整的 URL 地址，例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.11/lodash.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要附加多个脚本，请使用多个标签：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/script1.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/script2.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">// …</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>一般来说，只有最简单的脚本才嵌入到 HTML 中。更复杂的脚本存放在单独的文件中。</p><p>使用独立文件的好处是浏览器会下载它，然后将它保存到浏览器的 <a href="https://en.wikipedia.org/wiki/Web_cache">缓存</a> 中。之后，其他页面想要相同的脚本就会从缓存中获取，而不是下载它。所以文件实际上只会下载一次。这可以节省流量，并使得页面（加载）更快。</p></blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><strong>如果设置了 <code>src</code> 特性，<code>script</code> 标签内容将会被忽略。</strong></p><p><strong>一个单独的 <code>&lt;script&gt;</code> 标签不能同时有 <code>src</code> 特性和内部包裹的代码，这将不会工作</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"file.js"</span><span class="token operator">></span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此内容会被忽略，因为设定了 src</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们必须进行选择，要么使用外部的 <code>&lt;script src=&quot;…&quot;&gt;</code>，要么使用正常包裹代码的 <code>&lt;script&gt;</code>。</p><h4 id="改善"><a href="#改善" class="headerlink" title="改善"></a>改善</h4><p>为了让上面的例子工作，我们可以将它分成两个 <code>&lt;script&gt;</code> 标签。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"file.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、JavaScript-交互"><a href="#4、JavaScript-交互" class="headerlink" title="4、JavaScript 交互"></a>4、JavaScript 交互</h2><h3 id="alert"><a href="#alert" class="headerlink" title="alert()"></a>alert()</h3><p>alert 会显示一条信息，并等待用户按下 “OK”。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>弹出的这个带有信息的小窗口被称为 <strong>模态窗</strong>。</li><li>“modal” 意味着用户不能与页面的其他部分（例如点击其他按钮等）进行交互，直到他们处理完窗口。</li></ul><h3 id="prompt"><a href="#prompt" class="headerlink" title="prompt()"></a>prompt()</h3><p><code>prompt</code> 函数：显示信息要求用户输入文本。点击确定返回文本，点击取消或按下 Esc 键返回 <code>null</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">result <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">default</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接收两个参数：</p><ul><li><p><code>title</code></p><p>显示给用户的文本</p></li><li><p><code>default</code></p><p>可选的第二个参数，指定 input 框的初始值。</p></li></ul><blockquote><p><strong>语法中的方括号 <code>[...]</code></strong></p><p>上述语法中 <code>default</code> 周围的方括号表示该参数是可选的，不是必需的。</p></blockquote><h3 id="confirm"><a href="#confirm" class="headerlink" title="confirm()"></a>confirm()</h3><p>显示信息等待用户点击确定或取消。点击确定返回 <code>true</code>，点击取消或按下 Esc 键返回 <code>false</code>。</p><p>语法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">result <span class="token operator">=</span> <span class="token function">confirm</span><span class="token punctuation">(</span>question<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>confirm</code> 函数显示一个带有 <code>question</code> 以及确定和取消两个按钮的模态窗口。</p><p>点击确定返回 <code>true</code>，点击取消返回 <code>false</code>。</p><p>例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> isBoss <span class="token operator">=</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"Are you the boss?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> isBoss <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果“确定”按钮被按下，则显示 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><ul><li>我们可以使用一个 <code>&lt;script&gt;</code> 标签将 JavaScript 代码添加到页面中。</li><li><code>type</code> 和 <code>language</code> 特性（attribute）不是必需的。</li><li>外部的脚本可以通过 <code>&lt;script src=&quot;path/to/script.js&quot;&gt;&lt;/script&gt;</code> 的方式插入。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、Spring Bean作用域</title>
      <link href="/posts/e74ba9f2.html"/>
      <url>/posts/e74ba9f2.html</url>
      
        <content type="html"><![CDATA[<h1 id="六、Spring-Bean作用域"><a href="#六、Spring-Bean作用域" class="headerlink" title="六、Spring Bean作用域"></a>六、Spring Bean作用域</h1><p>有时候我们需要一个对象在整个应用中只有一个，有些对象希望每次使用的时候都重新创建一个，spring 对我们这种需求也提供了支持，在 spring 中这个叫做 bean 的作用域，xml 中定义 bean 的时候，可以通过 scope 属性指定  bean 的作用域，如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>作用域<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>spring 容器中 scope 常见的有 5 种，下面我们分别来介绍一下。</p><h2 id="1、singleton"><a href="#1、singleton" class="headerlink" title="1、singleton"></a>1、singleton</h2><h3 id="1-1、概念"><a href="#1-1、概念" class="headerlink" title="1-1、概念"></a>1-1、概念</h3><p>当 scope 的值设置为 singleton 的时候，整个 spring 容器中只会存在一个 bean 实例，通过容器多次查找 bean 的时候（调用 BeanFactory 的 getBean 方法或者 bean 之间注入依赖的 bean 对象的时候），返回的都是同一个 bean 对象。</p><p><strong>singleton 是 scope 的默认值，所以 spring 容器中默认创建的 bean 对象是单例的。</strong></p><p>通常 spring 容器在启动的时候，会将 scope 为 singleton 的 bean 创建好放在容器中（有个特殊的情况，当 bean 的 lazy 被设置为 true 的时候，表示懒加载，那么使用的时候才会创建），用的时候直接返回。</p><h3 id="1-2、案例"><a href="#1-2、案例" class="headerlink" title="1-2、案例"></a>1-2、案例</h3><h4 id="bean-xml-配置"><a href="#bean-xml-配置" class="headerlink" title="bean xml 配置"></a>bean xml 配置</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 单例bean，scope设置为singleton <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"singletonBean"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.javacode.lesson.demo4.BeanScopeModel"</span> scope<span class="token operator">=</span><span class="token string">"singleton"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg index<span class="token operator">=</span><span class="token string">"0"</span> value<span class="token operator">=</span><span class="token string">"singleton"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BeanScopeModel-代码"><a href="#BeanScopeModel-代码" class="headerlink" title="BeanScopeModel 代码"></a>BeanScopeModel 代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanScopeModel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">BeanScopeModel</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanScope<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"create BeanScopeModel,&#123;sope=%s&#125;,&#123;this=%s&#125;"</span><span class="token punctuation">,</span> beanScope<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​上面构造方法中输出了一段文字，一会我们可以根据输出来看一下这个  bean 什么时候创建的，是从容器中获取 bean 的时候创建的还是容器启动的时候创建的。</p><h4 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScopeTest</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ClassPathXmlApplicationContext</span> context<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"spring容器准备启动....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.bean配置文件位置</span>        <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo4/beans.xml"</span><span class="token punctuation">;</span>        <span class="token comment">//2.创建ClassPathXmlApplicationContext容器，给容器指定需要加载的bean配置文件</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"spring容器启动完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 单例 bean     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">singletonBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------单例bean，每次获取的bean实例都一样---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"singletonBean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"singletonBean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"singletonBean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上面代码中 before 方法上面有@Before 注解，这个是 junit 提供的功能，这个方法会在所有 @Test 标注的方法之前之前运行，before 方法中我们对容器进行初始化，并且在容器初始化前后输出了一段文字。</li><li>上面代码中，singletonBean 方法中，3 次获取 singletonBean 对应的 bean 。</li></ul><h4 id="运行测试用例"><a href="#运行测试用例" class="headerlink" title="运行测试用例"></a>运行测试用例</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">spring容器准备启动<span class="token punctuation">..</span><span class="token punctuation">..</span>.create BeanScopeModel,<span class="token punctuation">&#123;</span>sope<span class="token operator">=</span>singleton<span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>this<span class="token operator">=</span>com.javacode.lesson.demo4.BeanScopeModel@e874448<span class="token punctuation">&#125;</span>spring容器启动完毕！---------单例bean，每次获取的bean实例都一样---------com.javacode.lesson.demo4.BeanScopeModel@e874448com.javacode.lesson.demo4.BeanScopeModel@e874448com.javacode.lesson.demo4.BeanScopeModel@e874448<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>从输出中得到 2 个结论：</p><ul><li>前 3 行的输出可以看出，BeanScopeModel 的构造方法是在容器启动过程中调用的，说明这个 bean 实例在容器启动过程中就创建好了，放在容器中缓存着。</li><li>最后 3 行输出的是一样的，说明返回的是同一个 bean 对象。</li></ul><h3 id="1-3、单例-bean-使用注意"><a href="#1-3、单例-bean-使用注意" class="headerlink" title="1-3、单例 bean 使用注意"></a>1-3、单例 bean 使用注意</h3><p>​<strong>单例 bean 是整个应用共享的，所以需要考虑到线程安全问题，之前在玩 springmvc 的时候，springmvc 中 controller 默认是单例的，有些开发者在controller 中创建了一些变量，那么这些变量实际上就变成共享的了，controller可能会被很多线程同时访问，这些线程并发去修改controller中的共享变量，可能会出现数据错乱的问题；所以使用的时候需要特别注意。</strong></p><h2 id="2、prototype"><a href="#2、prototype" class="headerlink" title="2、prototype"></a>2、prototype</h2><h3 id="2-1、概念"><a href="#2-1、概念" class="headerlink" title="2-1、概念"></a>2-1、概念</h3><p>​如果 scope 被设置为 prototype 类型的了，表示这个 bean 是多例的，通过容器每次获取的 bean 都是不同的实例，每次获取都会重新创建一个bean 实例对象。</p><h3 id="2-2、案例"><a href="#2-2、案例" class="headerlink" title="2-2、案例"></a>2-2、案例</h3><h4 id="bean-xml-配置-1"><a href="#bean-xml-配置-1" class="headerlink" title="bean xml 配置"></a>bean xml 配置</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 多例bean，scope设置为prototype--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototypeBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo4.BeanScopeModel<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试用例-1"><a href="#测试用例-1" class="headerlink" title="测试用例"></a>测试用例</h4><p>ScopeTest中新增一个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 多例 bean */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prototypeBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"prototypeBean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"prototypeBean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"prototypeBean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行测试用例-1"><a href="#运行测试用例-1" class="headerlink" title="运行测试用例"></a>运行测试用例</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">spring容器准备启动<span class="token punctuation">..</span><span class="token punctuation">..</span>.spring容器启动完毕！create BeanScopeModel,<span class="token punctuation">&#123;</span>sope<span class="token operator">=</span>prototype<span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>this<span class="token operator">=</span>com.javacode.lesson.demo4.BeanScopeModel@289d1c02<span class="token punctuation">&#125;</span>com.javacode.lesson.demo4.BeanScopeModel@289d1c02create BeanScopeModel,<span class="token punctuation">&#123;</span>sope<span class="token operator">=</span>prototype<span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>this<span class="token operator">=</span>com.javacode.lesson.demo4.BeanScopeModel@22eeefeb<span class="token punctuation">&#125;</span>com.javacode.lesson.demo4.BeanScopeModel@22eeefebcreate BeanScopeModel,<span class="token punctuation">&#123;</span>sope<span class="token operator">=</span>prototype<span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>this<span class="token operator">=</span>com.javacode.lesson.demo4.BeanScopeModel@17d0685f<span class="token punctuation">&#125;</span>com.javacode.lesson.demo4.BeanScopeModel@17d0685f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h4><ul><li>输出中可以看出，容器启动过程中并没有去创建 BeanScopeModel 对象</li><li>3 次获取 prototypeBean 得到的都是不同的实例，每次获取的时候才会去调用构造方法创建 bean 实例。</li></ul><h3 id="2-3、多例-bean-使用注意"><a href="#2-3、多例-bean-使用注意" class="headerlink" title="2-3、多例 bean 使用注意"></a>2-3、多例 bean 使用注意</h3><p><strong>多例 bean 每次获取的时候都会重新创建，如果这个 bean 比较复杂，创建时间比较长，会影响系统的性能，这个地方需要注意。</strong></p><p>&#x3D;&#x3D;<strong>下面要介绍的 3 个：request、session、application 都是在 spring web 容器环境中才会有的。</strong>&#x3D;&#x3D;</p><h2 id="3、request"><a href="#3、request" class="headerlink" title="3、request"></a>3、request</h2><p><strong>当一个 bean的作用域为 request，表示在一次 http 请求中，一个 bean 对应一个实例；</strong>对每个 http 请求都会创建一个 bean 实例，request 结束的时候，这个 bean 也就结束了，request 作用域用在 spring 容器的 web 环境中，这个以后讲springmvc 的时候会说，spring 中有个 web 容器接口 WebApplicationContext，这个里面对 request 作用域提供了支持，配置方式：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>request<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4、session"><a href="#4、session" class="headerlink" title="4、session"></a>4、session</h2><p>​这个和 request 类似，也是用在 web 环境中，session 级别共享的 bean，<strong>每个会话会对应一个 bean 实例，不同的 session 对应不同的 bean 实例</strong>，springmvc 中我们再细说。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>session<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5、application"><a href="#5、application" class="headerlink" title="5、application"></a>5、application</h2><p>全局 web 应用级别，也是在 web 环境中使用的，<strong>一个 web 应用程序对应一个 bean 实例</strong>，通常情况下和 singleton 效果类似的，不过也有不一样的地方，singleton 是每个 spring 容器中只有一个 bean 实例，一般我们的程序只有一个 spring 容器。</p><p>但是，一个应用程序中可以创建多个 spring 容器，不同的容器中可以存在同名的 bean，但是 sope&#x3D;aplication 的时候，不管应用中有多少个 spring 容器，这个应用中同名的 bean 只有一个。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6、自定义-scope"><a href="#6、自定义-scope" class="headerlink" title="6、自定义 scope"></a>6、自定义 scope</h2><p>有时候，spring 内置的几种 scope 都无法满足我们的需求的时候，我们可以自定义 bean 的作用域。</p><h3 id="6-1、自定义-Scope-三步骤"><a href="#6-1、自定义-Scope-三步骤" class="headerlink" title="6-1、自定义 Scope 三步骤"></a>6-1、自定义 Scope 三步骤</h3><h4 id="第一步：实现-Scope-接口"><a href="#第一步：实现-Scope-接口" class="headerlink" title="第一步：实现 Scope 接口"></a>第一步：实现 Scope 接口</h4><p>我们来看一下这个接口定义</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">ObjectFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Scope</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**    * 返回当前作用域中name对应的bean对象    *    * name：需要检索的bean的名称    * objectFactory：如果name对应的bean在当前作用域中没有找到，那么可以调用这个ObjectFactory来创建这个对象    **/</span>    <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">ObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> objectFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 将name对应的bean从当前作用域中移除     **/</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token class-name">Object</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 用于注册销毁回调，如果想要销毁相应的对象,则由Spring容器注册相应的销毁回调，而由自定义作用域选择是不是要销毁相应的对象     */</span>    <span class="token keyword">void</span> <span class="token function">registerDestructionCallback</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 用于解析相应的上下文数据，比如request作用域将返回request中的属性。     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token class-name">Object</span> <span class="token function">resolveContextualObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 作用域的会话标识，比如session作用域将是sessionId     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token class-name">String</span> <span class="token function">getConversationId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第二步：将自定义的-scope-注册到容器"><a href="#第二步：将自定义的-scope-注册到容器" class="headerlink" title="第二步：将自定义的 scope 注册到容器"></a>第二步：将自定义的 scope 注册到容器</h4><p>需要调用</p><p><code>org.springframework.beans.factory.config.ConfigurableBeanFactory#registerScope</code>的方法，看一下这个方法的声明：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 向容器中注册自定义的 Scope** scopeName：作用域名称* scope：作用域对象**/</span><span class="token keyword">void</span> <span class="token function">registerScope</span><span class="token punctuation">(</span><span class="token class-name">String</span> scopeName<span class="token punctuation">,</span> <span class="token class-name">Scope</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第三步：使用自定义的作用域"><a href="#第三步：使用自定义的作用域" class="headerlink" title="第三步：使用自定义的作用域"></a>第三步：使用自定义的作用域</h4><p>定义 bean 的时候，指定 bean 的 scope 属性为自定义的作用域名称。</p><h3 id="6-2、案例"><a href="#6-2、案例" class="headerlink" title="6-2、案例"></a>6-2、案例</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>下面我们来实现一个线程级别的 bean 作用域，同一个线程中同名的 bean 是同一个实例，不同的线程中的 bean 是不同的实例。</p><h4 id="实现分析"><a href="#实现分析" class="headerlink" title="实现分析"></a>实现分析</h4><p>需求中要求 bean 在线程中是贡献的，所以我们可以通过 ThreadLocal 来实现，ThreadLocal 可以实现线程中数据的共享。</p><h4 id="ThreadScope"><a href="#ThreadScope" class="headerlink" title="ThreadScope"></a>ThreadScope</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">ObjectFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">Scope</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span></span><span class="token punctuation">;</span><span class="token comment">/** * 自定义本地线程级别的bean作用域，不同的线程中对应的bean实例是不同的，同一个线程中同名的bean是同一个实例 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadScope</span> <span class="token keyword">implements</span> <span class="token class-name">Scope</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">THREAD_SCOPE</span> <span class="token operator">=</span> <span class="token string">"thread"</span><span class="token punctuation">;</span><span class="token comment">//@1</span>    <span class="token keyword">private</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> beanMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">ObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> objectFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> bean <span class="token operator">=</span> beanMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            bean <span class="token operator">=</span> objectFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            beanMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerDestructionCallback</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> callback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//bean作用域范围结束的时候调用的方法，用于bean清理</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">resolveContextualObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConversationId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>   定义了作用域的名称为一个常量 thread，可以在定义 bean 的时候给 scope 使用</p></blockquote><h4 id="BeanScopeModel"><a href="#BeanScopeModel" class="headerlink" title="BeanScopeModel"></a>BeanScopeModel</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanScopeModel</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token class-name">BeanScopeModel</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanScope<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"线程:%s,create BeanScopeModel,&#123;sope=%s&#125;,&#123;this=%s&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanScope<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>   上面的构造方法中会输出当前线程的信息，到时候可以看到创建bean 的线程。</p></blockquote><h4 id="bean-配置文件"><a href="#bean-配置文件" class="headerlink" title="bean 配置文件"></a>bean 配置文件</h4><p><code>beans-thread.xml</code>内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 自定义scope的bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>threadBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo4.BeanScopeModel<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thread<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thread<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>   注意上面的 scope 是我们自定义的，值为 thread</p></blockquote><h5 id="测试用例-2"><a href="#测试用例-2" class="headerlink" title="测试用例"></a>测试用例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadScopeTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo4/beans-thread.xml"</span><span class="token punctuation">;</span>        <span class="token comment">//手动创建容器</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置配置文件位置</span>        context<span class="token punctuation">.</span><span class="token function">setConfigLocation</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动容器</span>        context<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//向容器中注册自定义的scope *******</span>        context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerScope</span><span class="token punctuation">(</span><span class="token class-name">ThreadScope</span><span class="token punctuation">.</span><span class="token constant">THREAD_SCOPE</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//@1</span>        <span class="token comment">//使用容器获取bean</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//@2</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"threadBean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"threadBean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>   注意上面代码，重点在@1，这个地方向容器中注册了自定义的ThreadScope。@2：创建了2个线程，然后在每个线程中去获取同样的 bean 2次，然后输出，我们来看一下效果。</p></blockquote><h5 id="运行输出"><a href="#运行输出" class="headerlink" title="运行输出"></a>运行输出</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">线程:Thread<span class="token punctuation">[</span>Thread-1,5,main<span class="token punctuation">]</span>,create BeanScopeModel,<span class="token punctuation">&#123;</span>sope<span class="token operator">=</span>thread<span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>this<span class="token operator">=</span>com.javacode.lesson.demo4.BeanScopeModel@4049d530<span class="token punctuation">&#125;</span>Thread<span class="token punctuation">[</span>Thread-1,5,main<span class="token punctuation">]</span>,com.javacode.lesson.demo4.BeanScopeModel@4049d530Thread<span class="token punctuation">[</span>Thread-1,5,main<span class="token punctuation">]</span>,com.javacode.lesson.demo4.BeanScopeModel@4049d530线程:Thread<span class="token punctuation">[</span>Thread-2,5,main<span class="token punctuation">]</span>,create BeanScopeModel,<span class="token punctuation">&#123;</span>sope<span class="token operator">=</span>thread<span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>this<span class="token operator">=</span>com.javacode.lesson.demo4.BeanScopeModel@87a76da<span class="token punctuation">&#125;</span>Thread<span class="token punctuation">[</span>Thread-2,5,main<span class="token punctuation">]</span>,com.javacode.lesson.demo4.BeanScopeModel@87a76daThread<span class="token punctuation">[</span>Thread-2,5,main<span class="token punctuation">]</span>,com.javacode.lesson.demo4.BeanScopeModel@87a76da<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从输出中可以看到，bean 在同样的线程中获取到的是同一个 bean 的实例，不同的线程中 bean 的实例是不同的。</p><h2 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h2><ol><li>spring 容器自带的有 2 种作用域，分别是 singleton 和 prototype；还有 3 种分别是 spring web 容器环境中才支持的 request、session、application。</li><li>singleton 是 spring 容器默认的作用域，一个 spring 容器中同名的 bean 实例只有一个，多次获取得到的是同一个 bean；单例的 bean 需要考虑线程安全问题。</li><li>prototype 是多例的，每次从容器中获取同名的 bean，都会重新创建一个；多例 bean 使用的时候需要考虑创建 bean 对性能的影响。</li><li>一个应用中可以有多个 spring 容器。</li><li>自定义 scope 3 个步骤，实现 Scope 接口，将实现类注册到 spring 容器，使用自定义的 sope。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、Django创建项目</title>
      <link href="/posts/fab25dd9.html"/>
      <url>/posts/fab25dd9.html</url>
      
        <content type="html"><![CDATA[<h1 id="三、Django创建项目"><a href="#三、Django创建项目" class="headerlink" title="三、Django创建项目"></a>三、Django创建项目</h1><h2 id="1、使用命令行创建"><a href="#1、使用命令行创建" class="headerlink" title="1、使用命令行创建"></a>1、使用命令行创建</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>打开终端，使用命令即可创建：</p><p><code>django-admin startproject [项目名称]</code> </p><p>比如：django-admin startproject first_project 。</p><h3 id="创建应用（app）"><a href="#创建应用（app）" class="headerlink" title="创建应用（app）"></a>创建应用（app）</h3><p>一个项目类似于是一个架子，但是真正起作用的还是 app 。在终端进入到项目所在的路径，然后执行：</p><p><code>python manage.py startapp [app名称] 创建一个app</code></p><h2 id="2、使用-Pycharm-创建"><a href="#2、使用-Pycharm-创建" class="headerlink" title="2、使用 Pycharm 创建"></a>2、使用 Pycharm 创建</h2><p>用 Pycharm 新建一个 Django 项目，新建项目的截图如下：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/django-base/202407180039901.png" alt="image-20240718003622485"></p><p>点击 Create 创建项目如下：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/django-base/202407180039897.png" alt="image-20240718003828497"></p><h2 id="3、代码结构"><a href="#3、代码结构" class="headerlink" title="3、代码结构"></a>3、代码结构</h2><p>使用 Pycharm 创建完项目后，还是需要重新进入到命令行单独创建 app 的。</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>User Interface</title>
      <link href="/posts/f3b98ae9.html"/>
      <url>/posts/f3b98ae9.html</url>
      
        <content type="html"><![CDATA[<h1 id="前端开发规范"><a href="#前端开发规范" class="headerlink" title="前端开发规范"></a>前端开发规范</h1><p><a href="http://luyaguo.github.io/posts/28c50d86.html">前端开发规范</a></p><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="JavaScript-基础知识"><a href="#JavaScript-基础知识" class="headerlink" title="JavaScript 基础知识"></a>JavaScript 基础知识</h3><p><a href="http://luyaguo.github.io/posts/ebfa9e3d.html">一、JavaScript简介</a></p><p><a href="http://luyaguo.github.io/posts/7e4cf991.html">二、JavaScript入门</a></p><p><a href="http://luyaguo.github.io/posts/2773433c.html">三、JavaScript代码结构</a></p><p><a href="http://luyaguo.github.io/posts/c7cda946.html">四、JavaScript变量</a></p><p><a href="http://luyaguo.github.io/posts/c9fa9533.html">五、JavaScript数据类型</a></p><p><a href="http://luyaguo.github.io/posts/7260d53d.html">六、JavaScript类型转换</a></p><p><a href="http://luyaguo.github.io/posts/7fd84e3b.html">七、JavaScript逻辑运算</a></p><p><a href="http://luyaguo.github.io/posts/bbe02296.html">八、JavaScript值的比较</a></p><p><a href="http://luyaguo.github.io/posts/ddf17900.html">九、JavaScript条件判断</a></p><p><a href="http://luyaguo.github.io/posts/fb6139d8.html">十、JavaScript循环</a></p><p><a href="http://luyaguo.github.io/posts/cbae3b4f.html">十一、JavaScript函数</a></p><p><a href="http://luyaguo.github.io/posts/265ab001.html">十二、JavaScript函数表达式</a></p><p><a href="http://luyaguo.github.io/posts/77f3bef4.html">十三、JavaScript箭头函数</a></p><h3 id="代码质量"><a href="#代码质量" class="headerlink" title="代码质量"></a>代码质量</h3><p><a href="http://luyaguo.github.io/posts/4b959f13.html">十四、JavaScript浏览器调试</a></p><p><a href="http://luyaguo.github.io/posts/e9615e7b.html">十五、JavaScript代码风格</a></p><p><a href="http://luyaguo.github.io/posts/bc30564b.html">十六、JavaScript注释</a></p><h3 id="Object（对象）：基础知识"><a href="#Object（对象）：基础知识" class="headerlink" title="Object（对象）：基础知识"></a>Object（对象）：基础知识</h3><p><a href="http://luyaguo.github.io/posts/127df953.html">十七、JavaScript Object对象</a></p><p><a href="http://luyaguo.github.io/posts/5008bf9a.html">十八、JavaScript对象引用和复制</a></p><p><a href="http://luyaguo.github.io/posts/2be449a9.html">十九、JavaScript对象方法</a></p><p><a href="http://luyaguo.github.io/posts/2666e31f.html">二十、JavaScript构造器</a></p><p><a href="http://luyaguo.github.io/posts/51ab95fe.html">二十一、JavaScript symbol类型</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一、JavaScript简介</title>
      <link href="/posts/ebfa9e3d.html"/>
      <url>/posts/ebfa9e3d.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、JavaScript-简介"><a href="#一、JavaScript-简介" class="headerlink" title="一、JavaScript 简介"></a>一、JavaScript 简介</h1><h2 id="1、什么是-JavaScript？"><a href="#1、什么是-JavaScript？" class="headerlink" title="1、什么是 JavaScript？"></a>1、什么是 JavaScript？</h2><p><strong><em>JavaScript</em> 最初被创建的目的是“使网页更生动”。这种编程语言写出来的程序被称为 脚本。它们可以被直接写在网页的 HTML 中，在页面加载的时候自动执行。</strong></p><p>脚本被以纯文本的形式提供和执行。它们不需要特殊的准备或编译即可运行。</p><p>这方面，JavaScript 和 <a href="https://en.wikipedia.org/wiki/Java_(programming_language)">Java</a> 有很大的区别。</p><pre class="line-numbers language-smart" data-language="smart"><div class="caption"><span>header</span></div><code class="language-smart">JavaScript 在刚诞生的时候，它的名字叫 &quot;LiveScript&quot;。但是因为当时 Java 很流行，所以决定将一种新语言定位为 Java 的“弟弟”会有助于它的流行。随着 JavaScript 的发展，它已经成为了一门完全独立的语言，并且也拥有了自己的语言规范 [ECMAScript](http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;ECMAScript)。现在，它和 Java 之间没有任何关系。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2、JavaScript-执行引擎"><a href="#2、JavaScript-执行引擎" class="headerlink" title="2、JavaScript 执行引擎"></a>2、JavaScript 执行引擎</h2><p>JavaScript 不仅可以在浏览器中执行，也可以在服务端执行，甚至可以在任意搭载了 <a href="https://en.wikipedia.org/wiki/JavaScript_engine">JavaScript 引擎</a> 的设备中执行。</p><p><strong>浏览器中嵌入了 JavaScript 引擎，有时也称作“JavaScript 虚拟机”。</strong></p><p>不同的引擎有不同的“代号”，例如：</p><ul><li><a href="https://en.wikipedia.org/wiki/V8_(JavaScript_engine)">V8</a> —— Chrome、Opera 和 Edge 中的 JavaScript 引擎。</li><li><a href="https://en.wikipedia.org/wiki/SpiderMonkey">SpiderMonkey</a> —— Firefox 中的 JavaScript 引擎。</li><li>还有其他一些代号，像 “Chakra” 用于 IE，”JavaScriptCore”、”Nitro” 和 “SquirrelFish” 用于 Safari，等等。</li></ul><p>上面这些术语很容易记住，因为它们经常出现在开发者的文章中。我们也会用到这些术语。例如，如果“V8 支持某个功能”，那么我们可以认为这个功能大概能在 Chrome、Opera 和 Edge 中正常运行。</p><pre class="line-numbers language-smart" data-language="smart"><div class="caption"><span>header</span></div><code class="language-smart">引擎很复杂，但是基本原理很简单。1. 引擎（如果是浏览器，则引擎被嵌入在其中）读取（“解析”）脚本。2. 然后，引擎将脚本转化（“编译”）为机器语言。3. 然后，机器代码快速地执行。引擎会对流程中的每个阶段都进行优化。它甚至可以在编译的脚本运行时监视它，分析流经该脚本的数据，并根据获得的信息进一步优化机器代码。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、浏览器中-JavaScript-能做什么？"><a href="#3、浏览器中-JavaScript-能做什么？" class="headerlink" title="3、浏览器中 JavaScript 能做什么？"></a>3、浏览器中 JavaScript 能做什么？</h2><p><strong>现代的 JavaScript 是一种“安全的”编程语言。它不提供对内存或 CPU 的底层访问，因为它最初是为浏览器创建的，不需要这些功能。</strong></p><p>浏览器中的 JavaScript 可以做与网页操作、用户交互和 Web 服务器相关的所有事情。例如，浏览器中的 JavaScript 可以做下面这些事：</p><ul><li>在网页中添加新的 HTML，修改网页已有内容和网页的样式。</li><li>响应用户的行为，响应鼠标的点击，指针的移动，按键的按动。</li><li>向远程服务器发送网络请求，下载和上传文件（所谓的 <a href="https://en.wikipedia.org/wiki/Ajax_(programming)">AJAX</a> 和 <a href="https://en.wikipedia.org/wiki/Comet_(programming)">COMET</a> 技术）。</li><li>获取或设置 cookie，向访问者提出问题或发送消息。</li><li>记住客户端的数据（“本地存储”）。</li></ul><h2 id="4、浏览器中-JavaScript-不能做什么？"><a href="#4、浏览器中-JavaScript-不能做什么？" class="headerlink" title="4、浏览器中 JavaScript 不能做什么？"></a>4、浏览器中 JavaScript 不能做什么？</h2><p>为了用户的（信息）安全，在浏览器中的 JavaScript 的能力是受限的。目的是防止恶意网页获取用户私人信息或损害用户数据。</p><p>此类限制的例子包括：</p><ul><li><p>网页中的 JavaScript 不能读、写、复制和执行硬盘上的任意文件。它没有直接访问操作系统的功能。</p><p>现代浏览器允许 JavaScript 做一些文件相关的操作，但是这个操作是受到限制的。仅当用户做出特定的行为，JavaScript 才能操作这个文件。例如，用户把文件“拖放”到浏览器中，或者通过 <code>&lt;input&gt;</code> 标签选择了文件。</p><p>有很多与相机&#x2F;麦克风和其它设备进行交互的方式，但是这些都需要获得用户的明确许可。因此，启用了 JavaScript 的网页应该不会偷偷地启动网络摄像头观察你，并把你的信息发送到 <a href="https://en.wikipedia.org/wiki/National_Security_Agency">美国国家安全局</a>。</p></li><li><p>不同的标签页&#x2F;窗口之间通常互不了解。有时候，也会有一些联系，例如一个标签页通过 JavaScript 打开的另外一个标签页。但即使在这种情况下，如果两个标签页打开的不是同一个网站（域名、协议或者端口任一不相同的网站），它们都不能相互通信。</p><p>这就是所谓的“同源策略”。为了解决“同源策略”问题，两个标签页必须 <strong>都</strong> 包含一些处理这个问题的特定的 JavaScript 代码，并均允许数据交换。本教程会讲到这部分相关的知识。</p><p>这个限制也是为了用户的信息安全。例如，用户打开的 <code>http://anysite.com</code> 网页必须不能访问 <code>http://gmail.com</code>（另外一个标签页打开的网页）也不能从那里窃取信息。</p></li><li><p>JavaScript 可以轻松地通过互联网与当前页面所在的服务器进行通信。但是从其他网站&#x2F;域的服务器中接收数据的能力被削弱了。尽管可以，但是需要来自远程服务器的明确协议（在 HTTP header 中）。这也是为了用户的信息安全。</p></li></ul><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/javascript-base/202407172304193.svg" alt="limitations"></p><p>如果在浏览器环境外（例如在服务器上）使用 JavaScript，则不存在此类限制。现代浏览器还允许安装可能会要求扩展权限的插件&#x2F;扩展。</p><h2 id="5、为什么-JavaScript-与众不同？"><a href="#5、为什么-JavaScript-与众不同？" class="headerlink" title="5、为什么 JavaScript 与众不同？"></a>5、为什么 JavaScript 与众不同？</h2><p>至少有 <strong>3</strong> 件事值得一提：</p><pre class="line-numbers language-compare" data-language="compare"><code class="language-compare">+ 与 HTML&#x2F;CSS 完全集成。+ 简单的事，简单地完成。+ 被所有的主流浏览器支持，并且默认开启。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>JavaScript 是将这三件事结合在一起的唯一的浏览器技术。<br>这就是为什么 JavaScript 与众不同。这也是为什么它是用于创建浏览器界面的使用最广泛的工具。</p><p>此外，JavaScript 还可用于创建服务器和移动端应用程序等。</p><h2 id="6、JavaScript-“上层”语言"><a href="#6、JavaScript-“上层”语言" class="headerlink" title="6、JavaScript “上层”语言"></a>6、JavaScript “上层”语言</h2><p>现代化的工具使得编译速度非常快且透明，实际上允许开发者使用另一种语言编写代码并会将其“自动转换”为 JavaScript。</p><p>此类语言的示例有：</p><ul><li><a href="https://coffeescript.org/">CoffeeScript</a> 是 JavaScript 的一种语法糖。它引入了更加简短的语法，使我们可以编写更清晰简洁的代码。通常，Ruby 开发者喜欢它。</li><li><a href="https://www.typescriptlang.org/">TypeScript</a> 专注于添加“严格的数据类型”以简化开发，以更好地支持复杂系统的开发。由微软开发。</li><li><a href="https://flow.org/">Flow</a> 也添加了数据类型，但是以一种不同的方式。由 Facebook 开发。</li><li><a href="https://www.dartlang.org/">Dart</a> 是一门独立的语言。它拥有自己的引擎，该引擎可以在非浏览器环境中运行（例如手机应用），它也可以被编译成 JavaScript。由 Google 开发。</li><li><a href="https://brython.info/">Brython</a> 是一个 Python 到 JavaScript 的转译器，让我们可以在不使用 JavaScript 的情况下，以纯 Python 编写应用程序。</li><li><a href="https://kotlinlang.org/docs/reference/js-overview.html">Kotlin</a> 是一个现代、简洁且安全的编程语言，编写出的应用程序可以在浏览器和 Node 环境中运行。</li></ul><p>这样的语言还有很多。当然，即使我们在使用此类编译语言，我们也需要了解 JavaScript。因为了解 JavaScript 才能让我们真正明白我们在做什么。</p><h2 id="7、Mock-工具"><a href="#7、Mock-工具" class="headerlink" title="7、Mock 工具"></a>7、Mock 工具</h2><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/javascript-base/202407172306415.svg" alt="eoapi"></p><p><a href="https://datayi.cn/w/QReKB8No">https://datayi.cn/w/QReKB8No</a></p><p>一个好用的开源接口 Mock 工具：<a href="https://datayi.cn/w/QReKB8No">https://github.com/eolinker/eoapi</a></p><p>除了 Mock 功能，还集合了 API 管理和测试功能，还可以通过插件广场帮助你将 API 发布到各个应用平台，比如发布到网关上完成 API 上线，或者和低代码平台结合，将 API 快速变成低代码平台中可使用的组件等。</p><h2 id="8、手册-规范"><a href="#8、手册-规范" class="headerlink" title="8、手册&amp;规范"></a>8、手册&amp;规范</h2><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><p><strong>ECMA-262 规范</strong> 包含了大部分深入的、详细的、规范化的关于 JavaScript 的信息。这份规范明确地定义了这门语言。</p><p>每年都会发布一个新版本的规范。最新的规范草案请见 <a href="https://tc39.es/ecma262/%E3%80%82">https://tc39.es/ecma262/。</a></p><p>想了解最新最前沿的功能，包括“即将纳入规范的”（所谓的 “stage 3”），请看这里的提案 <a href="https://github.com/tc39/proposals%E3%80%82">https://github.com/tc39/proposals。</a></p><h3 id="手册"><a href="#手册" class="headerlink" title="手册"></a>手册</h3><ul><li><p><strong>MDN（Mozilla）JavaScript 索引</strong> 是一个带有用例和其他信息的主要的手册。它是一个获取关于个别语言函数、方法等深入信息的很好的信息来源。</p><p>你可以在 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference</a> 阅读它。</p></li></ul><p>不过，利用互联网搜索通常是最好的选择。只需在查询时输入“MDN [关键字]”，例如 <a href="https://google.com/search?q=MDN+parseInt">https://google.com/search?q=MDN+parseInt</a> 搜索 <code>parseInt</code> 函数。</p><h3 id="兼容性表"><a href="#兼容性表" class="headerlink" title="兼容性表"></a>兼容性表</h3><p>JavaScript 是一门还在发展中的语言，定期会添加一些新的功能。</p><p>要查看它们在基于浏览器的引擎及其他引擎中的支持情况，请看：</p><ul><li><a href="https://caniuse.com/">https://caniuse.com</a> —— 每个功能的支持表，例如，查看哪个引擎支持现代加密（cryptography）函数：<a href="https://caniuse.com/#feat=cryptography%E3%80%82">https://caniuse.com/#feat=cryptography。</a></li><li><a href="https://kangax.github.io/compat-table">https://kangax.github.io/compat-table</a> —— 一份列有语言功能以及引擎是否支持这些功能的表格。</li></ul><p>所有这些资源在实际开发中都有用武之地，因为它们包含了有关语言细节，以及它们被支持的程度等非常有价值的信息。</p><h2 id="9、代码编辑器"><a href="#9、代码编辑器" class="headerlink" title="9、代码编辑器"></a>9、代码编辑器</h2><p>程序员接触时间最长的就是代码编辑器。代码编辑器主要分两种：IDE（集成开发环境）和轻量编辑器。</p><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a><a href="https://zh.javascript.info/code-editors#ide">IDE</a></h3><p><a href="https://en.wikipedia.org/wiki/Integrated_development_environment">IDE</a>（集成开发环境）是指用于管理整个项目的，具有强大功能的编辑器。顾名思义，它不仅仅是一个编辑器，而且还是个完整的“开发环境”。</p><p>IDE 加载项目（通常包含很多文件），并且允许在不同文件之间导航（navigation）。IDE 还提供基于整个项目（不仅仅是打开的文件）的自动补全功能，集成版本控制（如 <a href="https://git-scm.com/">git</a>）、集成测试环境等一些其他“项目层面”的东西。</p><p>如果你还没考虑好选哪一款 IDE，可以考虑下面两个：</p><ul><li><a href="https://code.visualstudio.com/">Visual Studio Code</a>（跨平台，免费）。</li><li><a href="https://www.jetbrains.com/webstorm/">WebStorm</a>（跨平台，收费）。</li></ul><p>对于 Windows 系统来说，也有个叫 “Visual Studio” 的 IDE，请不要跟 “Visual Studio Code” 混淆。“Visual Studio” 是一个收费的、强大的 Windows 专用编辑器，它十分适合于 .NET 开发。用它进行 JavaScript 开发也不错。“Visual Studio” 有个免费的版本 <a href="https://www.visualstudio.com/vs/community/">Visual Studio Community</a>。</p><h3 id="轻量编辑器"><a href="#轻量编辑器" class="headerlink" title="轻量编辑器"></a><a href="https://zh.javascript.info/code-editors#qing-liang-bian-ji-qi">轻量编辑器</a></h3><p>“轻量编辑器”没有 IDE 功能那么强大，但是它们一般很快、优雅而且简单。主要用于快速打开和编辑文件。</p><p>“轻量编辑器”和 “IDE” 最大的区别是，IDE 一般在项目中使用，这也就意味着在开启的时候要加载很多数据，如果需要的话还会分析项目的结构等。如果我们只需要编辑一个文件，那么“轻量编辑器”会更快。</p><p>实际上，“轻量编辑器”一般都有各种各样的插件，这些插件可以做目录级（directory-level）的语法分析和代码补全。所以“轻量编辑器”和 IDE 也没有严格的界限。</p><p>下面是一些值得你关注的“轻量编辑器”：</p><ul><li><a href="http://www.sublimetext.com/">Sublime Text</a>（跨平台，共享软件）。</li><li><a href="https://notepad-plus-plus.org/">Notepad++</a>（Windows，免费）。</li><li><a href="http://www.vim.org/">Vim</a> 和 <a href="https://www.gnu.org/software/emacs/">Emacs</a> 也很棒，如果你知道怎么使用它们的话。</li></ul><h2 id="10、开发者控制台"><a href="#10、开发者控制台" class="headerlink" title="10、开发者控制台"></a>10、开发者控制台</h2><p>代码是很容易出现错误的。只要你是人，你 <strong>一定</strong> 会犯错误（在写代码的时候）。<strong>但在浏览器中，默认情况下用户是看不到错误的。</strong></p><p>为了发现错误并获得一些与脚本相关且有用的信息，浏览器内置了“<strong>开发者工具</strong>”。</p><p>通常，开发者倾向于使用 Chrome 或 Firefox 进行开发，因为它们有最好的开发者工具。</p><h3 id="Google-Chrome"><a href="#Google-Chrome" class="headerlink" title="Google Chrome"></a>Google Chrome</h3><p>打开网页 bug.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>本页面的脚本中有一个错误。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    lalala</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中有一个错误，一般访问者看不到这个错误，按下 <code>key:F12</code> 键，如果你使用 Mac，试试 <code>key:Cmd+Opt+J</code>。默认情况下，开发者工具会被在 Console 标签页中打开。就像这样：</p><p>![chrome](E:\mycode\java-script-guo\JavaScript Notes\images\chrome.png)</p><ul><li>我们能看到红色的错误提示信息。这个场景中，脚本里有一个未知的 “lalala” 命令。</li><li>在右边有个可点击的链接 <code>bug.html:12</code>。这个链接会链接到错误发生的行号。</li></ul><p>在错误信息的下方，有个 <code>&gt;</code> 标志。它代表“命令行”，在“命令行”中，我们可以输入 JavaScript 命令，按下 <code>key:Enter</code> 来执行。</p><blockquote><p>通常，当我们向控制台输入一行代码后，按 <code>key:Enter</code>，这行代码就会立即执行。</p><p>如果想要插入多行代码，请按 <code>key:Shift+Enter</code> 来进行换行。这样就可以输入长片段的 JavaScript 代码了。</p></blockquote><h3 id="Firefox、Edge-和其它浏览器"><a href="#Firefox、Edge-和其它浏览器" class="headerlink" title="Firefox、Edge 和其它浏览器"></a>Firefox、Edge 和其它浏览器</h3><p>大多数其它的浏览器都是通过 <code>key:F12</code> 来打开开发者工具。</p><p>它们的外观和感觉都非常相似，一旦你学会了它们中的一个（可以先尝试 Chrome），其它的也就很快就可以熟悉了。</p><h3 id="Safari"><a href="#Safari" class="headerlink" title="Safari"></a>Safari</h3><p>Safari（Mac 系统中的浏览器，Windows 和 Linux 系统不支持）有一点点不同。我们需要先开启“开发菜单”。</p><p>打开“偏好设置”，选择“高级”选项。选中最下方的那个选择框：</p><p>![safari](E:\mycode\java-script-guo\JavaScript Notes\images\safari.png)</p><p>现在，我们通过 <code>key:Cmd+Opt+C</code> 就能打开或关闭控制台了。另外注意，有一个名字为“开发”的顶部菜单出现了。它有很多命令和选项。</p><h2 id="11、总结"><a href="#11、总结" class="headerlink" title="11、总结"></a>11、总结</h2><ul><li>JavaScript 最开始是专门为浏览器设计的一门语言，但是现在也被用于很多其他的环境。</li><li>JavaScript 作为被应用最广泛的浏览器语言，且与 HTML&#x2F;CSS 完全集成，具有独特的地位。</li><li>有很多其他的语言可以被“编译”成 JavaScript，这些语言还提供了更多的功能。建议最好了解一下这些语言，至少在掌握了 JavaScript 之后大致的了解一下。</li><li>开发者工具允许我们查看错误、执行命令、检查变量等。</li><li>在 Windows 系统中，可以通过 <code>key:F12</code> 开启开发者工具。Mac 系统下，Chrome 需要使用 <code>key:Cmd+Opt+J</code>，Safari 使用 <code>key:Cmd+Opt+C</code>（需要提前开启）。</li></ul><blockquote><p>本教程为 <a href="https://reactjs.org/docs/getting-started.html#javascript-resources">React 官方文档</a> 与 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">MDN</a> 共同推荐的前端教程</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、Django如何安装？</title>
      <link href="/posts/59820275.html"/>
      <url>/posts/59820275.html</url>
      
        <content type="html"><![CDATA[<h1 id="二、Django-如何安装？"><a href="#二、Django-如何安装？" class="headerlink" title="二、Django 如何安装？"></a>二、Django 如何安装？</h1><h2 id="1、安装-Python"><a href="#1、安装-Python" class="headerlink" title="1、安装 Python"></a>1、安装 Python</h2><p>Django 是一个用于 Python 的网络框架。</p><h3 id="Python-版本"><a href="#Python-版本" class="headerlink" title="Python 版本"></a>Python 版本</h3><p>请参阅 <a href="https://docs.djangoproject.com/zh-hans/5.0/faq/install/#faq-python-version-support">我应该使用哪个版本的 Python 来配合 Django?</a>。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/django-base/202408012330708.png"></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>可以通过 <a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a> 或者操作系统的包管理工具获取最新版本的 Python。</p><p>作者采用 Python 3.12 以上的版本：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/django-base/202407162351176.png" alt="image-20240716235023147"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/django-base/202407162352427.png" alt="image-20240716235202933"></p><h2 id="2、安装-Django-源码"><a href="#2、安装-Django-源码" class="headerlink" title="2、安装 Django 源码"></a>2、安装 Django 源码</h2><h3 id="通过-pip-安装正式发布版本"><a href="#通过-pip-安装正式发布版本" class="headerlink" title="通过 pip 安装正式发布版本"></a>通过 <code>pip</code> 安装正式发布版本</h3><p>以下是安装 Django 的推荐方式。</p><ol><li><p>安装 <a href="https://pip.pypa.io/">pip</a>。最简单的方式是使用 <a href="https://pip.pypa.io/en/latest/installation/">独立 pip 安装器</a>。</p></li><li><p>看一下 <a href="https://docs.python.org/3/tutorial/venv.html">venv</a>。这个工具提供了隔离的Python环境，比在系统内安装包更实用。它还允许在没有管理员权限的情况下安装包。<a href="https://docs.djangoproject.com/zh-hans/5.0/intro/contributing/">贡献指南</a> 介绍了如何创建一个虚拟环境。</p></li><li><p>在你已创建并激活一个虚拟环境后，输入以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ python <span class="token parameter variable">-m</span> pip <span class="token function">install</span> Django<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="安装示例"><a href="#安装示例" class="headerlink" title="安装示例"></a>安装示例</h3><p>通过 <code>pip install django</code> 安装 django ，教学以 Django 5.0.3 版本为例进行操作。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/django-base/202407170012067.png" alt="image-20240717001227398"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/django-base/202407170014841.png" alt="image-20240717001404406"></p><h2 id="3、安装-Pycharm-专业版"><a href="#3、安装-Pycharm-专业版" class="headerlink" title="3、安装 Pycharm 专业版"></a>3、安装 Pycharm 专业版</h2><p>安装 Pycharm profession 或者 VSCode 等任意一款你喜欢的编辑器。（推荐使用 Pycharm，如果由于电脑性能原因，可以退而求其次使用 VSCode ）。</p><p><strong>如果使用 Pycharm，切记一定要下载 profession（专业版）,community（社区版）不能用于网页开发。</strong></p><p>Pycharm下载链接：<a href="https://www.jetbrains.com/pycharm/download/?section=windows">https://www.jetbrains.com/pycharm/download/?section=windows</a></p><h2 id="4、URL组成部分详解："><a href="#4、URL组成部分详解：" class="headerlink" title="4、URL组成部分详解："></a>4、URL组成部分详解：</h2><p><code>URL</code>是<code>Uniform Resource Locator</code>的简写，统一资源定位符。</p><p>一个<code>URL</code>由以下几部分组成：</p><pre class="line-numbers language-uri" data-language="uri"><code class="language-uri"><span class="token scheme">scheme<span class="token scheme-delimiter">:</span></span><span class="token authority"><span class="token authority-delimiter">//</span><span class="token host">host</span><span class="token port-segment"><span class="token port-delimiter">:</span></span></span><span class="token path">port<span class="token path-separator">/</span>path<span class="token path-separator">/</span></span><span class="token query"><span class="token query-delimiter">?</span><span class="token pair"><span class="token key">query-string</span>=<span class="token value">xxx</span></span></span><span class="token fragment"><span class="token fragment-delimiter">#</span>anchor</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>scheme</strong>：代表的是访问的协议，一般为<code>http</code>或者<code>https</code>以及<code>ftp</code>等。</li><li><strong>host</strong>：主机名，域名，比如<code>www.baidu.com</code>。</li><li><strong>port</strong>：端口号。当你访问一个网站的时候，浏览器默认使用80端口。</li><li><strong>path</strong>：查找路径。比如：<code>www.jianshu.com/trending/now</code>，后面的<code>trending/now</code>就是<code>path</code>。</li><li><strong>query-string</strong>：查询字符串，比如：<code>www.baidu.com/s?wd=python</code>，后面的<code>wd=python</code>就是查询字符串。</li><li><strong>anchor</strong>：锚点，后台一般不用管，前端用来做页面定位的。</li></ul><p>注意：<code>URL</code>中的所有字符都是<code>ASCII</code>字符集，如果出现非<code>ASCII</code>字符，比如中文，浏览器会进行编码再进行传输。</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、Django介绍</title>
      <link href="/posts/9b8ec54b.html"/>
      <url>/posts/9b8ec54b.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、Django-介绍"><a href="#一、Django-介绍" class="headerlink" title="一、Django 介绍"></a>一、Django 介绍</h1><h2 id="1、Django-简介"><a href="#1、Django-简介" class="headerlink" title="1、Django 简介"></a>1、Django 简介</h2><p>Django，发音为[&#96;dʒæŋɡəʊ]，Django 诞生于2003年秋天，2005 年发布正式版本，由 Simon 和 Andrian 开发。当时两位作者的老板和记者要他们几天甚至几个小时之内增加新的功能。两人不得已开发了 Django 这套框架以实现快速开发目的，因此 Django 生来就是为了节省开发者时间的。Django 发展至今，被许许多多国内外的开发者使用，已经成为 web 开发者的首选框架。因此，如果你是用 python 来做网站或 app 后端，没有理由不学好 Django。</p><h2 id="2、Django-特点"><a href="#2、Django-特点" class="headerlink" title="2、Django 特点"></a>2、Django 特点</h2><h3 id="快速开发"><a href="#快速开发" class="headerlink" title="快速开发"></a>快速开发</h3><p>Django 是一个开箱即用的 Web 框架，包括了数据库处理、HTML 渲染、Admin 系统、发送邮件、登录鉴权等平时开发中你能想到的功能，他都已经集成好了，只要你学会了，以后开发的速度是非常快的。</p><h3 id="安全性高"><a href="#安全性高" class="headerlink" title="安全性高"></a>安全性高</h3><p>Django 在安全方面做得非常完善，节省开发者处理安全的时间。比如 SQL 注入、CSRF 攻击，点击劫持等常见的 Web 安全问题，Django 都已经处理好了。</p><h3 id="可伸缩性强"><a href="#可伸缩性强" class="headerlink" title="可伸缩性强"></a>可伸缩性强</h3><p>世界上很多大型网站都是用 Django 开发的，能快速和灵活的调整硬件来满足不同的流量需求。</p><h2 id="3、Django-相关网址"><a href="#3、Django-相关网址" class="headerlink" title="3、Django 相关网址"></a>3、Django 相关网址</h2><ul><li>Github 源代码：<a href="https://github.com/django/django">https://github.com/django/django</a></li><li>Django 官网：<a href="https://www.djangoproject.com/">https://www.djangoproject.com/</a></li><li>Django 文档：<a href="https://docs.djangoproject.com/zh-hans/5.0/">https://docs.djangoproject.com/zh-hans/5.0/</a></li><li>MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Django/Introduction">https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Django/Introduction</a></li></ul><h2 id="4、使用Django开发的网站"><a href="#4、使用Django开发的网站" class="headerlink" title="4、使用Django开发的网站"></a>4、使用Django开发的网站</h2><ol><li>Instagram：全球知名的图片社交平台，使用 Django 开发后端，并通过Django REST framework 提供 API。</li><li>Pinterest：一个图片分享社交平台，也是使用 Django 开发的。</li><li>Mozilla：一个非营利组织，旨在推广开放式 Web 标准，使用 Django 管理其网站的后端。</li><li>The Washington Post：美国知名媒体，利用 Django 开发网站的后端，同时也在 GitHub 上开源了其一些 Django 应用。</li><li>Bitbucket：代码托管平台，由 Atlassian 公司提供支持，采用 Django 开发后端。</li><li>Disqus：一个广泛使用的第三方评论系统，也是用 Django 开发的。</li><li>Spotify：一个流行的音乐流媒体平台，使用 Django 开发后端。</li></ol><p>国内包括有腾讯、阿里巴巴、百度、字节跳动等，在某些模块或功能上，都在使用 Django。更多使用 Django 开发的网站请参考：<a href="https://builtwithdjango.com/projects/">https://builtwithdjango.com/projects/</a></p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、Spring创建Bean对象</title>
      <link href="/posts/cc9acf8e.html"/>
      <url>/posts/cc9acf8e.html</url>
      
        <content type="html"><![CDATA[<h1 id="五、Spring-创建-Bean-对象"><a href="#五、Spring-创建-Bean-对象" class="headerlink" title="五、Spring 创建 Bean 对象"></a>五、Spring 创建 Bean 对象</h1><h2 id="1、通过反射调用构造方法创建"><a href="#1、通过反射调用构造方法创建" class="headerlink" title="1、通过反射调用构造方法创建"></a>1、通过反射调用构造方法创建</h2><p>​调用类的构造方法获取对应的 bean 实例，是使用最多的方式，这种方式只需要在 xml bean 元素中指定 class 属性，spring 容器内部会自动调用该类型的构造方法来创建 bean 对象，将其放在容器中以供使用。</p><h3 id="1-1、语法"><a href="#1-1、语法" class="headerlink" title="1-1、语法"></a>1-1、语法</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean名称<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean名称或者别名<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean的完整类型名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean的值<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>引用的bean名称<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean的值<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>引用的bean名称<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    ....    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>n<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean的值<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>引用的bean名称<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>   <code>constructor-arg</code> 用于指定构造方法参数的值</p><ol><li>index：构造方法中参数的位置，从0开始，依次递增</li><li>value：指定参数的值</li><li>ref：当插入的值为容器内其他 bean 的时候，这个值为容器中对应 bean 的名称</li></ol></blockquote><h3 id="1-2、案例"><a href="#1-2、案例" class="headerlink" title="1-2、案例"></a>1-2、案例</h3><h4 id="UserModel类"><a href="#UserModel类" class="headerlink" title="UserModel类"></a>UserModel类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"我是通过UserModel的无参构造方法创建的!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="beans-xml配置"><a href="#beans-xml配置" class="headerlink" title="beans.xml配置"></a>beans.xml配置</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 通过UserModel的默认构造方法创建UserModel对象 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createBeanByConstructor1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo.UserModel<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 通过UserModel有参构造方法创建UserModel对象 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createBeanByConstructor2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo.UserModel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>我是通过UserModel的有参方法构造的对象!<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这 2 种写法，spring 容器创建这两个 UserModel 的时候，都会通过反射的方式去调用 UserModel 类中对应的构造函数来创建 UserModel 对象。</p><h4 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.bean配置文件位置</span>        <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo/beans.xml"</span><span class="token punctuation">;</span>        <span class="token comment">//2.创建ClassPathXmlApplicationContext容器，给容器指定需要加载的bean配置文件</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"spring容器中所有bean如下："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//getBeanDefinitionNames用于获取容器中所有bean的名称</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanName <span class="token operator">:</span> context<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beanName <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中会输出 spring 容器中所有 bean 的名称和其对应的 bean 对象。</p><h4 id="运行输出"><a href="#运行输出" class="headerlink" title="运行输出"></a>运行输出</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">spring容器中所有bean如下：createBeanByConstructor1:UserModel<span class="token punctuation">(</span>name<span class="token operator">=</span>我是通过UserModel的无参构造方法创建的<span class="token operator">!</span>, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>createBeanByConstructor2:UserModel<span class="token punctuation">(</span>name<span class="token operator">=</span>我是通过UserModel的有参方法构造的对象<span class="token operator">!</span>, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2、通过静态工厂方法创建"><a href="#2、通过静态工厂方法创建" class="headerlink" title="2、通过静态工厂方法创建"></a>2、通过静态工厂方法创建</h2><p>我们可以创建静态工厂，内部提供一些静态方法来生成所需要的对象，将这些静态方法创建的对象交给 spring 以供使用。</p><h3 id="2-1、语法"><a href="#2-1、语法" class="headerlink" title="2-1、语法"></a>2-1、语法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"bean名称"</span> name<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"静态工厂完整类名"</span> factory<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"静态工厂的方法"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg index<span class="token operator">=</span><span class="token string">"0"</span> value<span class="token operator">=</span><span class="token string">"bean的值"</span> ref<span class="token operator">=</span><span class="token string">"引用的bean名称"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg index<span class="token operator">=</span><span class="token string">"1"</span> value<span class="token operator">=</span><span class="token string">"bean的值"</span> ref<span class="token operator">=</span><span class="token string">"引用的bean名称"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg index<span class="token operator">=</span><span class="token string">"n"</span> value<span class="token operator">=</span><span class="token string">"bean的值"</span> ref<span class="token operator">=</span><span class="token string">"引用的bean名称"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>   <code>class</code>：指定静态工厂完整的类名</p><ol><li>factory-method：静态工厂中的静态方法，返回需要的对象。</li><li>constructor-arg：用于指定静态方法参数的值，用法和上面介绍的构造方法一样。</li></ol></blockquote><p>spring 容器会自动调用静态工厂的静态方法获取指定的对象，将其放在容器中以供使用。</p><h3 id="2-2、案例"><a href="#2-2、案例" class="headerlink" title="2-2、案例"></a>2-2、案例</h3><h4 id="定义静态工厂"><a href="#定义静态工厂" class="headerlink" title="定义静态工厂"></a>定义静态工厂</h4><p>创建一个静态工厂类，用于生成UserModel对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserStaticFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 静态无参方法创建UserModel     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UserModel</span> <span class="token function">buildUser1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserModel</span> userModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"我是无参静态构造方法创建的!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 静态有参方法创建UserModel     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UserModel</span> <span class="token function">buildUser2</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserModel</span> userModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="beans-xml配置-1"><a href="#beans-xml配置-1" class="headerlink" title="beans.xml配置"></a>beans.xml配置</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 通过工厂静态无参方法创建bean对象 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createBeanByStaticFactoryMethod1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo.UserStaticFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>buildUser1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 通过工厂静态有参方法创建bean对象 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createBeanByStaticFactoryMethod2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo.UserStaticFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>buildUser2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通过工厂静态有参方法创建UerModel实例对象<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​上面配置中，spring 容器启动的时候会自动调用 UserStaticFactory 中的 buildUser1 静态方法获取 UserModel 对象，将其作为 createBeanByStaticFactoryMethod1 名称对应的 bean 对象放在 spring 容器中。</p><p>​会调用 UserStaticFactory 的 buildUser2 方法，并且会传入2个指定的参数，得到返回的 UserModel 对象，将其作为 createBeanByStaticFactoryMethod2 名称对应的 bean 对象放在 spring 容器中。</p><h4 id="运行-Client"><a href="#运行-Client" class="headerlink" title="运行 Client"></a>运行 Client</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">spring容器中所有bean如下：createBeanByStaticFactoryMethod1:UserModel<span class="token punctuation">(</span>name<span class="token operator">=</span>我是无参静态构造方法创建的<span class="token operator">!</span>, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>createBeanByStaticFactoryMethod2:UserModel<span class="token punctuation">(</span>name<span class="token operator">=</span>通过工厂静态有参方法创建UerModel实例对象, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​从输出中可以看出，两个静态方法都被调用了，createBeanByStaticFactoryMethod1 对应的 bean对象是通过buildUser1 方法创建的；createBeanByStaticFactoryMethod2 对应的 bean对象是通过 buildUser2方法创建的。</p><h2 id="3、通过实例工厂方法创建"><a href="#3、通过实例工厂方法创建" class="headerlink" title="3、通过实例工厂方法创建"></a>3、通过实例工厂方法创建</h2><p>让 spring 容器去调用某些对象的某些实例方法来生成 bean 对象放在容器中以供使用。</p><h3 id="3-1、语法"><a href="#3-1、语法" class="headerlink" title="3-1、语法"></a>3-1、语法</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean名称<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>需要调用的实例对象bean名称<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean对象中的方法<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean的值<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>引用的bean名称<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean的值<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>引用的bean名称<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    ....    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>n<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean的值<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>引用的bean名称<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​spring 容器以 factory-bean 的值为 bean 名称查找对应的 bean 对象，然后调用该对象中 factory-method 属性值指定的方法，将这个方法返回的对象作为当前 bean 对象放在容器中供使用。</p><h3 id="3-2、案例"><a href="#3-2、案例" class="headerlink" title="3-2、案例"></a>3-2、案例</h3><h4 id="定义一个实例工厂"><a href="#定义一个实例工厂" class="headerlink" title="定义一个实例工厂"></a>定义一个实例工厂</h4><p>内部写 2 个方法用来创建 UserModel 对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserFactory</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token class-name">UserModel</span> <span class="token function">buildUser1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserModel</span> userModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"bean实例方法创建的对象!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">UserModel</span> <span class="token function">buildUser2</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserModel</span> userModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="beans-xml"><a href="#beans-xml" class="headerlink" title="beans.xml"></a>beans.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 定义一个工厂实例 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo.UserFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 通过userFactory实例的无参user方法创建UserModel对象 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createBeanByBeanMethod1<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>buildUser1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 通过userFactory实例的有参user方法创建UserModel对象 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createBeanByBeanMethod2<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>buildUser2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通过bean实例有参方法创建UserModel实例对象<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行Client"><a href="#运行Client" class="headerlink" title="运行Client"></a>运行Client</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">spring容器中所有bean如下：createBeanByBeanMethod1:UserModel<span class="token punctuation">(</span>name<span class="token operator">=</span>bean实例方法创建的对象<span class="token operator">!</span>, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>createBeanByBeanMethod2:UserModel<span class="token punctuation">(</span>name<span class="token operator">=</span>通过bean实例有参方法创建UserModel实例对象, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>createBeanByBeanMethod1 对应的 bean 是通过 userFactory 的buildUser1方法生成的。createBeanByBeanMethod2对应的 bean是通过 userFactory的 buildUser2方法生成的。</p><h2 id="4、通过-FactoryBean-来创建"><a href="#4、通过-FactoryBean-来创建" class="headerlink" title="4、通过 FactoryBean 来创建"></a>4、通过 FactoryBean 来创建</h2><p>前面我们学过了 BeanFactory 接口，BeanFactory 是 spring 容器的顶层接口，而这里要说的是 FactoryBean，也是一个接口，这两个接口很容易搞混淆，FactoryBean 可以让 spring 容器通过这个接口的实现来创建我们需要的 bean 对象。</p><p>FactoryBean 接口源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 返回创建好的对象     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token class-name">T</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 返回需要创建的对象的类型     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**    * bean是否是单例的    **/</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​接口中有 3 个方法，前面 2 个方法需要我们去实现</p><ul><li>getObject 方法内部由开发者自己去实现对象的创建，然后将创建好的对象返回给 Spring 容器</li><li>getObjectType 需要指定我们创建的 bean 的类型；</li><li>最后一个方法 isSingleton 表示通过这个接口创建的对象是否是单例的，如果返回false，那么每次从容器中获取对象的时候都会调用这个接口的getObject() 去生成bean对象。</li></ul><h3 id="4-1、语法"><a href="#4-1、语法" class="headerlink" title="4-1、语法"></a>4-1、语法</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean名称<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FactoryBean接口实现类<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2、案例"><a href="#4-2、案例" class="headerlink" title="4-2、案例"></a>4-2、案例</h3><h4 id="创建一个FactoryBean实现类"><a href="#创建一个FactoryBean实现类" class="headerlink" title="创建一个FactoryBean实现类"></a>创建一个FactoryBean实现类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">FactoryBean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserModel</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">UserModel</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span> <span class="token comment">//@1</span>        <span class="token class-name">UserModel</span> userModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"我是通过FactoryBean创建的第"</span><span class="token operator">+</span>count<span class="token operator">++</span><span class="token operator">+</span> <span class="token string">"对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//@4</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">UserModel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> <span class="token comment">//@2</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//@3</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>返回了一个创建好的 UserModel 对象</li><li>返回对象的 Class 对象</li><li>返回 true，表示创建的对象是单例的，那么我们每次从容器中获取这个对象的时候都是同一个对象</li><li>此处用到了一个 count，通过这个一会可以看出 isSingleton 不同返回值的时候从容器获取的 bean 是否是同一个</li></ol><h4 id="bean-xml配置"><a href="#bean-xml配置" class="headerlink" title="bean xml配置"></a>bean xml配置</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 通过FactoryBean 创建UserModel对象 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createByFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode.lesson.demo.UserFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Client-代码"><a href="#Client-代码" class="headerlink" title="Client 代码"></a>Client 代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.bean配置文件位置</span>        <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode/lesson/demo/beans.xml"</span><span class="token punctuation">;</span>        <span class="token comment">//2.创建ClassPathXmlApplicationContext容器，给容器指定需要加载的bean配置文件</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"spring容器中所有bean如下："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//多次获取createByFactoryBean看看是否是同一个对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"createByFactoryBean:"</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"createByFactoryBean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"createByFactoryBean:"</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"createByFactoryBean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行输出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">spring容器中所有bean如下：createByFactoryBean:UserModel<span class="token punctuation">(</span>name<span class="token operator">=</span>我是通过FactoryBean创建的第1对象, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>createByFactoryBean:UserModel<span class="token punctuation">(</span>name<span class="token operator">=</span>我是通过FactoryBean创建的第1对象, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意最后 2 行输出，有 3 行输出的都是同一个 createByFactoryBean，程序中通过 getBean 从 spring 容器中查找 createByFactoryBean 了 2 次，结果都是一样的，说明返回的都是同一个 UserModel 对象。</p><p>下面我们将 UserFactoryBean 中的 isSingleton 调整一下，返回 false</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>当这个方法返回 false 的时候，表示由这个FactoryBean创建的对象是多例的，那么我们每次从容器中 getBean 的时候都会去重新调用 FactoryBean 中的 getObject 方法获取一个新的对象。</strong></p><p>再运行一下Client，最后 2 行输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">createByFactoryBean:UserModel<span class="token punctuation">(</span>name<span class="token operator">=</span>我是通过FactoryBean创建的第1对象, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>createByFactoryBean:UserModel<span class="token punctuation">(</span>name<span class="token operator">=</span>我是通过FactoryBean创建的第2对象, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这 2 次获取的对象不一样了。</p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>​spring 容器提供了 4 种创建 bean 实例的方式，除了构造函数的方式，其他几种方式可以让我们手动去控制对象的创建，这几种方式大家都掌握一下，能够灵活使用。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、Spring XML中Bean定义</title>
      <link href="/posts/d9c8843.html"/>
      <url>/posts/d9c8843.html</url>
      
        <content type="html"><![CDATA[<h1 id="四、Spring-XML-中-Bean-定义"><a href="#四、Spring-XML-中-Bean-定义" class="headerlink" title="四、Spring XML 中 Bean 定义"></a>四、Spring XML 中 Bean 定义</h1><h2 id="1、Bean-概念回顾"><a href="#1、Bean-概念回顾" class="headerlink" title="1、Bean 概念回顾"></a>1、Bean 概念回顾</h2><p>​我们再来回顾一下，被 Spring 管理的对象统称为 Bean，我们程序中需要用到很多对象，我们将这些对象让 Spring 去帮我们创建和管理，我们可以通过 Bean Xml 配置文件告诉 Spring 容器需要管理哪些 Bean，Spring 帮我们创建和组装好这些 Bean 对象；那么我们如何从 Spring 中获取想要的 Bean 对象呢，我们需要给 Bean 定义一个名称，Spring 内部将这些名称和具体的Bean 对象进行绑定，然后 Spring 容器可以通过这个的名称找对我们需要的对象，这个名称叫做 Bean 的名称，在一个 Spring 容器中需要是唯一的。</p><h2 id="2、Bean-XML配置文件格式"><a href="#2、Bean-XML配置文件格式" class="headerlink" title="2、Bean XML配置文件格式"></a>2、Bean XML配置文件格式</h2><p>Bean xml 文件用于定义 Spring 容器需要管理的 Bean，常见的格式如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>引入其他bean xml配置文件<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean标识<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>玩转类型名称<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean标识<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>别名<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Beans 是根元素，下面可以包含任意数量的 import、bean、alias 元素，下面我们对每个元素进行详解。</p><h3 id="2-1、bean-元素"><a href="#2-1、bean-元素" class="headerlink" title="2-1、bean 元素"></a>2-1、bean 元素</h3><p>用来定义一个 bean 对象。</p><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean唯一标识<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean名称<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>完整类型名称<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>工厂bean名称<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>工厂方法<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="bean-名称"><a href="#bean-名称" class="headerlink" title="bean 名称"></a>bean 名称</h4><p>每个 bean 都有一个名称，叫做 bean 名称，bean 名称在一个 spring 容器中必须唯一，否则会报错，通过 bean 名称可以从 spring 容器获取对应的 bean 对象。</p><h4 id="bean-别名"><a href="#bean-别名" class="headerlink" title="bean 别名"></a>bean 别名</h4><p>先来说一下什么是别名？</p><p>相当于人的外号一样，一个人可能有很多外号，当别人喊这个人的名称或者外号的时候，都可以找到这个人。那么 bean 也一样，也可以给 bean 起几个外号，这个外号在 spring 中叫做 bean 的别名，spring 容器允许使用者通过名称或者别名获取对应的 bean 对象。</p><h4 id="bean-名称别名定义规则"><a href="#bean-名称别名定义规则" class="headerlink" title="bean 名称别名定义规则"></a>bean 名称别名定义规则</h4><p>名称和别名可以通过 bean 元素中的 id 和 name 来定义，具体定义规则如下：</p><ol><li><strong>当 id 存在的时候，不管 name 有没有，取 id 为 bean 的名称</strong></li><li><strong>当 id 不存在，此时需要看 name，name 的值可以通过<code>,;或者空格</code>分割，最后会按照分隔符得到一个String数组，数组的第一个元素作为 bean 的名称，其他的作为 bean 的别名</strong></li><li><strong>当 id 和 name 都存在的时候，id 为 bean 名称，name 用来定义多个别名</strong></li><li><strong>当 id 和 name 都不指定的时候，bean 名称自动生成，生成规则下面详细说明</strong></li></ol><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>下面演示一下 bean 名称和别名的各种写法。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 通过id定义bean名称：user1 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode2018.lesson001.demo2.UserModel<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 通过name定义bean名称：user2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode2018.lesson001.demo2.UserModel<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!-- id为名称，name为别名；bean名称：user3，1个别名：[user3_1] --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user3<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user3_1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode2018.lesson001.demo2.UserModel<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!-- bean名称：user4，多个别名：[user4_1,user4_2,user4_3,user4_4] --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user4<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user4_1,user4_2;user4_3 user4_4<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode2018.lesson001.demo2.UserModel<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!-- bean名称：user5，别名：[user5_1,user5_2,user5_3,user5_4] --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user5,user5_1,user5_2;user5_3 user5_4<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode2018.lesson001.demo2.UserModel<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来写个 java 来输出上面所有 bean 的名称和其别名，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">BeanFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.bean配置文件位置</span>        <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode2018/lesson001/demo2/beans.xml"</span><span class="token punctuation">;</span>        <span class="token comment">//2.创建ClassPathXmlApplicationContext容器，给容器指定需要加载的bean配置文件</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanName <span class="token operator">:</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">,</span> <span class="token string">"user2"</span><span class="token punctuation">,</span> <span class="token string">"user3"</span><span class="token punctuation">,</span> <span class="token string">"user4"</span><span class="token punctuation">,</span> <span class="token string">"user5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//获取bean的别名</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aliases <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getAliases</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"beanName:%s,别名:[%s]"</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> aliases<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"spring容器中所有bean如下："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//getBeanDefinitionNames用于获取容器中所有bean的名称</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanName <span class="token operator">:</span> context<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//获取bean的别名</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aliases <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getAliases</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"beanName:%s,别名:[%s]"</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> aliases<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上面有 2 个新的方法：</p><ol><li><code>getAliases</code>：通过 bean 名称获取这个 bean 的所有别名</li><li><code>getBeanDefinitionNames</code>：返回 spring 容器中定义的所有 bean 的名称</li></ol></blockquote><p>运行输出：</p><pre class="line-numbers language-none"><code class="language-none">beanName:user1,别名:[]beanName:user2,别名:[]beanName:user3,别名:[user3_1]beanName:user4,别名:[user4_1,user4_4,user4_2,user4_3]beanName:user5,别名:[user5_3,user5_4,user5_1,user5_2]spring容器中所有bean如下：beanName:user1,别名:[]beanName:user2,别名:[]beanName:user3,别名:[user3_1]beanName:user4,别名:[user4_1,user4_4,user4_2,user4_3]beanName:user5,别名:[user5_3,user5_4,user5_1,user5_2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="id-和-name-都未指定"><a href="#id-和-name-都未指定" class="headerlink" title="id 和 name 都未指定"></a>id 和 name 都未指定</h4><p>当 id 和 name 都未指定的时候，bean 的名称和别名又是什么呢？</p><p>此时由 spring 自动生成，bean名称为：<code>bean的class的完整类名#编号</code>。编号是从 0 开始的，同种类型的没有指定名称的依次递增。</p><p>如：下面定义了 2 个 UserModel 和 2 个 String 类型的 bean，这些 bean 都没有指定 id 和 name。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode2018.lesson001.demo2.UserModel<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode2018.lesson001.demo2.UserModel<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们再次运行一下上面Client类的main方法，输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">beanName:com.javacode2018.lesson001.demo2.UserModel<span class="token comment">#0,</span>别名:<span class="token punctuation">[</span>com.javacode2018.lesson001.demo2.UserModel<span class="token punctuation">]</span>beanName:com.javacode2018.lesson001.demo2.UserModel<span class="token comment">#1,</span>别名:<span class="token punctuation">[</span><span class="token punctuation">]</span>beanName:java.lang.String<span class="token comment">#0,</span>别名:<span class="token punctuation">[</span>java.lang.String<span class="token punctuation">]</span>beanName:java.lang.String<span class="token comment">#1,</span>别名:<span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意看一下上面最后 4 行的输出，bean 名称和别名都是自动生成的，<strong>未指定id 和 name 的 bean 对象，第一个会有别名，别名为完整的类名。bean 名称为<code>完整类名#编号</code>。</strong></p><h3 id="2-2、alias-元素"><a href="#2-2、alias-元素" class="headerlink" title="2-2、alias 元素"></a>2-2、alias 元素</h3><p>alias 元素也可以用来给某个 bean 定义别名，语法：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>需要定义别名的bean<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>别名<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user6<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode2018.lesson001.demo2.UserModel<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user6<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user6_1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user6<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user6_2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面第一行通过 bean 元素定义了一个名称为 user6 的 UserModel 对象，后面 2 行给 user6 这个 bean 定义了 2 个别名，分别是 user6_1 和 user6_2。运行 Client，会输出一行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">beanName:user6,别名:<span class="token punctuation">[</span>user6_2,user6_1<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3、import-元素"><a href="#2-3、import-元素" class="headerlink" title="2-3、import 元素"></a>2-3、import 元素</h3><p>当我们的系统比较大的时候，会分成很多模块，每个模块会对应一个 bean xml 文件，我们可以在一个总的 bean xml 中对其他 bean xml 进行汇总，相当于把多个 bean xml 的内容合并到一个里面了，可以通过 import 元素引入其他 bean 配置文件。</p><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>其他配置文件的位置<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p>本文主要介绍了 xml bean 的定义，名称和别名的使用，通过 import 元素引入外部配置文件。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、Spring容器使用及原理</title>
      <link href="/posts/f0bce173.html"/>
      <url>/posts/f0bce173.html</url>
      
        <content type="html"><![CDATA[<h1 id="三、Spring容器使用及原理"><a href="#三、Spring容器使用及原理" class="headerlink" title="三、Spring容器使用及原理"></a>三、Spring容器使用及原理</h1><h2 id="1、IOC-容器"><a href="#1、IOC-容器" class="headerlink" title="1、IOC 容器"></a>1、IOC 容器</h2><p>​IOC容器是具有依赖注入功能的容器，负责<strong>对象的实例化、对象的初始化，对象和对象之间依赖关系配置、对象的销毁、对外提供对象的查找</strong>等操作，对象的整个生命周期都是由容器来控制。我们需要使用的对象都由ioc容器进行管理，不需要我们再去手动通过new的方式去创建对象，由ioc容器直接帮我们组装好，当我们需要使用的时候直接从ioc容器中直接获取就可以了。</p><p>&#x3D;&#x3D;那么spring ioc容器是如何知道需要管理哪些对象呢？&#x3D;&#x3D;</p><p>​需要我们给ioc容器提供一个配置清单，这个配置<code>支持xml格式</code>和<code>java注解的方式</code>，在配置文件中列出需要让ioc容器管理的对象，以及可以指定让ioc容器如何构建这些对象，当spring容器启动的时候，就会去加载这个配置文件，然后将这些对象给组装好以供外部访问者使用。</p><p>​这里所说的 IOC 容器也叫 spring 容器。</p><h2 id="2、Bean-概念"><a href="#2、Bean-概念" class="headerlink" title="2、Bean 概念"></a>2、Bean 概念</h2><p>​<strong>由 spring 容器管理的对象统称为 Bean 对象</strong>。Bean 就是普通的 java 对象，和我们自己new的对象其实是一样的，只是这些对象是由 spring 去创建和管理的，我们需要在配置文件中告诉 spring 容器需要创建哪些 bean 对象，所以需要先在配置文件中定义好需要创建的 bean 对象，这些配置统称为 bean 定义配置元数据信息，spring 容器通过读取这些 bean 配置元数据信息来构建和组装我们需要的对象。</p><h2 id="3、Spring-容器使用步骤"><a href="#3、Spring-容器使用步骤" class="headerlink" title="3、Spring 容器使用步骤"></a>3、Spring 容器使用步骤</h2><ol><li>引入 spring 相关的 maven 配置</li><li>创建 bean 配置文件，比如<code>bean.xml</code>配置文件</li><li>在 bean.xml 文件中定义好需要 spring 容器管理的 bean 对象</li><li>创建 spring 容器，并给容器指定需要装载的 bean 配置文件，当 spring 容器启动之后，会加载这些配置文件，然后创建好配置文件中定义好的 bean 对象，将这些对象放在容器中以供使用</li><li>通过容器提供的方法获取容器中的对象，然后使用</li></ol><h2 id="4、Spring-容器对象"><a href="#4、Spring-容器对象" class="headerlink" title="4、Spring 容器对象"></a>4、Spring 容器对象</h2><p>spring 内部提供了很多表示 spring 容器的接口和对象，我们来看看比较常见的几个容器接口和具体的实现类。</p><h3 id="4-1、BeanFactory-接口"><a href="#4-1、BeanFactory-接口" class="headerlink" title="4-1、BeanFactory 接口"></a>4-1、BeanFactory 接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span>BeanFactory</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​spring 容器中具有代表性的容器就是 BeanFactory 接口，这个是 spring 容器的顶层接口，提供了容器最基本的功能。</p><h4 id="常用的几个方法"><a href="#常用的几个方法" class="headerlink" title="常用的几个方法"></a>常用的几个方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//按bean的id或者别名查找容器中的bean</span><span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token comment">//这个是一个泛型方法，按照bean的id或者别名查找指定类型的bean，返回指定类型的bean对象</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span><span class="token comment">//返回容器中指定类型的bean对象</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span><span class="token comment">//获取指定类型bean对象的获取器，这个方法比较特别，以后会专门来讲</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getBeanProvider</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2、ApplicationContext-接口"><a href="#4-2、ApplicationContext-接口" class="headerlink" title="4-2、ApplicationContext 接口"></a>4-2、ApplicationContext 接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span>ApplicationContext</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​这个接口继承了 BeanFactory 接口，所以内部包含了 BeanFactory 所有的功能，并且在其上进行了扩展，增加了很多企业级功能，比如AOP、国际化、事件支持等等。。</p><h3 id="4-3、ClassPathXmlApplicationContext-类"><a href="#4-3、ClassPathXmlApplicationContext-类" class="headerlink" title="4-3、ClassPathXmlApplicationContext 类"></a>4-3、ClassPathXmlApplicationContext 类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>ClassPathXmlApplicationContext</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​这个类实现了 ApplicationContext 接口，注意一下这个类名称包含了 ClassPath Xml，说明这个容器类可以从classpath 中加载 bean xml 配置文件，然后创建 xml 中配置的 bean 对象，一会后面的案例就会用到这个类。</p><h3 id="4-4、AnnotationConfigApplicationContext-类"><a href="#4-4、AnnotationConfigApplicationContext-类" class="headerlink" title="4-4、AnnotationConfigApplicationContext 类"></a>4-4、AnnotationConfigApplicationContext 类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>AnnotationConfigApplicationContext</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​这个类也实现了 ApplicationContext 接口，注意其类名包含了 Annotation 和 config 两个单词，上面我们有说过，bean 的定义支持 xml 的方式和注解的方式，当我们使用注解的方式定义bean的时候，就需要用到这个容器来装载了，这个容器内部会解析注解来构建构建和管理需要的 bean。</p><p>​注解的方式相对于 xml 方式更方便一些，也是我们比较推荐的方式，后面我们会大量使用这种方式，具体会详解。</p><h2 id="5、案例"><a href="#5、案例" class="headerlink" title="5、案例"></a>5、案例</h2><p>来个helloworld来详细看一下spring如何使用。</p><h3 id="创建项目-spring-series"><a href="#创建项目-spring-series" class="headerlink" title="创建项目 spring-series"></a>创建项目 spring-series</h3><p>使用 idea 创建 maven 项目s pring-series，项目坐标：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.javacode2018<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-series<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>spring-series项目中创建一个子模块<code>lesson-001</code>，项目maven父子结构，如下图：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/spring-pro-base/202407142021077.png" alt="image-20221128220803955"></p><h3 id="spring-series-pom-xml"><a href="#spring-series-pom-xml" class="headerlink" title="spring-series&#x2F;pom.xml"></a>spring-series&#x2F;pom.xml</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.javacode2018<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-series<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>lesson-001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 配置maven编译的时候采用的编译器版本 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 指定源代码是什么版本的，如果源码和这个版本不符将报错，maven中执行编译的时候会用到这个配置，默认是1.5，这个相当于javac命令后面的-source参数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 该命令用于指定生成的class文件将保证和哪个版本的虚拟机进行兼容，maven中执行编译的时候会用到这个配置，默认是1.5，这个相当于javac命令后面的-target参数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.2.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目前我们使用spring最新的版本<code>5.2.3.RELEASE</code>，需要引入spring提供的3个构件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">spring-core、spring-context、spring-beans<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="lesson-001-pom-xml"><a href="#lesson-001-pom-xml" class="headerlink" title="lesson-001\pom.xml"></a>lesson-001\pom.xml</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-series<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.javacode2018<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lesson-001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lesson-001中创建HelloWord类"><a href="#lesson-001中创建HelloWord类" class="headerlink" title="lesson-001中创建HelloWord类"></a>lesson-001中创建HelloWord类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,一起学spring!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HelloWord中我们创建了一个say方法，里面会输一段文字。</p><h3 id="使用spring容器"><a href="#使用spring容器" class="headerlink" title="使用spring容器"></a>使用spring容器</h3><p>下面我们通过spring容器来创建HelloWord对象，并从容器中获取这个对象，然后调用其say方法输出文字。</p><h3 id="创建bean-xml配置文件"><a href="#创建bean-xml配置文件" class="headerlink" title="创建bean xml配置文件"></a>创建bean xml配置文件</h3><p>新建一个文件，文件路径如下：</p><pre class="line-numbers language-none"><code class="language-none">spring-series\lesson-001\src\main\resources\com\javacode2018\lesson001\demo1\bean.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>bean.xml内容如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    定义一个bean    id：bean的唯一标识，可以通过这个标识从容器中获取这个bean对象    clss：这个bean的类型，完整类名称    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>helloWorld<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.javacode2018.lesson001.demo1.HelloWorld<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面就是bean的定义文件，每个xml中可以定义多个bean元素，通过bean元素定义需要spring容器管理的对象，bean元素需指定id和class属性</p><ul><li>id表示这个bean的标识，在容器中需要唯一，可以通过这个id从容器中获取这个对象；</li><li>class用来指定这个bean的完整类名</li></ul><p>上面的配置文件中我们定义了一个<code>helloWorld</code>标识的<code>HellWorld类型</code>的bean对象。</p><h3 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h3><p>创建一个Client类，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.bean配置文件位置</span>        <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode2018/lesson001/demo1/beans.xml"</span><span class="token punctuation">;</span>        <span class="token comment">//2.创建ClassPathXmlApplicationContext容器，给容器指定需要加载的bean配置文件</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.从容器中获取需要的bean</span>        <span class="token class-name">HelloWorld</span> helloWorld <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"helloWorld"</span><span class="token punctuation">,</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.使用对象</span>        helloWorld<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​上面main方法中有容器的详细使用步骤，需要先创建容器对象，创建容器的对象的时候需要指定bean xml文件的位置，容器启动之后会加载这些配文件，然后将这些对象构建好。</p><p>​代码中通过容器提供的getBean方法从容器中获取了HellWorld对象，第一个参数就是xml中bean的id，第二个参数为bean对应的Class对象。</p><h3 id="运行输出"><a href="#运行输出" class="headerlink" title="运行输出"></a>运行输出</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hello,一起学spring<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/spring-pro-base/202407142022783.png" alt="image-20221128223138316"></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、Spring IOC &amp; DI</title>
      <link href="/posts/16736fe4.html"/>
      <url>/posts/16736fe4.html</url>
      
        <content type="html"><![CDATA[<h1 id="二、Spring-IOC-DI"><a href="#二、Spring-IOC-DI" class="headerlink" title="二、Spring IOC &amp; DI"></a>二、Spring IOC &amp; DI</h1><p>​Spring 中有3个核心的概念：**控制反转(IOC)、依赖注入(DI)、面向切面编程(AOP)**， Spring 中其他的技术都是依靠3个核心的技术建立起来的，所以玩 Spring 需要先对这3个概念有个深入的理解。</p><p>本文我们先介绍其中的两个：控制反转和依赖注入，而aop我们后面有专门的文章详解。</p><h2 id="1、引出-Spring"><a href="#1、引出-Spring" class="headerlink" title="1、引出 Spring"></a>1、引出 Spring</h2><p>有2个类，A和B，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面2个类都有同样的m1方法。现在我们调用B的m1方法完成一些事情，而B中的m1方法需要调用A中的m1方法才可以完成这个事情，所以B的代码变成了下面这样：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">A</span> a<span class="token punctuation">;</span> <span class="token comment">// @1</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//@2</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//@3</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析一下上面代码：</p><ol><li>B类中声明了一个A类型的属性a</li><li>new了一个A对象，赋给了a属性</li><li>B类中的m1方法中去调用a.m1()完成业务操作</li></ol><p><strong>先说一下什么是依赖关系？</strong></p><p>​当a对象完成某些操作需要调用b对象中的方法来实现时，说明a依赖于对象b，a和b是依赖关系。上面代码中B的m1需要调用A的m1方法，说明了B依赖于A</p><p><strong>上面代码存在一些问题问题</strong></p><p>​<strong>B类中a对象的创建被写死在B的构造方法中了，如果我们想在创建不同的B对象的时候，使用不同的a对象，此时是无能为力的；代码也不利于测试，由于B中a的创建被写死在构造方法中了，我们想测试一下B中不同a对象的效果，此时只能去修改B中的构造方法。</strong></p><p>上面代码需要优化，B中a对象的创建不能写死，可以让外部传入进去，调整一下变成了下面这样：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">A</span> a<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码可以在创建B对象的时候，将外部创建好的a对象传入进去，此时a的控制权交给了使用者，创建B对象如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面代码我们再扩展一下，如果B类中还需要依赖很多类似于A的对象，比如需要依赖于C、D、E、F或者更多对象，首先是需要调整B的构造方法，修改老的构造方法不是很好，可以在B中新增一些构造方法。</p><p>但是使用B的时候就变成了下面这样：</p><pre class="line-numbers language-none"><code class="language-none">A a &#x3D; new A();C c &#x3D; new C();D d &#x3D; new D();E e &#x3D; new E();F f &#x3D; new F();...B b &#x3D; new B(a,c,d,e,f,...);b.m1();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​使用者创建B对象之前，需要先将B依赖的对象都给创建好，然后B依赖的这些对象传递给B对象，如果有很多地方都需要用到B类型的对象，都采用这种new的写法，代码量比较大，也不方便维护，如果B中新增了依赖，又需采用new的方式先创建好被依赖的对象，然后将被依赖的对象填充给B对象。</p><p>​上面创建对象之前，需要先将被依赖对象通过new的方式创建好，然后将其传递给B，这些工作都是B的使用者自己去做的，所有对象的创建都是由使用者自己去控制的，弊端上面也说了，代码量也比较大，代码耦合度比较高（依赖有调整，改动也比较大），也不利于扩展。</p><p>&#x3D;&#x3D;那么有没有更好的方式来解决这些问题呢？&#x3D;&#x3D;</p><p>​上面B对象以及B依赖的对象都是使用者自己主动去控制其创建的，能不能找一个第三方来把这个事情给做了，比如给第三方一个清单，清单中告诉第三方我需要用到B对象以及B需要依赖的对象，然后由这个第三方去负责创建和组装B对象，使用者需要使用B对象的时候，只需要向第三方发起一个查找，如果第三方那边有B对象，直接将其内部组装好的B对象返回就可以了，整个系统中所有需要用到的对象都可以列个清单，让第三方帮忙创造，用的时候只需要向第三方索取就可以了，当B中依赖的对象有新增或者删除的时候，只需要去调整一下清单就可以了，这个事情 Spring 已经帮我们实现了。</p><h2 id="2、Spring-容器"><a href="#2、Spring-容器" class="headerlink" title="2、Spring 容器"></a>2、Spring 容器</h2><p>​Spring 容器的概念，容器这个名字起的相当好，容器可以放很多东西，我们的程序启动的时候会创建 Spring 容器，会给 Spring 容器一个清单，清单中列出了需要创建的对象以及对象依赖关系， Spring 容器会创建和组装好清单中的对象，然后将这些对象存放在 Spring 容器中，当程序中需要使用的时候，可以到容器中查找获取，然后直接使用。</p><h2 id="3、IOC：控制反转"><a href="#3、IOC：控制反转" class="headerlink" title="3、IOC：控制反转"></a>3、IOC：控制反转</h2><p>​使用者之前使用B对象的时候都需要自己去创建和组装，而现在这些创建和组装都交给 Spring 容器去给完成了，使用者只需要去 Spring 容器中查找需要使用的对象就可以了；这个过程中B对象的创建和组装过程被反转了，<strong>之前是使用者自己主动去控制的，现在交给 Spring 容器去创建和组装了，对象的构建过程被反转了，所以叫做控制反转；</strong>IOC是是面相对象编程中的一种设计原则，主要是为了降低系统代码的耦合度，让系统利于维护和扩展。</p><h2 id="4、DI：依赖注入"><a href="#4、DI：依赖注入" class="headerlink" title="4、DI：依赖注入"></a>4、DI：依赖注入</h2><p>​<strong>依赖注入是 Spring 容器中创建对象时给其设置依赖对象的方式</strong>，比如给 Spring 一个清单，清单中列出了需要创建B对象以及其他的一些对象（可能包含了B类型中需要依赖对象），此时 Spring 在创建B对象的时候，会看B对象需要依赖于哪些对象，然后去查找一下清单中有没有包含这些被依赖的对象，如果有就去将其创建好，然后将其传递给B对象；可能B需要依赖于很多对象，B创建之前完全不需要知道其他对象是否存在或者其他对象在哪里以及被他们是如何创建，而 Spring 容器会将B依赖对象主动创建好并将其注入到B中去，比如 Spring 容器创建B的时候，发现B需要依赖于A，那么 Spring 容器在清单中找到A的定义并将其创建好之后，注入到B对象中。</p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><ol><li>IOC控制反转，是一种设计理念，将对象创建和组装的主动控制权利交给了 Spring 容器去做，控制的动作被反转了，降低了系统的耦合度，利于系统维护和扩展，<strong>主要就是指需要使用的对象的组装控制权被反转了，之前是自己要做的，现在交给 Spring 容器做了</strong>。</li><li>DI依赖注入，表示 Spring 容器中创建对象时给其设置依赖对象的方式，通过某些注入方式可以让系统更灵活，比如自动注入等可以让系统变的很灵活，这个后面的文章会细说。</li><li>Spring 容器：主要负责容器中对象的创建、组装、对象查找、对象生命周期的管理等等操作。</li><li><strong>下一篇开始详细讲解 Spring 的使用了</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、为何要学 Spring</title>
      <link href="/posts/9c19884c.html"/>
      <url>/posts/9c19884c.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、为何要学-Spring"><a href="#一、为何要学-Spring" class="headerlink" title="一、为何要学 Spring"></a>一、为何要学 Spring</h1><h2 id="1、为什么需要学习-Spring-？"><a href="#1、为什么需要学习-Spring-？" class="headerlink" title="1、为什么需要学习 Spring ？"></a>1、为什么需要学习 Spring ？</h2><p><strong>最大程度的简化了开发</strong></p><ul><li>Spring 是一个非常优秀的java框架，其目标是为了简化java企业级开发， Spring 出来已经十几年了，这期间也一直围绕着这个目标在进行，像后面需要学习的 Spring mvc、 Spring boot、 Spring cloud，这些技术也都是围绕着简化开发的目标在努力，到目前为止已经做的足够好了，可以说 Spring 除了不能帮助我们实现业务逻辑代码之外，其他的事情 Spring 都尽量去帮我们简化了，使用 Spring 可以帮助我们节约大量开发时间。</li><li>不使用 Spring 的情况下，开发一个项目可能需要2个月，用了 Spring 可能1个月都不需要，你说这样的技术你想学么？</li></ul><p>大量公司使用</p><ul><li>目前99%的公司使用了 Spring ，可以去各大招聘网站看一下， Spring 算是必备技能，所以一定要掌握。</li></ul><p>顶尖的源代码</p><ul><li>Spring 框架源码设计非常优秀，在java开源项目中可以说是顶级的，目前为止还未发现比 Spring 更优秀的开源项目，所以想提升代码能力的，强烈建议多看看 Spring 的源码；关于提升代码能力的，还可以去看一下jdk的源码，也是非常棒的，里面有很多大师的杰作。</li></ul><h2 id="2、什么是-Spring-？"><a href="#2、什么是-Spring-？" class="headerlink" title="2、什么是 Spring ？"></a>2、什么是 Spring ？</h2><p>​ Spring 是一个简化 Java 企业级开发的一个框架，内部包含了很多技术，比如：控制反转&amp;依赖注入、面向切面编程、 Spring 事务管理、通过 Spring 集成其他框架、 Spring mvc、 Spring boot、 Spring cloud等等，这些都是围绕简化开发展开的技术，后面会对每个知识点详细介绍。</p><h2 id="3、感受一下-Spring-的强大"><a href="#3、感受一下-Spring-的强大" class="headerlink" title="3、感受一下 Spring 的强大"></a>3、感受一下 Spring 的强大</h2><h3 id="原生的web项目开发"><a href="#原生的web项目开发" class="headerlink" title="原生的web项目开发"></a>原生的web项目开发</h3><p>我们需要为移动端提供 API 接口，接口数据以 json 格式输出，使用 java 技术，实现过程大家应该比较熟悉，如下：</p><ol><li>使用 idea 创建一个 web 项目</li><li>创建 servlet，servlet 中写业务代码，组装需要数据，将数据以 json 格式输出</li><li>在 web.xml 中配置 servlet 信息</li><li>将项目部署到 tomcat 中</li></ol><p>原生的 web 项目开发过程都是上面这样，和业务相关的其实只有第2步，而其他几个步骤是每个 web 项目都需要的，像比较大的项目，会有很多 web 模块，每个模块都需要重复这些1&#x2F;3&#x2F;4操作步骤，还是相当繁琐的，也会耗费大量时间。</p><h3 id="使用-Spring-boot-开发"><a href="#使用-Spring-boot-开发" class="headerlink" title="使用 Spring boot 开发"></a>使用 Spring boot 开发</h3><p>如果使用 Spring boot 来实现，过程会简化很多，来感受一下：</p><p>打开 IDEA，点击<code>File-&gt;New-&gt;Project</code>，如下：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/spring-pro-base/202407141715364" alt="图片"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/spring-pro-base/202407141715345" alt="图片"></p><p>点击<code> Spring Initializr-&gt;Next</code>，如下图：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/spring-pro-base/202407141716615" alt="图片"></p><p>输入项目坐标信息，如下图：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/spring-pro-base/202407141716031" alt="图片"></p><p>选择<code>Web-&gt;Spring Web-&gt;Spring Boot(2.24)-&gt;Next</code>，如下图：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/spring-pro-base/202407141716874" alt="图片"></p><p>点击<code>Finish</code>，完成项目的创建，如下图：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/spring-pro-base/202407141716414" alt="图片"></p><p>项目结构如下图：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/spring-pro-base/202407141717007" alt="图片"></p><p>目前为止我们还未写一行代码，下面我们创建一个类<code>HelloWorldController</code>，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span></span> <span class="token class-name">Spring</span> <span class="token class-name"><span class="token namespace">framework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span></span> <span class="token class-name">Spring</span> <span class="token class-name"><span class="token namespace">framework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>RestController</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/helloWorld"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldController</span> <span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意项目中有一个自动生成的类：<code> DemoApplication</code>，这个类包含了 main 方法，运行一下控制台输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">  <span class="token builtin class-name">.</span>   ____          _            __ _ _ /<span class="token punctuation">\</span><span class="token punctuation">\</span> / ___<span class="token string">'_ __ _ _(_)_ __  __ _ \ \ \ \( ( )\___ | '</span>_ <span class="token operator">|</span> <span class="token string">'_| | '</span>_ <span class="token punctuation">\</span>/ _` <span class="token operator">|</span> <span class="token punctuation">\</span> <span class="token punctuation">\</span> <span class="token punctuation">\</span> <span class="token punctuation">\</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>/  ___<span class="token punctuation">)</span><span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">||</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token string">'  |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ ::  Spring  Boot ::        (v2.2.4.RELEASE)2020-02-03 17:42:52.965  INFO 985848 --- [           main] com.javacode2018. Spring Demo1Application  : Starting  Spring Demo1Application on DESKTOP-3OB6NA3 with PID 985848 (E:\ Spring \ spring-demo1\target\classes started by Think in E:\ Spring \ spring-demo1)2020-02-03 17:42:52.968  INFO 985848 --- [           main] com.javacode2018. Spring Demo1Application  : No active profile set, falling back to default profiles: default2020-02-03 17:42:55.440  INFO 985848 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)2020-02-03 17:42:55.450  INFO 985848 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]2020-02-03 17:42:55.451  INFO 985848 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]2020-02-03 17:42:55.554  INFO 985848 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing  Spring  embedded WebApplicationContext2020-02-03 17:42:55.554  INFO 985848 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2546 ms2020-02-03 17:42:55.691  INFO 985848 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService '</span>applicationTaskExecutor<span class="token string">'2020-02-03 17:42:55.800  INFO 985848 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '</span>'<span class="token number">2020</span>-02-03 <span class="token number">17</span>:42:55.802  INFO <span class="token number">985848</span> --- <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> com.javacode2018. Spring Demo1Application  <span class="token builtin class-name">:</span> Started  Spring Demo1Application <span class="token keyword">in</span> <span class="token number">3.219</span> seconds <span class="token punctuation">(</span>JVM running <span class="token keyword">for</span> <span class="token number">4.096</span><span class="token punctuation">)</span><span class="token number">2020</span>-02-03 <span class="token number">17</span>:43:17.691  INFO <span class="token number">985848</span> --- <span class="token punctuation">[</span>nio-8080-exec-1<span class="token punctuation">]</span> o.a.c.c.C.<span class="token punctuation">[</span>Tomcat<span class="token punctuation">]</span>.<span class="token punctuation">[</span>localhost<span class="token punctuation">]</span>.<span class="token punctuation">[</span>/<span class="token punctuation">]</span>       <span class="token builtin class-name">:</span> Initializing  Spring  DispatcherServlet <span class="token string">'dispatcherServlet'</span><span class="token number">2020</span>-02-03 <span class="token number">17</span>:43:17.691  INFO <span class="token number">985848</span> --- <span class="token punctuation">[</span>nio-8080-exec-1<span class="token punctuation">]</span> o.s.web.servlet.DispatcherServlet        <span class="token builtin class-name">:</span> Initializing Servlet <span class="token string">'dispatcherServlet'</span><span class="token number">2020</span>-02-03 <span class="token number">17</span>:43:17.695  INFO <span class="token number">985848</span> --- <span class="token punctuation">[</span>nio-8080-exec-1<span class="token punctuation">]</span> o.s.web.servlet.DispatcherServlet        <span class="token builtin class-name">:</span> Completed initialization <span class="token keyword">in</span> <span class="token number">4</span> ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开浏览器，访问下面地址：<a href="http://localhost:8080/helloWorld/index%E3%80%82%E6%95%88%E6%9E%9C%E5%A6%82%E4%B8%8B%E5%9B%BE%EF%BC%9A">http://localhost:8080/helloWorld/index。效果如下图：</a></p><p><img src="/medias/loading.gif" data-original="E:\gitee\spring-guo\spring-pro\spring-image\8" alt="图片"></p><p>​到目前为止，我们没有去创建 servlet、将返回的结果以 json 格式输出、配置 web.xml，没有将项目发布到 tomcat，没有去启动 tomcat，而只启动了一个 main 方法，是不是非常神奇。</p><p>​Spring boot 内部已经帮我们实现了，对于开发者来说这些都被隐藏了， Spring boot 让我们更关注业务代码的实现，从而最大限度的帮我们提升开发效率，简化项目的开发过程。</p><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>​这篇文章主要是让大家了解一下 Spring 是什么，总的来说 Spring 是一个非常优秀的 Java 框架，这个框架的目标是为了简化企业级开发中需要用到的各种技术而存在的。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/posts/6c92115f.html"/>
      <url>/posts/6c92115f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><a href="http://luyaguo.github.io/posts/9c19884c.html">一、Spring 介绍</a></p><p><a href="http://luyaguo.github.io/posts/16736fe4.html">二、Spring IOC &amp; DI</a></p><p><a href="http://luyaguo.github.io/posts/f0bce173.html">三、Spring 容器使用及原理</a></p><p><a href="http://luyaguo.github.io/posts/d9c8843.html">四、Spring XML 中 Bean 定义</a></p><p><a href="http://luyaguo.github.io/posts/cc9acf8e.html">五、Spring创建Bean实例</a></p><p><a href="http://luyaguo.github.io/posts/e74ba9f2.html">六、Spring Bean作用域</a></p><p><a href="http://luyaguo.github.io/posts/e35541a1.html">七、Spring依赖注入之手动注入</a></p><p><a href="http://luyaguo.github.io/posts/ca252733.html">八、Spring依赖注入之自动注入</a></p><p><a href="http://luyaguo.github.io/posts/8a50cf4c.html">九、Spring depend-on</a></p><p><a href="http://luyaguo.github.io/posts/c04a7906.html">十、Spring Bean 的 primary 属性</a></p><p><a href="http://luyaguo.github.io/posts/30210473.html">十一、Spring Bean 的 autowire-candidate 属性</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二十五、Python数据库操作</title>
      <link href="/posts/6c0dee42.html"/>
      <url>/posts/6c0dee42.html</url>
      
        <content type="html"><![CDATA[<h1 id="二十五、Python数据库操作"><a href="#二十五、Python数据库操作" class="headerlink" title="二十五、Python数据库操作"></a>二十五、Python数据库操作</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>数据库操作是每一门编程语言中都必不可少的操作。</p><p>使用程序操作数据库之前，需要在本地或服务器先安装数据库，比如 MySQL 数据库。</p><p>Python 中使用第三方模块 <code>PyMySQL</code> 操作数据库，使用前需要先进行安装。</p><h2 id="2、安装-PyMySQL"><a href="#2、安装-PyMySQL" class="headerlink" title="2、安装 PyMySQL"></a>2、安装 PyMySQL</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install pymysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131737573.png" alt="image-20240713173601194"></p><h2 id="3、操作流程"><a href="#3、操作流程" class="headerlink" title="3、操作流程"></a>3、操作流程</h2><p>使用 <code>PyMySQL</code> 模块操作数据非常简单，步骤如下：</p><ol><li>导入模块</li><li>连接数据库</li><li>创建游标对象</li><li>执行数据库操作</li><li>关闭游标对象</li><li>关闭数据库连接</li></ol><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="连接关闭数据库"><a href="#连接关闭数据库" class="headerlink" title="连接关闭数据库"></a>连接关闭数据库</h3><p>操作数据库之前，需要先进行数据库连接，和使用其它方式操作数据库方式相同。</p><p><code>PyMySQL</code> 模块提供了四个连接数据库的函数名，其本质是多个变量的函数引用横等赋值，最终还是执行一个函数。</p><p>官方代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Connect <span class="token operator">=</span> connect <span class="token operator">=</span> Connection <span class="token operator">=</span> connections<span class="token punctuation">.</span>Connection<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按代码的赋值顺序，推荐使用 <code>Connect</code> 方式连接，其它函数使用方式相同。</p><p>连接数据库函数格式及主要参数如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Connect<span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">,</span> database<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>host</code>：数据库主机的地址，默认为 <code>localhost</code>。</li><li><code>port</code>：数据库的端口号，默认为 <code>3306</code>。</li><li><code>user</code>：连接数据库所用的用户名。</li><li><code>password</code>：连接数据库所用的密码。</li><li><code>database</code>：要连接的数据库的名称。</li><li><code>charset</code>：连接数据库时使用的字符集，默认为 <code>utf8</code>。</li></ul><p>目前本机已存在数据库 <code>newcms</code> 及数据库中的数据表。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysqldb_connect <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>Connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"123123123"</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">"cms"</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>db_connect<span class="token punctuation">)</span>db_connect<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据库使用完毕后，需要调用 <code>close()</code> 方法将数据库连接对象关闭，让其断开数据库连接，避免资源泄漏。</p><h3 id="获取和关闭游标对象"><a href="#获取和关闭游标对象" class="headerlink" title="获取和关闭游标对象"></a>获取和关闭游标对象</h3><p>数据库连接对象创建成功后，还需要创建游标对象。</p><p><strong>游标对象的作用是用来执行数据库操作，在执行完一次操作后，应调用 <code>close()</code> 方法将游标对象关闭。</strong></p><p>在进行数据库操作时，每次数据库操作都应该建立一个游标对象，在操作完毕后将其关闭，不应使用一个游标对象进行多次操作。</p><p><code>PyMySQL</code> 模块使用 <code>数据库连接对象.cursor()</code> 方法获取游标对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysqldb_connect <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>Connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"123123123"</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">"cms"</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> db_connect<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>db_connect<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行-SQL-操作"><a href="#执行-SQL-操作" class="headerlink" title="执行 SQL 操作"></a>执行 SQL 操作</h3><p><code>PyMySQL</code> 模块使用 <code>execute()</code> 方法执行 SQL 语句，实现数据库操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">游标对象<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>query<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>query</code>：需要执行的 SQL 语句</li><li><code>args</code>：为 SQL 语句中的占位符提供参数，防止 SQL 注入的发生</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysqldb_connect <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>Connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"123123123"</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">"cms"</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> db_connect<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select * from class"</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>db_connect<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><h4 id="查询单条记录"><a href="#查询单条记录" class="headerlink" title="查询单条记录"></a>查询单条记录</h4><p>使用 <code>execute</code> 执行完毕 SQL 语句后， 可以使用 <code>游标对象.fetchone()</code> 方法获取一条查询结果。</p><p><code>fetchone()</code> 方法可重复使用，程序会继续向后读取查询结果。如果无查询结果可读取，则返回 <code>None</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysqldb_connect <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>Connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> db_connect<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>db_connect<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131746411.png" alt="image-20240713174628269"></p><h4 id="查询多条记录"><a href="#查询多条记录" class="headerlink" title="查询多条记录"></a>查询多条记录</h4><p>可以使用 <code>游标对象.fetchall()</code> 方法获取全部查询结果。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysqldb_connect <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>Connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> db_connect<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>db_connect<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131747240.png" alt="image-20240713174756141"></p><h4 id="查询指定条数记录"><a href="#查询指定条数记录" class="headerlink" title="查询指定条数记录"></a>查询指定条数记录</h4><p>可以使用 <code>游标对象.fetchmany(size)</code> 方法获取指定数量查询结果。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysqldb_connect <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>Connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> db_connect<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchmany<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>db_connect<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131749479.png" alt="image-20240713174905368"></p><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>执行插入操作同样使用 <code>execute()</code> 方法，插入数据时的 SQL 语句中的新数据，可以使用传参的方式填 入。</p><p>参数可以使用 <code>元组</code> 或 <code>列表</code> 形式传入。</p><p><strong>在插入数据操作完成后，需要对所做的更改操作进行提交。</strong></p><p>提交操作使用 <code>数据库连接对象.commit()</code> 方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysqldb_connect <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>Connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> db_connect<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>insert_sql <span class="token operator">=</span> <span class="token triple-quoted-string string">''' insert into user(id,name,age,height) values(%s, %s, %s, %s) '''</span>values <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>insert_sql<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>db_connect<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>db_connect<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131751380.png" alt="image-20240713175135284"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131752994.png" alt="image-20240713175241878"></p><h3 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h3><p>更新操作同插入操作，只是 SQL 语句不同，操作完毕后，需要执行提交操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysqldb_connect <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>Connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> db_connect<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>insert_sql <span class="token operator">=</span> <span class="token triple-quoted-string string">''' update user set age=%s where id=%s'''</span>values <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>insert_sql<span class="token punctuation">,</span>values<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>db_connect<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>db_connect<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""1"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131755211.png" alt="image-20240713175504114"></p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>删除操作同插入操作和更新操作，只是 SQL 语句不同，操作完毕后，需要执行提交操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysqldb_connect <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>Connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> db_connect<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>insert_sql <span class="token operator">=</span> <span class="token triple-quoted-string string">''' delete from user where id=%s'''</span>values <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>insert_sql<span class="token punctuation">,</span>values<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>db_connect<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>db_connect<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""1"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131756981.png" alt="image-20240713175628283"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二十四、Python网络编程</title>
      <link href="/posts/aff67c23.html"/>
      <url>/posts/aff67c23.html</url>
      
        <content type="html"><![CDATA[<h1 id="二十四、Python网络编程"><a href="#二十四、Python网络编程" class="headerlink" title="二十四、Python网络编程"></a>二十四、Python网络编程</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p><strong>网络编程是指利用计算机网络进行数据传输和通信的编程技术。</strong></p><p>在网络编程中，使用编程语言和相关的网络协议来建立连接、传输数据、处理请求和响应等。</p><p>常见的网络编程涉及以下几个方面：</p><ol><li>Socket 编程：Socket 是一种抽象的网络通信接口，可以用于在不同计算机之间建立通信连接。通过Socket编程，可以实现客户端和服务器之间的数据传输和通信。</li><li>网络协议：网络协议是用于规定计算机之间通信的规则和约定。例如，HTTP（超文本传输协议）用于在Web浏览器和Web服务器之间传输数据，TCP&#x2F;IP（传输控制协议&#x2F;互联网协议）用于在网络上传输数据包等。</li><li>客户端和服务器：在网络编程中，通常会涉及到客户端和服务器的概念。客户端是发起请求的一方，服务器是接收和处理请求的一方。客户端通过网络连接到服务器，发送请求并接收服务器的响应。</li><li>数据传输和通信：网络编程可以通过套接字(Socket)来实现数据的传输和通信。客户端可以向服务器发送请求，并接收服务器返回的响应数据。这可以包括发送和接收文本、图像、音频、视频等不同类型的数据。</li><li>并发与多线程：网络编程中，需要考虑多个客户端和服务器同时连接和通信的情况。使用多线程技术可以实现并发处理多个连接和请求，提高系统的性能和响应速度。</li></ol><p>总的来说，网络编程是基于计算机网络进行数据传输和通信的编程技术。通过网络编程，可以实现客户端和服务器之间的连接和数据传输，实现各种网络应用程序。</p><h2 id="2、IP地址与端口"><a href="#2、IP地址与端口" class="headerlink" title="2、IP地址与端口"></a>2、IP地址与端口</h2><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>IP 地址用来标识网络中设备的一串数字编号。也就是说通过IP地址能够找到网络中某台设备。</p><p>IP 地址分为两类： <code>IPv4</code> 和 <code>IPv6</code></p><ul><li><code>IPv4</code> 是目前使用的ip地址，是由点分十进制组成。</li><li><code>IPv6</code> 是未来使用的ip地址，是由冒号十六进制组成</li></ul><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>端口是计算机网络中用于标识不同网络应用程序或服务的数字标识。</p><p>每个网络应用程序或服务都会使用一个特定的端口号，以便其他设备通过网络与该应用程序或服务进行通信，当想要通过网络访问某个服务或应用程序时，需要指定目标设备的IP地址和端口号。</p><p><strong>端口的分类</strong></p><p>端口号是一个 <code>16</code> 位的数字，共有 <code>65536</code> 个可用端口，范围从 <code>0</code> 到 <code>65535</code>。一般可划分为系统端口和动态端口。</p><ul><li>系统端口是指范围从 <code>0</code> 到 <code>1023</code> 的端口号，常用于一些标准的服务和协议。</li><li>动态端口是指范围从 <code>1024</code> 到 <code>65535</code> 的端口号，用于自定义应用程序和临时连接。</li></ul><p>但是，一些主流的第三方软件所使用的端口，默认在使用时，也应该避开，比如：MySQL 的 <code>3306</code> 端口，Reids 的 <code>6379</code> 端口等。</p><h2 id="3、通信协议"><a href="#3、通信协议" class="headerlink" title="3、通信协议"></a>3、通信协议</h2><p>通信协议是用于在计算机网络上进行数据传输和交换的规则和约定。它定义了在通信过程中数据的格式、编码方式、传输速率、错误检测和纠正方法等。</p><p>通信协议可以分为多个层级，通常采用分层模型，最著名的是 TCP&#x2F;IP 协议栈。每一层都有不同的功能和责任，通过交互和协调实现端到端的可靠通信。</p><p>例如，TCP&#x2F;IP 协议栈包括以下层级：</p><ol><li>应用层：定义应用程序之间的通信规则，例如 HTTP、FTP、SMTP 等协议。</li><li>传输层：提供端到端的数据传输服务，包括 TCP 和 UDP 等协议，负责数据的分割、传输控制、错误检测和流量控制等。</li><li>网络层：处理网络间的数据传输和路由，例如 IP 协议。负责将数据包从源主机传输到目标主机，通过IP地址实现寻址和路由选择。</li><li>数据链路层：处理相邻节点之间的数据传输，负责定义数据的格式和封装，以太网协议就是其中的一种。</li><li>物理层：负责在物理媒介上传输比特流，例如通过电缆或无线信号传输数据。</li></ol><h3 id="TCP-协议"><a href="#TCP-协议" class="headerlink" title="TCP 协议"></a>TCP 协议</h3><p>TCP 的英文全拼(Transmission Control Protocol)简称传输控制协议，它是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p><p><strong>TCP 协议特点</strong></p><ul><li>面向连接<ul><li>通信双方必须先建立好连接才能进行数据的传输，数据传输完成后，双方必须断开此连接，以释放系统资源。</li></ul></li><li>可靠传输<ul><li>TCP 采用发送应答机制</li><li>超时重传</li><li>错误校验</li><li>流量控制</li><li>阻塞管理</li></ul></li></ul><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><p>HTTP（Hypertext Transfer Protocol）超文本传输协议，是一种用于在 Web 浏览器和 Web 服务器之间传输数据的协议。它是一个应用层协议，基于 TCP&#x2F;IP 协议栈。</p><p>HTTP 使用 <code>请求-响应</code> 模型，客户端（通常是Web浏览器）发送 HTTP 请求到 Web 服务器，服务器接收并处理请求，然后返回相应的HTTP响应给客户端。通过这种方式，HTTP 实现了客户端和服务器之间的通信和数据交换。</p><p><strong>HTTP报文格式</strong></p><ul><li><p>请求报文</p><table><thead><tr><th align="left">组成</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">请求行</td><td align="left">请求方法 请求路径 请求协议版本</td></tr><tr><td align="left">请求头</td><td align="left">以key-value形式描述，每行以<code>\r\n</code>结束</td></tr><tr><td align="left">空行</td><td align="left"><code>\r\n</code></td></tr><tr><td align="left">请求体</td><td align="left">请求时携带的数据，GET请求方式没有此部分</td></tr></tbody></table></li><li><p>响应报文</p><table><thead><tr><th align="left">组成</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">响应行</td><td align="left">响应协议版本 响应状态码 响应状态描述短语</td></tr><tr><td align="left">响应头</td><td align="left">以key-value形式描述的请求信息，每行以<code>\r\n</code>结束</td></tr><tr><td align="left">空行</td><td align="left"><code>\r\n</code></td></tr><tr><td align="left">响应体</td><td align="left">服务器返回给客户端的数据</td></tr></tbody></table></li></ul><h2 id="4、Socket-编程"><a href="#4、Socket-编程" class="headerlink" title="4、Socket 编程"></a>4、Socket 编程</h2><p>Socket 编程是一种网络编程的技术，用于实现不同设备之间的数据通信。</p><p>它提供了一种基于 TCP 或 UDP 协议的接口，使得程序可以通过网络套接字 <code>socket</code> 进行数据的发送和接收。</p><p>通过 Socket 编程，可以在不同主机之间建立网络连接，进行双向的数据传输。Socket 编程通常涉及两个角色：客户端和服务器。</p><p>在 Socket 编程中，服务器会创建一个监听套接字 <code>listening socket</code>，用于接收来自客户端的连接请求。一旦服务器接受了客户端的连接请求，它会创建一个新的套接字<code>socket</code> 与客户端进行数据的交换。</p><p>客户端会创建一个套接字 <code>socket</code> ，并向服务器发起连接请求。一旦服务器接受了该请求，客户端和服务器之间就可以进行数据的传输。</p><p>Socket 编程提供了一组函数和方法，用于创建套接字、设置连接参数、发送和接收数据等操作。</p><p>常见的编程语言，如 C、Python、Java 等都提供了相应的 Socket 库和 API，供开发者进行 Socket 编程。</p><p>通过 Socket 编程，可以实现各种类型的网络应用，包括像 HTTP、FTP、SMTP 等基于各种协议的应用。它也可以用于实现自定义的网络通信，例如实时通信、游戏服务器等。</p><p>需要注意的是，Socket 编程是一种底层的网络编程技术，需要开发者有一定的网络编程基础和对网络通信原理的了解。</p><h2 id="5、Socket-开发流程"><a href="#5、Socket-开发流程" class="headerlink" title="5、Socket 开发流程"></a>5、Socket 开发流程</h2><p>Python 中使用 <code>socket</code> 模块完成网络编程，该模块是系统模块，直接导入即可使用。</p><p>Socket 客户端及服务端开发流程如图所示：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131712149.png" alt="image-20240713171255006"></p><h3 id="Socket-客户端开发流程"><a href="#Socket-客户端开发流程" class="headerlink" title="Socket 客户端开发流程"></a>Socket 客户端开发流程</h3><ol><li>创建客户端套接字对象</li><li>和服务端套接字建立连接</li><li>向服务端发送数据</li><li>从服务端接收数据</li><li>关闭客户端套接字</li></ol><p>示例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入 socket 模块</span><span class="token keyword">import</span> socket<span class="token comment"># 创建tcp客户端套接字</span><span class="token comment"># 1. AF_INET：表示ipv4</span><span class="token comment"># 2. SOCK_STREAM: tcp传输协议</span>tcp_client_socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment"># 和服务端应用程序建立连接</span>tcp_client_socket<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"192.168.124.13"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 代码执行到此，说明连接建立成功</span><span class="token comment"># 准备发送的数据</span>send_data <span class="token operator">=</span> <span class="token string">"你好,我是哈利波特!"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token comment"># 向服务端发送数据</span>tcp_client_socket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>send_data<span class="token punctuation">)</span><span class="token comment"># 从服务端接收数据, 这次接收的数据最大字节数是1024</span>recv_data <span class="token operator">=</span> tcp_client_socket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token comment"># 返回的直接是服务端程序发送的二进制数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>recv_data<span class="token punctuation">)</span><span class="token comment"># 对数据进行解码</span>recv_content <span class="token operator">=</span> recv_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"接收服务端的数据为:"</span><span class="token punctuation">,</span> recv_content<span class="token punctuation">)</span><span class="token comment"># 关闭套接字</span>tcp_client_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码调试</strong></p><p>由于只编写了客户端，而没有服务端，此时的代码是无法自验证的，需要借助一个外部工具【网络调试助手】进行程序验证。（该软件需自行搜索下载安装,不同系统间软件界面有些许差异，功能基本一致）</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131714670.png" alt="image-20240713171433487"></p><ol><li>选择服务器类型为TCP服务器</li><li>设置服务器运行端口号</li><li>点击按钮开始监听，状态显示正在监听，等待客户端的连接请求</li><li>运行客户端程序后，服务助手会将正在连接的客户端IP地址显示在此</li><li>接收区显示客户端发送给服务端的数据</li></ol><p><strong>各阶段注意事项</strong></p><ol><li>创建客户端套接字对象<ul><li>目前主流使用的 IP 分类还是 <code>IPv4</code></li><li>指定通信方式为 TCP 方式，此时数据传递使用的是二进制字节流</li><li><code>socket</code> 方法的两个参数都可以省略，默认使用 <code>IPv4</code> 建立 <code>TCP</code> 方式的套接字</li></ul></li><li>和服务端套接字建立连接<ul><li>连接服务器时，需要指定服务器 IP 和端口号，需要向服务器确认，添入正确数据</li><li>IP 与端口需要使用元组形式传入</li></ul></li><li>向服务端发送数据<ul><li>程序中的默认字符串数据，都是 <code>str</code> 类型，不能直接进行传输。</li><li>TCP 方式传输数据必须是二进制数据。</li><li>需要将要传输的数据使用 <code>encode()</code>方法进行数据编码，转换成二进制数据</li></ul></li><li>从服务端接收数据<ul><li>服务端发送给客户端的数据，也是使用二进制方式进行传输的，所以需要使用<code>decode()</code>方法对数据解码</li></ul></li><li>关闭客户端套接字<ul><li>数据传输结束后，需要将连接进行关闭</li></ul></li></ol><h3 id="Socket-服务端开发流程"><a href="#Socket-服务端开发流程" class="headerlink" title="Socket 服务端开发流程"></a>Socket 服务端开发流程</h3><ol><li>创建服务端端套接字对象</li><li>设置端口复用</li><li>绑定服务端口号</li><li>设置监听</li><li>等待接受客户端的连接请求</li><li>接收客户端发送数据</li><li>向客户端发送数据</li><li>关闭套接字</li></ol><p>示例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token comment"># 创建tcp服务端套接字</span>tcp_server_socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment"># 设置端口号复用，让程序退出端口号立即释放</span>tcp_server_socket<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 给程序绑定端口号</span>tcp_server_socket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 设置监听</span>tcp_server_socket<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"服务端启动成功，等待客户端连接。。。"</span><span class="token punctuation">)</span><span class="token comment"># 等待客户端建立连接的请求, 只有客户端和服务端建立连接成功代码才会解阻塞，代码才能继续往下执行</span><span class="token comment"># 1. 专门和客户端通信的套接字： client_socket</span><span class="token comment"># 2. 客户端的ip地址和端口号： ip_port</span>client_socket<span class="token punctuation">,</span> ip_port <span class="token operator">=</span> tcp_server_socket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 代码执行到此说明连接建立成功</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"客户端的ip地址和端口号:"</span><span class="token punctuation">,</span> ip_port<span class="token punctuation">)</span><span class="token comment"># 接收客户端发送的数据, 这次接收数据的最大字节数是1024</span>recv_data <span class="token operator">=</span> client_socket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token comment"># 获取数据的长度</span>recv_data_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>recv_data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"接收数据的长度为:"</span><span class="token punctuation">,</span> recv_data_length<span class="token punctuation">)</span><span class="token comment"># 对二进制数据进行解码</span>recv_content <span class="token operator">=</span> recv_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"接收客户端的数据为:"</span><span class="token punctuation">,</span> recv_content<span class="token punctuation">)</span><span class="token comment"># 准备发送的数据</span>send_data <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"你好,</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ip_port<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token comment"># 发送数据给客户端</span>client_socket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>send_data<span class="token punctuation">)</span><span class="token comment"># 关闭服务与客户端的套接字， 终止和客户端通信的服务</span>client_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 关闭服务端的套接字, 终止和客户端提供建立连接请求的服务</span>tcp_server_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>client 端：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131724088.png" alt="image-20240713172407002"></p></li><li><p>service 端：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131724894.png" alt="image-20240713172439813"></p></li></ul><p><strong>代码调试</strong></p><p>服务端代码调试时，可以使用之前编写的客户端代码，也可以使用网络调试助手。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131715583.png" alt="image-20240713171518356"></p><ol><li>选择 TCP 客户端</li><li>设置端口号为服务器绑定的端口</li><li>点击连接按钮，连接状态显示连接成功</li><li>在发送区向服务器发送数据</li><li>在接收区显示服务器发送的数据</li></ol><p><strong>注意事项</strong></p><ol><li>创建服务端端套接字对象<ul><li>同创建客户端一样，需要指定IP类型和服务器传输协议类型</li></ul></li><li>设置端口复用<ul><li>端口在停止使用后的一段时间内是不能重新启用的</li><li>为了方便调试程序，设置 <code>socket</code> 选项，可以立即启用端口</li></ul></li><li>绑定服务端口号<ul><li>服务器的端口号应该绑定一个固定端口号，方便客户端连接</li></ul></li><li>设置监听<ul><li>设置监听后，服务器 <code>socket</code> 变成被动模式，不能使用服务器 <code>socket</code> 收发消息</li><li><code>128</code>:最大等待建立连接的个数</li></ul></li><li>等待接受客户端的连接请求<ul><li>服务器进入到阻塞状态，直到有客户端连接</li><li>接收到客户端请求连接后，返回客户端 <code>socket</code> 对象及客户端 <code>IP</code> 和端口</li></ul></li><li>接收客户端发送数据<ul><li>使用客户端 <code>socket</code> 对象接收客户端向服务端发送的数据</li><li>数据需要进行解码使用</li></ul></li><li>向客户端发送数据<ul><li>使用客户端 <code>socket</code> 对象向客户端发送数据</li><li>数据需要进行编码使用</li></ul></li><li>关闭套接字<ul><li>数据发送完毕后，服务器可以使用客户端 <code>socket</code> 对象将客户端连接断开</li><li>服务端 <code>socket</code> 视情况断开连接</li></ul></li></ol><h2 id="6、多任务服务端"><a href="#6、多任务服务端" class="headerlink" title="6、多任务服务端"></a>6、多任务服务端</h2><p>结合多任务实现可以多个客户端同时访问的服务端。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> threading<span class="token keyword">class</span> <span class="token class-name">MultiTaskTCPServer</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 在初始化方法中对服务端socket进行初始化操作</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ip<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 创建tcp服务端套接字</span>        self<span class="token punctuation">.</span>server <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        <span class="token comment"># 设置端口号复用，让程序退出端口号立即释放</span>        self<span class="token punctuation">.</span>server<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment"># 绑定端口号</span>        self<span class="token punctuation">.</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 设置监听, listen后的套接字是被动套接字，只负责接收客户端的连接请求</span>        self<span class="token punctuation">.</span>server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>    <span class="token comment"># 启动服务器方法，实现多任务接受处理客户端连接请求</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 循环等待接收客户端的连接请求</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment"># 等待接收客户端的连接请求</span>            client_socket<span class="token punctuation">,</span> ip_port <span class="token operator">=</span> self<span class="token punctuation">.</span>server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"客户端连接成功:"</span><span class="token punctuation">,</span> ip_port<span class="token punctuation">)</span>            <span class="token comment"># 当客户端和服务端建立连接成功以后，需要创建一个子线程，不同子线程负责接收不同客户端的消息</span>            sub_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>handle_client_request<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>client_socket<span class="token punctuation">,</span> ip_port<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 设置守护主线程</span>            sub_thread<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>            <span class="token comment"># 启动子线程</span>            sub_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># tcp服务端套接字可以不需要关闭，因为服务端程序需要一直运行</span>        tcp_server_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 处理客户端的请求操作</span>    <span class="token keyword">def</span> <span class="token function">handle_client_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> client<span class="token punctuation">,</span> ip_port<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 接收客户端发送的数据并解码</span>        recv_data <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>        <span class="token comment"># 如果接收的数据长度为0，说明客户端主动断开了连接</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>recv_data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"客户端下线了:"</span><span class="token punctuation">,</span> ip_port<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>recv_data<span class="token punctuation">,</span> ip_port<span class="token punctuation">)</span>        <span class="token comment"># 将客户端发送的数据转换成大写并编码后发送给客户端</span>        send_data <span class="token operator">=</span> recv_data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>        client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>send_data<span class="token punctuation">)</span>        <span class="token comment"># 终止和客户端进行通信</span>        client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 创建服务器对象</span>    server <span class="token operator">=</span> MultiTaskTCPServer<span class="token punctuation">(</span>port<span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">)</span>    <span class="token comment"># 启动服务器</span>    server<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二十三、Python多任务协程编程</title>
      <link href="/posts/e1a025b5.html"/>
      <url>/posts/e1a025b5.html</url>
      
        <content type="html"><![CDATA[<h1 id="二十三、Python多任务协程编程"><a href="#二十三、Python多任务协程编程" class="headerlink" title="二十三、Python多任务协程编程"></a>二十三、Python多任务协程编程</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>协程，又称微线程，纤程。英文名 <code>Coroutine</code>。</p><p><strong>协程也是一种轻量级的多任务编程技术，它可以在同一个线程中实现多个任务的切换和调度。</strong></p><p><strong>协程通过任务的暂停和恢复，避免了线程切换的开销并减少了锁的使用。</strong>协程常用于异步编程场景，比如网络编程和IO密集型任务。</p><p>最大的优势就是协程极高的执行效率。因为函数切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。</p><p>第二大优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。</p><p>比如：一个人在打印资料的等待过程中，又去接听了客户的电话，在接听电话的等待过程中，又整理了桌面。</p><p>Python 中可以使用第三方模块 <code>gevent</code> 实现进程多任务编程。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># pip install gevent</span><span class="token keyword">import</span> gevent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131734251.png" alt="image-20240713173353385"></p><h2 id="2、创建协程"><a href="#2、创建协程" class="headerlink" title="2、创建协程"></a>2、创建协程</h2><p><code>gevent</code> 模块使用 <code>spawn</code> 类创建协程实例对象，实现协程任务的创建。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">spawn<span class="token punctuation">(</span>run <span class="token punctuation">[</span><span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">,</span> kwargs<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明</strong>：</p><ul><li><code>run</code>：执行的目标任务名</li><li><code>args</code>：以元组方式给执行任务传参</li><li><code>kwargs</code>：以字典方式给执行任务传参</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gevent<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>g1 <span class="token operator">=</span> gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>task<span class="token punctuation">)</span>g2 <span class="token operator">=</span> gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>task<span class="token punctuation">)</span>g3 <span class="token operator">=</span> gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>task<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、启动进程"><a href="#3、启动进程" class="headerlink" title="3、启动进程"></a>3、启动进程</h2><p>协程对象创建成功后，需要使用 <code>join()</code> 方法启动协程才会开始执行。</p><p>该方法的作用是对当前线程进行阻塞，直到协程执行结束后，继续执行当前线程。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">g1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>g2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>g3<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131658974.png" alt="image-20240713165611076"></p><h2 id="4、获取当前协程对象"><a href="#4、获取当前协程对象" class="headerlink" title="4、获取当前协程对象"></a>4、获取当前协程对象</h2><p><code>gevent.getcurrent()</code> 可以获取当前协程对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gevent<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>gevent<span class="token punctuation">.</span>getcurrent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>g1 <span class="token operator">=</span> gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>task<span class="token punctuation">)</span>g2 <span class="token operator">=</span> gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>task<span class="token punctuation">)</span>g1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>g2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131700565.png" alt="image-20240713170018464"></p><h2 id="5、协程组"><a href="#5、协程组" class="headerlink" title="5、协程组"></a>5、协程组</h2><p>在创建多个协程对象后，可以将多个协程对象放入一个元组或列表中，然后使用 <code>gevent.joinall()</code> 方法同时启动协程对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gevent<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>gevent<span class="token punctuation">.</span>getcurrent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 使用列表推导式，生成一个有5个协程对象的列表</span>gs <span class="token operator">=</span> <span class="token punctuation">[</span>gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>task<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>gevent<span class="token punctuation">.</span>joinall<span class="token punctuation">(</span>gs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131702319.png" alt="image-20240713170230249"></p><h2 id="6、协程切换"><a href="#6、协程切换" class="headerlink" title="6、协程切换"></a>6、协程切换</h2><p>从前面的代码执行结果看，虽然可以执行多个协程任务，但是任务的执行过程依然是同步的。</p><p>可以通过在代码中添加 <code>gevent.sleep()</code> 方法模拟耗时操作，实现协程任务的切换。</p><p><strong>注意：</strong> <code>sleep()</code> 方法是 <code>gevent</code> 模块中的，不是 <code>time</code> 模块中的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gevent<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>gevent<span class="token punctuation">.</span>getcurrent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        gevent<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.001</span><span class="token punctuation">)</span><span class="token comment"># 使用列表推导式，生成一个有5个协程对象的列表</span>gs <span class="token operator">=</span> <span class="token punctuation">[</span>gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>task<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>gevent<span class="token punctuation">.</span>joinall<span class="token punctuation">(</span>gs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131705702.png" alt="image-20240713170532621"></p><h2 id="7、协程任务函数传参"><a href="#7、协程任务函数传参" class="headerlink" title="7、协程任务函数传参"></a>7、协程任务函数传参</h2><p>在创建协程对象的时候，为协程任务函数传递参数，可以使用两种方式为任务函数传参。</p><ul><li><code>args</code>: 使用可变位置参数形式传参</li><li><code>kwargs</code>: 使用可变关键字参数形式传参</li></ul><p>协程的任务函数传参与进程和线程不同，协程可以和直接使用函数一样，在 <code>spawn</code> 方法中为任务函数传参。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gevent<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>gevent<span class="token punctuation">.</span>getcurrent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"第 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string"> 次输出 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        gevent<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.001</span><span class="token punctuation">)</span>g1 <span class="token operator">=</span> gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>task<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">)</span>g2 <span class="token operator">=</span> gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>task<span class="token punctuation">,</span> msg<span class="token operator">=</span><span class="token string">"Hogwarts"</span><span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>g1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>g2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131706428.png" alt="image-20240713170655305"></p><h2 id="8、协程异步"><a href="#8、协程异步" class="headerlink" title="8、协程异步"></a>8、协程异步</h2><p>在 Python 中，<code>Gevent</code> 的 <code>monkey patch</code> 是指使用 <code>Gevent</code> 的模块 <code>gevent.monkey</code> 中的 <code>patch_all()</code> 等方法，来替换标准库中的一些阻塞式 <code>I/O</code> 操作，以实现非阻塞式的协程 <code>I/O</code>。</p><p>一般该方法写在程序的第一行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> gevent <span class="token keyword">import</span> monkeymonkey<span class="token punctuation">.</span>patch_all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">import</span> gevent<span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>gevent<span class="token punctuation">.</span>getcurrent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"第 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string"> 次输出 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        gevent<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>g1 <span class="token operator">=</span> gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>task<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">)</span>g2 <span class="token operator">=</span> gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>task<span class="token punctuation">,</span> msg<span class="token operator">=</span><span class="token string">"Hogwarts"</span><span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>g3 <span class="token operator">=</span> gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>task<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> msg<span class="token operator">=</span><span class="token string">"Hello"</span><span class="token punctuation">)</span>gevent<span class="token punctuation">.</span>joinall<span class="token punctuation">(</span><span class="token punctuation">(</span>g1<span class="token punctuation">,</span>g2<span class="token punctuation">,</span>g3<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Python3.10 版本中，<code>Gevent</code> 的 <code>monkey patch</code> 功能在某些情况下可能无效。</p><p>这是因为在 Python3.10 中引入了 <code>asyncio</code> 的新的事件循环机制，与 <code>Gevent</code> 的事件循环有所不同，导致 <code>monkey patch</code> 在有些情况下失效。</p><p><code>Gevent</code> 官方还没有正式发布兼容 Python3.10 版本的版本，因此在 Python3.10 中使用 <code>monkey.patch_all()</code> 方法可能无法正常实现非阻塞的协程 <code>I/O</code>。</p><p>为了解决这个问题，你可以考虑使用 Python3.10 引入的 <code>asyncio</code> 模块来进行异步编程。</p><p><code>asyncio</code> 提供了原生的协程和事件循环，可以实现高效的异步操作。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二十二、Python多任务线程编程</title>
      <link href="/posts/5a8a6c8d.html"/>
      <url>/posts/5a8a6c8d.html</url>
      
        <content type="html"><![CDATA[<h1 id="二十二、Python多任务线程编程"><a href="#二十二、Python多任务线程编程" class="headerlink" title="二十二、Python多任务线程编程"></a>二十二、Python多任务线程编程</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p><strong>线程是指在一个程序中执行的一段指令流。</strong></p><p>在操作系统中，<strong>线程是调度执行的最小单位</strong>，它可以独立运行，并共享线程的资源，如内存空间、文件句柄等。</p><h2 id="2、线程特点"><a href="#2、线程特点" class="headerlink" title="2、线程特点"></a>2、线程特点</h2><ol><li><strong>轻量级</strong>：相对于进程来说，线程的创建、切换和销毁的开销较小。</li><li><strong>共享资源</strong>：线程可以共享线程的资源，包括内存空间、文件句柄等。这使得线程之间可以方便地进行数据共享和通信。</li><li><strong>并发执行</strong>：线程可以并发执行，即多个线程可以在同一时间内执行不同的任务。线程的并发执行可以提高程序的性能和响应性。</li><li><strong>线程安全</strong>：线程安全是指多个线程同时访问共享数据时，不会出现数据不一致或异常的情况。在多线程编程中，需要采取一些措施（如锁、互斥量等）来保证线程安全性。</li><li><strong>线程必须依附于进程中，线程不能单独存在。</strong></li></ol><p>比如:现实生活中的公司可以理解成是一个进程，公司提供办公资源(电脑、办公桌椅等)，真正干活的是员工，员工可以理解成线程。</p><p>Python 中使用 <code>threading</code> 模块实现线程多任务编程。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3、创建线程"><a href="#3、创建线程" class="headerlink" title="3、创建线程"></a>3、创建线程</h2><p><code>threading</code> 模块使用 <code>Thread</code> 类创建线程实例对象，实现线程任务的创建。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Thread<span class="token punctuation">(</span><span class="token punctuation">[</span>group <span class="token punctuation">[</span><span class="token punctuation">,</span> target <span class="token punctuation">[</span><span class="token punctuation">,</span> name <span class="token punctuation">[</span><span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">,</span> kwargs <span class="token punctuation">[</span><span class="token punctuation">,</span> daemon<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明</strong>：</p><ul><li><code>group</code>：指定线程组，目前只能使用 <code>None</code></li><li><code>target</code>：执行的目标任务名</li><li><code>name</code>：线程名字</li><li><code>args</code>：以元组方式给执行任务传参</li><li><code>kwargs</code>：以字典方式给执行任务传参</li><li><code>daemon</code>：设置线程对象为守护线程</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token comment"># 跳舞任务</span><span class="token keyword">def</span> <span class="token function">task1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"跳舞中..."</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token comment"># 唱歌任务</span><span class="token keyword">def</span> <span class="token function">task2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"唱歌中..."</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task1<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"mythread-1"</span><span class="token punctuation">)</span>    t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、启动线程"><a href="#4、启动线程" class="headerlink" title="4、启动线程"></a>4、启动线程</h2><p>线程对象创建成功后，需要启动线程才会开始执行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131619906.png" alt="image-20240713161517891"></p><h2 id="5、获取当前线程"><a href="#5、获取当前线程" class="headerlink" title="5、获取当前线程"></a>5、获取当前线程</h2><p><code>threading.current_thread()</code> 可以获取当前线程。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">task1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">task2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task1<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"myThread-1"</span><span class="token punctuation">)</span>    t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task2<span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131619952.png" alt="image-20240713161600752"></p><h2 id="6、获取线程名"><a href="#6、获取线程名" class="headerlink" title="6、获取线程名"></a>6、获取线程名</h2><p>线程对象的 <code>name</code> 属性可以获取线程的名称。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">task1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">task2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task1<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"myThread-1"</span><span class="token punctuation">)</span>    t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task2<span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131620457.png" alt="image-20240713162035339"></p><h2 id="7、线程无序性"><a href="#7、线程无序性" class="headerlink" title="7、线程无序性"></a>7、线程无序性</h2><p><strong>线程执行时是无序的。</strong>它是由 CPU 调度决定的 ，CPU 调度哪个线程，哪个线程就先执行，没有调度的线程不能执行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前线程:"</span><span class="token punctuation">,</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>   <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">)</span>       t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131621032.png" alt="image-20240713162138950"></p><h2 id="8、线程任务函数传参"><a href="#8、线程任务函数传参" class="headerlink" title="8、线程任务函数传参"></a>8、线程任务函数传参</h2><p>在创建线程对象的时候，为线程任务函数传递参数，可以使用两种方式为任务函数传参。</p><ul><li><code>args</code>: 使用可变位置参数形式传参</li><li><code>kwargs</code>: 使用可变关键字参数形式传参</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"打印第 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string"> 次 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 使用可变位置参数传参</span>    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 使用可变关键字参数传参</span>    t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"n"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"Hogwarts"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131623882.png" alt="image-20240713162325790"></p><h2 id="9、线程同步"><a href="#9、线程同步" class="headerlink" title="9、线程同步"></a>9、线程同步</h2><p><code>join()</code> 方法用来将子线程添加到当前线程之前执行，直到子线程执行结束后，当前线程才会继续向下执行。</p><p>多个线程间的代码在运行时是交替执行的，如果使用 <code>join()</code> 方法后，当前线程会进入到阻塞状态，等待子线程结束后，解除阻塞状态，继续执行当前线程。</p><p>使用 <code>join()</code> 方法后，可使多线程的<code>异步执行</code>变成<code>同步执行</code>, 过多使用会使程序效率变低。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"打印第 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string"> 次 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 使用可变位置参数传参</span>    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 使用可变关键字参数传参</span>    t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"n"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"Hogwarts"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"main run ..."</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131625075.png" alt="image-20240713162540951"></p><h2 id="10、守护线程"><a href="#10、守护线程" class="headerlink" title="10、守护线程"></a>10、守护线程</h2><p><strong>多线程在执行时，父线程会等待子线程执行结束才会结束。</strong></p><p>如果需要子线程在父线程执行结束后就结束执行，无论子线程是否执行完毕，可以将子线程设置为守护线程。</p><p>比如：在使用下载软件进行下载多个视频时，每个下载任务都是一个线程，如果下载软件退出，则下载任务也会停止并退出。</p><p>设置守护线程方式有两种：</p><ul><li>使用 <code>daemon = True</code> 参数在子线程对象创建时将子线程设置为守护线程。</li><li>使用 <code>子线程对象.daemon = True</code> 属性在子线程对象启动前将子线程对象设置为守护线程。</li></ul><p><strong>设置子线程为守护线程</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"打印第 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string"> 次 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>daemon<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"n"</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"Hogwarts"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>设置前</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131629537.png" alt="image-20240713162930432"></p></li><li><p>设置后</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131630062.png" alt="image-20240713163008945"></p></li></ul><h2 id="11、线程间共享全局变量"><a href="#11、线程间共享全局变量" class="headerlink" title="11、线程间共享全局变量"></a>11、线程间共享全局变量</h2><p>因为线程是程序执行的最小执行单位，当一个子线程被创建时，子线程会使用父线程的资源，所以多个线程之间的数据是共享的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token comment"># 定义全局变量</span>g_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 添加数据的任务</span><span class="token keyword">def</span> <span class="token function">add_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        g_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"add:"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"add_data:"</span><span class="token punctuation">,</span> g_list<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"read_data"</span><span class="token punctuation">,</span> g_list<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    add_data_Thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>add_data<span class="token punctuation">)</span>    read_data_Thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>read_data<span class="token punctuation">)</span>    add_data_Thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    add_data_Thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    read_data_Thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"main:"</span><span class="token punctuation">,</span> g_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131631671.png" alt="image-20240713163117579"></p><h2 id="12、线程安全问题"><a href="#12、线程安全问题" class="headerlink" title="12、线程安全问题"></a>12、线程安全问题</h2><p>线程间可以访问全局变量，在多个线程间进行数据传递时非常方便，但是随之也会产生很大的问题。</p><p>当多个线程同时对共享的全局变量进行操作时，可能会出现脏数据的问题。</p><p><strong>注意:</strong></p><ul><li>Python 3.9 版本解释器之前，线程安全问题非常明显</li><li>Python 3.10 版本后，引入了新的 GIL2.0 版本的锁，有效的提升了线程安全问题，但某些时刻还需要使用互斥锁保证线程安全。</li></ul><p>示例： 使用多个线程对象，分别对共享全局变量 <code>sum</code> 做一百万次加 <code>1</code> 操作，查看计算结果。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> threading<span class="token comment"># 定义全局变量</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 循环一次给全局变量加1</span><span class="token keyword">def</span> <span class="token function">add_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> <span class="token builtin">sum</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token punctuation">,</span> <span class="token string">" : "</span><span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 创建线程</span>    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>add_one<span class="token punctuation">)</span>    t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>add_one<span class="token punctuation">)</span>    <span class="token comment"># 启动线程</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token punctuation">,</span> <span class="token string">" : "</span><span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131635513.png" alt="image-20240713163538399"></p><p><strong>错误分析:</strong></p><p>多个线程线程对象 <code>t1，t2，t3</code> 都要对全局变量 <code>sum</code> （默认是0）进行加 1 运算，但是由于是多线程同时操作，有可能出现下面情况：</p><ul><li>在 <code>sum=0</code> 时，线程对象 <code>t1</code> 取得 <code>sum=0</code>。</li><li>此时系统把线程对象 <code>t1</code> 调度为 <code>sleeping</code> 状态</li><li>把线程对象 <code>t2</code> 转换为 <code>running</code> 状态，<code>t2</code> 也获得 <code>sum=0</code></li><li>然后线程对象 <code>t2</code> 对得到的值进行加 1 并赋给 <code>sum</code>，使得 <code>sum=1</code></li><li>然后系统又把线程对象 <code>t2</code> 调度为 <code>sleeping</code></li><li>再把线程对象 <code>t1</code> 转为 <code>running</code> 状态</li><li>线程对象 <code>t1</code> 又把它之前得到的 0 加 1 后赋值给 <code>sum</code>，结果为 <code>sum=1</code></li><li>三个线程对象都会在执行过程中出现这种情况</li><li>这样导致虽然线程对象 <code>t1，t2，t3</code> 都对 <code>sum</code> 加 1，但结果却是产生了无效的计算过程</li></ul><h2 id="13、互斥锁"><a href="#13、互斥锁" class="headerlink" title="13、互斥锁"></a>13、互斥锁</h2><p>在 Python 中，可以使用互斥锁（Mutex）来保护共享资源，避免多个线程同时对共享资源进行写操作，从而避免竞争条件和数据不一致的问题。</p><p>使用 <code>threading.Lock()</code> 获取互斥锁对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>互斥锁操作：</p><ul><li>加锁操作： <code>lock.acquire()</code></li><li>解锁操作： <code>lock.release()</code></li></ul><p>使用互斥锁解决 Python3.9 版本线程间数据安全问题。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> threading<span class="token comment"># 定义全局变量</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 方式一</span><span class="token keyword">def</span> <span class="token function">add_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> <span class="token builtin">sum</span>    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span>    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token punctuation">,</span> <span class="token string">" : "</span><span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span><span class="token comment"># 方式二</span><span class="token comment"># def add_one():</span><span class="token comment">#     global sum</span><span class="token comment">#     for i in range(1000000):</span><span class="token comment">#         lock.acquire()</span><span class="token comment">#         sum += 1</span><span class="token comment">#         lock.release()</span><span class="token comment">#     print(threading.current_thread().name , " : ", sum)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 创建两个线程</span>    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>add_one<span class="token punctuation">)</span>    t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>add_one<span class="token punctuation">)</span>    <span class="token comment"># 启动线程</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token punctuation">,</span> <span class="token string">" : "</span><span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131637267.png" alt="image-20240713163719096"></p><h2 id="14、死锁"><a href="#14、死锁" class="headerlink" title="14、死锁"></a>14、死锁</h2><p>虽然使用互斥锁可以解决线程间数据安全问题，但是，如果互斥锁使用不当，会出现死锁现象。</p><p>死锁是指一个线程获取锁权限后，并未释放锁，导致其它线程无法获取互斥锁的使用权，持续进行等待的过程。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token comment"># 创建互斥锁</span>lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token comment"># 根据下标去取值， 保证同一时刻只能有一个线程去取值</span><span class="token keyword">def</span> <span class="token function">get_value</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 上锁</span>    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 判断下标释放越界</span>    <span class="token keyword">if</span> index <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"下标 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token string"> 越界"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    value <span class="token operator">=</span> numbers<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"取值为： "</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>    <span class="token comment"># 释放锁</span>    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 模拟大量线程去执行取值操作</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sub_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>get_value<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        sub_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131639522.png" alt="image-20240713163947438"></p><h2 id="15、避免死锁"><a href="#15、避免死锁" class="headerlink" title="15、避免死锁"></a>15、避免死锁</h2><p>程序开发过程中，应该避免死锁的发生。</p><p>可以在程序的合适位置，将锁释放掉，让其它线程对象有能获取到互斥锁的机会。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token comment"># 创建互斥锁</span>lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token comment"># 根据下标去取值， 保证同一时刻只能有一个线程去取值</span><span class="token keyword">def</span> <span class="token function">get_value</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 上锁</span>    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 判断下标释放越界</span>    <span class="token keyword">if</span> index <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"下标 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token string"> 越界"</span></span><span class="token punctuation">)</span>        lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    value <span class="token operator">=</span> numbers<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"取值为： "</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>    <span class="token comment"># 释放锁</span>    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 模拟大量线程去执行取值操作</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sub_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>get_value<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        sub_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131641326.png" alt="image-20240713164107224"></p><h2 id="16、进程与线程对比"><a href="#16、进程与线程对比" class="headerlink" title="16、进程与线程对比"></a>16、进程与线程对比</h2><h3 id="关系对比"><a href="#关系对比" class="headerlink" title="关系对比"></a>关系对比</h3><ul><li>线程是依附在进程里面的，没有进程就没有线程。</li><li>一个进程默认提供一条线程，进程可以创建多个线程。</li></ul><h3 id="区别对比"><a href="#区别对比" class="headerlink" title="区别对比"></a>区别对比</h3><ul><li>进程之间不共享全局变量</li><li>线程之间共享全局变量，但是要注意资源竞争的问题，解决办法: 互斥锁或者线程同步</li><li>创建进程的资源开销要比创建线程的资源开销要大</li><li>进程是操作系统资源分配的基本单位，线程是CPU调度的基本单位</li><li>线程不能够独立执行，必须依存在进程中</li><li>多进程开发比单进程多线程开发稳定性要强</li></ul><h3 id="优缺点对比"><a href="#优缺点对比" class="headerlink" title="优缺点对比"></a>优缺点对比</h3><ul><li><p>进程优缺点: - 优点：可以用多核 - 缺点：资源开销大</p></li><li><p>线程优缺点: - 优点：资源开销小 - 缺点：不能使用多核（3.10版本后有改善）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二十一、Python多任务进程编程</title>
      <link href="/posts/5894594d.html"/>
      <url>/posts/5894594d.html</url>
      
        <content type="html"><![CDATA[<h1 id="二十一、Python多任务进程编程"><a href="#二十一、Python多任务进程编程" class="headerlink" title="二十一、Python多任务进程编程"></a>二十一、Python多任务进程编程</h1><h2 id="1、多任务编程"><a href="#1、多任务编程" class="headerlink" title="1、多任务编程"></a>1、多任务编程</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>多任务是指同时执行多个任务或处理多个工作的能力。</strong></p><p>在日常生活和工作中，多任务是一种普遍存在的情况。</p><p>人们需要在同一时间内处理多个不同的事务或任务，例如同时回复电子邮件、参加电话会议、处理文件等。</p><p>在计算机领域，多任务也是一个重要的概念。操作系统和软件可以利用计算机的处理能力，同时执行多个任务或进程。这样可以提高计算机的效率和资源利用率。多任务在操作系统中通过任务调度算法来实现，以确定每个任务的执行时间和优先级。</p><p><strong>在计算机编程中，多任务编程可以通过多线程、多进程或协程等方式实现。每个任务或线程可以并行或交替执行，实现并发处理。多任务编程可以提高程序的性能和响应能力，并充分利用多核处理器或多处理器系统的性能优势。</strong></p><p>然而，多任务编程也面临一些挑战和问题，例如并发访问共享资源可能引发竞态条件和数据一致性问题，需要采取合适的同步机制来解决。此外，调度算法的设计和任务切换的开销也需要考虑。</p><p>总而言之，<strong>多任务是一种同时执行多个任务或处理多个工作的能力</strong>，在日常生活和计算机编程中都是普遍存在的。通过合理的任务调度和多任务编程技术，可以提高效率、优化资源利用和提升系统性能。</p><h3 id="多任务编程"><a href="#多任务编程" class="headerlink" title="多任务编程"></a>多任务编程</h3><p>多任务编程是指在编程中同时执行多个任务或线程。它可以提高程序的效率和响应能力，同时也可以利用多个处理器或核心的能力。</p><p>在实际开发中，Python 多任务编程可以通过以下三种形式实现：</p><ul><li>线程</li><li>进程</li><li>协程</li></ul><p><strong>多线程是最常见的一种多任务编程技术，它可以在同一个程序内同时运行多个线程，每个线程负责执行不同的任务。</strong>多线程编程能够充分利用多核心处理器的性能优势，提高程序的并发能力。然而，多线程编程需要注意线程安全问题，比如访问共享资源时需要使用锁来保证数据的一致性。</p><p><strong>另一种常见的多任务编程技术是多进程编程，它可以在操作系统级别同时运行多个独立的进程。</strong>每个进程拥有独立的内存空间和资源，可以实现更高的隔离性。</p><p><strong>另外，协程也是一种轻量级的多任务编程技术，它可以在同一个线程中实现多个任务的切换和调度。</strong>协程通过yield语句和生成器函数实现任务的暂停和恢复，避免了线程切换的开销并减少了锁的使用。协程常用于异步编程场景，比如网络编程和IO密集型任务。</p><p>总结起来，<strong>多任务编程是一种提高程序并发能力和效率的编程技术，可以通过多线程、多进程或协程等方式实现。</strong>在选择多任务编程技术时，需要根据实际需求和情况综合考虑各种因素，比如性能、并发性、开发难度和可维护性等。</p><h2 id="2、多任务进程编程"><a href="#2、多任务进程编程" class="headerlink" title="2、多任务进程编程"></a>2、多任务进程编程</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>一个正在运行的程序或者软件就是一个进程，<strong>它是操作系统进行资源分配的基本单位</strong>，也就是说每启动一个进程，操作系统都会给其分配一定的运行资源（内存资源）保证进程的运行。</p><p>Python中使用<code>multiprocessing</code>模块实现多任务进程编程。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h3><p><code>multiprocessing</code>模块使用<code>Process</code>类创建进程实例对象，实现进程任务的创建。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Process<span class="token punctuation">(</span><span class="token punctuation">[</span>group <span class="token punctuation">[</span><span class="token punctuation">,</span> target <span class="token punctuation">[</span><span class="token punctuation">,</span> name <span class="token punctuation">[</span><span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">,</span> kwargs<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li><code>group</code>：指定进程组，目前只能使用 <code>None</code></li><li><code>target</code>：执行的目标任务名</li><li><code>name</code>：进程名字</li><li><code>args</code>：以元组方式给执行任务传参</li><li><code>kwargs</code>：以字典方式给执行任务传参</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token comment"># 跳舞任务</span><span class="token keyword">def</span> <span class="token function">task1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"跳舞中..."</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token comment"># 唱歌任务</span><span class="token keyword">def</span> <span class="token function">task2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"唱歌中..."</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task1<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"myprocess1"</span><span class="token punctuation">)</span>    p2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动进程"><a href="#启动进程" class="headerlink" title="启动进程"></a>启动进程</h3><p>进程对象创建成功后，需要启动进程才会开始执行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131520810.png" alt="image-20240713151959111"></p><h3 id="获取当前进程"><a href="#获取当前进程" class="headerlink" title="获取当前进程"></a>获取当前进程</h3><p><code>multiprocessing.current_process()</code> 可以获取当前进程。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">task1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">task2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task1<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"myprocess-1"</span><span class="token punctuation">)</span>    p2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task2<span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131521415.png" alt="image-20240713152158329"></p><h3 id="获取进程名"><a href="#获取进程名" class="headerlink" title="获取进程名"></a>获取进程名</h3><p>进程对象的 <code>name</code> 属性可以获取进程的名称。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">task1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">task2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    p1 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task1<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"myprocess-1"</span><span class="token punctuation">)</span>    p2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task2<span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131523892.png" alt="image-20240713152303789"></p><h3 id="获取进程-ID"><a href="#获取进程-ID" class="headerlink" title="获取进程 ID"></a>获取进程 ID</h3><p>每一个进程产生时，操作系统都分为进程分配一个ID编号，可以通过 <code>os</code> 模块中的方法获取进程的ID。</p><ul><li><code>os.getpid()</code> 获取当前进程 ID</li><li><code>os.getppid()</code> 获取当前进程的父进程的 ID</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">task1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_ID"</span></span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_Parent_ID"</span></span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">task2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_ID"</span></span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_Parent_ID"</span></span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_ID"</span></span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string">_Parent_ID"</span></span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p1 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task1<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"myprocess-1"</span><span class="token punctuation">)</span>    p2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task2<span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131524860.png" alt="image-20240713152453751"></p><h3 id="进程任务函数传参"><a href="#进程任务函数传参" class="headerlink" title="进程任务函数传参"></a>进程任务函数传参</h3><p>在创建进程对象的时候，为进程任务函数传递参数，可以使用两种方式为任务函数传参。</p><ul><li><code>args</code>: 使用可变位置参数形式传参</li><li><code>kwargs</code>: 使用可变关键字参数形式传参</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"打印第 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string"> 次 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 使用可变位置参数传参</span>    p1 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 使用可变关键字参数传参</span>    p2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"n"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"Hogwarts"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131528989.png" alt="image-20240713152833894"></p><h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><p><code>join()</code> 方法用来将子进程添加到当前进程之前执行，直到子进程执行结束后，当前进程才会继续向下执行。</p><p><strong>多个进程间的代码在运行时是交替执行的，如果使用 <code>join()</code> 方法后，当前进程会进入到阻塞状态，等待子进程结束后，解除阻塞状态，继续执行当前进程。</strong></p><p><strong>使用 <code>join()</code> 方法后，可使多进程的 <code>异步执行</code> 变成 <code>同步执行</code>, 过多使用会使程序效率变低。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"打印第 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string"> 次 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 使用可变位置参数传参</span>    p1 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 使用可变关键字参数传参</span>    p2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"n"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"Hogwarts"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"main run ..."</span><span class="token punctuation">)</span>    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131530012.png" alt="image-20240713153048862"></p><h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><p><strong>多进程在执行时，父进程会等待子进程执行结束才会结束。</strong></p><p>如果需要子进程在父进程执行结束后就结束执行，无论子进程是否执行完毕，可以将子进程设置为守护进程。</p><p>比如：只有开启企业微信后，才可以使用企业微信的会议功能，当企业微信退出时，会议也会随之退出。</p><p>设置守护进程方式有两种：</p><ul><li>使用 <code>子进程对象.daemon = True</code> 在子进程启动前将子进程设置为守护进程。</li><li>使用 <code>子进程对象.terminate()</code> 在主进程退出前手动将子进程结束。</li></ul><h4 id="设置子进程为守护进程"><a href="#设置子进程为守护进程" class="headerlink" title="设置子进程为守护进程"></a>设置子进程为守护进程</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"打印第 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string"> 次 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"n"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"Hogwarts"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>设置前</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131535197.png" alt="image-20240713153542095"></p></li><li><p>设置后</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131536971.png" alt="image-20240713153637889"></p></li></ul><h4 id="手动杀死子进程"><a href="#手动杀死子进程" class="headerlink" title="手动杀死子进程"></a>手动杀死子进程</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"打印第 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string"> 次 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"n"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"Hogwarts"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    p2<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131539518.png" alt="image-20240713153928414"></p><h3 id="进程间不共享全局变量"><a href="#进程间不共享全局变量" class="headerlink" title="进程间不共享全局变量"></a>进程间不共享全局变量</h3><p><strong>因为进程是程序执行的最小资源分配单位，当一个子进程被创建时，子进程会复制父进程的资源，形成一个独立的空间，所以多个进程之间的数据是独立不共享的。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token comment"># 定义全局变量</span>g_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 添加数据的任务</span><span class="token keyword">def</span> <span class="token function">add_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        g_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"add:"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"add_data:"</span><span class="token punctuation">,</span> g_list<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"read_data"</span><span class="token punctuation">,</span> g_list<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    add_data_process <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>add_data<span class="token punctuation">)</span>    read_data_process <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>read_data<span class="token punctuation">)</span>    add_data_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    add_data_process<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    read_data_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"main:"</span><span class="token punctuation">,</span> g_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407131540771.png" alt="image-20240713154055701"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二十、Python正则表达式</title>
      <link href="/posts/53eca6fc.html"/>
      <url>/posts/53eca6fc.html</url>
      
        <content type="html"><![CDATA[<h1 id="二十、Python正则表达式"><a href="#二十、Python正则表达式" class="headerlink" title="二十、Python正则表达式"></a>二十、Python正则表达式</h1><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><ul><li>正则表达式是一种强大的文本处理工具，可以用于在字符串中进行模式匹配、搜索、替换等操作。</li><li>Python中内置<code>re</code>模块，用于进行正则表达式操作，提供了一系列函数和方法，用于执行各种正则表达式操作。</li></ul><h2 id="2、常用正则表达式语法及含义"><a href="#2、常用正则表达式语法及含义" class="headerlink" title="2、常用正则表达式语法及含义"></a>2、常用正则表达式语法及含义</h2><table><thead><tr><th align="left">语法</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">普通字符</td><td align="left">大多数只会匹配字符本身</td></tr><tr><td align="left"><code>.</code></td><td align="left">匹配除换行符 \n 外的任意字符</td></tr><tr><td align="left"><code>[ ]</code></td><td align="left">匹配 [ ] 中列举的字符</td></tr><tr><td align="left"><code>*</code></td><td align="left">匹配前一个字符的零个或多个实例</td></tr><tr><td align="left"><code>+</code></td><td align="left">匹配前一个字符的一个或多个实例</td></tr><tr><td align="left"><code>?</code></td><td align="left">匹配前一个字符的零个或一个实例</td></tr><tr><td align="left"><code>&#123;m&#125;</code></td><td align="left">匹配前一个字符的 m 个实例</td></tr><tr><td align="left"><code>&#123;m, n&#125;</code></td><td align="left">匹配前一个字符的 m 到 n 个实例</td></tr><tr><td align="left"><code>^</code></td><td align="left">匹配字符串的开头</td></tr><tr><td align="left"><code>$</code></td><td align="left">匹配字符串的结尾</td></tr><tr><td align="left"><code>\d</code></td><td align="left">匹配任意数字字符，相当于 [0-9]</td></tr><tr><td align="left"><code>\D</code></td><td align="left">匹配任意非数字字符，相当于除 [0-9]以外的字符</td></tr><tr><td align="left"><code>\w</code></td><td align="left">匹配任意字母、数字或下划线字符等非特殊字符，相当于 [a-zA-Z0-9_]</td></tr><tr><td align="left"><code>\W</code></td><td align="left">匹配任意除字母、数字或下划线字符以外的特殊字符，相当于除 [a-zA-Z0-9_]以外的字符</td></tr><tr><td align="left"><code>\s</code></td><td align="left">匹配任意空白字符，如空格、制表符、换行等</td></tr><tr><td align="left"><code>\S</code></td><td align="left">匹配任意非空白字符</td></tr></tbody></table><h2 id="3、常用处理函数"><a href="#3、常用处理函数" class="headerlink" title="3、常用处理函数"></a>3、常用处理函数</h2><h3 id="re-match"><a href="#re-match" class="headerlink" title="re.match"></a>re.match</h3><ul><li><code>re.match</code>：尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，<code>match()</code>就返回<code>none</code>。</li><li>格式：<code>re.match(pattern, string, flags=0)</code></li></ul><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pattern</td><td align="left">匹配的正则表达式</td></tr><tr><td align="left">string</td><td align="left">要匹配的字符串</td></tr><tr><td align="left">flags</td><td align="left">标志位，用于控制正则表达式的匹配方式</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment"># 使用 re.match 进行匹配</span>pattern <span class="token operator">=</span> <span class="token string">r"hello"</span>string <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">match</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"匹配成功"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"匹配失败"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>group()</code>：获取匹配结果；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment"># 使用 re.match 进行匹配</span>pattern <span class="token operator">=</span> <span class="token string">r"\d+"</span>string <span class="token operator">=</span> <span class="token string">"12345hello world"</span><span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>span()</code>：获取匹配结果在元字符中的范围；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment"># 使用 re.match 进行匹配</span>pattern <span class="token operator">=</span> <span class="token string">r"hello"</span>string <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>start()</code>：获取匹配结果在原字符串中起始下标位置；<br><code>end()</code>：获取匹配结果在原字符串中结束下标位置。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment"># 使用re.match进行匹配</span>pattern <span class="token operator">=</span> <span class="token string">r"\d+"</span><span class="token comment"># \d：匹配任意数字字符，相当于 [0-9]</span><span class="token comment"># +：匹配前一个字符的一个或多个实例</span>string <span class="token operator">=</span> <span class="token string">"1232434hello world"</span><span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token comment"># 使用start获取匹配结果在原字符串中的起始下标位置</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 使用end获取匹配结果在原字符串中的结束下标位置</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="re-search"><a href="#re-search" class="headerlink" title="re.search"></a>re.search</h3><ul><li><code>re.search</code>：在字符串中搜索匹配指定的模式，如果找到则返回匹配对象，否则返回<code>None</code>。</li><li>格式：<code>re.search(pattern, string, flags=0)</code></li></ul><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pattern</td><td align="left">匹配的正则表达式</td></tr><tr><td align="left">string</td><td align="left">要匹配的字符串</td></tr><tr><td align="left">flags</td><td align="left">标志位，用于控制正则表达式的匹配方式</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment"># 使用 re.search 进行搜索</span>pattern <span class="token operator">=</span> <span class="token string">r"world"</span>string <span class="token operator">=</span> <span class="token string">"hello world"</span>search <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token keyword">if</span> search<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"找到匹配"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"未找到匹配"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="re-match与re-search的区别"><a href="#re-match与re-search的区别" class="headerlink" title="re.match与re.search的区别"></a>re.match与re.search的区别</h4><ul><li><code>re.match</code>只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回<code>None</code>；</li><li><code>re.search</code>匹配整个字符串，直到找到一个匹配。</li></ul><h3 id="re-findall"><a href="#re-findall" class="headerlink" title="re.findall"></a>re.findall</h3><ul><li><code>re.findall</code>：在字符串中找到正则表达式所匹配的所有子串，并返回一个列表；如果有多个匹配模式，则返回元组列表；如果没有找到匹配的，则返回空列表。</li><li>格式：<code>re.findall(string[, pos[, endpos]])</code></li></ul><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">string</td><td align="left">待匹配的字符串</td></tr><tr><td align="left">pos</td><td align="left">可选参数，指定字符串的起始位置，默认为 0</td></tr><tr><td align="left">endpos</td><td align="left">可选参数，指定字符串的结束位置，默认为字符串的长度</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment"># 使用re.findall进行匹配</span>pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r"\d+"</span><span class="token punctuation">)</span><span class="token comment"># \d：匹配任意数字字符，相当于 [0-9]</span><span class="token comment"># +：匹配前一个字符的一个或多个实例</span>result1 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"hogwarts 123 python 456"</span><span class="token punctuation">)</span>result2 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"hello123python456world"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多个匹配模式，返回元组列表。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment"># 使用re.findall进行匹配</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r"(\w+)=(\d+)"</span><span class="token punctuation">,</span> <span class="token string">"asd width=20 sdf height=10 python100"</span><span class="token punctuation">)</span><span class="token comment"># \d：匹配任意数字字符，相当于 [0-9]</span><span class="token comment"># +：匹配前一个字符的一个或多个实例</span><span class="token comment"># \w：匹配任意除字母、数字或下划线字符以外的特殊字符，相当于除 [a-zA-Z0-9_]以外的字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="re-sub"><a href="#re-sub" class="headerlink" title="re.sub"></a>re.sub</h3><ul><li><code>re.sub</code>：用于替换字符串中的匹配项。</li><li>格式：<code>re.sub(pattern, repl, string, count=0, flags=0)</code></li></ul><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pattern</td><td align="left">匹配的正则表达式</td></tr><tr><td align="left">repl</td><td align="left">替换的字符串，也可为一个函数</td></tr><tr><td align="left">string</td><td align="left">要被查找替换的原始字符串</td></tr><tr><td align="left">count</td><td align="left">模式匹配后替换的最大次数，默认0 表示替换所有的匹配</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> repattern <span class="token operator">=</span> <span class="token string">r"\d+"</span><span class="token comment"># \d：匹配任意数字字符，相当于 [0-9]</span><span class="token comment"># +：匹配前一个字符的一个或多个实例</span>string <span class="token operator">=</span> <span class="token string">"abc 234 def 567 gki"</span><span class="token comment"># 将字符串中的数字替换为“NUM”</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">"NUM"</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"替换后的字符串："</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="re-split"><a href="#re-split" class="headerlink" title="re.split"></a>re.split</h3><ul><li><code>re.split</code>：按照能够匹配的子串，将字符串分割后返回列表。</li><li>格式：<code>re.split(pattern, string[, maxsplit=0, flags=0])</code></li></ul><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pattern</td><td align="left">匹配的正则表达式</td></tr><tr><td align="left">string</td><td align="left">要匹配的字符串</td></tr><tr><td align="left">maxsplit</td><td align="left">分隔次数，maxsplit&#x3D;1 分隔一次，默认为0，不限制次数</td></tr><tr><td align="left">flags</td><td align="left">标志位，用于控制正则表达式的匹配方式</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> repattern <span class="token operator">=</span> <span class="token string">r"\s+"</span><span class="token comment"># \s：匹配任意空白字符，如空格、制表符、换行等</span><span class="token comment"># +：匹配前一个字符的一个或多个实例</span>string <span class="token operator">=</span> <span class="token string">"Hello    World   Python"</span><span class="token comment"># 使用正则表达式模式分割字符串</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"分割后的字符串："</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、匹配模式"><a href="#4、匹配模式" class="headerlink" title="4、匹配模式"></a>4、匹配模式</h2><p>在大多数正则表达式的方法中，都会有一个<code>flags</code>的参数，该参数用于控制正则表达式的匹配方式。</p><h3 id="re-IGNORECASE"><a href="#re-IGNORECASE" class="headerlink" title="re.IGNORECASE"></a>re.IGNORECASE</h3><ul><li><code>re.IGNORECASE</code>：用于在正则表达式中启用大小写不敏感的匹配，可简写为<code>re.I</code>。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> repattern <span class="token operator">=</span> <span class="token string">r"apple"</span>string <span class="token operator">=</span> <span class="token string">"Apple is a fruit. I like apple pie."</span><span class="token comment"># 使用re.IGNORECASE标志进行匹配</span>matches <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> re<span class="token punctuation">.</span>IGNORECASE<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"忽略大小写匹配的结果："</span><span class="token punctuation">,</span> matches<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="re-MULTILINE"><a href="#re-MULTILINE" class="headerlink" title="re.MULTILINE"></a>re.MULTILINE</h3><ul><li><code>re.MULTILINE</code>：用于启用多行模式，使用<code>^</code>和<code>$</code>在每行的开头和结尾都能匹配，可简写为<code>re.M</code>。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> repattern <span class="token operator">=</span> <span class="token string">r"^\d+"</span>string <span class="token operator">=</span> <span class="token string">"123 apple\n456 banana\n789 cherry"</span>matches <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"单行匹配的结果："</span><span class="token punctuation">,</span> matches<span class="token punctuation">)</span><span class="token comment"># 使用re.MULTILINE标志进行匹配</span>matches <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> re<span class="token punctuation">.</span>MULTILINE<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"多行匹配的结果："</span><span class="token punctuation">,</span> matches<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、匹配分组"><a href="#5、匹配分组" class="headerlink" title="5、匹配分组"></a>5、匹配分组</h2><table><thead><tr><th align="left">模式</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">|</td><td align="left">匹配左右任意一个表达式， \d+</td></tr><tr><td align="left">(xxx)</td><td align="left">将括号中字符作为一个分组</td></tr><tr><td align="left">\num</td><td align="left">引用分组 num 匹配到的字符串</td></tr><tr><td align="left">(?P)</td><td align="left">分组起别名</td></tr><tr><td align="left">(?P&#x3D;name)</td><td align="left">引用别名为 name 分组匹配到的字符串</td></tr></tbody></table><h3 id="“-”-匹配多个规则"><a href="#“-”-匹配多个规则" class="headerlink" title="“ | ” 匹配多个规则"></a>“ | ” 匹配多个规则</h3><ul><li>使用<code>|</code>可以指定多个匹配表达式。</li></ul><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">模式 功能<span class="token operator">|</span> 匹配左右任意一个表达式， \d<span class="token operator">+</span><span class="token operator">|</span>\w<span class="token operator">+</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span> 将括号中字符作为一个分组\num 引用分组 num 匹配到的字符串<span class="token punctuation">(</span><span class="token operator">?</span><span class="token constant">P</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">)</span> 分组起别名<span class="token punctuation">(</span><span class="token operator">?</span><span class="token constant">P</span><span class="token operator">=</span>name<span class="token punctuation">)</span> 引用别名为 name 分组匹配到的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="xxx-分组"><a href="#xxx-分组" class="headerlink" title="(xxx)分组"></a>(xxx)分组</h3><ul><li><code>group()</code>方法可以获取完整的匹配结果，如果想获取匹配结果中某一个分组规则匹配到的结果，可以使用数字参数形式。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rematc_obj<span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"(\d&#123;3,4&#125;)-(\d&#123;4,10&#125;)"</span><span class="token punctuation">,</span> <span class="token string">"010-888999"</span><span class="token punctuation">)</span><span class="token keyword">if</span> matc_obj<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>matc_obj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 分组：默认是1一个分组，多个分组从左至右依次加1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>matc_obj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 提取第二个分组数据</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>matc_obj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"匹配失败"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="“-xxx”引用规则"><a href="#“-xxx”引用规则" class="headerlink" title="“ \xxx”引用规则"></a>“ \xxx”引用规则</h3><ul><li>在一个匹配模式中，如果一个规则出现多次，可以将规则进行分组，然后在分组后引用该规则，避免重复书写。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rematch_obj <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"&lt;[a-zA-Z1-6]+>.*&lt;/[a-zA-Z1-6]+>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;html>hh&lt;/div>"</span><span class="token punctuation">)</span><span class="token keyword">if</span> match_obj<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>match_obj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"匹配失败"</span><span class="token punctuation">)</span>match_obj <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"&lt;([a-zA-Z1-6]+)>.*&lt;/\\1>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;html>hh&lt;/html>"</span><span class="token punctuation">)</span><span class="token keyword">if</span> match_obj<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>match_obj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"匹配失败"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="P-P-name-分组命名与引用"><a href="#P-P-name-分组命名与引用" class="headerlink" title="(?P)(?P&#x3D;name)分组命名与引用"></a>(?P)(?P&#x3D;name)分组命名与引用</h3><ul><li>在使用分组时，可以给分组进行命名。在匹配规则中，可以通过分组命名引用某个分组中的规则。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rematch_obj <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"&lt;(?P&lt;name1>[a-zA-Z1-6]+)>&lt;(?P&lt;name2>[a-zA-Z1-6]+)>.*&lt;/(?P=name2)>&lt;/(?P=name1)>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;html>&lt;h1>www.ceshiren.com&lt;/h1>&lt;/html>"</span><span class="token punctuation">)</span><span class="token keyword">if</span> match_obj<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>match_obj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"匹配失败"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十九、Python面向对象程序设计</title>
      <link href="/posts/aeb329b4.html"/>
      <url>/posts/aeb329b4.html</url>
      
        <content type="html"><![CDATA[<h1 id="十九、Python面向对象程序设计"><a href="#十九、Python面向对象程序设计" class="headerlink" title="十九、Python面向对象程序设计"></a>十九、Python面向对象程序设计</h1><h2 id="1、面向对象的概念"><a href="#1、面向对象的概念" class="headerlink" title="1、面向对象的概念"></a>1、面向对象的概念</h2><ul><li><strong>面向对象编程</strong>（<strong>OOP</strong>）：Object Oriented Programming</li><li><strong>面向对象</strong>：就是在编程时尽可能地模拟现实世界，按照现实世界中的逻辑去处理问题，分析问题中参与其中的有哪些实体、这些实体应该有什么属性和方法，我们如何通过调用这些实体的属性和方法去解决问题。</li><li><strong>Python是一门面向对象的语言。</strong></li></ul><h3 id="两种编程思想"><a href="#两种编程思想" class="headerlink" title="两种编程思想"></a>两种编程思想</h3><ul><li>面向过程（Procedural Programming）<ul><li>一种以过程为中心的编程思想；</li><li>首先分析解决问题所需要的步骤；</li><li>然后用函数将这些步骤一步一步的实现；</li><li>最后按顺序依次调用运行。</li></ul></li><li>面向对象（Object-Oriented Programming，简称OOP）<ul><li>是一种更符合我们人类思维习惯的编程思想；</li><li>面向对象开发就是不断的创建对象，使用对象，操作对象做事情；</li><li>可以将复杂的事情简单化。</li></ul></li></ul><h3 id="面向对象编程与面向过程编程的区别"><a href="#面向对象编程与面向过程编程的区别" class="headerlink" title="面向对象编程与面向过程编程的区别"></a>面向对象编程与面向过程编程的区别</h3><ol><li><strong>抽象程度</strong>：面向过程编程将程序划分为一系列的过程或函数，通过函数之间的调用来完成任务。而面向对象编程将程序看作是一组相互作用的对象，每个对象都有其自己的属性和行为。</li><li><strong>封装性</strong>：面向过程编程强调的是数据和函数的分离，函数可以直接访问和操作数据。而面向对象编程通过封装将数据和对数据的操作绑定在一起，只暴露出必要的接口，隐藏了内部的具体实现细节。</li><li><strong>继承性</strong>：面向对象编程具有继承的特性，可以通过继承机制从已存在的类派生出新的类，并继承父类的属性和方法，以实现代码的重用和扩展。而面向过程编程没有继承的概念，代码重用通常通过函数的封装和复用来实现。</li><li><strong>多态性</strong>：面向对象编程支持多态，即同一种类型的对象在不同的上下文中有不同的行为，这使得代码更加灵活和可扩展。而面向过程编程没有多态的概念，需要通过条件语句来实现不同情况的处理。</li><li><strong>设计思想</strong>：面向对象编程注重的是问题领域的建模和抽象，关注对象之间的关系和交互。而面向过程编程更加注重问题的解决步骤和过程化的思维。</li></ol><blockquote><p>选择面向过程还是面向对象编程，取决于具体的需求和项目情况。<br>面向对象编程更适合复杂的系统和大规模的项目，能够提高代码的模块化、可维护性和扩展性；而面向过程编程则更适合简单的任务和较小规模的项目，可以减少不必要的复杂性。</p></blockquote><h2 id="2、类与对象"><a href="#2、类与对象" class="headerlink" title="2、类与对象"></a>2、类与对象</h2><h3 id="2-1-类"><a href="#2-1-类" class="headerlink" title="2.1 类"></a>2.1 类</h3><ul><li>在面向对象编程中，类（class）是一种定义现实事物属性和方法的蓝图和模板。类描述了现实事物的特征（属性）和行为（方法）。可以把类看作是创建现实事物的原型。</li><li>类是现实事物的抽象，它定义了一类具有相似特征和行为的通用结构和行为。类提供了对象所需的状态和行为，并定义了对象的初始化、操作和销毁等方法。</li><li>类由属性（也称成员变量）和方法组成。属性是类的特征，用于描述类的状态。方法是定义在类中的函数，用于描述类的行为和操作。</li><li>通过使用类，我们可以创建多个具有相同属性和方法的对象。类中的属性和方法是相对独立的，每个对象都有自己的属性副本，但共享类中的方法。</li><li>通过类的封装和抽象，可以更好地组织和管理代码，提高代码的可读性、可维护性和重用性。类是面向对象编程的重要概念之一。</li></ul><h4 id="2-1-1-类的定义"><a href="#2-1-1-类的定义" class="headerlink" title="2.1.1 类的定义"></a>2.1.1 类的定义</h4><ul><li>Python使用<code>class</code>关键字来创建一个新类，<code>class</code>之后为类的名称。</li><li>Python存在一个根类<code>object</code>类，所有的类都由根类派生而来，如果自定义类继承于根类，可以省略。</li></ul><p>语法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ClassName</span>：    <span class="token keyword">pass</span><span class="token comment"># 或</span><span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Plane</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">flying</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>hour<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"飞机已飞行</span><span class="token interpolation"><span class="token punctuation">&#123;</span>hour<span class="token punctuation">&#125;</span></span><span class="token string">小时"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-对象"><a href="#2-2-对象" class="headerlink" title="2.2 对象"></a>2.2 对象</h3><p><strong>对象（object）：称为类的一个实例，是具体存在的、具有状态和行为的实体。</strong></p><p>可以把类看作是对象的模板或蓝图，描述了对象应该具有的属性和方法。当我们通过类创建一个具体的实例时，这个实例就是一个对象。</p><p>对象有两个关键的特征：状态和行为。</p><ol><li>状态（state）：对象的状态由它的属性（也称为成员变量）决定，属性表示了对象的特点和特征。例如：一个人对象的状态包括姓名、年龄、性别等属性，这些属性的值可以根据对应的实际情况而不同。</li><li>行为（behavior）：对象的行为由它的方法（也称为成员函数）决定，方法表示了对象能够执行的操作和行为。例如：一个人对象的行为可以包括走路、说话、工作等方法，通过调用这些方法可以让对象执行相应的行为。</li></ol><h4 id="2-2-1-实例对象"><a href="#2-2-1-实例对象" class="headerlink" title="2.2.1 实例对象"></a>2.2.1 实例对象</h4><ul><li>一个类定义好了，还不能使用，比如系统的list类。类知识规定了该类型的数据具有什么特征和行为，而真正要去使用这些特征和行为，必须有一个真实的列表存在。</li><li>实例对象本质上就是使用自定义类型去声明一个变量。</li><li>格式：<code>实例对象名=类名()</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Plane</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">flying</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>hour<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"飞机已飞行</span><span class="token interpolation"><span class="token punctuation">&#123;</span>hour<span class="token punctuation">&#125;</span></span><span class="token string"> 小时。。。"</span></span><span class="token punctuation">)</span><span class="token comment"># 实例了两个对象</span>airPlane1 <span class="token operator">=</span> Plane<span class="token punctuation">(</span><span class="token punctuation">)</span>airPlane2 <span class="token operator">=</span> Plane<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 使用不同的对象调用了类中的方法</span>airPlane1<span class="token punctuation">.</span>flying<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>airPlane1<span class="token punctuation">.</span>flying<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>airPlane2<span class="token punctuation">.</span>flying<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-实例属性"><a href="#2-2-2-实例属性" class="headerlink" title="2.2.2 实例属性"></a>2.2.2 实例属性</h4><h5 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h5><ul><li>Python 中的属性变量都是使用动态绑定的方式绑定到实例对象上的。</li><li>格式：<code>实例对象名.实例属性名</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment"># 实例对象</span>s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 为实例对象s1动态绑定属性</span>s1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tommy"</span>s1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">21</span><span class="token comment"># 访问实例对象s1的属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token comment"># 那没有绑定的s2，会输出什么？</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092206797.png" alt="image-20240709220656620"></p><h3 id="2-3-构造方法"><a href="#2-3-构造方法" class="headerlink" title="2.3 构造方法"></a>2.3 构造方法</h3><p>构造方法<code>__init__(self)</code>在实例对象时自动调用，<code>self</code>参数不需要手动传参，该参数在实例对象时，由解释器自动传入被实例的对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Init Run ..."</span><span class="token punctuation">)</span>s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092209119.png" alt="image-20240709220941035"></p><h4 id="2-3-1-self"><a href="#2-3-1-self" class="headerlink" title="2.3.1 self"></a>2.3.1 self</h4><ul><li>self 是一个特殊的关键字，用来表示当前被实例的对象，可以理解为人称代词 <strong>我</strong>。</li><li>通过<code>self</code>可以定义或访问实例对象的属性或方法。</li><li>格式：<code>self.属性名 = 值</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Timmy"</span>        self<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">21</span>s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092211673.png" alt="image-20240709221110587"></p><ul><li>通过<code>构造方法</code>和<code>self</code>，实现了为实例对象定义属性，其本质上还是为实例对象动态绑定属性，只是动态绑定的时机变了，从实例完对象再绑定属性，变成了在自动调用执行的构造方法中进行动态绑定。</li><li>并且，从以上代码发现另一个问题，就是所有实例的对象都有共同的属性值，这显然不符合逻辑。</li></ul><h4 id="2-3-2-带参构造方法"><a href="#2-3-2-带参构造方法" class="headerlink" title="2.3.2 带参构造方法"></a>2.3.2 带参构造方法</h4><p>构造方法也可以携带参数，根据类中属性的定义，传入对应的参数对实例属性进行初始化。</p><p>格式：<code>__init__(self, args)</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> ages1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">"Rose"</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092213320.png" alt="image-20240709221323204"></p><h4 id="2-3-3-str-self-方法"><a href="#2-3-3-str-self-方法" class="headerlink" title="2.3.3 __str__(self) 方法"></a>2.3.3 <code>__str__(self)</code> 方法</h4><ul><li>在实例对象后，如果直接打印对象，输出该对象的相关信息，发现实际输出的并不是想要的结果，而是该实例对象的类型和地址。</li><li>如果想在输出实例对象时，按指定的格式输出，需要实现<code>__str__(self)</code>方法。</li><li>该方法不接收除了<code>self</code>以外的参数，<code>self</code>参数自动传入，函数只能返回一个字符串。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"姓名：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> -- 年龄：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">"Rose"</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092215265.png" alt="image-20240709221501137"></p><h3 id="2-4-实例方法"><a href="#2-4-实例方法" class="headerlink" title="2.4 实例方法"></a>2.4 实例方法</h3><p>实例方法用来定义对象的行为，本质上是定义在类中的函数。</p><p>实例方法默认携带一个参数<code>self</code>，在程序执行时，由解释器自动传入调用该方法的实例对象，通过此参数，可以在当前实例方法中调用其它实例方法或属性。</p><p>格式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> 方法名<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">def</span> 方法名<span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        self<span class="token punctuation">.</span>courses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"姓名：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> -- 年龄：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token keyword">def</span> <span class="token function">select_course</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> courseName<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>courses<span class="token punctuation">.</span>append<span class="token punctuation">(</span>courseName<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">all_course</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> 本学期选课如下："</span></span><span class="token punctuation">)</span>        <span class="token keyword">for</span> idx<span class="token punctuation">,</span>c <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>courses<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"第</span><span class="token interpolation"><span class="token punctuation">&#123;</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string">门课：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">"Rose"</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span>s1<span class="token punctuation">.</span>select_course<span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">)</span>s1<span class="token punctuation">.</span>select_course<span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span>s1<span class="token punctuation">.</span>select_course<span class="token punctuation">(</span><span class="token string">"PHP"</span><span class="token punctuation">)</span>s1<span class="token punctuation">.</span>all_course<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092217016.png" alt="image-20240709221737950"></p><h3 id="2-5-类属性"><a href="#2-5-类属性" class="headerlink" title="2.5 类属性"></a>2.5 类属性</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>在 Python 中，一切皆为对象，类也不例外。在程序运行过程中，类也会作为一个对象使用。</p><p>类对象与实例对象不同，可以理解为实例对象是由类对象复制而来，每个实例对象之间具有数据独立性。<strong>而类对象在程序运行过程中，只有一个。</strong></p><p>既然是对象，那就可以拥有自己的属性。</p><p><strong>在类中定义属性时，属性名有self前缀的是实例属性，而在类中直接定义的属性即为类属性。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">WaterDispenser</span><span class="token punctuation">:</span>    <span class="token comment"># 剩余水量</span>    surplus_water <span class="token operator">=</span> <span class="token number">1500</span>    <span class="token comment"># 出水口</span>    <span class="token keyword">def</span> <span class="token function">water_outlet</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        WaterDispenser<span class="token punctuation">.</span>surplus_water <span class="token operator">-=</span> n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"剩余水量"</span><span class="token punctuation">,</span> WaterDispenser<span class="token punctuation">.</span>surplus_water<span class="token punctuation">)</span><span class="token comment"># 定义一个人的类，持有一个饮水机对象</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> wd<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>wd <span class="token operator">=</span> wd    <span class="token comment"># 人有一个接水的行为（方法）</span>    <span class="token keyword">def</span> <span class="token function">get_water</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>wd<span class="token punctuation">.</span>water_outlet<span class="token punctuation">(</span>n<span class="token punctuation">)</span>wd <span class="token operator">=</span> WaterDispenser<span class="token punctuation">(</span><span class="token punctuation">)</span>Tom <span class="token operator">=</span> Person<span class="token punctuation">(</span>wd<span class="token punctuation">)</span>Jack <span class="token operator">=</span>Person<span class="token punctuation">(</span>wd<span class="token punctuation">)</span>Tom<span class="token punctuation">.</span>get_water<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wd<span class="token punctuation">.</span>surplus_water<span class="token punctuation">)</span>Jack<span class="token punctuation">.</span>get_water<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wd<span class="token punctuation">.</span>surplus_water<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092221127.png" alt="image-20240709222125045"></p><h4 id="类属性的特征"><a href="#类属性的特征" class="headerlink" title="类属性的特征"></a>类属性的特征</h4><ul><li>在类中直接定义的变量为类属性；</li><li>在方法中使用类属性时，需要使用类名作为前缀，<code>类名.类属性名</code>；</li><li>在类的外部可以通过类名或实例对象名访问类属性；</li><li>所有的实例对象名共享一个类属性；</li><li>实例对象只能获取类属性的值，不能直接进行修改，只能通过方法进行修改。</li></ul><h3 id="2-6-类方法"><a href="#2-6-类方法" class="headerlink" title="2.6 类方法"></a>2.6 类方法</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><ul><li>类方法可以通过类名直接进行使用，类方法在定义时，需要使用<code>@classmethod</code>装饰器进行修饰。</li><li>与实例方法不同的是，实例方法有一个默认参数<code>self</code>，代表当前调用方法的实例对象，而类方法的默认参数为<code>cls</code>，该参数也是在使用时由解释器自动传入的，但传入的对象不是实例对象，而是类对象。</li><li>在类方法中，可以通过参数<code>cls</code>使用类属性。</li><li><strong>一般类方法用来封装工具类使用，将一些复杂的代码逻辑封装成类方法，由类名直接调用，不需要实例对象</strong>，比如时间处理、网络请求处理等。</li><li>需要注意的是：如果类中既定义了实例属性，又定义了类方法，那么在类方法中是不能使用实例属性的，因为在使用类方法的过程中，实例对象不存在，所以不能使用实例属性。</li></ul><h4 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h4><p>封装一个日期时间获取的工具类。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token keyword">class</span> <span class="token class-name">Utils</span><span class="token punctuation">:</span>    now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">current_date_time</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>now    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">current_date</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>now<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">current_time</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>now<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H-%M-%S"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">getYear</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>now<span class="token punctuation">.</span>year    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">getMonth</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>now<span class="token punctuation">.</span>month    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">getDay</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>now<span class="token punctuation">.</span>day<span class="token keyword">print</span><span class="token punctuation">(</span>Utils<span class="token punctuation">.</span>current_date_time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Utils<span class="token punctuation">.</span>current_date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Utils<span class="token punctuation">.</span>current_time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Utils<span class="token punctuation">.</span>getYear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Utils<span class="token punctuation">.</span>getMonth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Utils<span class="token punctuation">.</span>getDay<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092235225.png" alt="image-20240709223551082"></p><h3 id="2-7-静态方法"><a href="#2-7-静态方法" class="headerlink" title="2.7 静态方法"></a>2.7 静态方法</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><ul><li>除了类方法，python的类中还有一种静态方法。</li><li>静态方法在定义时，需要使用<code>@staticmethod</code>装饰器进行装饰，与类方法不同的是，静态方法没有默认参数。</li><li>静态方法和普通的函数本质上是一样的，只是定义在了类中。</li><li>一般情况下，静态方法同类方法一样，也是在封装工具类时使用，区别在于静态方法中不需要使用类属性（不是不能使用，只是不建议）。</li></ul><h4 id="Case-1"><a href="#Case-1" class="headerlink" title="Case"></a>Case</h4><p>封装两个数字操作的简单计算器。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Calc</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> n1 <span class="token operator">-</span> n2    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">mul</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> n1 <span class="token operator">*</span> n2    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">div</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> n1 <span class="token operator">/</span> n2<span class="token keyword">print</span><span class="token punctuation">(</span>Calc<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Calc<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Calc<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Calc<span class="token punctuation">.</span>div<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092238237.png" alt="image-20240709223811106"></p><h2 id="3、面向对象三大特征"><a href="#3、面向对象三大特征" class="headerlink" title="3、面向对象三大特征"></a>3、面向对象三大特征</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><h4 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h4><p>封装是面向对象编程中三大特征之一，指的是将数据和操作数据的方法打包在一起，形成一个类或对象。</p><p>封装的目的是隐藏对象的内部实现细节，提供一个安全且易于使用的接口，使得对象之间的交互更加简单和可靠。</p><h4 id="封装主要包括"><a href="#封装主要包括" class="headerlink" title="封装主要包括"></a>封装主要包括</h4><ol><li><strong>数据隐藏</strong>：通过将对象的数据属性设置为私有或受保护的，防止外部直接访问和修改对象的数据。这样可以确保对象的数据在被操作时不会被意外篡改或破坏。</li><li><strong>方法封装</strong>：将对象对自身数据的操作封装在方法中，只通过方法来访问和修改对象的数据。这样可以确保对对象的操作符合预期，避免了外部错误地修改对象的数据。</li><li><strong>接口定义</strong>：通过定义公共接口，将对象的功能暴露给外部使用者。使用者只需关心如何使用接口提供的方法，而不需要了解内部实现细节。这样可以提高代码的可读性和可维护性，同时也能够实现代码的模块化和复用。</li></ol><h4 id="封装的优势"><a href="#封装的优势" class="headerlink" title="封装的优势"></a>封装的优势</h4><ol><li><strong>数据安全性</strong>：封装隐藏了对象的内部实现细节，保护了数据的完整性和安全性。外部无法直接访问或修改对象的数据，必须通过规定的方法进行操作，减少了意外错误的发生。</li><li><strong>代码模块化</strong>：封装将对象的数据和操作打包在一起，实现了代码的模块化。不同的对象可以独立开发和测试，降低了代码的耦合性，增加了系统的可维护性和扩展性。</li><li><strong>简化接口</strong>：封装将对象的功能通过公共接口暴露给外部，隐藏了内部实现细节。外部使用者只需了解接口的使用方法，而无需关心具体的实现。这降低了外部使用者的使用难度，也提高了代码的可读性和易用性。</li></ol><h4 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h4><ul><li>在 Python 中并没有像Java、C++一样，提供了<code>public</code>、<code>protected</code>、<code>private</code>这样的访问控制修饰符，Python 通过一种称为<code>名称改写</code>的方式，实现其它语言中访问控制修饰符的作用。</li><li>但要注意的是，在 Python 中<code>名称改写</code>只是一种约定，并没有真正的实现私有的作用，在 Python 中只要想访问，所有的数据都可以拿到。</li></ul><h4 id="无下划线前缀（共有权限）"><a href="#无下划线前缀（共有权限）" class="headerlink" title="无下划线前缀（共有权限）"></a>无下划线前缀（共有权限）</h4><p>Python 中默认定义的属性和方法，都是公有的方法。无论是在类外，还是在派生的子类中，都可以进行访问，类似其他语言中的<code>public</code>修饰符的作用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 公有属性</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span>    <span class="token comment"># 公有方法</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 在类中使用公有属性</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"A: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>a<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>obj <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 在类外使用公有属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token comment"># 在类外使用公有方法</span>obj<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092241642.png" alt="image-20240709224145560"></p><h4 id="单下划线前缀（保护权限）"><a href="#单下划线前缀（保护权限）" class="headerlink" title="_单下划线前缀（保护权限）"></a><code>_</code>单下划线前缀（保护权限）</h4><p>Python在类中使用<code>单下划线前缀</code>实现其他语言中<code>protected</code>保护权限的功能。</p><p>在属性或方法（包括类属性和类方法，作用相同）前添加一个单下划线，该属性或方法在当前类中可访问，在类外理论上不可访问（使用时不提示，但写出来程序可以运行，但有警告），在通过继承派生的子类中可以访问。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 公有属性</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span>        <span class="token comment"># 保护属性</span>        self<span class="token punctuation">.</span>_b <span class="token operator">=</span> <span class="token number">20</span>    <span class="token comment"># 公有方法</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 在类中使用公有属性</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"A: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>a<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token comment"># 在类中使用保护属性</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"B: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>_b<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token comment"># 在类中使用保护权限的方法</span>        self<span class="token punctuation">.</span>_display<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 保护权限的方法</span>    <span class="token keyword">def</span> <span class="token function">_display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"B: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>_b<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>obj <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 在类外使用公有属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token comment"># 在类外无法使用保护权限的属性（不建议这样用）</span><span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>_b<span class="token punctuation">)</span><span class="token comment"># 在类外使用公有方法</span>obj<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 在类外无法使用保护权限的方法（不建议这样用）</span>obj<span class="token punctuation">.</span>_display<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092245054.png" alt="image-20240709224553973"></p><h4 id="双下划线前缀（私有属性）"><a href="#双下划线前缀（私有属性）" class="headerlink" title="__双下划线前缀（私有属性）"></a><code>__</code>双下划线前缀（私有属性）</h4><p>Python 在类中使用<code>双下划线前缀</code>实现其它语言中<code>private</code>私有权限的功能，在属性或方法（包括类属性和类方法，作用相同）前面加一个双下划线，该属性或方法只能在当前类中访问，在类外任何位置不可访问（只是理论上不可访问，通过某些方式还是可以在类外访问，不建议这样用）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 公有属性</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span>        <span class="token comment"># 保护属性</span>        self<span class="token punctuation">.</span>_b <span class="token operator">=</span> <span class="token number">20</span>        <span class="token comment"># 私有属性</span>        self<span class="token punctuation">.</span>__c <span class="token operator">=</span> <span class="token number">30</span>    <span class="token comment"># 公有方法</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 在类中使用公有属性</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"A: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>a<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token comment"># 在类中使用保护属性</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"B: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>_b<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token comment"># 在类中使用私有属性</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"C: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>__c<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token comment"># 在类中使用保护权限的方法</span>        self<span class="token punctuation">.</span>_display<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 在类中使用私有方法</span>        self<span class="token punctuation">.</span>__info<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 保护权限的方法</span>    <span class="token keyword">def</span> <span class="token function">_display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"B: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>_b<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token comment"># 私有权限的方法</span>    <span class="token keyword">def</span> <span class="token function">__info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 在类中使用私有属性</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__c<span class="token punctuation">)</span>obj <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 在类外使用私有属性，访问失败</span><span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>_b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__c<span class="token punctuation">)</span><span class="token comment"># 在类外访问私有方法，访问失败</span>obj<span class="token punctuation">.</span>__info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092254903.png" alt="image-20240709225415803"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092255490.png" alt="image-20240709225515401"></p><h4 id="双下划线前缀与后缀"><a href="#双下划线前缀与后缀" class="headerlink" title="双下划线前缀与后缀"></a>双下划线前缀与后缀</h4><p>在 Python 中还有一种同时具有前后双下划线的变量或方法，这些方法是Python 中的魔法属性或魔法方法，这些属性或方法名被赋予了特殊的作用，比如：初始化方法<code>__init__()</code>，对象描述方法<code>__str__()</code>、<code>__iter__()</code>、<code>__next__()</code>方法等，这些都是魔法方法。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h4><p>继承是面向对象编程中的三大概念之二，指的是一个类基于另一个类来创建。</p><p>创建出来的新类称为子类或派生类。被继承的类称为父类或基类。</p><p>通过继承，子类可以继承父类的属性和方法，并且可以在此基础上添加新的属性和方法，或者对继承的属性和方法进行修改。</p><h4 id="继承的主要特点"><a href="#继承的主要特点" class="headerlink" title="继承的主要特点"></a>继承的主要特点</h4><ol><li><strong>继承关系</strong>：继承创建了一个父类和子类之间的关系。子类继承了父类的特性，包括属性和方法。子类可以重用父类的代码，减少了代码的冗余。</li><li><strong>子类的扩展</strong>：子类可以在继承父类的基础上，添加新的属性和方法。这样可以对父类进行扩展，使得子类具有更多的功能。</li><li><strong>代码共享和重用</strong>：通过继承，子类可以共享父类的代码。父类中通用的属性和方法可以被多个子类继承和使用，提高了代码的重用性，并减少了开发实践和成本。</li><li><strong>继承的层次结构</strong>：继承可以形成一个层次结构，其中一个父类可以有多个子类，而子类又可以成为其他子类的父类。这种层次结构可以更好地组织和管理代码，使得代码更加结构化和模块化。</li></ol><h4 id="继承的优势"><a href="#继承的优势" class="headerlink" title="继承的优势"></a>继承的优势</h4><ol><li><strong>代码重用</strong>：继承允许子类重用父类的代码，减少了代码的冗余，提高了代码的可维护性和复用性。</li><li><strong>扩展性</strong>：通过继承，子类可以在父类的基础上添加新的属性和方法，实现对父类的扩展，使得子类具有更多的功能。</li><li><strong>类型的兼容性</strong>：由于子类继承了父类的特性，子类可以被当作父类的实例来使用。这样在需要父类类型的地方，可以使用子类的实例，增加了代码的灵活性和可扩展性。</li></ol><p>需要注意的是，虽然继承可以提供代码重用和扩展的好处，但过度使用继承可能导致代码的复杂性和耦合性增加。因此，在设计代码时，应该合理使用继承，并遵循单一责任原则和开闭原则，保持代码的简介和灵活。</p><h4 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h4><ul><li>单继承是指一个子类只继承一个父类。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># A 继承自 object 根类</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"父类A的方法"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># B 类继承自 A类</span>    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"子类B的方法"</span><span class="token punctuation">)</span>b <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 子类对象使用自己的方法</span>b<span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 子类对象使用父类的方法，如果父类没有改方法，则继续向上查找，直到根类</span>b<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092259672.png" alt="image-20240709225911572"></p><h4 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h4><ul><li>在子类中，可以对父类中的方法实现进行重写，实现新的功能。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># A 继承自 object 根类</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"父类A的方法"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 子类重写父类方法</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"子类B的方法"</span><span class="token punctuation">)</span>b <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 当子类方法与父类方法同名时，调用子类方法</span>b<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092300098.png" alt="image-20240709230011001"></p><h4 id="super"><a href="#super" class="headerlink" title="super()"></a>super()</h4><ul><li>如果在子类中还要使用父类的方法，可以使用<code>super()</code>函数来调用父类中的方法。</li><li>比如在重写父类方法时，还要保留父类方法的功能。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># A 继承自 object 根类</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"父类A的方法"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 子类重写父类方法</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 使用 super() 调用父类方法</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"子类B的方法"</span><span class="token punctuation">)</span>b <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 当子类方法与父类方法同名时，调用子类方法</span>b<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092301026.png" alt="image-20240709230110933"></p><h4 id="单继承的初始化"><a href="#单继承的初始化" class="headerlink" title="单继承的初始化"></a>单继承的初始化</h4><ul><li>在子类对象初始化时，需要给出父类初始化所需的参数，然后使用<code>super()</code>调用父类初始化方法去初始化父类的属性。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># A 继承自 object 根类</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>a<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>b <span class="token operator">=</span> bb <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092302815.png" alt="image-20240709230233712"></p><h4 id="继承的访问控制"><a href="#继承的访问控制" class="headerlink" title="继承的访问控制"></a>继承的访问控制</h4><ul><li>无论在方法的重写，还是初始化时，父类的工作就让父类自己去完成，子类只负责自己部分的实现。</li><li>比如：如果在初始化时，想在子类中初始化父类的一个私有属性，这是不能实现的，但是可以调用父类的初始化方法对私有属性进行初始化。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># A 继承自 object 根类</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> a        self<span class="token punctuation">.</span>b <span class="token operator">=</span> b        self<span class="token punctuation">.</span>c <span class="token operator">=</span> c    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"A: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>a<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"B: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>b<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"C: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>c<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>d <span class="token operator">=</span> d    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"D: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>d<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>b <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092304999.png" alt="image-20240709230411902"></p><h4 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h4><ul><li>多继承是指一个子类可以同时继承多个父类，此时子类同时拥有多个父类中的属性和方法。</li></ul><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">class <span class="token function">FA</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    def fa_<span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"FA show Run..."</span><span class="token punctuation">)</span>class <span class="token function">FB</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    def fb_<span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"FB show Run..."</span><span class="token punctuation">)</span>class <span class="token function">S</span><span class="token punctuation">(</span>FA<span class="token punctuation">,</span> FB<span class="token punctuation">)</span><span class="token punctuation">:</span>    def s_<span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"S show Run..."</span><span class="token punctuation">)</span>s = <span class="token function">S</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s.s_<span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s.fa_<span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s.fb_<span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092307157.png" alt="image-20240709230749068"></p><h4 id="多继承同名方法查找顺序"><a href="#多继承同名方法查找顺序" class="headerlink" title="多继承同名方法查找顺序"></a>多继承同名方法查找顺序</h4><ul><li>如果在一个子类所继承的多个父类中，具有同名方法，那在调用该方法名的方法时，<strong>Python 会使用 C3 算法实现的 MRO（方法解析顺序）来确定查找的先后顺序，一般情况可以理解成是按继承类的书写顺序。</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">FA</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"FA show Run..."</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">FB</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"FB show Run..."</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">S</span><span class="token punctuation">(</span>FA<span class="token punctuation">,</span> FB<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">s_show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"S show Run..."</span><span class="token punctuation">)</span>s <span class="token operator">=</span> S<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>s_show<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092309935.png" alt="image-20240709230932827"></p><h4 id="多继承初始化"><a href="#多继承初始化" class="headerlink" title="多继承初始化"></a>多继承初始化</h4><ul><li>在多继承中，由于有多个父类，每个父类的属性都需要单独初始化，这时<code>super()</code>函数只能引用继承书写顺序上的第一个父类，其它的父类是无法通过<code>super()</code>引用的，所以也就无法利用<code>super()</code>函数进行初始化。</li><li>此时，可以使用直接指定父类名的方式调用该父类中的方法。次方法也适用于多继承中的方法重写。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">FA</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token keyword">class</span> <span class="token class-name">FB</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token keyword">class</span> <span class="token class-name">S</span><span class="token punctuation">(</span>FA<span class="token punctuation">,</span> FB<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>        FA<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">)</span>        FB<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> b<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>c <span class="token operator">=</span> cc <span class="token operator">=</span> S<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092310664.png" alt="image-20240709231043484"></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>多态是面向对象编程中三大概念之三，它允许不同的对象对同一个消息作出不同的响应。</p><p>简单说，多态是指同一个方法或操作符，在不同的对象实例上可以有不同的行为。这意味着可以通过一个共同的接口或基类，引用不同的子类对象，并根据实际的对象类型来调用相应的方法。</p><h4 id="多态的优点"><a href="#多态的优点" class="headerlink" title="多态的优点"></a>多态的优点</h4><ol><li><strong>简化代码</strong>：通过以相同的方式处理不同的对象，并使用统一的接口进行编程，可以降低代码的复杂性和重要性。</li><li><strong>可维护性</strong>：多态可以提高代码的可维护性。当需要新增一种子类时，不需要修改已有的代码，只需要创建一个新的子类并继承父类，就能够在原有代码的基础上，实现新的功能。</li><li><strong>扩展性</strong>：由于多态允许在不修改已有代码的情况下新增功能，因此可以更容易地对系统进行扩展和适应需求的变化。</li></ol><p>多态通常通过继承和方法重写来实现。在继承关系中，子类可以重写父类的方法，在父类引用子类对象时，调用的实际上是子类重写后的方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 中医</span><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">cure</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"使用中医方法进行治疗"</span><span class="token punctuation">)</span><span class="token comment"># 西医</span><span class="token keyword">class</span> <span class="token class-name">Son</span><span class="token punctuation">(</span>Father<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">cure</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"使用西医方法进行治疗"</span><span class="token punctuation">)</span><span class="token comment"># 患者</span><span class="token keyword">class</span> <span class="token class-name">Patient</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">needDoctor</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> doctor<span class="token punctuation">)</span><span class="token punctuation">:</span>        doctor<span class="token punctuation">.</span>cure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    oldDoctor <span class="token operator">=</span> Father<span class="token punctuation">(</span><span class="token punctuation">)</span>    newDoctor <span class="token operator">=</span> Son<span class="token punctuation">(</span><span class="token punctuation">)</span>    patient <span class="token operator">=</span> Patient<span class="token punctuation">(</span><span class="token punctuation">)</span>    patient<span class="token punctuation">.</span>needDoctor<span class="token punctuation">(</span>oldDoctor<span class="token punctuation">)</span>    patient<span class="token punctuation">.</span>needDoctor<span class="token punctuation">(</span>newDoctor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092313216.png" alt="image-20240709231336132"></p><h4 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h4><ul><li>鸭子类型（Duck Typing）是一种动态类型的概念，它源自于“走起来像鸭子、叫声像鸭子、看起来像鸭子，那么它就是鸭子”的观念。</li><li>在鸭子类型中，一个对象的适用性不是由它的类或接口决定，而是由它的方法和属性是否与所需的方法和属性匹配来决定。换句话说，只要一个对象具有特定方法和属性，我们就可以将其视为具有相同类型。</li><li>举个例子，如果需要一个能“叫”的对象，并且某个对象有一个名为<code>quack()</code>的方法，那我们可以将对象视为一个“鸭子”，不管它实际是什么类的对象。换句话说，我们关注的是对象的行为而不是其类型。</li><li>鸭子类型在动态语言中特别常见，比如python。在python中，不需要显式地继承或实现接口，只要一个对象具有必需的方法和属性，它就可以被认为是某种类型。这使得python具有灵活性和简洁性，可以更自由地处理不同类型的对象。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 中医</span><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">cure</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"使用中医方法进行治疗"</span><span class="token punctuation">)</span><span class="token comment"># 西医</span><span class="token keyword">class</span> <span class="token class-name">Son</span><span class="token punctuation">(</span>Father<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">cure</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"使用西医方法进行治疗"</span><span class="token punctuation">)</span><span class="token comment"># 兽医</span><span class="token keyword">class</span> <span class="token class-name">AnimalDoctor</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">cure</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"使用兽医方法进行治疗"</span><span class="token punctuation">)</span><span class="token comment"># 患者</span><span class="token keyword">class</span> <span class="token class-name">Patient</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">needDoctor</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> doctor<span class="token punctuation">)</span><span class="token punctuation">:</span>        doctor<span class="token punctuation">.</span>cure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    oldDoctor <span class="token operator">=</span> Father<span class="token punctuation">(</span><span class="token punctuation">)</span>    newDoctor <span class="token operator">=</span> Son<span class="token punctuation">(</span><span class="token punctuation">)</span>    animalDoctor <span class="token operator">=</span> AnimalDoctor<span class="token punctuation">(</span><span class="token punctuation">)</span>    patient <span class="token operator">=</span> Patient<span class="token punctuation">(</span><span class="token punctuation">)</span>    patient<span class="token punctuation">.</span>needDoctor<span class="token punctuation">(</span>oldDoctor<span class="token punctuation">)</span>    patient<span class="token punctuation">.</span>needDoctor<span class="token punctuation">(</span>newDoctor<span class="token punctuation">)</span>    patient<span class="token punctuation">.</span>needDoctor<span class="token punctuation">(</span>animalDoctor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092351025.png" alt="image-20240709235156925"></p><ul><li>鸭子类型通常是动态语言的特性，相比于静态类型语言，它在编译时没有类型检查。这意味着无法在编译对类型不匹配或缺失方法和属性进行检测，可能会导致运行时错误。</li></ul><h4 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h4><p>Python 中提供了<code>isinstance()</code>和<code>issubclass()</code>两个函数，用来对数据进行检查判断。</p><h5 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance()"></a>isinstance()</h5><ul><li>Python 中使用<code>isinstance()</code>来检查一个实例的类型。</li><li>格式：<code>isinstance(obj, type)</code></li><li><strong>判断 obj 对象是否与 Type 指定类型或其父类类型的实例。</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 中医</span><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">cure</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"使用中医方法进行治疗"</span><span class="token punctuation">)</span><span class="token comment"># 西医</span><span class="token keyword">class</span> <span class="token class-name">Son</span><span class="token punctuation">(</span>Father<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">cure</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"使用西医方法进行治疗"</span><span class="token punctuation">)</span><span class="token comment"># 兽医</span><span class="token keyword">class</span> <span class="token class-name">AnimalDoctor</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">cure</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"使用兽医方法进行治疗"</span><span class="token punctuation">)</span><span class="token comment"># 患者</span><span class="token keyword">class</span> <span class="token class-name">Patient</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">needDoctor</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> doctor<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>doctor<span class="token punctuation">,</span> Father<span class="token punctuation">)</span><span class="token punctuation">:</span>            doctor<span class="token punctuation">.</span>cure<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"此医生的方法不适用于病人"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    oldDoctor <span class="token operator">=</span> Father<span class="token punctuation">(</span><span class="token punctuation">)</span>    newDoctor <span class="token operator">=</span> Son<span class="token punctuation">(</span><span class="token punctuation">)</span>    animalDoctor <span class="token operator">=</span> AnimalDoctor<span class="token punctuation">(</span><span class="token punctuation">)</span>    patient <span class="token operator">=</span> Patient<span class="token punctuation">(</span><span class="token punctuation">)</span>    patient<span class="token punctuation">.</span>needDoctor<span class="token punctuation">(</span>oldDoctor<span class="token punctuation">)</span>    patient<span class="token punctuation">.</span>needDoctor<span class="token punctuation">(</span>newDoctor<span class="token punctuation">)</span>    patient<span class="token punctuation">.</span>needDoctor<span class="token punctuation">(</span>animalDoctor<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>newDoctor<span class="token punctuation">,</span> Father<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>newDoctor<span class="token punctuation">,</span> Son<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>newDoctor<span class="token punctuation">,</span> AnimalDoctor<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092354436.png" alt="image-20240709235450329"></p><h5 id="issubclass"><a href="#issubclass" class="headerlink" title="issubclass()"></a>issubclass()</h5><ul><li>Python 中还可以使用<code>issubclass()</code>来检查类的继承关系。</li><li>格式：<code>issubclass(TypeA， TypeB)</code></li><li><strong>判断 TypeA 是否 TypeB 的子类。</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 中医</span><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">cure</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"使用中医方法进行治疗"</span><span class="token punctuation">)</span><span class="token comment"># 西医</span><span class="token keyword">class</span> <span class="token class-name">Son</span><span class="token punctuation">(</span>Father<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">cure</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"使用西医方法进行治疗"</span><span class="token punctuation">)</span><span class="token comment"># 兽医</span><span class="token keyword">class</span> <span class="token class-name">AnimalDoctor</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">cure</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"使用兽医方法进行治疗"</span><span class="token punctuation">)</span><span class="token comment"># 患者</span><span class="token keyword">class</span> <span class="token class-name">Patient</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">needDoctor</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> doctor<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">issubclass</span><span class="token punctuation">(</span>doctor<span class="token punctuation">.</span>__class__<span class="token punctuation">,</span> Father<span class="token punctuation">)</span><span class="token punctuation">:</span>            doctor<span class="token punctuation">.</span>cure<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"此医生的方法不适用于病人"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    oldDoctor <span class="token operator">=</span> Father<span class="token punctuation">(</span><span class="token punctuation">)</span>    newDoctor <span class="token operator">=</span> Son<span class="token punctuation">(</span><span class="token punctuation">)</span>    animalDoctor <span class="token operator">=</span> AnimalDoctor<span class="token punctuation">(</span><span class="token punctuation">)</span>    patient <span class="token operator">=</span> Patient<span class="token punctuation">(</span><span class="token punctuation">)</span>    patient<span class="token punctuation">.</span>needDoctor<span class="token punctuation">(</span>oldDoctor<span class="token punctuation">)</span>    patient<span class="token punctuation">.</span>needDoctor<span class="token punctuation">(</span>newDoctor<span class="token punctuation">)</span>    patient<span class="token punctuation">.</span>needDoctor<span class="token punctuation">(</span>animalDoctor<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">issubclass</span><span class="token punctuation">(</span>Father<span class="token punctuation">,</span> Father<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">issubclass</span><span class="token punctuation">(</span>Son<span class="token punctuation">,</span> Father<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">issubclass</span><span class="token punctuation">(</span>Father<span class="token punctuation">,</span> Son<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">issubclass</span><span class="token punctuation">(</span>AnimalDoctor<span class="token punctuation">,</span> Father<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407092359401.png" alt="image-20240709235938280"></p><blockquote><p><code>__class__</code>是一个魔法属性，用来获取当前实例对象的类。</p></blockquote><h2 id="4、计算属性"><a href="#4、计算属性" class="headerlink" title="4、计算属性"></a>4、计算属性</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在封装类时，如果实例属性定义为公有属性，在使用过程中不安全，一般建议定义为私有属性，但是私有属性又不能在类的外部直接访问，此时，需要为私有实例属性提供访问的操作接口方法。</p><h3 id="属性访问器和修改器"><a href="#属性访问器和修改器" class="headerlink" title="属性访问器和修改器"></a>属性访问器和修改器</h3><p>属性访问器：也称为 <code>Getter</code> 方法，用来返回某个属性的值，该方法无参数，但必须有返回值，一般以 <code>get_xxx</code> 命名。 属性修改器：也称为 <code>Setter</code> 方法，用来给某个属性值进行修改，该方法接收一个参数，且无返回值，一般以 <code>set_xxx</code> 命名。</p><pre class="line-numbers language-none"><code class="language-none">class Person:    def __init__(self, name):        self._name &#x3D; name    def get_name(self):        return self._name    def set_name(self, name):        self._name &#x3D; nameif __name__ &#x3D;&#x3D; &#39;__main__&#39;:    tom &#x3D; Person(&quot;tom&quot;)    print(tom.get_name())    tom.set_name(&quot;Tom&quot;)    print(tom.get_name())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然实现了需求，但此方式在使用实例属性时，变成了以方法形式使用，不够简洁。</p><h3 id="property-装饰器"><a href="#property-装饰器" class="headerlink" title="@property 装饰器"></a><code>@property</code> 装饰器</h3><p>Python 提供了一个名为 <code>property</code> 的装饰器，通过该装饰器可以为私有属性提供访问器和修改器方法，但在使用时，依然可以以属性的形式进行使用。</p><ul><li><p>提供数据访问功能（getter）</p><ul><li>计算属性</li><li>语法：使用<code>@property</code>装饰器</li><li>调用：<code>实例.方法名</code></li></ul></li><li><p>提供数据操作功能（setter）</p><ul><li>语法：使用<code>@计算属性名.setter</code>装饰器</li><li>调用：<code>实例.方法名</code></li></ul></li></ul><p>注意：</p><ul><li>当定义计算属性时，必须先使用 <code>property</code> 装饰器定义计算属性的访问器访问，然后才可以利用计算属性名定义修改器方法。</li><li>访问器方法和修改器方法不需要再使用 <code>get</code> 和 <code>set</code> 做为前缀。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_name <span class="token operator">=</span> name    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">username</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_name    <span class="token decorator annotation punctuation">@username<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">username</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    tom <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>username<span class="token punctuation">)</span>    tom<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">"Tom"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计算属性的优势"><a href="#计算属性的优势" class="headerlink" title="计算属性的优势"></a>计算属性的优势</h3><ul><li>可以隐藏实现细节</li><li>可以进行访问控制</li><li>可以进行数据验证</li><li>不改变属性操作方式基础上完成复杂的逻辑控制</li></ul><h2 id="5、类型注解"><a href="#5、类型注解" class="headerlink" title="5、类型注解"></a>5、类型注解</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Python 是一种动态类型语言，变量的类型是程序在运行时通过保存的数据动态推导得到，该特性使得在开发过程中不必过度关注变量的类型。</p><p>但随着项目越来越大，代码也就会越来越多，在这种情况下，很容易不记得某一个方法的入参类型是什么，一旦传入了错误类型的参数，再加上 Python 是解释性语言，只有运行时候才能发现问题， 这对大型项目来说是一个巨大的灾难。</p><p>在 Python3.5 版本中，引进了一种新的语法来给函数或变量增加注释，即类型注解。</p><p>Python 类型注解是一种可选的静态类型检查机制，它在注释中标注变量的类型，以提高程序的可读性和可维护性。</p><p>类型注解的特征如下：</p><ul><li>类型检查，防止运行时出现参数和返回值类型、变量类型不符合。</li><li>作为开发文档附加说明，方便使用者调用时传入和返回参数类型。</li><li>在函数参数中使用时，形参变量会根据类型进行相应的代码提示。</li><li>PyCharm 目前支持 <code>typing</code> 检查，参数类型错误会黄色提示。</li><li>加入类型注解后并不会影响程序的运行，不会报正式的错误，只有提醒。</li></ul><h3 id="类型注解基本使用"><a href="#类型注解基本使用" class="headerlink" title="类型注解基本使用"></a>类型注解基本使用</h3><p>Python 类型注解采用冒号 <code>:</code> 后跟预期类型的方式进行标注。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">num<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>该代码的作用是定义 <code>num</code> 变量，并通过类型注解约定 <code>num</code> 变量需要接收 <code>int</code> 类型的数据。</p><p>但类型注解只会对代码进行提醒，并不会报错误提示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">num<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该代码中，约定 <code>num</code> 接收 <code>int</code> 类型数据，前两次赋值没有问题，但第三次赋值时，类型不符，IDE 会以黄色背景进行提示，内容为 <code>Expected type &#39;int&#39;, got &#39;str&#39; instead</code> ，但这并不是错误提示，该代码依然可以正常执行。</p><h3 id="基本类型注解"><a href="#基本类型注解" class="headerlink" title="基本类型注解"></a>基本类型注解</h3><p>除了在变量定义时使用类型注释，更多的情况下是在函数的参数与返回值中使用注释注解，实现上下文的关联。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> msg<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>n: int</code> : 指定了输入参数 <code>n</code> 为 <code>int</code> 类型，</li><li><code>msg: str</code> : 指定了输入参数 <code>msg</code> 为 <code>str</code> 类型，</li><li><code>-&gt; None</code> : 指定了 <code>show</code> 函数的返回值为 <code>None</code> 类型，即无返回值。</li></ul><p>在调用函数书写参数时，IDE 会根据函数中的类型注解对函数进行参数及类型的提示。</p><h3 id="容器类型注解"><a href="#容器类型注解" class="headerlink" title="容器类型注解"></a>容器类型注解</h3><h4 id="tuple-类型注解"><a href="#tuple-类型注解" class="headerlink" title="tuple 类型注解"></a>tuple 类型注解</h4><h5 id="元组基本使用"><a href="#元组基本使用" class="headerlink" title="元组基本使用"></a>元组基本使用</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>data <span class="token punctuation">:</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="指定元组中元素类型"><a href="#指定元组中元素类型" class="headerlink" title="指定元组中元素类型"></a>指定元组中元素类型</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>data <span class="token punctuation">:</span> <span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 不符合注解类型</span>show<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 不符合注解类型</span>show<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 不符合注解类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于元组的不可变特殊性，当指定了元素类型，随之也指定了元组的元素个数，代码中约定传入具有一个整型数据元素的元组。</p><h5 id="指定元组中多个不同类型的元素"><a href="#指定元组中多个不同类型的元素" class="headerlink" title="指定元组中多个不同类型的元素"></a>指定元组中多个不同类型的元素</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>data <span class="token punctuation">:</span> <span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 多个类型数据要一一对应</span>show<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 不符合注解类型</span>show<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 不符合注解类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="指定元组中任意个不同类型的元素"><a href="#指定元组中任意个不同类型的元素" class="headerlink" title="指定元组中任意个不同类型的元素"></a>指定元组中任意个不同类型的元素</h5><p>使用任意类型时，需要使用 <code>typing</code> 模块中的 <code>Any</code> 类型，可变数量使用 <code>...</code> 表示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Any<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token builtin">tuple</span><span class="token punctuation">[</span>Any<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="list-类型注解"><a href="#list-类型注解" class="headerlink" title="list 类型注解"></a>list 类型注解</h4><p>由于列表的可变特性，使用相对简单。</p><h5 id="列表基本使用"><a href="#列表基本使用" class="headerlink" title="列表基本使用"></a>列表基本使用</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="列表中指定元素类型"><a href="#列表中指定元素类型" class="headerlink" title="列表中指定元素类型"></a>列表中指定元素类型</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 不符合注解类型</span>show<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在指定元素中元素类型时，实参列表中只要存在注解类型数据，即使包含了其它类型也认为符合类型要求。</p><h4 id="dict-类型注解"><a href="#dict-类型注解" class="headerlink" title="dict 类型注解"></a>dict 类型注解</h4><p>字典与列表类似，具有元素个数可变性，所以只需指定 <code>key</code> 与 <code>value</code> 的类型即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token number">97</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"c"</span><span class="token punctuation">:</span> <span class="token string">"CC"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment"># 不符合注解类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Union-类型注解"><a href="#Union-类型注解" class="headerlink" title="Union 类型注解"></a>Union 类型注解</h3><p>可以使用 <code>typing</code> 模块中的 <code>Union</code> 指定多个类型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Union<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">float</span><span class="token punctuation">,</span><span class="token builtin">bool</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Sequence-类型注解"><a href="#Sequence-类型注解" class="headerlink" title="Sequence 类型注解"></a>Sequence 类型注解</h3><p>可以使用 <code>typing</code> 模块中的 <code>Sequence</code> 指定任意可迭代类型。</p><p><code>Sequence</code> 所提示的是任何可以被索引的数据: 列表,元祖,字符串等。</p><p>注意：在定义函数时 <code>[]</code> 中只可以指定一个数据类型，意味着在传入的列表或者元组等可索引数据时，内部元素的数据类型需要是统一的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Sequence<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> Sequence<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Optional-类型注解"><a href="#Optional-类型注解" class="headerlink" title="Optional 类型注解"></a>Optional 类型注解</h3><p>当函数的参数有默认值，导致参数不是必须要传入的，那么你可以尝试使用 <code>typing</code> 模块中的<code>Optional</code> 来做到类型提示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Callable-类型注解"><a href="#Callable-类型注解" class="headerlink" title="Callable 类型注解"></a>Callable 类型注解</h3><p>当需要表明某个函数的参数是函数时可以使用 <code>typing</code> 模块中的 <code>Callable</code> 作为类型提示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Callable<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>func<span class="token punctuation">:</span> Callable<span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    func<span class="token punctuation">(</span>data<span class="token punctuation">)</span>callback<span class="token punctuation">(</span>show<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义类作为类型注解"><a href="#自定义类作为类型注解" class="headerlink" title="自定义类作为类型注解"></a>自定义类作为类型注解</h3><p>自定义类可以直接做为类型进行注解使用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> Person<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>show<span class="token punctuation">(</span>Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八、Maven在IDEA中使用</title>
      <link href="/posts/a5223c76.html"/>
      <url>/posts/a5223c76.html</url>
      
        <content type="html"><![CDATA[<h1 id="八、Maven在IDEA中使用"><a href="#八、Maven在IDEA中使用" class="headerlink" title="八、Maven在IDEA中使用"></a>八、Maven在IDEA中使用</h1><h2 id="1、创建父工程"><a href="#1、创建父工程" class="headerlink" title="1、创建父工程"></a>1、创建父工程</h2><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071845994.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071845610.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071845525.png"></p><h2 id="2、开启自动导入"><a href="#2、开启自动导入" class="headerlink" title="2、开启自动导入"></a>2、开启自动导入</h2><p>创建 Project 后，IDEA 会自动弹出下面提示，我们选择『Enable Auto-Import』，意思是启用自动导入。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071846779.png"></p><p>这个自动导入一定要开启，因为 Project、Module 新创建或 pom.xml 每次修改时都应该让 IDEA 重新加载 Maven 信息。这对 Maven 目录结构认定、Java 源程序编译、依赖 jar 包的导入都有非常关键的影响。</p><p>另外也可以通过 IDEA 的 Settings 设置来开启：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071846715.png"></p><h2 id="3、配置-Maven-信息"><a href="#3、配置-Maven-信息" class="headerlink" title="3、配置 Maven 信息"></a>3、配置 Maven 信息</h2><p>每次创建 Project 后都需要设置 Maven 家目录位置，否则 IDEA 将使用内置的 Maven 核心程序（不稳定）并使用默认的本地仓库位置。这样一来，我们在命令行操作过程中已下载好的 jar 包就白下载了，默认的本地仓库通常在 C 盘，还影响系统运行。</p><p>配置之后，IDEA 会根据我们在这里指定的 Maven 家目录自动识别到我们在 settings.xml 配置文件中指定的本地仓库。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071847291.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071847999.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071847328.png"></p><h2 id="4、创建-Java-模块工程"><a href="#4、创建-Java-模块工程" class="headerlink" title="4、创建 Java 模块工程"></a>4、创建 Java 模块工程</h2><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071848604.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071848351.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071849097.png"></p><h2 id="5、执行Maven命令"><a href="#5、执行Maven命令" class="headerlink" title="5、执行Maven命令"></a>5、执行Maven命令</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071849142.png"></p><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071849752.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071850565.png"></p><p>如果有需要，还可以给命令后面附加参数：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071850146.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -D 表示后面要附加命令的参数，字母 D 和后面的参数是紧挨着的，中间没有任何其它字符</span><span class="token comment"># maven.test.skip=true 表示在执行命令的过程中跳过测试</span>mvn clean <span class="token function">install</span> <span class="token parameter variable">-Dmaven.test.skip</span><span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071851725.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071851799.png"></p><h2 id="6、创建-Web-模块工程"><a href="#6、创建-Web-模块工程" class="headerlink" title="6、创建 Web 模块工程"></a>6、创建 Web 模块工程</h2><h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071851064.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071852680.png"></p><h3 id="修改打包方式"><a href="#修改打包方式" class="headerlink" title="修改打包方式"></a>修改打包方式</h3><p>Web 模块将来打包当然应该是 war 包。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Web-设定"><a href="#Web-设定" class="headerlink" title="Web 设定"></a>Web 设定</h3><p>首先打开项目结构菜单：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071852648.png"></p><p>然后到 Facets 下查看 IDEA 是否已经帮我们自动生成了 Web 设定。正常来说只要我们确实设置了打包方式为 war，那么 IDEA 就会自动生成 Web 设定。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071852747.png"></p><p>另外，对于 IDEA 2018 诸版本没有自动生成 Web 设定，那么请参照下面两图，我们自己创建：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071853369.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071853631.png"></p><h3 id="借助IDEA生成web-xml"><a href="#借助IDEA生成web-xml" class="headerlink" title="借助IDEA生成web.xml"></a>借助IDEA生成web.xml</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071853331.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071854843.png"></p><h3 id="设置-Web-资源的根目录"><a href="#设置-Web-资源的根目录" class="headerlink" title="设置 Web 资源的根目录"></a>设置 Web 资源的根目录</h3><p>结合 Maven 的目录结构，Web 资源的根目录需要设置为 src&#x2F;main&#x2F;webapp 目录。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071854871.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071854487.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071854065.png"></p><h2 id="7、工程导入"><a href="#7、工程导入" class="headerlink" title="7、工程导入"></a>7、工程导入</h2><p>Maven工程除了自己创建的，还有很多情况是别人创建的。而为了参与开发或者是参考学习，我们都需要导入到 IDEA 中。下面我们分几种不同情况来说明：</p><h3 id="来自版本控制系统"><a href="#来自版本控制系统" class="headerlink" title="来自版本控制系统"></a>来自版本控制系统</h3><p>目前我们通常使用的都是 Git（本地库） + 码云（远程库）的版本控制系统，结合 IDEA 的相关操作方式请点<a href="http://heavy_code_industry.gitee.io/code_heavy_industry/pro008-Git/lecture/chapter05/verse03.html">这里 (opens new window)</a>查看克隆远程库部分。</p><h3 id="来自工程目录"><a href="#来自工程目录" class="headerlink" title="来自工程目录"></a>来自工程目录</h3><p>直接使用 IDEA 打开工程目录即可。下面咱们举个例子：</p><h4 id="工程压缩包"><a href="#工程压缩包" class="headerlink" title="工程压缩包"></a>工程压缩包</h4><p>假设别人发给我们一个 Maven 工程的 zip 压缩包：maven-rest-demo.zip。从码云或GitHub上也可以以 ZIP 压缩格式对项目代码打包下载。</p><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><p>如果你的所有 IDEA 工程有一个专门的目录来存放，而不是散落各处，那么首先我们就把 ZIP 包解压到这个指定目录中。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071855419.png"></p><h4 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h4><p>只要我们确认在解压目录下可以直接看到 pom.xml，那就能证明这个解压目录就是我们的工程目录。那么接下来让 IDEA 打开这个目录就可以了。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071856123.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071856264.png"></p><h4 id="设置-Maven-核心程序位置"><a href="#设置-Maven-核心程序位置" class="headerlink" title="设置 Maven 核心程序位置"></a>设置 Maven 核心程序位置</h4><p>打开一个新的 Maven 工程，和新创建一个 Maven 工程是一样的，此时 IDEA 的 settings 配置中关于 Maven 仍然是默认值：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071856280.png"></p><p>所以我们还是需要像新建 Maven 工程那样，指定一下 Maven 核心程序位置：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071856913.png"></p><h2 id="8、模块导入"><a href="#8、模块导入" class="headerlink" title="8、模块导入"></a>8、模块导入</h2><h3 id="情景重现"><a href="#情景重现" class="headerlink" title="情景重现"></a>情景重现</h3><p>在实际开发中，通常会忽略模块（也就是module）所在的项目（也就是project）仅仅导入某一个模块本身。这么做很可能是类似这样的情况：比如基于 Maven 学习 SSM 的时候，做练习需要导入老师发给我们的代码参考。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071857106.png"></p><h3 id="导入-Java-类型模块"><a href="#导入-Java-类型模块" class="headerlink" title="导入 Java 类型模块"></a>导入 Java 类型模块</h3><h4 id="找到老师发的工程目录"><a href="#找到老师发的工程目录" class="headerlink" title="找到老师发的工程目录"></a>找到老师发的工程目录</h4><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071858607.png"></p><h4 id="复制我们想要导入的模块目录"><a href="#复制我们想要导入的模块目录" class="headerlink" title="复制我们想要导入的模块目录"></a>复制我们想要导入的模块目录</h4><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071858459.png"></p><h4 id="粘贴到我们自己工程目录下"><a href="#粘贴到我们自己工程目录下" class="headerlink" title="粘贴到我们自己工程目录下"></a>粘贴到我们自己工程目录下</h4><p>这个工程（project）是我们事先在 IDEA 中创建好的。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071859196.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071859675.png"></p><h4 id="在-IDEA-中执行导入"><a href="#在-IDEA-中执行导入" class="headerlink" title="在 IDEA 中执行导入"></a>在 IDEA 中执行导入</h4><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071859212.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071859834.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071900807.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071900885.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071900227.png"></p><h4 id="修改-pom-xml"><a href="#修改-pom-xml" class="headerlink" title="修改 pom.xml"></a>修改 pom.xml</h4><p>刚刚导入的 module 的父工程坐标还是以前的，需要改成我们自己的 project。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071900898.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071901496.png"></p><h4 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h4><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071901604.png"></p><h3 id="导入-Web-类型模块"><a href="#导入-Web-类型模块" class="headerlink" title="导入 Web 类型模块"></a>导入 Web 类型模块</h3><p>其它操作和上面演示的都一样，只是多一步：删除多余的、不正确的 web.xml 设置。如下图所示：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071901401.png"></p>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十八、Python文件和IO操作</title>
      <link href="/posts/48fb83cb.html"/>
      <url>/posts/48fb83cb.html</url>
      
        <content type="html"><![CDATA[<h1 id="十八、Python文件和IO操作"><a href="#十八、Python文件和IO操作" class="headerlink" title="十八、Python文件和IO操作"></a>十八、Python文件和IO操作</h1><h2 id="1、文件概念"><a href="#1、文件概念" class="headerlink" title="1、文件概念"></a>1、文件概念</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>实际开发中常常会遇到对数据进行 持久化 操作的场景，而实现数据持久化最直接简单的方式就是将数据保存到文件中。</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>文件是以计算机硬盘为载体存储在计算机上的信息集合，文件可以是文本文档、图片、程序等等。</p><p>计算机文件基本上分为二种：二进制文件（没有统一的字符编码）和纯文本文件（有统一的编码，可以被看做存储在磁盘上的长字符串）。</p><ul><li>纯文本文件编码格式常见的有 ASCII、ISO-8859-1、GB2312、GBK、UTF-8、UTF-16 等。</li><li>二进制文件与文本文件的一个最主要的区别在于是否有统一的字符编码格式，二进制文件顾名思义是直接由0与1组成，无统一的字符编码。如图片文件（jpg、png），视频文件（avi）等。</li></ul><h2 id="2、File-对象操作"><a href="#2、File-对象操作" class="headerlink" title="2、File 对象操作"></a>2、File 对象操作</h2><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><p>在Python中通过内置的<code>open</code>函数，我们可以指定文件名、操作模式、编码信息等来获得操作文件的对象，接下来就可以对文件进行读写操作了。</p><h4 id="open-函数"><a href="#open-函数" class="headerlink" title="open 函数"></a>open 函数</h4><p>你必须先用Python内置的open()函数打开一个文件，创建一个file对象，相关的方法才可以调用它进行读写。</p><p>语法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">file</span> <span class="token builtin">object</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name <span class="token punctuation">[</span><span class="token punctuation">,</span> access_mode<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> encoding<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>各个参数的细节如下：</p><ul><li>file_name：file_name变量是一个包含了你要访问的文件名称的字符串值。</li><li>access_mode：access_mode决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。</li><li>encoding：指定编码（如果不指定，默认值是None，那么在读取文件时使用的是操作系统默认的编码）</li></ul><h5 id="打开文件的模式"><a href="#打开文件的模式" class="headerlink" title="打开文件的模式"></a>打开文件的模式</h5><table><thead><tr><th align="center">操作模式</th><th align="left">解释</th></tr></thead><tbody><tr><td align="center"><code>r</code></td><td align="left">只读【默认模式，文件必须存在，不存在则抛出异常】</td></tr><tr><td align="center"><code>w</code></td><td align="left">只写，写之前会清空文件的内容，如果文件不存在，会创建新文件</td></tr><tr><td align="center"><code>a</code></td><td align="left">追加的方式，在原本内容中继续写，如果文件不存在，则会创建新文件</td></tr><tr><td align="center"><code>r+</code></td><td align="left">可读可写</td></tr><tr><td align="center"><code>w+</code></td><td align="left">打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td align="center"><code>a+</code></td><td align="left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="center"><code>b</code></td><td align="left">rb、wb、ab、rb+、wb+、ab+意义和上面一样，用于二进制文件操作</td></tr></tbody></table><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407071437252.png"></p><h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><h4 id="close-函数"><a href="#close-函数" class="headerlink" title="close 函数"></a>close 函数</h4><p>File 对象的 close（）方法刷新缓冲区里任何还没写入的信息，并关闭该文件，这之后便不能再进行写入。</p><p>当一个文件对象的引用被重新指定给另一个文件时，Python 会关闭之前的文件。用 close（）方法关闭文件是一个很好的习惯。</p><p>语法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fileObject<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><h4 id="write-函数"><a href="#write-函数" class="headerlink" title="write 函数"></a>write 函数</h4><ul><li><code>write()</code>方法用于向文件中写入指定字符串。如果文件打开模式为<code>b</code>，则要将字符串转换成<code>bytes</code>类型的二进制字符串，函数返回成功写入数据的长度。</li><li>格式：<code>fileObject.write( [str] )</code></li></ul><blockquote><p>write()方法不会在字符串的结尾添加换行符(‘\n’)：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 以写入文件打开 index.html 文件</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token comment"># 写入数据</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"&lt;h1>文件写入标题&lt;/h1>"</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"&lt;p>文件写入内容。。。。。。&lt;/p>"</span><span class="token punctuation">)</span><span class="token comment"># 关闭文件</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="writelines-方法"><a href="#writelines-方法" class="headerlink" title="writelines()方法"></a>writelines()方法</h4><ul><li><code>writelines()</code> 方法用于向文件中写入一序列的字符串。</li><li>这一序列字符串可以是由迭代对象产生的，如一个字符串列表。</li><li>注意：不要被方法名所迷惑，如果每个元素独占一行，需要在数据后指定换行符 <code>\n</code>。</li><li>格式：<code>fileObject.writelines(seq)</code></li></ul><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">datas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"AAAAAAAAAAAA\n"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"BBBBBBBBBBBB\n"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"CCCCCCCCCCCC\n"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"DDDDDDDDDDDD\n"</span></span><span class="token punctuation">]</span>file <span class="token operator">=</span> <span class="token keyword">open</span><span class="token punctuation">(</span>'data<span class="token punctuation">.</span>txt'<span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"w"</span></span><span class="token punctuation">)</span>file<span class="token punctuation">.</span><span class="token function">writelines</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span>file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><h4 id="read-函数"><a href="#read-函数" class="headerlink" title="read()函数"></a>read()函数</h4><ul><li><code>read()</code> 方法用于从文件读取指定的字节数，如果未给定或为负则读取所有。</li></ul><ul><li>格式：<code>fileObject.read([count=-1])</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.txt'</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token comment"># 读取10个字符</span>content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment"># 读取所有内容</span>content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="readline-方法"><a href="#readline-方法" class="headerlink" title="readline()方法"></a>readline()方法</h4><ul><li><code>readline()</code> 方法用于从文件读取整行，包括 <code>\n</code> 字符。如果指定了一个非负数的参数，则返回指定大小的字节数，包括 <code>\n</code> 字符。</li><li>格式：<code>fileObject.readline(size=-1)</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.txt'</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token comment"># 读取10个字符</span>content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment"># 读取文件指针所在行剩余所有内容</span>content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="readlines-方法"><a href="#readlines-方法" class="headerlink" title="readlines()方法"></a>readlines()方法</h4><ul><li><code>readlines()</code> 方法用于读取所有行(直到结束符 EOF)并返回列表。</li><li>格式：<code>fileObject.readlines()</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.txt'</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token comment"># 以行为单位读取文件所有的内容</span>contents <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件定位"><a href="#文件定位" class="headerlink" title="文件定位"></a>文件定位</h3><h4 id="tell"><a href="#tell" class="headerlink" title="tell()"></a>tell()</h4><p>方法告诉你文件内的当前位置, 换句话说，下一次的读写会发生在文件开头这么多字节之后。</p><h4 id="seek"><a href="#seek" class="headerlink" title="seek()"></a>seek()</h4><p>seek（offset [,from]）：方法改变当前文件的位置。Offset变量表示要移动的字节数。From变量指定开始移动字节的参考位置。</p><p>如果from被设为0，这意味着将文件的开头作为移动字节的参考位置。如果设为1，则使用当前的位置作为参考位置。如果它被设为2，那么该文件的末尾将作为参考位置。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打开一个文件</span>fo <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span><span class="token builtin">str</span> <span class="token operator">=</span> fo<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"读取的字符串是 : "</span><span class="token punctuation">,</span> <span class="token builtin">str</span> <span class="token comment"># 查找当前位置</span>position <span class="token operator">=</span> fo<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"当前文件位置 : "</span><span class="token punctuation">,</span> position <span class="token comment"># 把指针再次重新定位到文件开头</span>position <span class="token operator">=</span> fo<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token builtin">str</span> <span class="token operator">=</span> fo<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"重新读取字符串 : "</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token comment"># 关闭打开的文件</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""读取的字符串是 :  www.runoob当前文件位置 :  10重新读取字符串 :  www.runoob"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、OS-对象操作"><a href="#3、OS-对象操作" class="headerlink" title="3、OS 对象操作"></a>3、OS 对象操作</h2><p>Python的 os 模块提供了帮你执行文件处理操作的方法，比如重命名和删除文件。要使用这个模块，你必须先导入它，然后才可以调用相关的各种功能。</p><h3 id="rename-方法"><a href="#rename-方法" class="headerlink" title="rename() 方法"></a>rename() 方法</h3><p>rename() 方法需要两个参数，当前的文件名和新文件名。</p><p>语法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>current_file_name<span class="token punctuation">,</span> new_file_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os <span class="token comment"># 重命名文件test1.txt到test2.txt。</span>os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span> <span class="token string">"test1.txt"</span><span class="token punctuation">,</span> <span class="token string">"test2.txt"</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove()方法"></a>remove()方法</h3><p>你可以用remove()方法删除文件，需要提供要删除的文件名作为参数。</p><p>语法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os <span class="token comment"># 删除一个已经存在的文件test2.txt</span>os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"test2.txt"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mkdir-方法"><a href="#mkdir-方法" class="headerlink" title="mkdir()方法"></a>mkdir()方法</h3><p>mkdir()方法：在当前目录下创建新的目录们。你需要提供一个包含了要创建的目录名称的参数。</p><p>语法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"newdir"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os <span class="token comment"># 创建目录test</span>os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="chdir-方法"><a href="#chdir-方法" class="headerlink" title="chdir()方法"></a>chdir()方法</h3><p>可以用chdir()方法来改变当前的目录。chdir()方法需要的一个参数是你想设成当前目录的目录名称。</p><p>语法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">"newdir"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os <span class="token comment"># 将当前目录改为"/home/newdir"</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">"/home/newdir"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="getcwd-方法"><a href="#getcwd-方法" class="headerlink" title="getcwd() 方法"></a>getcwd() 方法</h3><p>getcwd()方法显示当前的工作目录。</p><p>语法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os <span class="token comment"># 给出当前的目录</span><span class="token keyword">print</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rmdir-方法"><a href="#rmdir-方法" class="headerlink" title="rmdir()方法"></a>rmdir()方法</h3><p>rmdir()方法删除目录，目录名称以参数传递。</p><p>在删除这个目录之前，它的所有内容应该先被清除。</p><p>语法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">'dirname'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>目录的完全合规的名称必须被给出，否则会在当前目录下搜索该目录。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os <span class="token comment"># 删除”/tmp/test”目录</span>os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span> <span class="token string">"/tmp/test"</span>  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、文件异常处理"><a href="#4、文件异常处理" class="headerlink" title="4、文件异常处理"></a>4、文件异常处理</h2><p>如果<code>open</code>函数指定的文件并不存在或者无法打开，将引发异常状况导致程序崩溃。我们可以使用Python的异常机制进行适当的处理。</p><h3 id="try…catch…"><a href="#try…catch…" class="headerlink" title="try…catch…"></a>try…catch…</h3><p>在Python中，我们可以将那些在运行时可能会出现状况的代码放在<code>try</code>代码块中，在<code>try</code>代码块的后面可以跟上一个或多个<code>except</code>来捕获可能出现的异常状况，最后用<code>finally</code>代码块来关闭打开的文件，释放掉程序中获取的外部资源。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'致橡树.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'无法打开指定的文件!'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> LookupError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'指定了未知的编码!'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> UnicodeDecodeError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'读取文件时解码错误!'</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h3><p>如果不愿意在<code>finally</code>代码块中关闭文件对象释放资源，也可以使用上下文语法，<strong>通过<code>with</code>关键字指定文件对象的上下文环境并在离开上下文环境时自动释放文件资源</strong>，代码如下所示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'致橡树.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'无法打开指定的文件!'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> LookupError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'指定了未知的编码!'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> UnicodeDecodeError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'读取文件时解码错误!'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、读写JSON文件"><a href="#5、读写JSON文件" class="headerlink" title="5、读写JSON文件"></a>5、读写JSON文件</h2><p>通过上面的讲解，我们已经知道如何将文本数据和二进制数据保存到文件中，那么这里还有一个问题，如果希望把一个列表或者一个字典中的数据保存到文件中又该怎么做呢？答案是将数据以JSON格式进行保存。</p><p>JSON是“JavaScript Object Notation”的缩写，它本来是JavaScript语言中创建对象的一种字面量语法，现在已经被广泛的应用于跨平台跨语言的数据交换，原因很简单，因为JSON也是纯文本，任何系统任何编程语言处理纯文本都是没有问题的。目前JSON基本上已经取代了XML作为异构系统间交换数据的事实标准。</p><p>关于JSON的知识，更多的可以参考<a href="http://json.org/">JSON的官方网站</a>。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"骆昊"</span><span class="token punctuation">,</span>    <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">38</span><span class="token punctuation">,</span>    <span class="token property">"qq"</span><span class="token operator">:</span> <span class="token number">957658</span><span class="token punctuation">,</span>    <span class="token property">"friends"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"王大锤"</span><span class="token punctuation">,</span> <span class="token string">"白元芳"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"cars"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span><span class="token property">"brand"</span><span class="token operator">:</span> <span class="token string">"BYD"</span><span class="token punctuation">,</span> <span class="token property">"max_speed"</span><span class="token operator">:</span> <span class="token number">180</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token property">"brand"</span><span class="token operator">:</span> <span class="token string">"Audi"</span><span class="token punctuation">,</span> <span class="token property">"max_speed"</span><span class="token operator">:</span> <span class="token number">280</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token property">"brand"</span><span class="token operator">:</span> <span class="token string">"Benz"</span><span class="token punctuation">,</span> <span class="token property">"max_speed"</span><span class="token operator">:</span> <span class="token number">320</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON和Python对应关系"><a href="#JSON和Python对应关系" class="headerlink" title="JSON和Python对应关系"></a>JSON和Python对应关系</h3><p>JSON跟Python中的字典其实是一样的，事实上JSON的数据类型和Python的数据类型是很容易找到对应关系的，如下面两张表所示：</p><table><thead><tr><th>JSON</th><th>Python</th></tr></thead><tbody><tr><td>object</td><td>dict</td></tr><tr><td>array</td><td>list</td></tr><tr><td>string</td><td>str</td></tr><tr><td>number (int &#x2F; real)</td><td>int &#x2F; float</td></tr><tr><td>true &#x2F; false</td><td>True &#x2F; False</td></tr><tr><td>null</td><td>None</td></tr></tbody></table><table><thead><tr><th>Python</th><th>JSON</th></tr></thead><tbody><tr><td>dict</td><td>object</td></tr><tr><td>list, tuple</td><td>array</td></tr><tr><td>str</td><td>string</td></tr><tr><td>int, float, int- &amp; float-derived Enums</td><td>number</td></tr><tr><td>True &#x2F; False</td><td>true &#x2F; false</td></tr><tr><td>None</td><td>null</td></tr></tbody></table><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><p>json 模块主要有四个比较重要的函数，分别是：</p><ul><li><code>dump</code> - 将Python对象按照JSON格式序列化到文件中</li><li><code>dumps</code> - 将Python对象处理成JSON格式的字符串</li><li><code>load</code> - 将文件中的JSON数据反序列化成对象</li><li><code>loads</code> - 将字符串的内容反序列化成Python对象</li></ul><h3 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h3><h4 id="Case-1"><a href="#Case-1" class="headerlink" title="Case-1"></a>Case-1</h4><p>我们使用 Python 中的 json 模块就可以将字典或列表以 JSON 格式保存到文件中，代码如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    mydict <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'骆昊'</span><span class="token punctuation">,</span>        <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">38</span><span class="token punctuation">,</span>        <span class="token string">'qq'</span><span class="token punctuation">:</span> <span class="token number">957658</span><span class="token punctuation">,</span>        <span class="token string">'friends'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'王大锤'</span><span class="token punctuation">,</span> <span class="token string">'白元芳'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'cars'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span><span class="token string">'brand'</span><span class="token punctuation">:</span> <span class="token string">'BYD'</span><span class="token punctuation">,</span> <span class="token string">'max_speed'</span><span class="token punctuation">:</span> <span class="token number">180</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">'brand'</span><span class="token punctuation">:</span> <span class="token string">'Audi'</span><span class="token punctuation">,</span> <span class="token string">'max_speed'</span><span class="token punctuation">:</span> <span class="token number">280</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">'brand'</span><span class="token punctuation">:</span> <span class="token string">'Benz'</span><span class="token punctuation">,</span> <span class="token string">'max_speed'</span><span class="token punctuation">:</span> <span class="token number">320</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fs<span class="token punctuation">:</span>            json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>mydict<span class="token punctuation">,</span> fs<span class="token punctuation">)</span>    <span class="token keyword">except</span> IOError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'保存数据完成!'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Case-2"><a href="#Case-2" class="headerlink" title="Case-2"></a>Case-2</h4><p>使用<a href="http://docs.python-requests.org/zh_CN/latest/">requests</a>模块（封装得足够好的第三方网络访问模块）访问网络API获取国内新闻，如何通过json模块解析JSON数据并显示新闻标题。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://api.tianapi.com/guonei/?key=APIKey&amp;num=10'</span><span class="token punctuation">)</span>    data_model <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">for</span> news <span class="token keyword">in</span> data_model<span class="token punctuation">[</span><span class="token string">'newslist'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>news<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七、Maven私服</title>
      <link href="/posts/46b69363.html"/>
      <url>/posts/46b69363.html</url>
      
        <content type="html"><![CDATA[<h1 id="七、Maven私服"><a href="#七、Maven私服" class="headerlink" title="七、Maven私服"></a>七、Maven私服</h1><p>正式开发，不同的项目组开发不同的工程。</p><ul><li>dao 工程开发完毕，发布到私服。</li><li>service 从私服下载 dao</li></ul><h2 id="1、需求"><a href="#1、需求" class="headerlink" title="1、需求"></a>1、需求</h2><ul><li>问题：项目组编写了一个通用的工具类，其它项目组将类拷贝过去使用，当工具类修改bug后通过邮件发送给各各项目组，这种分发机制不规范可能导致工具类版本不统一。</li><li>解决方案：项目组将写的工具类通过 Maven 构建，打成 Jar，将 Jar 包发布到公司的 Maven 仓库中，公司其它项目通过 Maven 依赖管理从仓库自动下载 Jar 包。</li></ul><h2 id="2、分析"><a href="#2、分析" class="headerlink" title="2、分析"></a>2、分析</h2><ul><li><p><strong>公司在自己的局域网内搭建自己的远程仓库服务器，称为私服</strong>，私服服务器即是公司内部的 Maven 远程仓库，每个员工的电脑上安装 Maven 软件并且连接私服服务器，员工将自己开发的项目打成 Jar 并发布到私服服务器，其它项目组从私服服务器下载所依赖的构件（Jar）。</p></li><li><p>私服还充当一个代理服务器，当私服上没有 Jar 包会从互联网中央仓库自动下载，如下图：</p></li></ul><p><img src="/medias/loading.gif" data-original="E:/mycode/maven-guo/Maven/Maven笔记/img/43.png" alt="43"></p><h2 id="3、搭建私服环境"><a href="#3、搭建私服环境" class="headerlink" title="3、搭建私服环境"></a>3、搭建私服环境</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 查找nexus3镜像</span><span class="token function">docker</span> search nexus3<span class="token comment">## 拉取nexus3镜像</span><span class="token function">docker</span> pull docker.io/sonatype/nexus3<span class="token comment">## 查看镜像</span><span class="token function">docker</span> images<span class="token comment">## 创建目录</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/docker/nexus3/data<span class="token comment">## 运行nexus容器</span><span class="token function">docker</span> run <span class="token parameter variable">-id</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">--name</span><span class="token operator">=</span>nexus3 <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-p</span> <span class="token number">8081</span>:8081 <span class="token parameter variable">-p</span> <span class="token number">8082</span>:8082 <span class="token parameter variable">-p</span> <span class="token number">8083</span>:8083 <span class="token parameter variable">-v</span> /root/docker/nexus3/data:/nexus-data sonatype/nexus3 <span class="token comment">## 访问</span>http://192.168.100.205:8081<span class="token comment">## 右上角登录，用户名 admin</span><span class="token comment">## 密码，进入查看</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> nexus3 /bin/bash<span class="token function">vi</span> /nexus-data/admin.password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、将项目发布到私服"><a href="#4、将项目发布到私服" class="headerlink" title="4、将项目发布到私服"></a>4、将项目发布到私服</h2><h3 id="4-1-需求"><a href="#4-1-需求" class="headerlink" title="4.1 需求"></a>4.1 需求</h3><ul><li>企业中多个团队协作开发通常会将一些公用的组件、开发模块等发布到私服供其它团队或模块开发人员使用。</li><li>团队分别开发dao、service、web，某个团队开发完在dao会将dao发布到私服供service团队使用， 本例子会将dao工程打成 Jar 包发布到私服。</li></ul><p><img src="/medias/loading.gif" data-original="E:/mycode/maven-guo/Maven/Maven笔记/img/44.png" alt="44"></p><h3 id="4-2-配置"><a href="#4-2-配置" class="headerlink" title="4.2 配置"></a>4.2 配置</h3><ul><li><p>第一步： 需要在客户端即部署dao工程的电脑上配置 Maven环境，并修改 settings.xml 文件，配置连接私服的用户和密码 。</p><p>此用户名和密码用于私服校验，因为私服需要知道上传都 的账号和密码是否和私服中的账号和密码一致。</p></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>Maven-releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>Maven-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>releases 连接发布版本项目仓库</p><p>snapshots 连接测试版本项目仓库</p><p><img src="/medias/loading.gif" data-original="E:/mycode/maven-guo/Maven/Maven笔记/img/45.png" alt="45"></p><ul><li><p>第二步： 配置项目 pom.xml</p><p>配置私服仓库的地址，本公司的自己的 Jar 包会上传到私服的宿主仓库，根据工程的版本号决定上传到哪个宿主仓库，如果版本为 release 则上传到私服的 release 仓库，如果版本为 snapshot 则上传到私服的 snapshot 仓库</p></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--发布到私服仓库--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>distributionManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>Maven-releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus Release Repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://192.168.100.205:8081/repository/Maven-releases/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshotRepository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>Maven-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus Snapshot Repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://192.168.100.205:8081/repository/Maven-snapshots/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshotRepository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>distributionManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意：pom.xml这里 和 settings.xml 配置 对应！</li></ul><h3 id="4-3-操作命令"><a href="#4-3-操作命令" class="headerlink" title="4.3 操作命令"></a>4.3 操作命令</h3><p>将项目dao工程打成Jar包发布到私服：</p><ol><li>首先启动nexus</li><li>对dao工程执行deploy命令</li></ol><p>根据本项目pom.xml中version定义决定发布到哪个仓库，如果version定义为snapshot，执行deploy后查看nexus 的snapshot仓库，如果version定义为release则项目将发布到nexus的release仓库，本项目将发布到snapshot仓 库</p><h2 id="5、从私服下载-Jar-包"><a href="#5、从私服下载-Jar-包" class="headerlink" title="5、从私服下载 Jar 包"></a>5、从私服下载 Jar 包</h2><h3 id="5-1-需求"><a href="#5-1-需求" class="headerlink" title="5.1 需求"></a>5.1 需求</h3><ul><li>没有配置nexus之前，如果本地仓库没有，去中央仓库下载，通常在企业中会在局域网内部署一台私服服务器，有了私服本地项目首先去本地仓库找 Jar，如果没有找到则连接私服从私服下载 Jar 包，如果私服没有 Jar 包，私服同时作为代理服务器从中央仓库下载 Jar 包，这样做的好处是一方面由私服对公司项目的依赖 Jar 包统一管理，一方面提高下载速度，项目连接私服下载 Jar 包的速度要比项目连接中央仓库的速度快的多。</li></ul><h3 id="5-2-管理仓库组"><a href="#5-2-管理仓库组" class="headerlink" title="5.2 管理仓库组"></a>5.2 管理仓库组</h3><ul><li>nexus 中包括很多仓库，hosted 中存放的是企业自己发布的 Jar 包及第三方公司的 Jar 包，proxy 中存放的是中央仓库的 Jar，为了方便从私服下载 Jar 包可以将多个仓库组成一个仓库组，每个工程需要连接私服的仓库组下载Jar包。</li></ul><p><img src="/medias/loading.gif" data-original="E:/mycode/maven-guo/Maven/Maven笔记/img/46.png" alt="46"></p><p>上图中仓库组包括了本地仓库、代理仓库等。</p><h3 id="5-3-两种方式"><a href="#5-3-两种方式" class="headerlink" title="5.3 两种方式"></a>5.3 两种方式</h3><h4 id="5-3-1-pom-xml中配置"><a href="#5-3-1-pom-xml中配置" class="headerlink" title="5.3.1 pom.xml中配置"></a>5.3.1 pom.xml中配置</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus_public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus_public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://192.168.100.205:8081/repository/Maven-public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-2-在setting-xml中配置仓库（全局）"><a href="#5-3-2-在setting-xml中配置仓库（全局）" class="headerlink" title="5.3.2 在setting.xml中配置仓库（全局）"></a>5.3.2 在setting.xml中配置仓库（全局）</h4><p>在客户端的setting.xml中配置私服的仓库，由于setting.xml中没有repositories的配置标签需要使用proﬁle定义仓 库。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>              <span class="token comment">&lt;!--仓库id，repositories可以配置多个仓库，保证id不重复--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>local-nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--仓库地址，即nexus仓库组的地址--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://192.168.100.205:8081/repository/Maven-public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>                  <span class="token comment">&lt;!--是否下载releases构件--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>                  <span class="token comment">&lt;!--是否下载snapshots构件--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--插件仓库，Maven的运行依赖插件，也需要从私服下载插件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--插件仓库的id不允许重复，如果重复后边配置会覆盖前边--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Public Repositories<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://192.168.100.205:8081/repository/Maven-public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用proﬁle定义仓库需要激活才可生效。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfiles</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfiles</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、Maven配置</title>
      <link href="/posts/b813d57b.html"/>
      <url>/posts/b813d57b.html</url>
      
        <content type="html"><![CDATA[<h1 id="六、Maven配置"><a href="#六、Maven配置" class="headerlink" title="六、Maven配置"></a>六、Maven配置</h1><h2 id="1、properties"><a href="#1、properties" class="headerlink" title="1、properties"></a>1、properties</h2><p>可以理解成定义的版本变量</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--可以理解成定义的版本变量--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit_version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit_version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--junit--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;junit_version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--引入版本变量--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hamcrest-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hamcrest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、DependencyManagement-与-PluginManagement"><a href="#2、DependencyManagement-与-PluginManagement" class="headerlink" title="2、DependencyManagement 与 PluginManagement"></a>2、DependencyManagement 与 PluginManagement</h2><h3 id="DependencyManagement"><a href="#DependencyManagement" class="headerlink" title="DependencyManagement"></a>DependencyManagement</h3><p>dependencyManagement 一般统一在父模块中进行声明，使用：其实相当于一个对所有依赖 Jar 包进行版本管理统一声明管理，但父模块中只是声明，并不真导入。</p><h4 id="parent-pom-xml"><a href="#parent-pom-xml" class="headerlink" title="parent&#x2F;pom.xml"></a>parent&#x2F;pom.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-beanutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-beanutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="child-pom-xml"><a href="#child-pom-xml" class="headerlink" title="child&#x2F;pom.xml"></a>child&#x2F;pom.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.wanhe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-beanutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-beanutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>pluginManagement 理解同 dependencyManagement</li></ul>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、Maven聚合与继承</title>
      <link href="/posts/d5ee1b0c.html"/>
      <url>/posts/d5ee1b0c.html</url>
      
        <content type="html"><![CDATA[<h1 id="五、Maven聚合与继承"><a href="#五、Maven聚合与继承" class="headerlink" title="五、Maven聚合与继承"></a>五、Maven聚合与继承</h1><h2 id="1、聚合"><a href="#1、聚合" class="headerlink" title="1、聚合"></a>1、聚合</h2><h4 id="聚合的配置"><a href="#聚合的配置" class="headerlink" title="聚合的配置"></a>聚合的配置</h4><p>在总工程中配置 modules 即可：</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;modules&gt;    &lt;module&gt;module1&lt;&#x2F;module&gt;  &lt;module&gt;module2&lt;&#x2F;module&gt;  &lt;module&gt;module3&lt;&#x2F;module&gt;&lt;&#x2F;modules&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>my-app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 模块设置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>my-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 打包方式必须为pom方式--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、继承"><a href="#2、继承" class="headerlink" title="2、继承"></a>2、继承</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Maven工程之间，A 工程继承 B 工程</p><ul><li>B 工程：父工程</li><li>A 工程：子工程</li></ul><p>本质上是 A 工程的 pom.xml 中的配置继承了 B 工程中 pom.xml 的配置。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>在父工程中统一管理项目中的依赖信息，具体来说是管理依赖信息的版本。</p><p>它的背景是：</p><ul><li>对一个比较大型的项目进行了模块拆分。</li><li>一个 project 下面，创建了很多个 module。</li><li>每一个 module 都需要配置自己的依赖信息。</li></ul><p>它背后的需求是：</p><ul><li>在每一个 module 中各自维护各自的依赖信息很容易发生出入，不易统一管理。</li><li>使用同一个框架内的不同 jar 包，它们应该是同一个版本，所以整个项目中使用的框架版本需要统一。</li><li>使用框架时所需要的 jar 包组合（或者说依赖信息组合）需要经过长期摸索和反复调试，最终确定一个可用组合。这个耗费很大精力总结出来的方案不应该在新的项目中重新摸索。</li></ul><p>通过在父工程中为整个项目维护依赖信息的组合既保证了整个项目使用规范、准确的 jar 包；又能够将以往的经验沉淀下来，节约时间和精力。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>在一个工程中依赖多个 Spring 的 jar 包</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">[INFO] +- org.springframework:spring-core:jar:4.0.0.RELEASE:compile[INFO] | \- commons-logging:commons-logging:jar:1.1.1:compile[INFO] +- org.springframework:spring-beans:jar:4.0.0.RELEASE:compile[INFO] +- org.springframework:spring-context:jar:4.0.0.RELEASE:compile[INFO] +- org.springframework:spring-expression:jar:4.0.0.RELEASE:compile[INFO] +- org.springframework:spring-aop:jar:4.0.0.RELEASE:compile[INFO] | \- aopalliance:aopalliance:jar:1.0:compile1234567<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 Spring 时要求所有 Spring 自己的 jar 包版本必须一致。为了能够对这些 jar 包的版本进行统一管理，我们使用继承这个机制，将所有版本信息统一在父工程中进行管理。</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h4 id="创建父工程"><a href="#创建父工程" class="headerlink" title="创建父工程"></a>创建父工程</h4><p>创建的过程和前面创建 pro01-maven-java 一样。</p><p>工程名称：pro03-maven-parent</p><p>工程创建好之后，要修改它的打包方式：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.atguigu.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pro03-maven-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 当前工程作为父工程，它要去管理子工程，所以打包方式必须是 pom --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有打包方式为 pom 的 Maven 工程能够管理其他 Maven 工程。打包方式为 pom 的 Maven 工程中不写业务代码，它是专门管理其他 Maven 工程的工程。</p><h4 id="创建模块工程-子工程"><a href="#创建模块工程-子工程" class="headerlink" title="创建模块工程(子工程)"></a>创建模块工程(子工程)</h4><p>模块工程类似于 IDEA 中的 module，所以需要进入 pro03-maven-parent 工程的根目录，然后运行 mvn archetype:generate 命令来创建模块工程。</p><p>假设，我们创建三个模块工程：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071832503.png"></p><h4 id="查看被添加新内容的父工程-pom-xml"><a href="#查看被添加新内容的父工程-pom-xml" class="headerlink" title="查看被添加新内容的父工程 pom.xml"></a>查看被添加新内容的父工程 pom.xml</h4><p>下面 modules 和 module 标签是聚合功能的配置，Maven自动配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>pro04-maven-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>pro05-maven-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>pro06-maven-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解读子工程的pom-xml"><a href="#解读子工程的pom-xml" class="headerlink" title="解读子工程的pom.xml"></a>解读子工程的pom.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 使用parent标签指定当前工程的父工程 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 父工程的坐标找到父工程 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.atguigu.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pro03-maven-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 子工程的坐标 --></span><span class="token comment">&lt;!-- 如果子工程坐标中的groupId和version与父工程一致，那么可以省略 --></span><span class="token comment">&lt;!-- &lt;groupId>com.atguigu.maven&lt;/groupId> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pro04-maven-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- &lt;version>1.0-SNAPSHOT&lt;/version> --></span>12345678910111213<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在父工程中配置依赖的统一管理"><a href="#在父工程中配置依赖的统一管理" class="headerlink" title="在父工程中配置依赖的统一管理"></a>在父工程中配置依赖的统一管理</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 父工程统一管理依赖信息 --></span><span class="token comment">&lt;!-- 使用dependencyManagement标签配置对依赖的管理 --></span><span class="token comment">&lt;!-- 被管理的依赖并没有真正被引入到每个子工程 --></span><span class="token comment">&lt;!-- 在子工程中还要指定依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-expression<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="子工程中引用那些被父工程管理的依赖"><a href="#子工程中引用那些被父工程管理的依赖" class="headerlink" title="子工程中引用那些被父工程管理的依赖"></a>子工程中引用那些被父工程管理的依赖</h4><p>关键点：省略版本号</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 子工程引用父工程中的依赖信息时，可以把版本号去掉。  --></span><span class="token comment">&lt;!-- 把版本号去掉就表示子工程中这个依赖的版本由父工程决定。 --></span><span class="token comment">&lt;!-- 具体来说是由父工程的dependencyManagement来决定。 --></span><span class="token comment">&lt;!-- 子工程没写版本号，依赖的版本为父工程中管理的依赖版本；子工程写了版本号，与父工程不一致，子工程的版本会覆盖父工程的版本 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-expression<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在父工程中升级依赖信息的版本"><a href="#在父工程中升级依赖信息的版本" class="headerlink" title="在父工程中升级依赖信息的版本"></a>在父工程中升级依赖信息的版本</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在子工程中运行mvn dependency:list，效果如下：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">[INFO] org.springframework:spring-aop:jar:4.1.4.RELEASE:compile  [INFO] org.springframework:spring-core:jar:4.1.4.RELEASE:compile  [INFO] org.springframework:spring-context:jar:4.1.4.RELEASE:compile  [INFO] org.springframework:spring-beans:jar:4.1.4.RELEASE:compile  [INFO] org.springframework:spring-expression:jar:4.1.4.RELEASE:compile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在父工程中声明自定义属性"><a href="#在父工程中声明自定义属性" class="headerlink" title="在父工程中声明自定义属性"></a>在父工程中声明自定义属性</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 通过自定义属性，统一指定Spring的版本 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 自定义标签，维护Spring版本数据 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>atguigu.spring.version</span><span class="token punctuation">></span></span>4.3.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>atguigu.spring.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在需要的地方使用${}的形式来引用自定义的属性名：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;atguigu.spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>真正实现“一处修改，处处生效”。</p><h3 id="实际意义"><a href="#实际意义" class="headerlink" title="实际意义"></a>实际意义</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071834727.jpeg"></p><p>编写一套符合要求、开发各种功能都能正常工作的依赖组合并不容易。如果公司里已经有人总结了成熟的组合方案，那么再开发新项目时，如果不使用原有的积累，而是重新摸索，会浪费大量的时间。为了提高效率，我们可以使用工程继承的机制，让成熟的依赖组合方案能够保留下来。</p><p>如上图所示，公司级的父工程中管理的就是成熟的依赖组合方案，各个新项目、子系统各取所需即可。</p>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、Maven依赖</title>
      <link href="/posts/411ad010.html"/>
      <url>/posts/411ad010.html</url>
      
        <content type="html"><![CDATA[<h1 id="四、Maven依赖"><a href="#四、Maven依赖" class="headerlink" title="四、Maven依赖"></a>四、Maven依赖</h1><h2 id="1、依赖管理"><a href="#1、依赖管理" class="headerlink" title="1、依赖管理"></a>1、依赖管理</h2><h3 id="1-1-什么是依赖？"><a href="#1-1-什么是依赖？" class="headerlink" title="1.1 什么是依赖？"></a>1.1 什么是依赖？</h3><p>一个 Java 项目可能要使用一些第三方的 Jar 包才可以运行，那么我们说这个 Java 项目依赖了这些第三方的 Jar 包。比如项目依赖 lombok、mysql。</p><h3 id="1-2-什么是依赖管理？"><a href="#1-2-什么是依赖管理？" class="headerlink" title="1.2 什么是依赖管理？"></a>1.2 什么是依赖管理？</h3><ul><li>就是对项目所有依赖，进行规范化管理，通过 GAV 坐标。全网唯一的 GAV 坐标，决定使用哪一个 Jar 包。</li><li>依赖管理一般放在 pom.xml 文件中。</li></ul><h3 id="1-3-添加依赖"><a href="#1-3-添加依赖" class="headerlink" title="1.3 添加依赖"></a>1.3 添加依赖</h3><p>在pom.xml中添加dependency标签，如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>&lt;/dependency<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐</span> <span class="token attr-name">添加junit4.9依赖</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-查找坐标"><a href="#1-4-查找坐标" class="headerlink" title="1.4 查找坐标"></a>1.4 查找坐标</h3><p>添加依赖需要指定依赖 Jar 包的坐标，但是很多情况我们是不知道 Jar 包的的坐标，可以通过如下方式查询： </p><h4 id="方法一：从互联网搜索"><a href="#方法一：从互联网搜索" class="headerlink" title="方法一：从互联网搜索"></a>方法一：从互联网搜索</h4><p><a href="http://search.maven.org/">http://search.Maven.org/</a></p><h4 id="方法二：从中央仓库搜索"><a href="#方法二：从中央仓库搜索" class="headerlink" title="方法二：从中央仓库搜索"></a>方法二：从中央仓库搜索</h4><p><a href="http://mvnrepository.com/">http://mvnrepository.com/</a></p><p>网站搜索示例：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061818895.png" alt="38"></p><h2 id="2、传递依赖"><a href="#2、传递依赖" class="headerlink" title="2、传递依赖"></a>2、传递依赖</h2><h3 id="什么是传递依赖？"><a href="#什么是传递依赖？" class="headerlink" title="什么是传递依赖？"></a>什么是传递依赖？</h3><p>当 A 依赖 B、B 依赖 C，在 A 中导入 B 后会自动导入 C，C 是 A 的传递依赖。</p><h3 id="依赖范围对传递依赖的影响（了解）"><a href="#依赖范围对传递依赖的影响（了解）" class="headerlink" title="依赖范围对传递依赖的影响（了解）"></a>依赖范围对传递依赖的影响（了解）</h3><p>依赖会有依赖范围，依赖范围对传递依赖也有影响，有 A、B、C，A 依赖B，B 依赖 C，C 可能是 A 的传递依赖，如下图：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061815428.png" alt="39"></p><p>最左边一列为直接依赖，理解为A依赖B的范围，最顶层一行为传递依赖，理解为B依赖C的范围，行与列的交叉即为A传递依赖C的范围。</p><p>举例：</p><p>比如 A 对 B 有 compile 依赖，B 对 C 有 runtime 依赖，那么根据表格所示 A 对 C 有 runtime 依赖。测试 dao 依赖 junit，scope 为 test，service 依赖 dao.</p><p>查看下图红色框内所示传递依赖范围：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061822174.png" alt="40"></p><p>所以 Maven-ﬁrst 所依赖的 junit 的 Jar 没有加入到 Maven-web 工程。</p><p>如果修改 Maven-ﬁrst 依赖 junit 的 scope 为 compile，Maven-ﬁrst所依赖的junit 的 Jar 包会加入到 Maven-web 工程 中，符合上边表格所示，查看下图红色框内所示：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061822234.png" alt="41"></p><h3 id="传递的原则"><a href="#传递的原则" class="headerlink" title="传递的原则"></a>传递的原则</h3><p>在 A 依赖 B，B 依赖 C 的前提下，C 是否能够传递到 A，取决于 B 依赖 C 时使用的依赖范围。</p><ul><li>B 依赖 C 时使用 compile 范围：可以传递</li><li>B 依赖 C 时使用 test 或 provided 范围：不能传递，所以需要这样的 jar 包时，就必须在需要的地方明确配置依赖才可以。</li></ul><blockquote><p>工程依赖的jar包是从Maven仓库中查找到相应的jar包然后进行导入的，所以需要引入自己创建的jar包时，需要及时把最新版本的jar更新到本地仓库中。</p></blockquote><h2 id="3、依赖冲突"><a href="#3、依赖冲突" class="headerlink" title="3、依赖冲突"></a>3、依赖冲突</h2><h3 id="3-0-什么是依赖冲突？"><a href="#3-0-什么是依赖冲突？" class="headerlink" title="3.0 什么是依赖冲突？"></a>3.0 什么是依赖冲突？</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071827786.png"></p><ul><li>当 A 依赖 B、B 依赖 X（v1.0），</li><li>当 A 依赖 C、C 依赖 X (v2.0)</li></ul><p>所以配置依赖的排除其实就是阻止某些 jar 包的传递。因为这样的 jar 包传递过来会和其他 jar 包冲突。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐</span> <span class="token attr-name">struts2‐spring‐plugin</span> <span class="token attr-name">依赖</span> <span class="token attr-name">spirng‐beans‐3.0.5</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.struts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>struts2‐spring‐plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐</span> <span class="token attr-name">spring‐context</span> <span class="token attr-name">依赖</span> <span class="token attr-name">spring‐beans‐4.2.4</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring‐context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：系统将导入 spring-beans-3.0.5</p><h3 id="3-1-依赖调解原则"><a href="#3-1-依赖调解原则" class="headerlink" title="3.1 依赖调解原则"></a>3.1 依赖调解原则</h3><p>Maven 自动按照下边的原则调解：</p><h4 id="第一声明者优先原则"><a href="#第一声明者优先原则" class="headerlink" title="第一声明者优先原则"></a>第一声明者优先原则</h4><p>在 pom 文件定义依赖，先声明的依赖为准。</p><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>如果将上边 struts-spring-plugins 和 spring-context 顺序颠倒，系统将导入 spring-beans-4.2.4。 </p><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>由于 spring-context 在前边以 spring-context 依赖的 spring-beans-4.2.4 为准，所以最终 spring-beans-4.2.4 添加到了工程中。</p><h4 id="路径近者优先原则"><a href="#路径近者优先原则" class="headerlink" title="路径近者优先原则"></a>路径近者优先原则</h4><p>A 依赖 spirng-beans-4.2.4，A 依赖 B 依赖 spirng-beans-3.0.5，则 spring-beans-4.2.4 优先被依赖在 A 中，因为spring-beans-4.2.4 相对spirng-beans-3.0.5 被 A 依赖的路径最近。</p><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><p>在本工程中的pom中加入spirng-beans-4.2.4的依赖，根据路径近者优先原则，系统将导入spirng-beans-4.2.4：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring‐beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-排除依赖"><a href="#3-2-排除依赖" class="headerlink" title="3.2 排除依赖"></a>3.2 排除依赖</h3><p>上边的问题也可以通过排除依赖方法辅助依赖调解，如下：</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;dependency&gt;  &lt;groupId&gt;com.atguigu.maven&lt;&#x2F;groupId&gt;  &lt;artifactId&gt;pro01-maven-java&lt;&#x2F;artifactId&gt;  &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;  &lt;scope&gt;compile&lt;&#x2F;scope&gt;  &lt;!-- 使用excludes标签配置依赖的排除  --&gt;  &lt;!-- 排除com.atguigu.maven:pro01-maven-java:1.0-SNAPSHOT中不需要的依赖 --&gt;  &lt;exclusions&gt;    &lt;!-- 在exclude标签中配置一个具体的排除 --&gt;    &lt;exclusion&gt;      &lt;!-- 指定要排除的依赖的坐标（不需要写version） --&gt;      &lt;!-- 不管哪个版本都会被排除 --&gt;      &lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;      &lt;artifactId&gt;commons-logging&lt;&#x2F;artifactId&gt;    &lt;&#x2F;exclusion&gt;  &lt;&#x2F;exclusions&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、锁定版本"><a href="#4、锁定版本" class="headerlink" title="4、锁定版本"></a>4、锁定版本</h2><p>面对众多的依赖，有一种方法不用考虑依赖路径、声明优化等因素可以采用直接锁定版本的方法确定依赖构件的版本，版本锁定后则不考虑依赖的声明顺序或依赖的路径，以锁定的版本的为准添加到工程中，此方法在企业开发中常用。</p><p>如下的配置是锁定了 spring-beans 和 spring-context 的版本：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐这里锁定版本为</span> <span class="token attr-name">4.2.4</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring‐beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring‐context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：在工程中锁定依赖的版本并不代表在工程中添加了依赖，如果工程需要添加锁定版本的依赖则需要单独添加<code>&lt;dependencies&gt;&lt;/dependencies&gt;</code>标签</strong>，如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐这里是添加依赖</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring‐beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring‐context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上边添加的依赖并没有指定版本，原因是已在<code>&lt;dependencyManagement</code>中锁定了版本，所以在<code>&lt;dependency&gt;</code> 下不需要再指定版本。</p><h2 id="5、依赖范围"><a href="#5、依赖范围" class="headerlink" title="5、依赖范围"></a>5、依赖范围</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>Maven 提供了 6 种可选依赖范围:</p><ul><li><strong>compile</strong>：编译范围，指A在编译时依赖B，此范围为默认依赖范围。编译范围的依赖会用在编译、测试、运 行，由于运行时需要所以编译范围的依赖会被打包。</li><li><strong>provided</strong>：provided依赖只有在当JDK或者一个容器已提供该依赖之后才使用， provided依赖在编译和测试时需要，在运行时不需要，比如：servlet api被tomcat容器提供。</li><li><strong>runtime</strong>：runtime依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如：jdbc的驱动包。由于 运行时需要所以runtime范围的依赖会被打包。</li><li><strong>test</strong>：test范围依赖 在编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用，比如：junit。由于运行时不需要所以test范围依赖不会被打包。</li><li><strong>system</strong>：system范围依赖与provided类似，但是你必须显式的提供一个对于本地系统中Jar文件的路径，需 要指定systemPath磁盘路径，system依赖不推荐使用。</li><li><strong>import</strong>: 导入范围，他只是用在 dependencyManagement 中，表示从其他的 pom 中导入 dependecy 的配置。（以下引用官网案例并不难理解。）</li></ul><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071836055.png"></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><ul><li>标签的位置：dependencies&#x2F;dependency&#x2F;scope</li><li>标签的可选值：compile&#x2F;test&#x2F;provided&#x2F;system&#x2F;runtime&#x2F;import</li><li>compile 为默认值</li></ul><h4 id="compile-和-test-对比"><a href="#compile-和-test-对比" class="headerlink" title="compile 和 test 对比"></a>compile 和 test 对比</h4><table><thead><tr><th></th><th>main目录（空间）</th><th>test目录（空间）</th><th>开发过程（时间）</th><th>部署到服务器（时间）</th></tr></thead><tbody><tr><td>compile</td><td>有效</td><td>有效</td><td>有效</td><td>有效</td></tr><tr><td>test</td><td>无效</td><td>有效</td><td>有效</td><td>无效</td></tr></tbody></table><h4 id="compile-和-provided-对比"><a href="#compile-和-provided-对比" class="headerlink" title="compile 和 provided 对比"></a>compile 和 provided 对比</h4><table><thead><tr><th></th><th>main目录（空间）</th><th>test目录（空间）</th><th>开发过程（时间）</th><th>部署到服务器（时间）</th></tr></thead><tbody><tr><td>compile</td><td>有效</td><td>有效</td><td>有效</td><td>有效</td></tr><tr><td>provided</td><td>有效</td><td>有效</td><td>有效</td><td>无效</td></tr></tbody></table><blockquote><p>provided 已提供的，项目部署到服务器，服务器中已经提供了的jar包，就不需要进行额外的打包到服务器</p></blockquote><p>compile：通常使用的第三方框架的 jar 包这样在项目实际运行时真正要用到的 jar 包都是以 compile 范围进行依赖的。比如 SSM 框架所需jar包。</p><p>test：测试过程中使用的 jar 包，以 test 范围依赖进来。比如 junit。</p><p>provided：在开发过程中需要用到的“服务器上的 jar 包”通常以 provided 范围依赖进来。比如 servlet-api、jsp-api。而这个范围的 jar 包之所以不参与部署、不放进 war 包，就是避免和服务器上已有的同类 jar 包产生冲突，同时减轻服务器的负担。说白了就是：“服务器上已经有了，你就别带啦！”</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>默认引入 的Jar包——- compile 【默认范围 可以不写】（编译、测试、运行 都有效 ）</li><li>servlet-api 、jsp-api——- provided （编译、测试 有效， 运行时无效 防止和tomcat下Jar冲突）</li><li>jdbc驱动Jar包—- runtime （测试、运行 有效 ）</li><li>junit—– test （测试有效）</li><li>依赖范围由强到弱的顺序是：<code>compile&gt;provided&gt;runtime&gt;test</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十七、Python模块</title>
      <link href="/posts/bf89ed04.html"/>
      <url>/posts/bf89ed04.html</url>
      
        <content type="html"><![CDATA[<h1 id="十七、Python模块"><a href="#十七、Python模块" class="headerlink" title="十七、Python模块"></a>十七、Python模块</h1><h2 id="1、模块简介"><a href="#1、模块简介" class="headerlink" title="1、模块简介"></a>1、模块简介</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>Python的模块是用于组织、封装和重用代码的文件</li><li><strong>在 Python 中，一个 .py 文件就称之为一个模块（Module）。</strong></li><li>一个模块中可以包含变量、函数、类和其他Python语句，它允许将代码逻辑划分为独立的单元，并提供了一种组织代码的方式，使代码更加模块化和易于维护。</li></ul><h3 id="Why-Need？"><a href="#Why-Need？" class="headerlink" title="Why Need？"></a>Why Need？</h3><ul><li>最大的好处是大大提高了代码的可维护性。</li><li>当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括 Python 内置的模块和来自第三方的模块。</li><li>使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中。</li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>Python 本身就内置了很多非常有用的模块，只要安装完毕，这些模块就可以立刻使用。比如我的 Python 安装目录是默认的安装目录，在 D:\python\Lib，然后找到 Lib 目录，就可以发现里面<code>.py</code> 文件就是模块了。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407042229580.png" alt="image-20240704222957360"></p><p>模块可以分为标准库模块和自定义模块，Lib 目录下的都是标准库模块。</p><h2 id="2、模块分类"><a href="#2、模块分类" class="headerlink" title="2、模块分类"></a>2、模块分类</h2><p>Python的模块可以分为三类：<code>内建模块</code>、<code>第三方模块</code>、<code>自定义模块</code>。</p><h3 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h3><p>内置模块是 Python 官方开发者帮我们设计好的，安装好 Python 环境我们就可以直接使用这些内置模块，比较常用的有以下模块：</p><ul><li>os：包含普遍的操作系统功能</li><li>sys：提供了一系列有关 Python 运行环境的变量和函数</li><li>random：用于生成随机数</li><li>time: 主要包含各种提供日期、时间功能的类和函数</li><li>datetime：对 time 模块的一个高级封装</li><li>logging：日志处理</li><li>re：用于实现正则匹配</li><li>json：用于字符串和数据类型间进行转换json</li></ul><h3 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h3><p>第三方模块是 Python 开发者提前开发好的模块，需要安装对应的库才能使用该模块中的函数等，工作中比较常用的有以下第三方模块：</p><ul><li>requests：常用的 http 模块，常用于发送 http 请求</li><li>scrapy：在网络爬虫领域必不可少</li><li>pygame：常用于 2D 游戏的开发</li><li>numpy：为 Python 提供了很多高级的数学方法</li><li>Flask：轻量级开源 Web 开发框架，灵活、开发周期短</li><li>Django：一站式开源 Web 开发框架，遵循 MVC 设计</li></ul><h3 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h3><p>自定义模块是我们自己根据实际需求开发的模块，通常是对某段逻辑或某些函数进行封装，供其他函数调用，使用时我们需要将其引入到我们的项目中。</p><p>需要注意的是，自定义模块的命名一定不能与内置模块重名，否则会将内置模块覆盖。</p><p>例如：我们自定义了一个 <code>os.py</code> 的模块，这是我们使用 <code>import</code> 语句引入的 os 模块就是我们自己定义的这个模块，不再是内置的 os 模块。</p><p>内置模块与第三方模块还有很多，大家可以通过搜索引擎去了解、学习。</p><h2 id="3、模块使用"><a href="#3、模块使用" class="headerlink" title="3、模块使用"></a>3、模块使用</h2><ul><li>模块 就好比是 工具包，要想使用这个工具包中的工具，就需要 导入 import 这个模块</li><li>Python可通过模块导入引用其它模块中的数据，提供了<code>import</code>和<code>from-import</code>两种方式。</li><li>在模块中定义的 全局变量 、 函数 都是模块能够提供给外界直接使用的工具</li></ul><h3 id="import导入"><a href="#import导入" class="headerlink" title="import导入"></a>import导入</h3><p>Python中使用<code>import</code>关键字来导入模块，导入模块后，在当前文件中作为一个对象使用，可以通过<code>.</code>来引用模块中定义的函数、变量或类等。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p><code>import</code> 的语法基本如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> module1<span class="token punctuation">[</span><span class="token punctuation">,</span> module2<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> moduleN<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如我们使用标准库模块中的 math 模块。当解释器遇到 <code>import</code> 语句，如果模块在当前的搜索路径就会被导入。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入内建模块 math</span><span class="token keyword">import</span> math<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""3.141592653589793"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一个模块只会被导入一次，不管你执行了多少次 import。这样可以防止导入模块被一遍又一遍地执行。</p></blockquote><p>如果被导入的模块名比较长，在使用时会不太方便，也可以使用<code>as</code>为模块指定一个别名，一旦指定了别名，原模块名就不能使用了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入内建模块 math</span><span class="token keyword">import</span> math <span class="token keyword">as</span> m<span class="token comment"># 可以使用其中的 sqrt() 来计算平方根</span>result <span class="token operator">=</span> m<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>&#x3D;&#x3D;当我们使用 import 语句的时候，Python 解释器是怎样找到对应的文件的呢？&#x3D;&#x3D;</p><p>这就涉及到 Python 的搜索路径，搜索路径是由一系列目录名组成的，Python 解释器就依次从这些目录中去寻找所引入的模块。</p><p>搜索路径是在 Python 编译或安装的时候确定的，安装新的库应该也会修改。搜索路径被存储在 <code>sys</code> 模块中的 <code>path</code> 变量 。</p><p>因此，我们可以查一下路径：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""['D:\\python\\python37.zip', 'D:\\python\\DLLs', 'D:\\python\\lib', 'D:\\python', 'D:\\python\\lib\\site-packages', 'E:\\application\\pycharm\\PyCharm 2024.1.1\\plugins\\python\\helpers\\pycharm_matplotlib_backend']"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="from···import···"><a href="#from···import···" class="headerlink" title="from···import···"></a>from···import···</h3><p>还可以使用<code>from module_name import object_name</code>语法，从模块中导入特定的对象，这样可以直接使用对象名，无需使用模块名前缀。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> mod_name <span class="token keyword">import</span> name1<span class="token punctuation">[</span><span class="token punctuation">,</span> name2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> nameN<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sys <span class="token keyword">import</span> path<span class="token keyword">print</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""['D:\\python\\python37.zip', 'D:\\python\\DLLs', 'D:\\python\\lib', 'D:\\python', 'D:\\python\\lib\\site-packages', 'E:\\application\\pycharm\\PyCharm 2024.1.1\\plugins\\python\\helpers\\pycharm_matplotlib_backend']"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="from-···-import"><a href="#from-···-import" class="headerlink" title="from ··· import *"></a>from ··· import *</h3><p><code>from ··· import *</code> 语句可以把某个模块中的所有方法属性都导入。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sys <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">print</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>executable<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""3.7.9 (tags/v3.7.9:13c94747c7, Aug 17 2020, 18:58:18) [MSC v.1900 64 bit (AMD64)]D:\python\python.exe"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：这提供了一个简单的方法来导入一个模块中的所有方法属性。然而这种声明不该被过多地使用。</p></blockquote><h2 id="4、主模块和非主模块"><a href="#4、主模块和非主模块" class="headerlink" title="4、主模块和非主模块"></a>4、主模块和非主模块</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>主模块：如果一个模块被直接使用，而没有被别人调用，我们称这个模块为主模块。</p><p>非主模：如果一个模块被别人调用，我们称这个模块为非主模块。</p><h3 id="name-属性"><a href="#name-属性" class="headerlink" title="name 属性"></a>name 属性</h3><p>在 Python 中，有主模块和非主模块之分，那么怎么区分主模块和非主模块呢？</p><p><code>__name__</code> 属性是系统给出的，利用这个变量可以判断一个模块是否是主模块。如果一个属性的值是 <code>__main__</code> ，那么就说明这个模块是主模块，反之亦然。</p><blockquote><p>注意：这个 <code>__main__</code> 属性只是帮助我们判断是否是主模块，并不是说这个属性决定他们是否是主模块，决定是否是主模块的条件只是这个模块有没有被人调用。</p></blockquote><p>具体看示例：</p><p>首先创建了模块 lname ，然后判断一下是否是主模块，如果是主模块就输出 <code>main</code> 不是，就输出 <code>not main</code> ，首先直接运行该模块，由于该模块是直接使用，而没有被人调用，所以是主模块，因此输出了 <code>main</code> ，具体看下图：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407042255874.png" alt="image-20240704225535645"></p><p>然后又创建一个 user_lname 模块，里面只是简单的导入了 lname 模块，然后执行，输出的结果是 <code>not main</code> ，因为 lname 模块被该模块调用了，所以不是主模块，输出结果如图：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407042256973.png" alt="image-20240704225618753"></p><h2 id="5、包"><a href="#5、包" class="headerlink" title="5、包"></a>5、包</h2><h3 id="包背景"><a href="#包背景" class="headerlink" title="包背景"></a>包背景</h3><p>相同名字的函数和变量完全可以分别存在不同的模块中，但是这里也有个问题，如果不同的人编写的模块名相同怎么办？</p><p>为了避免模块名冲突，Python 又引入了按目录来组织模块的方法，称为包（Package）。引入包就算有相同的模块名，也不会造成重复，因为包名不同，其实也就是路径不同。</p><p><strong>包是Python模块的一种组织形式，将多个模块组合在一起，形成一个大的Python工具库。包通常是一个拥有init.py文件的目录，它定义了包的属性和方法。</strong></p><h3 id="包概念"><a href="#包概念" class="headerlink" title="包概念"></a>包概念</h3><ul><li>在Python中，包（package）是用于组织和管理模块（module）的一种层级结构。</li><li>包是一个特殊的目录，其中包含了一个名为<code>__init__.py</code>的文件，用于标记这个目录是一个包。</li><li>包可以包含其他子包和模块，形成多级层次结构，方便组织和复用代码。</li></ul><h3 id="包用途"><a href="#包用途" class="headerlink" title="包用途"></a>包用途</h3><ol><li><strong>组织代码</strong>：包可以将相关的模块组织在一起，使得代码结构更加清晰，有助于团队协作和维护；</li><li><strong>避免命名冲突</strong>：Python的模块是全局的，当不同的模块中定义了相同名称的函数或变量时，可能会引起命名冲突。使用包可以将模块放在不同的包中，避免冲突；</li><li><strong>模块复用</strong>：包可以作为一个单元来导入和使用，使得代码在不同项目中的复用更加容易；</li><li><strong>隐藏内部实现</strong>：包可以将一些内容实现隐藏起来，只暴露外部接口，提供更好的封装线。</li></ol><h3 id="包导入"><a href="#包导入" class="headerlink" title="包导入"></a>包导入</h3><p>从包中导入模块时，导入方式非常灵活。</p><p>当前有包组织结构如下：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">Project    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token comment">--- mp </span>    <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token comment">--- __init__.py</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token comment">--- mm.py </span>    <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token comment">--- show()</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token comment">--- nn.py</span>    <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token comment">--- info()</span>    <span class="token operator">|</span><span class="token comment">--- main.py  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用-import-直接导入包中指定模块"><a href="#使用-import-直接导入包中指定模块" class="headerlink" title="使用 import 直接导入包中指定模块"></a>使用 import 直接导入包中指定模块</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> mp<span class="token punctuation">.</span>mmmp<span class="token punctuation">.</span>mm<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">import</span> mp<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nnnn<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用-from-import-导入包内指定模块或包内指定模块内的成员"><a href="#使用-from-import-导入包内指定模块或包内指定模块内的成员" class="headerlink" title="使用 from-import 导入包内指定模块或包内指定模块内的成员"></a>使用 from-import 导入包内指定模块或包内指定模块内的成员</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入包内指定模块</span><span class="token keyword">from</span> mp <span class="token keyword">import</span> mmmm<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 导入包内指定模块中的成员</span><span class="token keyword">from</span> mp<span class="token punctuation">.</span>mm <span class="token keyword">import</span> <span class="token operator">*</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="init-py"><a href="#init-py" class="headerlink" title="__init__.py"></a><code>__init__.py</code></h3><ul><li><code>__init__.py</code>文件是包的初始化文件，该文件是区别包与文件夹的关键。</li><li><strong>当使用<code>from-import</code>方式导入时，可以通过在文件中添加魔法属性<code>__all__</code>属性来设置包中哪些模块可以被导入。</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在 __init__.py 中添加下面代码 </span>__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"mm"</span><span class="token punctuation">]</span><span class="token comment"># main.py中的代码</span><span class="token keyword">from</span> mp <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 此时只能使用 __all__ 中指定的mm模块，nn 模块不能使用</span>mm<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方式一</span><span class="token keyword">import</span> my_package<span class="token punctuation">.</span>my_math<span class="token comment"># 方式二</span><span class="token keyword">from</span> my_package <span class="token keyword">import</span> my_math<span class="token comment"># 方式三</span><span class="token keyword">from</span> my_package <span class="token keyword">import</span> <span class="token operator">*</span>result <span class="token operator">=</span> my_math<span class="token punctuation">.</span>total<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>my_card<span class="token punctuation">.</span>menu<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><p>如下图，引入了包名后， lname.py 其实变成了</p><p><code>com.Learn.module.nameattributes.lname</code></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407042300941.png" alt="image-20240704230052739"></p><p>每一个包目录下面都会有一个 <code>__init__.py</code> 的文件，为什么呢？</p><p>因为这个文件是必须的，否则，Python 就把这个目录当成普通目录，而不是一个包 。 <code>__init__.py</code> 可以是空文件，也可以有Python代码，因为 <code>__init__.py</code> 本身就是一个模块，而它对应的模块名就是它的包名。</p><h2 id="6、作用域"><a href="#6、作用域" class="headerlink" title="6、作用域"></a>6、作用域</h2><p>通过学习 Python 中的模块，其实和 Java 中的类相似，那么我们怎么实现在一个模块中，有的函数和变量给别人使用，有的函数和变量仅仅在模块内部使用呢？</p><p>在 Python 中，是通过 <code>_</code> 前缀来实现的。</p><p>正常的函数和变量名是公开的（public），可以被直接引用，比如：abc，ni12，PI等；类似<code>__xxx__</code>这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的 <code>__name__</code> 就是特殊变量，还有 <code>__author__</code> 也是特殊变量，用来标明作者。</p><p>注意，我们自己的变量一般不要用这种变量名；类似 <code>_xxx</code> 和 <code>__xxx</code> 这样的函数或变量就是非公开的（private），不应该被直接引用，比如 <code>_abc</code> ，<code>__abc</code> 等；</p><p><strong>这里是说不应该，而不是不能。因为 Python 种并没有一种方法可以完全限制访问 private 函数或变量，但是，从编程习惯上不应该引用 private 函数或变量。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_diamond_vip</span><span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'尊敬的钻石会员用户，您好'</span><span class="token punctuation">)</span>    vip_name <span class="token operator">=</span> <span class="token string">'DiamondVIP'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lv<span class="token punctuation">)</span>    <span class="token keyword">return</span> vip_name<span class="token keyword">def</span> <span class="token function">_gold_vip</span><span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'尊敬的黄金会员用户，您好'</span><span class="token punctuation">)</span>    vip_name <span class="token operator">=</span> <span class="token string">'GoldVIP'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lv<span class="token punctuation">)</span>    <span class="token keyword">return</span> vip_name<span class="token keyword">def</span> <span class="token function">vip_lv_name</span><span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> lv <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>_gold_vip<span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> lv <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>_diamond_vip<span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token punctuation">)</span>vip_lv_name<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""尊敬的钻石会员用户，您好DiamondVIP2"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个模块中，我们公开 <code>vip_lv_name</code> 方法函数，而其他内部的逻辑分别在 <code>_diamond_vip</code> 和 <code>_gold_vip</code> private 函数中实现，因为是内部实现逻辑，调用者根本不需要关心这个函数方法，它只需关心调用 <code>vip_lv_name</code> 的方法函数，所以用 private 是非常有用的代码封装和抽象的方法。</p><p>一般情况下，外部不需要引用的函数全部定义成 private，只有外部需要引用的函数才定义为 public。</p><h2 id="7、常见内置模块"><a href="#7、常见内置模块" class="headerlink" title="7、常见内置模块"></a>7、常见内置模块</h2><table><thead><tr><th>模块</th><th>用途</th></tr></thead><tbody><tr><td>os</td><td>os 模块提供了许多与操作系统交互的函数，例如创建、移动和删除文件和目录，以及访问环境变量等。</td></tr><tr><td>sys</td><td>sys 模块提供了与 Python 解释器和系统相关的功能，例如解释器的版本和路径，以及与 stdin、stdout 和 stderr 相关的信息。</td></tr><tr><td>time</td><td>time 模块提供了处理时间的函数，例如获取当前时间、格式化日期和时间、计时等。</td></tr><tr><td>datetime</td><td>datetime 模块提供了更高级的日期和时间处理函数，例如处理时区、计算时间差、计算日期差等。</td></tr><tr><td>random</td><td>random 模块提供了生成随机数的函数，例如生成随机整数、浮点数、序列等。</td></tr><tr><td>math</td><td>math 模块提供了数学函数，例如三角函数、对数函数、指数函数、常数等。</td></tr><tr><td>re</td><td>re 模块提供了正则表达式处理函数，可以用于文本搜索、替换、分割等。</td></tr><tr><td>json</td><td>json 模块提供了 JSON 编码和解码函数，可以将 Python 对象转换为 JSON 格式，并从 JSON 格式中解析出 Python 对象。</td></tr><tr><td>urllib</td><td>urllib 模块提供了访问网页和处理 URL 的功能，包括下载文件、发送 POST 请求、处理 cookies 等。</td></tr></tbody></table><h3 id="dir-函数"><a href="#dir-函数" class="headerlink" title="dir()函数"></a>dir()函数</h3><p><strong><code>dir()</code>是 Python 内置函数，用于获取指定对象的所有属性和方法的列表。</strong></p><p>格式：<code>dir(obj)</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、OS模块"><a href="#8、OS模块" class="headerlink" title="8、OS模块"></a>8、OS模块</h2><ul><li>Python的内置库os(Operating System Interface)提供了与操作系统交互的函数，允许与操作系统进行各种操作，如文件和目录操作、环境变量访问、进程管理等。</li><li>使用os库，可以编写跨平台的代码，因为它提供了对操作系统底层功能的抽象，而不用担心特定操作系统的细节。</li></ul><h3 id="路径操作"><a href="#路径操作" class="headerlink" title="路径操作"></a>路径操作</h3><p><code>os.getcwd()</code>：获取当前目录的路径；</p><p><code>os.chdir()</code>：用于改变当前的工作目录；</p><ul><li>工作目录是指当前正在执行的脚步所在的目录，通过使用<code>os.chdir()</code>方法，可以在脚本执行过程中切换到不同的目录。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 当前工作目录</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前工作目录："</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 切换到指定目录</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">"/path/to/directory"</span><span class="token punctuation">)</span><span class="token comment"># 切换后的工作目录</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"切换后的工作目录："</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>os.path.abspath(path)</code>：获取绝对路径。<code>path</code>是要获取绝对路径的路径；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 获取绝对路径</span>absolute_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">'relative/path/to/file.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Absolute Path:"</span><span class="token punctuation">,</span> absolute_path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>os.path.basename(path)</code>：返回指定路径的基本名称（不包含父目录路径）；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 获取基本名称</span>base_name <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span><span class="token string">'/path/to/file.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Base Name:"</span><span class="token punctuation">,</span> base_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>os.path.dirname(path)</code>：返回指定路径的父目录路径；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 获取父目录路径</span>parent_directory <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span><span class="token string">'/path/to/file.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"父目录为:"</span><span class="token punctuation">,</span> parent_directory<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>os.path.split(path)</code>：用于将一个路径拆分为目录部分和文件名部分；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> ospath <span class="token operator">=</span> <span class="token string">'/home/user/file.txt'</span>result <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>os.path.join(path)</code>：用于连接多个路径部分。它将多个路径片段组合在一起，形成一个新的路径字符串；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> ospath1 <span class="token operator">=</span> <span class="token string">'\home\user'</span>path2 <span class="token operator">=</span> <span class="token string">'file.txt'</span>result <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path1<span class="token punctuation">,</span> path2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>os.path.exists(path)</code>：判断路径是否存在（可以是文件或目录）；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 判断路径是否存在</span>path_to_check <span class="token operator">=</span> <span class="token string">'/path/to/file.txt'</span><span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path_to_check<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"路径存在"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"路径不存在"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>os.path.isdir(path)</code>：判断是否目录；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 判断路径是否是目录</span>directory_path <span class="token operator">=</span> <span class="token string">'/path/to/directory'</span><span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>directory_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"它是一个目录"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"它不是一个目录或路径不存在"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>os.path.isfile(path)</code>：判断是否文件；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 判断路径是否是文件</span>file_path <span class="token operator">=</span> <span class="token string">'/path/to/file.txt'</span><span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"它是一个文件"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"它不是文件或路径不存在."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>os.path.getsize(path)</code>：获取文件大小。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span><span class="token string">"main.py"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="目录和文件操作"><a href="#目录和文件操作" class="headerlink" title="目录和文件操作"></a>目录和文件操作</h3><p><code>os.listdir()</code>：列出当前目录内容；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 获取目录内容</span>directory_path <span class="token operator">=</span> <span class="token string">'/path/to/directory'</span>content <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>directory_path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Directory Content:"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>os.mkdir()</code>：创建一个新的目录；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 创建新目录</span>new_directory <span class="token operator">=</span> <span class="token string">'/path/to/new_directory'</span>os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>new_directory<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>os.makedirs()</code>：递归创建多级目录；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建多级目录</span>nested_directory <span class="token operator">=</span> <span class="token string">'/path/to/nested/directory'</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>nested_directory<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>os.rmdir()</code>：删除空目录；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 删除目录</span>directory_to_delete <span class="token operator">=</span> <span class="token string">'/path/to/directory_to_delete'</span>os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span>directory_to_delete<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>os.rename()</code>：重命名目录；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 重命名目录</span>old_directory_name <span class="token operator">=</span> <span class="token string">'/path/to/old_directory'</span>new_directory_name <span class="token operator">=</span> <span class="token string">'/path/to/new_directory'</span>os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>old_directory_name<span class="token punctuation">,</span> new_directory_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>os.remove()</code>：删除文件（只能删除文件，不能删除目录）；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 删除指定的文件</span>file_to_delete <span class="token operator">=</span> <span class="token string">'/path/to/file.txt'</span>os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>file_to_delete<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><p><code>os.name</code>：获取系统名称，在Windows上，该值为<code>nt</code>；在Linux、macOS上，该值为<code>posix</code>；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 获取当前平台名称</span>platform_name <span class="token operator">=</span> os<span class="token punctuation">.</span>name<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Platform Name:"</span><span class="token punctuation">,</span> platform_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>os.chmod(path,mode)</code>：更改文件权限模式。<code>path</code>是要更改权限的文件路径，<code>mode</code>是权限模式，通常用八进制表示，如<code>0o755</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 更改文件权限模式为-rwxr-xr-x</span>file_path <span class="token operator">=</span> <span class="token string">'/path/to/file.txt'</span>os<span class="token punctuation">.</span>chmod<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token number">0o755</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>os.sep</code>：用于表示操作系统特定的路径分隔符。</p><ul><li>在Windows操作系统上，路径分隔符是反斜杠<code>\</code>；而在POSIX系统（如Linux、macOS等）上，路径分隔符是正斜杠<code>/</code>。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 获取路径分隔符</span>path_separator <span class="token operator">=</span> os<span class="token punctuation">.</span>sep<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Path Separator:"</span><span class="token punctuation">,</span> path_separator<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9、random模块"><a href="#9、random模块" class="headerlink" title="9、random模块"></a>9、random模块</h2><ul><li><code>random</code>是Python内置的用于生成随机数的模块。它提供了多种随机数生成函数，用于各种不同的随机数需求。</li><li>获取随机数，需要引入random库，<code>import random</code></li></ul><table><thead><tr><th>函数名</th><th>函数说明</th></tr></thead><tbody><tr><td>randrange(start,stop,step)</td><td>start 指定范围的起始值 包含本身，默认是0；stop 指定范围的结束值 不包含本身； step 步长，默认步长是1。该函数返回一个整数</td></tr><tr><td>randint(start, end)</td><td>返回[start end]之间的一个随机整数，start必须小于end</td></tr><tr><td>random()</td><td>返回一个[0.0, 1.0)之间的随机小数</td></tr><tr><td>choice(seq)</td><td>从序列 seq 中随机选择一个元素。seq 是自定义的序列；</td></tr><tr><td>shuffle(seq)</td><td>将序列元素随机排列（打乱顺序）</td></tr><tr><td>uniform(a,b)</td><td>生成一个[a,b]范围内的随机浮点数；</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token comment"># 生成随机小数</span>a <span class="token operator">=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment"># 生成随机整数</span>a <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment"># 获取列表中的随机元素</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token comment"># 随机整数</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 随机</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 打乱顺序</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""0.0076216726167549492422l[6, 4, 3, 5, 2, 1]"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10、sys模块"><a href="#10、sys模块" class="headerlink" title="10、sys模块"></a>10、sys模块</h2><p>Sys是Python的内置标准库模块，提供了访问与Python解释器相关的变量和函数的功能。它的主要用途是与系统交互、解释器配置、命令行参数处理、标准输入输出、异常处理等。</p><h3 id="sys-常用属性"><a href="#sys-常用属性" class="headerlink" title="sys 常用属性"></a>sys 常用属性</h3><p><code>sys.argv</code>：获取命令行参数列表，包括脚本名称和传递给脚本的其他参数；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token comment"># 第一个元素是脚本名称，后续元素是命令行参数</span>script_name <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>arguments <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"脚本名称："</span><span class="token punctuation">,</span> script_name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"命令行参数"</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""脚本名称： E:\mycode\python-guo\python-note\test\python-test.py命令行参数 []"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sys.version</code>：获取当前Python解释器的版本信息；</p><p><code>sys.version_info</code>：获取当前Python解释器的版本信息，以元组形式表示详细的版本号信息；</p><p><code>sys.platform</code>：获取当前运行的操作系统平台名称；</p><p><code>sys.path</code>：获取模块搜索路径列表，用于指定Python解释器搜索模块的路径。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"python解释器版本："</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"python解释器版本信息："</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>version_info<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前操作系统平台："</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>platform<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""python解释器版本： 3.7.9 (tags/v3.7.9:13c94747c7, Aug 17 2020, 18:58:18) [MSC v.1900 64 bit (AMD64)]python解释器版本信息： sys.version_info(major=3, minor=7, micro=9, releaselevel='final', serial=0)当前操作系统平台： win32['E:\\mycode\\python-guo\\python-note\\test', 'E:\\mycode\\python-guo', 'E:\\application\\pycharm\\PyCharm 2024.1.1\\plugins\\python\\helpers\\pycharm_display', 'D:\\python\\python37.zip', 'D:\\python\\DLLs', 'D:\\python\\lib', 'D:\\python', 'D:\\python\\lib\\site-packages', 'E:\\application\\pycharm\\PyCharm 2024.1.1\\plugins\\python\\helpers\\pycharm_matplotlib_backend']"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sys.modules</code>：获取已导入的模块信息，返回一个字典；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">for</span> module_name<span class="token punctuation">,</span> module <span class="token keyword">in</span> sys<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"模块名：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>module_name<span class="token punctuation">&#125;</span></span><span class="token string">，模块对象：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>module<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""模块名：sys，模块对象：&lt;module 'sys' (built-in)>模块名：builtins，模块对象：&lt;module 'builtins' (built-in)>模块名：_imp，模块对象：&lt;module '_imp' (built-in)>模块名：_thread，模块对象：&lt;module '_thread' (built-in)>模块名：_warnings，模块对象：&lt;module '_warnings' (built-in)>模块名：_weakref，模块对象：&lt;module '_weakref' (built-in)>模块名：zipimport，模块对象：&lt;module 'zipimport' (built-in)>模块名：_io，模块对象：&lt;module 'io' (built-in)>..."""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sys常用方法"><a href="#sys常用方法" class="headerlink" title="sys常用方法"></a>sys常用方法</h3><p><code>sys.getdefaultencoding()</code>：获取编码方式；</p><p><code>sys.exit()</code>：运行时退出。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getdefaultencoding<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Python解释器版本信息："</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>version_info<span class="token punctuation">)</span><span class="token comment"># 运行之后退出，不会运行后面的代码</span>sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getdefaultencoding<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""utf-8Python解释器版本信息： sys.version_info(major=3, minor=7, micro=9, releaselevel='final', serial=0)"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11、math模块"><a href="#11、math模块" class="headerlink" title="11、math模块"></a>11、math模块</h2><p>操作数字的运算，<code>import math</code></p><table><thead><tr><th>函数名</th><th>函数的说明</th><th>示例</th></tr></thead><tbody><tr><td>math.ceil()</td><td>向上取整</td><td>math.ceil(18.1) #19</td></tr><tr><td>math.floor()</td><td>向下取整</td><td>math.floor(18.1) #18</td></tr><tr><td>math.sqrt</td><td>求平方根</td><td>math.sqrt(100)</td></tr></tbody></table><h2 id="12、datetime模块"><a href="#12、datetime模块" class="headerlink" title="12、datetime模块"></a>12、datetime模块</h2><p><code>datetime</code>是Python标准库中用于处理日期和时间的模块。它提供了多种类和函数，用于处理日期、时间、时间间隔等操作，使得日期和时间的处理更加方便灵活。</p><p><strong>应用场景</strong>：</p><ol><li>作为日志信息的内容输出；</li><li>计算某个功能的执行时间；</li><li>用日期命名一个日志文件的名称；</li><li>生成随机数（时间是不会重复的）。</li></ol><h3 id="获取当前日期时间"><a href="#获取当前日期时间" class="headerlink" title="获取当前日期时间"></a>获取当前日期时间</h3><ul><li><code>datetime.now()</code>：获取当前日期和时间。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimecurrent_datetime <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前时间:"</span><span class="token punctuation">,</span> current_datetime<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""当前时间: 2024-07-11 22:30:15.064770"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="格式化日期和时间"><a href="#格式化日期和时间" class="headerlink" title="格式化日期和时间"></a>格式化日期和时间</h3><ul><li><code>strftime()</code>方法：将<code>datetime</code>对象格式化为字符串格式。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimecurrent_datetime <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>date <span class="token operator">=</span> current_datetime<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"格式化日期时间：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>date<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""格式化日期时间：2024-07-11 22:30:29"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解析日期和时间"><a href="#解析日期和时间" class="headerlink" title="解析日期和时间"></a>解析日期和时间</h3><ul><li><code>strptime()</code>函数：将字符串解析为<code>datetime</code>对象。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimedate <span class="token operator">=</span> <span class="token string">"2023-11-27 09:53:41"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span>datetime <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>date<span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"当前时间为：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>datetime<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>datetime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""&lt;class 'str'>当前时间为：2023-11-27 09:53:41&lt;class 'datetime.datetime'>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计算日期间隔"><a href="#计算日期间隔" class="headerlink" title="计算日期间隔"></a>计算日期间隔</h3><ul><li><code>timedelta()</code>类可以进行日期间隔的计算。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token punctuation">,</span> datetimedate1 <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>date2 <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>date_diff <span class="token operator">=</span> date2 <span class="token operator">-</span> date1<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Date Difference:"</span><span class="token punctuation">,</span> date_diff<span class="token punctuation">)</span>current_datetime <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 使用 timedelta 计算未来的日期</span>future_date <span class="token operator">=</span> current_datetime <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Future Date:"</span><span class="token punctuation">,</span> future_date<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""Date Difference: 187 days, 0:00:00Future Date: 2024-08-10 22:32:02.316241"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="比较日期"><a href="#比较日期" class="headerlink" title="比较日期"></a>比较日期</h3><ul><li>可以直接比较<code>datetime</code>对象来判断日期的先后关系。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span>  datetimedate1 <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>date2 <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">if</span> date1 <span class="token operator">&lt;</span> date2<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"date1 is earlier than date2"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> date1 <span class="token operator">></span> date2<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"date1 is later than date2"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"date1 and date2 are the same"</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""date1 is earlier than date2"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取日期和时间的部分信息"><a href="#获取日期和时间的部分信息" class="headerlink" title="获取日期和时间的部分信息"></a>获取日期和时间的部分信息</h3><ul><li>可以使用<code>year</code>、<code>month</code>、<code>day</code>、<code>hour</code>、<code>minute</code>、<code>second</code>等属性来获取日期和时间的部分信息。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimecurrent_datetime <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>year <span class="token operator">=</span> current_datetime<span class="token punctuation">.</span>yearmonth <span class="token operator">=</span> current_datetime<span class="token punctuation">.</span>monthday <span class="token operator">=</span> current_datetime<span class="token punctuation">.</span>dayhour <span class="token operator">=</span> current_datetime<span class="token punctuation">.</span>hourminute <span class="token operator">=</span> current_datetime<span class="token punctuation">.</span>minutesecond <span class="token operator">=</span> current_datetime<span class="token punctuation">.</span>second<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Year: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>year<span class="token punctuation">&#125;</span></span><span class="token string">, Month: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>month<span class="token punctuation">&#125;</span></span><span class="token string">, Day: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>day<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Hour: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>hour<span class="token punctuation">&#125;</span></span><span class="token string">, Minute: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>minute<span class="token punctuation">&#125;</span></span><span class="token string">, Second: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>second<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""Year: 2024, Month: 7, Day: 11Hour: 22, Minute: 32, Second: 45"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13、JSON模块"><a href="#13、JSON模块" class="headerlink" title="13、JSON模块"></a>13、JSON模块</h2><h3 id="JSON概念"><a href="#JSON概念" class="headerlink" title="JSON概念"></a>JSON概念</h3><ul><li>JSON（JavaScript Object Notation，JS对象简谱）是一种轻量级的数据交换格式，用于在不同应用程序之间传输和存储数据。</li><li>它以文本形式表示结构化数据，易于理解和编写，同时也易于计算机解析和生成。</li></ul><h3 id="JSON的结构"><a href="#JSON的结构" class="headerlink" title="JSON的结构"></a>JSON的结构</h3><ol><li>对象：用花括号<code>&#123;&#125;</code>包裹，包含一系列键值对，每个键值对之间用逗号<code>,</code>分隔；</li><li>数组：用方括号<code>[ ]</code>包裹，包含一系列值，每个键值之间用逗号<code>,</code>分隔；</li><li>键值对：键和值之间使用冒号<code>:</code>分隔，键必须是字符串，值可以是字符串、数字、布尔值、对象、数组或null；</li><li>JSON数据的最外层只能是数组或对象；</li><li>JSON中的字符串，必须使用双引号包含。</li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>    <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>    <span class="token property">"is_student"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"address"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"city"</span><span class="token operator">:</span> <span class="token string">"New York"</span><span class="token punctuation">,</span>        <span class="token property">"zip"</span><span class="token operator">:</span> <span class="token string">"10001"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hobbies"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"reading"</span><span class="token punctuation">,</span> <span class="token string">"swimming"</span><span class="token punctuation">,</span> <span class="token string">"traveling"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Python与JSON数据类型对应"><a href="#Python与JSON数据类型对应" class="headerlink" title="Python与JSON数据类型对应"></a>Python与JSON数据类型对应</h3><table><thead><tr><th align="left">Python</th><th align="left">JSON</th></tr></thead><tbody><tr><td align="left">dict</td><td align="left">object</td></tr><tr><td align="left">list, tuple</td><td align="left">array</td></tr><tr><td align="left">str</td><td align="left">string</td></tr><tr><td align="left">int, float</td><td align="left">number</td></tr><tr><td align="left">True</td><td align="left">true</td></tr><tr><td align="left">Flase</td><td align="left">false</td></tr><tr><td align="left">None</td><td align="left">null</td></tr></tbody></table><h3 id="JSON序列化与反序列化"><a href="#JSON序列化与反序列化" class="headerlink" title="JSON序列化与反序列化"></a>JSON序列化与反序列化</h3><ul><li>JSON序列化指的是将Python对象转换为JSON格式的字符串。</li><li>通过序列化，Python对象可以被编码为符合JSON规范的字符串，从而可以在不同的应用程序、平台或语言之间进行数据交换。</li></ul><p>（1）<code>json.dumps()</code>：可以完成序列化的操作。这个函数将Python的数据结构转换成JSON格式的字符串。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token comment"># 定义一个Python字典</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Rose"</span><span class="token punctuation">,</span>    <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"female"</span><span class="token punctuation">&#125;</span><span class="token comment"># 将Python字典序列化为JSON格式的字符串</span>json_str <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>json_str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）<code>json.loads()</code>：用于将JSON格式的字符串解码为Python对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token comment"># 定义一个JSON格式的字符串</span>json_str <span class="token operator">=</span> <span class="token string">'&#123;"name": "Rose", "age": 20, "gender": "female"&#125;'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>json_str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 将JSON格式的字符串解码为Python对象</span>Python_obj <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>json_str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Python_obj<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>Python_obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON文件的写入和读取"><a href="#JSON文件的写入和读取" class="headerlink" title="JSON文件的写入和读取"></a>JSON文件的写入和读取</h3><ul><li><code>with open(file_path, mode, encoding) as file</code></li></ul><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">file_path</td><td align="left">要打开为文件路径；</td></tr><tr><td align="left">mode</td><td align="left">打开文件的模式，如<code>r</code>（只读）、<code>w</code>（写入）、<code>a</code>（追加）等；</td></tr><tr><td align="left">encoding(可选)</td><td align="left">文件的编码方式，默认为None，表示使用相同默认编码。</td></tr></tbody></table><p>（1）<code>json.dump()</code>：将Python对象序列转化为JSON格式，并写入文件中；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jsondata <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Rose"</span><span class="token punctuation">,</span>    <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"female"</span><span class="token punctuation">&#125;</span><span class="token comment"># 将数据写入JSON文件</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data.json"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）<code>json.load()</code>：从文件中读取JSON格式的数据，并解码为Python对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token comment"># 从JSON文件中读取数据</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data.json"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14、日志模块"><a href="#14、日志模块" class="headerlink" title="14、日志模块"></a>14、日志模块</h2><ul><li>Python中的日志模块<code>logging</code>是用于记录应用程序运行时的信息，帮助开发者诊断问题，跟踪应用程序的状态以及记录重要的时间。</li><li><code>logging</code>模块提供了丰富的配置选项和灵活性，可以将日志信息输出到不同的位置，设置不同的日志级别等。</li></ul><h3 id="logging模块的四大组件"><a href="#logging模块的四大组件" class="headerlink" title="logging模块的四大组件"></a>logging模块的四大组件</h3><table><thead><tr><th align="left">模块名称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">logger</td><td align="left">日志器，提供程序可使用的接口；</td></tr><tr><td align="left">handler</td><td align="left">处理器，用于写入</td></tr><tr><td align="left">filter</td><td align="left">过滤器，用于输出符合指定条件的日志记录</td></tr><tr><td align="left">formatter</td><td align="left">格式器，决定日志记录的输出格式</td></tr></tbody></table><h3 id="日志等级"><a href="#日志等级" class="headerlink" title="日志等级"></a>日志等级</h3><table><thead><tr><th align="left">级别</th><th align="left">用法</th></tr></thead><tbody><tr><td align="left">DEBUG</td><td align="left">最低级别的日志，用于调试和记录详细信息，通常用于开发和调试阶段；</td></tr><tr><td align="left">INFO</td><td align="left">信息性信息，用于调试和记录详细信息，通常用于开发和调试阶段,确认程序按预期运行；</td></tr><tr><td align="left">WARNING</td><td align="left">表示警告，用于指示应用程序已经或即将发生的意外（例如：磁盘空间不足）。程序仍按预期进行；</td></tr><tr><td align="left">ERROR</td><td align="left">表示错误，由于严重的问题，程序的某些功能已经不能正常执行；</td></tr><tr><td align="left">CRITICAL</td><td align="left">最高级别的日志，表示严重错误，表明程序已不能继续执行。</td></tr></tbody></table><h3 id="logging-basicConfig-函数"><a href="#logging-basicConfig-函数" class="headerlink" title="logging.basicConfig()函数"></a>logging.basicConfig()函数</h3><ul><li><code>logging.basicConfig()</code>是Python中提供一个用来配置日志管理的函数。</li><li>格式说明：<code>logging.basicConfig(filename, filemode, level)</code></li><li>函数参数说明：</li></ul><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">fileneme</td><td align="left">指定将日志记录到文件中，如果不指定，则默认将日志输出到控制台；</td></tr><tr><td align="left">filemode</td><td align="left">指定文件打开模式，默认为<code>a</code>（追加模式）；</td></tr><tr><td align="left">format</td><td align="left">指定日志记录的格式；</td></tr><tr><td align="left">level</td><td align="left">指定日志记录的最低级别，默认为<code>logging.WARING</code>。</td></tr></tbody></table><ul><li>format格式说明：</li></ul><table><thead><tr><th align="left">格式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">%(asctime)s</td><td align="left">打印日志的时间</td></tr><tr><td align="left">%(filename)s</td><td align="left">打印当前模块名</td></tr><tr><td align="left">%(lineno)s</td><td align="left">打印日志当前的行号</td></tr><tr><td align="left">%(levelname)s</td><td align="left">打印日志级别名称</td></tr><tr><td align="left">%(message)s</td><td align="left">打印日志信息</td></tr></tbody></table><p>实例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#导入日志模块</span><span class="token function">import</span> logging<span class="token comment"># 设置日志输出格式</span><span class="token function">fmt</span> <span class="token operator">=</span> <span class="token string">"%(asctime)s - %(filename)s [line:%(lineno)d] - %(levelname)s - %(message)s"</span><span class="token comment"># 配置日志</span>logging.basicConfig<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">"myLog.log"</span>, <span class="token assign-left variable">filemode</span><span class="token operator">=</span><span class="token string">"a"</span>, <span class="token assign-left variable">format</span><span class="token operator">=</span>fmt, <span class="token assign-left variable">level</span><span class="token operator">=</span>logging.DEBUG<span class="token punctuation">)</span><span class="token comment">#调用日志器触发日志信息</span>logging.debug<span class="token punctuation">(</span><span class="token string">'This is a debug message'</span><span class="token punctuation">)</span>logging.info<span class="token punctuation">(</span><span class="token string">'This is an info message'</span><span class="token punctuation">)</span>logging.warning<span class="token punctuation">(</span><span class="token string">'This is a warning message'</span><span class="token punctuation">)</span>logging.error<span class="token punctuation">(</span><span class="token string">'This is an error message'</span><span class="token punctuation">)</span>logging.critical<span class="token punctuation">(</span><span class="token string">'This is a critical message'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Other-1"><a href="#Other-1" class="headerlink" title="Other"></a>Other</h2><h3 id="re"><a href="#re" class="headerlink" title="re"></a>re</h3><p>正则表达式处理，可以用于文本搜索、替换、分割等</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment"># \d :数字</span><span class="token comment"># 检测字符串是否为纯数字的字符串</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r'\d+'</span><span class="token punctuation">,</span><span class="token string">'1234234234'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># \w:数字字母下划线</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r'\w+'</span><span class="token punctuation">,</span><span class="token string">'a*8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># \s:空白字符  \S 非空</span>result<span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r'^\s+$'</span><span class="token punctuation">,</span><span class="token string">'    '</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># . 任意字符</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r'^code\d-\d-.+$'</span><span class="token punctuation">,</span><span class="token string">'code5-2-random'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># []区间，可选列表</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r'^abc&#123;2,5&#125;$'</span><span class="token punctuation">,</span><span class="token string">'abcccccc'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># | 或者</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r'^a|b|c$'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""&lt;re.Match object; span=(0, 10), match='1234234234'>&lt;re.Match object; span=(0, 1), match='a'>&lt;re.Match object; span=(0, 4), match='    '>&lt;re.Match object; span=(0, 14), match='code5-2-random'>NoneNone"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="turtle"><a href="#turtle" class="headerlink" title="turtle"></a>turtle</h3><p>1969年诞生，Python语言的标准库之一，入门级的图形绘制函数库，它提供了一个海龟，你可以把它理解为一个机器人，只听得懂有限的指令，海龟走过的轨迹绘制成了图形。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>forward(d)&#x2F;fd(d)</td><td>向当前画笔方向移动d像素长度</td></tr><tr><td>backward(d)&#x2F;back(d)&#x2F;bk(d)</td><td>向当前画笔相反方向移动d像素长度</td></tr><tr><td>goto(x,y)&#x2F;setpos(x,y)&#x2F;setposition(x,y)</td><td>将画笔移动到坐标为x,y的位置</td></tr><tr><td>setx(x)</td><td>设置海龟的横坐标为 x，纵坐标保持不变</td></tr><tr><td>sety(y)</td><td>设置海龟的纵坐标为 y，横坐标保持不变</td></tr><tr><td>penup()&#x2F;up()</td><td>提起笔移动，不绘制图形，用于另起一个地方绘制</td></tr><tr><td>pendown()&#x2F;down()</td><td>放下笔，移动时绘制图形，缺省时也为绘制</td></tr><tr><td>right(degree)&#x2F;rt(degree)</td><td>顺时针移动degree°</td></tr><tr><td>left(degree)&#x2F;lt(degree)</td><td>逆时针移动degree°</td></tr><tr><td>setheading(angle)&#x2F;seth(angle)</td><td>设置海龟的朝向为 angle</td></tr><tr><td>circle(radius, extent&#x3D;None, steps&#x3D;None)</td><td>绘制圆弧</td></tr><tr><td>dot(radius,colorstr)</td><td>绘制一个指定直径和颜色的圆点</td></tr><tr><td>home()</td><td>设置当前画笔位置为原点，朝向东</td></tr></tbody></table><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p>time 模块提供了处理时间的函数，例如获取当前时间、格式化日期和时间、计时等。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timet <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 时间戳：1970年</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>t <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 结构化的时间</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>tm_year<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>tm_year<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 获取</span>s <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""1720108629.4128764time.struct_time(tm_year=2024, tm_mon=7, tm_mday=4, tm_hour=23, tm_min=57, tm_sec=9, tm_wday=3, tm_yday=186, tm_isdst=0)2024 &lt;class 'int'>2024-07-04 23:57:09"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、Maven使用</title>
      <link href="/posts/1f96a812.html"/>
      <url>/posts/1f96a812.html</url>
      
        <content type="html"><![CDATA[<h1 id="三、Maven-使用"><a href="#三、Maven-使用" class="headerlink" title="三、Maven 使用"></a>三、Maven 使用</h1><h2 id="1、Maven-核心概念：坐标"><a href="#1、Maven-核心概念：坐标" class="headerlink" title="1、Maven 核心概念：坐标"></a>1、Maven 核心概念：坐标</h2><h3 id="数学中的坐标"><a href="#数学中的坐标" class="headerlink" title="数学中的坐标"></a>数学中的坐标</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071632201.png"></p><p>使用 x、y、z 三个『向量』作为空间的坐标系，可以在『空间』中唯一的定位到一个『点』。</p><h3 id="Maven中的坐标"><a href="#Maven中的坐标" class="headerlink" title="Maven中的坐标"></a>Maven中的坐标</h3><h4 id="向量说明"><a href="#向量说明" class="headerlink" title="向量说明"></a>向量说明</h4><p>使用三个『向量』在『Maven的仓库』中<strong>唯一的定位</strong>到一个『jar』包。</p><ul><li><code>groupId</code>：公司或组织的 id</li><li><code>artifactId</code>：一个项目或者是项目中的一个模块的 id(更偏向于项目中的一个模块或一个没有进行拆分的项目)</li><li><code>version</code>：版本号</li></ul><blockquote><p>一个公司中有多个项目，每个项目中有多个工程<br>一个项目在实现的时候，会拆分出多个模块，每个模块是一个工程</p></blockquote><h4 id="三个向量的取值方式"><a href="#三个向量的取值方式" class="headerlink" title="三个向量的取值方式"></a>三个向量的取值方式</h4><p><code>groupId</code>：公司或组织域名的倒序，通常也会加上项目名称(为了区别项目这一层)</p><ul><li>例如：com.atguigu.maven</li></ul><p><code>artifactId</code>：模块的名称，将来作为 Maven 工程的工程名</p><p><code>version</code>：模块的版本号，根据自己的需要设定</p><ul><li>例如：SNAPSHOT 表示快照版本，正在迭代过程中，不稳定的版本</li><li>例如：RELEASE 表示正式版本</li></ul><p>举例：</p><ul><li>groupId：com.atguigu.maven</li><li>artifactId：pro01-atguigu-maven</li><li>version：1.0-SNAPSHOT</li></ul><h3 id="坐标和仓库中-jar-包的存储路径之间的对应关系"><a href="#坐标和仓库中-jar-包的存储路径之间的对应关系" class="headerlink" title="坐标和仓库中 jar 包的存储路径之间的对应关系"></a>坐标和仓库中 jar 包的存储路径之间的对应关系</h3><p>坐标：</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;&lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;&lt;version&gt;2.5&lt;&#x2F;version&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面坐标对应的 jar 包在 Maven 本地仓库中的位置：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">Maven本地仓库根目录\javax\servlet\servlet-api\2.5\servlet-api-2.5.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一定要学会根据坐标到本地仓库中找到对应的 jar 包。</p><h2 id="2、创建普通-Java-项目"><a href="#2、创建普通-Java-项目" class="headerlink" title="2、创建普通 Java 项目"></a>2、创建普通 Java 项目</h2><h3 id="创建目录作为后面操作的工作空间"><a href="#创建目录作为后面操作的工作空间" class="headerlink" title="创建目录作为后面操作的工作空间"></a>创建目录作为后面操作的工作空间</h3><p>其实就是一个普通的目录，在这个目录下我们要去写代码、开发应用程序</p><p>例如：D:\maven-workspace\space201026</p><blockquote><p>此时我们已经有了三个目录，分别是：<br>★Maven 核心程序：中军大帐<br>★Maven 本地仓库：兵营<br>★本地工作空间：战场</p></blockquote><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071640812.png"></p><h3 id="在工作空间目录下打开命令行窗口"><a href="#在工作空间目录下打开命令行窗口" class="headerlink" title="在工作空间目录下打开命令行窗口"></a>在工作空间目录下打开命令行窗口</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071641475.png"></p><h3 id="使用命令生成Maven工程"><a href="#使用命令生成Maven工程" class="headerlink" title="使用命令生成Maven工程"></a>使用命令生成Maven工程</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071641275.png"></p><p>运行 <code>mvn archetype:generate</code> 命令</p><p>下面根据提示操作</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): 7:【直接回车，使用默认值】Define value for property &#39;groupId&#39;: com.atguigu.mavenDefine value for property &#39;artifactId&#39;: pro01-maven-javaDefine value for property &#39;version&#39; 1.0-SNAPSHOT: :【直接回车，使用默认值】Define value for property &#39;package&#39; com.atguigu.maven: :【直接回车，使用默认值】Confirm properties configuration: groupId: com.atguigu.maven artifactId: pro01-maven-java version: 1.0-SNAPSHOT package: com.atguigu.maven Y: :【直接回车，表示确认。如果前面有输入错误，想要重新输入，则输入 N 再回车。】1234567891011<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一次执行会下载插件依赖等，将下载的放在配置的Maven本地仓库中。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071642955.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071642279.png"></p><p>选择创建项目的模式，默认选择7，快速开始</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071643081.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071643833.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071643560.png"></p><h3 id="调整"><a href="#调整" class="headerlink" title="调整"></a>调整</h3><p>Maven 默认生成的工程，对 junit 依赖的是较低的 3.8.1 版本，我们可以改成较适合的 4.12 版本。</p><p>在创建的工程的配置文件pom.xml中进行修改：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 依赖信息配置 --></span><span class="token comment">&lt;!-- dependencies复数标签：里面包含dependency单数标签 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- dependency单数标签：配置一个具体的依赖 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 通过坐标来依赖其他jar包 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 依赖的范围 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自动生成的 App.java 和 AppTest.java 可以删除。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071644464.png"></p><h3 id="自动生成的-pom-xml-解读"><a href="#自动生成的-pom-xml-解读" class="headerlink" title="自动生成的 pom.xml 解读"></a>自动生成的 pom.xml 解读</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 根标签：project，表示对当前工程进行配置管理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- modelVersion标签：从Maven2开始固定为4.0.0 --></span>  <span class="token comment">&lt;!-- 表示当前pom.xml所采用的标签结构 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 当前Maven工程的坐标 --></span>  <span class="token comment">&lt;!-- groupId代表公司或组织开发的某一个项目 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.cw.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- artifactId表示项目下的某一个模块 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pro01-maven-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- version表示当前模块的版本 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 当前Maven工程的打包方式，可选值有下面三种： --></span>  <span class="token comment">&lt;!-- 默认为jar --></span>  <span class="token comment">&lt;!-- jar：表示这个工程是一个Java工程，生成jar包  --></span>  <span class="token comment">&lt;!-- war：表示这个工程是一个Web工程，生成war包 --></span>  <span class="token comment">&lt;!-- pom：表示这个工程是“管理其他工程”的工程 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>pro01-maven-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.apache.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 在Maven中定义属性值 --></span>  <span class="token comment">&lt;!-- 标签名为属性名，标签的内容为属性值 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 工程构建过程中读取源码时使用的字符集 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- dependencies：配置依赖信息 --></span>  <span class="token comment">&lt;!-- 当前工程所依赖的jar包 --></span>  <span class="token comment">&lt;!-- 一个dependencies标签可以包含多个dependency --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- dependency配置一个具体的依赖信息 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- 在dependency标签内使用具体的坐标依赖我们需要的一个jar包 --></span>      <span class="token comment">&lt;!-- 导入哪个jar包就配置它的坐标信息即可 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- scope标签配置依赖的范围 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、Maven核心概念：POM"><a href="#3、Maven核心概念：POM" class="headerlink" title="3、Maven核心概念：POM"></a>3、Maven核心概念：POM</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>POM：Project Object Model，项目对象模型。和 POM 类似的是：DOM（Document Object Model），文档对象模型。它们都是模型化思想的具体体现。</p><h3 id="模型化思想"><a href="#模型化思想" class="headerlink" title="模型化思想"></a>模型化思想</h3><p>POM 表示将工程抽象为一个模型，再用程序中的对象来描述这个模型。这样我们就可以用程序来管理项目了。我们在开发过程中，最基本的做法就是将现实生活中的事物抽象为模型，然后封装模型相关的数据作为一个对象，这样就可以在程序中计算与现实事物相关的数据。</p><h3 id="对应的配置文件"><a href="#对应的配置文件" class="headerlink" title="对应的配置文件"></a>对应的配置文件</h3><p>POM 理念集中体现在 Maven 工程根目录下 pom.xml 这个配置文件中。所以这个 pom.xml 配置文件就是 Maven 工程的核心配置文件。其实学习 Maven 就是学这个文件怎么配置，各个配置有什么用。</p><h2 id="4、Maven核心概念：约定的目录结构"><a href="#4、Maven核心概念：约定的目录结构" class="headerlink" title="4、Maven核心概念：约定的目录结构"></a>4、Maven核心概念：约定的目录结构</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">src/main/Java —— 存放项目的.Java文件src/main/resources  —— 存放项目资源文件，如spring配置文件src/test/Java —— 存放所有单元测试.Java文件，如JUnit测试类src/test/resources —— 测试资源文件pom.xml             ——Maven项目核心配置文件Project<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="各个目录的作用"><a href="#各个目录的作用" class="headerlink" title="各个目录的作用"></a>各个目录的作用</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071648989.png"></p><p>另外还有一个 target 目录专门存放构建操作输出的结果。</p><h4 id="约定目录结构的意义"><a href="#约定目录结构的意义" class="headerlink" title="约定目录结构的意义"></a>约定目录结构的意义</h4><p>Maven 为了让构建过程能够尽可能<strong>自动化</strong>完成，所以必须约定目录结构的作用。例如：Maven 执行编译操作，必须先去 Java 源程序目录读取 Java 源代码，然后执行编译，最后把编译结果存放在 target 目录。</p><h4 id="约定大于配置"><a href="#约定大于配置" class="headerlink" title="约定大于配置"></a>约定大于配置</h4><p>Maven 对于目录结构这个问题，没有采用配置的方式，而是基于约定。这样会让我们在开发过程中非常方便。如果每次创建 Maven 工程后，还需要针对各个目录的位置进行详细的配置，那肯定非常麻烦。</p><p>目前开发领域的技术发展趋势就是：约定大于配置，配置大于编码。</p><h2 id="5、在-Maven-工程中编写代码"><a href="#5、在-Maven-工程中编写代码" class="headerlink" title="5、在 Maven 工程中编写代码"></a>5、在 Maven 工程中编写代码</h2><h3 id="主体程序"><a href="#主体程序" class="headerlink" title="主体程序"></a>主体程序</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071650186.png"></p><p>主体程序指的是被测试的程序，同时也是将来在项目中真正要使用的程序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>maven</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071651411.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>maven</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>maven<span class="token punctuation">.</span></span><span class="token class-name">Calculator</span></span><span class="token punctuation">;</span>  <span class="token comment">// 静态导入的效果是将Assert类中的静态资源导入当前类</span><span class="token comment">// 这样一来，在当前类中就可以直接使用Assert类中的静态资源，不需要写类名</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorTest</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 1.创建Calculator对象</span>    <span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.调用Calculator对象的方法，获取到程序运行实际的结果</span>    <span class="token keyword">int</span> actualResult <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3.声明一个变量，表示程序运行期待的结果</span>    <span class="token keyword">int</span> expectedResult <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token comment">// 4.使用断言来判断实际结果和期待结果是否一致</span>    <span class="token comment">// 如果一致：测试通过，不会抛出异常</span>    <span class="token comment">// 如果不一致：抛出异常，测试失败</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">,</span> actualResult<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、执行-Maven-的构建命令"><a href="#6、执行-Maven-的构建命令" class="headerlink" title="6、执行 Maven 的构建命令"></a>6、执行 Maven 的构建命令</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>运行 Maven 中和构建操作相关的命令时，必须进入到 pom.xml 所在的目录。如果没有在 pom.xml 所在的目录运行 Maven 的构建命令，那么会看到下面的错误信息：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">The goal you specified requires a project to execute but there is no POM in this directory1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>mvn -v 命令和构建操作无关，只要正确配置了 PATH，在任何目录下执行都可以。而构建相关的命令要在 pom.xml 所在目录下运行——操作哪个工程，就进入这个工程的 pom.xml 目录。</p></blockquote><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071652172.png"></p><h3 id="清理操作"><a href="#清理操作" class="headerlink" title="清理操作"></a>清理操作</h3><p><code>mvn clean</code></p><p>效果：删除 target 目录</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071654976.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071654166.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071654609.png"></p><h3 id="编译操作"><a href="#编译操作" class="headerlink" title="编译操作"></a>编译操作</h3><p><strong>compile 是 Maven 工程的编译命令，作用是将 src&#x2F;main&#x2F;Java 下的文件编译为 class 文件输出到 target 目录下。</strong></p><p>主程序编译：<code>mvn compile</code></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071655029.png"></p><p>测试程序编译：mvn test-compile</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071655573.png"></p><p>主体程序编译结果存放的目录：target&#x2F;classes</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071655688.png"></p><p>测试程序编译结果存放的目录：target&#x2F;test-classes</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071656195.png"></p><h3 id="测试操作"><a href="#测试操作" class="headerlink" title="测试操作"></a>测试操作</h3><p>test 是 Maven 工程的测试命令，会执行 src&#x2F;test&#x2F;Java 下的单元测试类。</p><p><code>mvn test</code></p><p>测试的报告存放的目录：target&#x2F;surefire-reports</p><blockquote><p>进行测试操作，Maven会自动执行主程序和测试程序的编译操作</p></blockquote><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071656061.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071657793.png"></p><h3 id="打包操作"><a href="#打包操作" class="headerlink" title="打包操作"></a>打包操作</h3><p><code>mvn package</code></p><p><strong>package 是 Maven 工程的打包命令，对于 Java 工程执行 package 打成 Jar 包，对于 web 工程打成 war 包。</strong></p><p>打包的结果——jar 包，存放的目录：target</p><blockquote><p>进行打包操作，Maven会自动执行主程序和测试程序的编译操作，以及测试程序的允许</p></blockquote><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071657689.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071657051.png"></p><h3 id="安装操作"><a href="#安装操作" class="headerlink" title="安装操作"></a>安装操作</h3><p><code>mvn install</code></p><p><strong>install 是 Maven 工程的安装命令，执行 install 将 Maven 打成 Jar 包或 war 包发布到本地仓库。</strong></p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">[INFO] Installing D:\maven-workspace\space201026\pro01-maven-java\target\pro01-maven-java-1.0-SNAPSHOT.jar to D:\maven-rep1026\com\atguigu\maven\pro01-maven-java\1.0-SNAPSHOT\pro01-maven-java-1.0-SNAPSHOT.jar[INFO] Installing D:\maven-workspace\space201026\pro01-maven-java\pom.xml to D:\maven-rep1026\com\atguigu\maven\pro01-maven-java\1.0-SNAPSHOT\pro01-maven-java-1.0-SNAPSHOT.pom12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装的效果是将本地构建过程中生成的 jar 包存入 Maven 本地仓库。这个 jar 包在 Maven 仓库中的路径是根据它的坐标生成的。</p><p>坐标信息如下：</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">  &lt;groupId&gt;com.atguigu.maven&lt;&#x2F;groupId&gt;  &lt;artifactId&gt;pro01-maven-java&lt;&#x2F;artifactId&gt;  &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 Maven 仓库中生成的路径如下：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">D:\maven-rep1026\com\atguigu\maven\pro01-maven-java\1.0-SNAPSHOT\pro01-maven-java-1.0-SNAPSHOT.jar1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>另外，安装操作还会将 pom.xml 文件转换为 XXX.pom 文件一起存入本地仓库。所以我们在 Maven 的本地仓库中想看一个 jar 包原始的 pom.xml 文件时，查看对应 XXX.pom 文件即可，它们是名字发生了改变，本质上是同一个文件。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071658472.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071658908.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071658394.png"></p><blockquote><p>命令可以组合执行，如 mvn clean install 相当于清理操作和安装操作同时执行</p></blockquote><h2 id="7、创建-JavaWeb-项目"><a href="#7、创建-JavaWeb-项目" class="headerlink" title="7、创建 JavaWeb 项目"></a>7、创建 JavaWeb 项目</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>使用 mvn archetype:generate 命令生成 Web 工程时，需要使用一个专门的 archetype。这个专门生成 Web 工程骨架的 archetype 可以参照官网看到它的用法：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071702132.png"></p><p>参数 archetypeGroupId、archetypeArtifactId、archetypeVersion 用来指定现在使用的 maven-archetype-webapp 的坐标。</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>注意：如果在上一个工程的目录下执行 mvn archetype:generate 命令，那么 Maven 会报错：不能在一个非 pom 的工程下再创建其他工程。所以不要再刚才创建的工程里再创建新的工程，请回到工作空间根目录来操作。</p><p>然后运行生成工程的命令：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">mvn archetype:generate -DarchetypeGroupId&#x3D;org.apache.maven.archetypes -DarchetypeArtifactId&#x3D;maven-archetype-webapp -DarchetypeVersion&#x3D;1.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071703294.png"></p><p>下面的操作按照提示执行：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">Define value for property &#39;groupId&#39;: com.atguigu.maven Define value for property &#39;artifactId&#39;: pro02-maven-web Define value for property &#39;version&#39; 1.0-SNAPSHOT: :【直接回车，使用默认值】Define value for property &#39;package&#39; com.atguigu.maven: :【直接回车，使用默认值】 Confirm properties configuration: groupId: com.atguigu.maven artifactId: pro02-maven-web version: 1.0-SNAPSHOT package: com.atguigu.maven Y: :【直接回车，表示确认】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071704375.png"></p><h3 id="生成的pom-xml"><a href="#生成的pom-xml" class="headerlink" title="生成的pom.xml"></a>生成的pom.xml</h3><p>确认打包的方式是war包形式</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;packaging&gt;war&lt;&#x2F;packaging&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071704024.png"></p><h3 id="生成的Web工程的目录结构"><a href="#生成的Web工程的目录结构" class="headerlink" title="生成的Web工程的目录结构"></a>生成的Web工程的目录结构</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071705739.png"></p><p>webapp 目录下有 index.jsp</p><p>WEB-INF 目录下有 web.xml</p><h3 id="创建-Servlet"><a href="#创建-Servlet" class="headerlink" title="创建 Servlet"></a>创建 Servlet</h3><h4 id="在-main-目录下创建-java-目录"><a href="#在-main-目录下创建-java-目录" class="headerlink" title="在 main 目录下创建 java 目录"></a>在 main 目录下创建 java 目录</h4><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071706626.png"></p><h4 id="在-java-目录下创建-Servlet-类所在的包的目录"><a href="#在-java-目录下创建-Servlet-类所在的包的目录" class="headerlink" title="在 java 目录下创建 Servlet 类所在的包的目录"></a>在 java 目录下创建 Servlet 类所在的包的目录</h4><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071706078.png"></p><h4 id="在包下创建-Servlet-类"><a href="#在包下创建-Servlet-类" class="headerlink" title="在包下创建 Servlet 类"></a>在包下创建 Servlet 类</h4><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071707867.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>maven</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello maven web"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在-web-xml-中注册-Servlet"><a href="#在-web-xml-中注册-Servlet" class="headerlink" title="在 web.xml 中注册 Servlet"></a>在 web.xml 中注册 Servlet</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.atguigu.maven.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>12345678<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在-index-jsp-页面编写超链接"><a href="#在-index-jsp-页面编写超链接" class="headerlink" title="在 index.jsp 页面编写超链接"></a>在 index.jsp 页面编写超链接</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>helloServlet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Access Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>JSP全称是 Java Server Page，和 Thymeleaf 一样，是服务器端页面渲染技术。这里我们不必关心 JSP 语法细节，编写一个超链接标签即可。</p></blockquote><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>此时直接执行 mvn compile 命令出错：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">程序包 javax.servlet.http 不存在程序包 javax.servlet 不存在找不到符号符号: 类 HttpServlet……123456789<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的错误信息说明：我们的 Web 工程用到了 HttpServlet 这个类，而 HttpServlet 这个类属于 servlet-api.jar 这个 jar 包。此时我们说，Web 工程需要依赖 servlet-api.jar 包。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071709187.png"></p><h3 id="配置对-servlet-api-jar-包的依赖"><a href="#配置对-servlet-api-jar-包的依赖" class="headerlink" title="配置对 servlet-api.jar 包的依赖"></a>配置对 servlet-api.jar 包的依赖</h3><p>对于不知道详细信息的依赖可以到<a href="https://mvnrepository.com/%E7%BD%91%E7%AB%99%E6%9F%A5%E8%AF%A2%E3%80%82%E4%BD%BF%E7%94%A8%E5%85%B3%E9%94%AE%E8%AF%8D%E6%90%9C%E7%B4%A2%EF%BC%8C%E7%84%B6%E5%90%8E%E5%9C%A8%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E5%88%97%E8%A1%A8%E4%B8%AD%E9%80%89%E6%8B%A9%E9%80%82%E5%90%88%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%82">https://mvnrepository.com/网站查询。使用关键词搜索，然后在搜索结果列表中选择适合的使用。</a></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071709644.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071709568.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071710070.png"></p><p>比如，我们找到的 servlet-api 的依赖信息：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>1234567<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以把上面的信息加入 pom.xml。重新执行 mvn compile 命令。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071710436.png"></p><h3 id="将-Web-工程打包为-war-包"><a href="#将-Web-工程打包为-war-包" class="headerlink" title="将 Web 工程打包为 war 包"></a>将 Web 工程打包为 war 包</h3><p>运行 mvn package 命令，生成 war 包的位置如下图所示：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071711804.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071711389.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071711288.png"></p><h3 id="将-war-包部署到-Tomcat-上运行"><a href="#将-war-包部署到-Tomcat-上运行" class="headerlink" title="将 war 包部署到 Tomcat 上运行"></a>将 war 包部署到 Tomcat 上运行</h3><p>将 war 包复制到 Tomcat&#x2F;webapps 目录下</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071712427.png"></p><blockquote><p>Tomcat会自动解压war包</p></blockquote><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071712790.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071712817.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071712932.png"></p><h2 id="8、让-Web-工程依赖-Java-工程"><a href="#8、让-Web-工程依赖-Java-工程" class="headerlink" title="8、让 Web 工程依赖 Java 工程"></a>8、让 Web 工程依赖 Java 工程</h2><h3 id="观念"><a href="#观念" class="headerlink" title="观念"></a>观念</h3><p>明确一个意识：从来只有 Web 工程依赖 Java 工程，没有反过来 Java 工程依赖 Web 工程。本质上来说，Web 工程依赖的 Java 工程其实就是 Web 工程里导入的 jar 包。最终 Java 工程会变成 jar 包，放在 Web 工程的 WEB-INF&#x2F;lib 目录下。</p><h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><p>在 pro02-maven-web 工程的 pom.xml 中，找到 dependencies 标签，在 dependencies 标签中做如下配置：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 配置对Java工程pro01-maven-java的依赖 --></span><span class="token comment">&lt;!-- 具体的配置方式：在dependency标签内使用坐标实现依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.atguigu.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pro01-maven-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>1234567<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在-Web-工程中，编写测试代码"><a href="#在-Web-工程中，编写测试代码" class="headerlink" title="在 Web 工程中，编写测试代码"></a>在 Web 工程中，编写测试代码</h3><p>证明在Web工程中可以使用Java工程中创建的那个类：Calculator</p><h4 id="补充创建目录"><a href="#补充创建目录" class="headerlink" title="补充创建目录"></a>补充创建目录</h4><p>pro02-maven-web\src\test\java\com\atguigu\maven</p><p>可以使用mkdir命令：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">mkdir src\test\java\com\atguigu\maven<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="确认-Web-工程依赖了-junit"><a href="#确认-Web-工程依赖了-junit" class="headerlink" title="确认 Web 工程依赖了 junit"></a>确认 Web 工程依赖了 junit</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h4><p>把 Java 工程的 CalculatorTest.java 类复制到 pro02-maven-wb\src\test\java\com\atguigu\maven 目录下</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071726268.png"></p><h3 id="执行Maven命令"><a href="#执行Maven命令" class="headerlink" title="执行Maven命令"></a>执行Maven命令</h3><h4 id="测试命令"><a href="#测试命令" class="headerlink" title="测试命令"></a>测试命令</h4><p>mvn test</p><p>说明：测试操作中会提前自动执行编译操作，测试成功就说明编译也是成功的。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071742159.png"></p><h4 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h4><p>mvn package</p><p>通过查看 war 包内的结构，我们看到被 Web 工程依赖的 Java 工程确实是会变成 Web 工程的 WEB-INF&#x2F;lib 目录下的 jar 包。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071743394.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071744335.png"></p><h4 id="查看当前-Web-工程所依赖的-jar-包的列表"><a href="#查看当前-Web-工程所依赖的-jar-包的列表" class="headerlink" title="查看当前 Web 工程所依赖的 jar 包的列表"></a>查看当前 Web 工程所依赖的 jar 包的列表</h4><p>mvn dependency:list</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">[INFO] The following files have been resolved:[INFO] org.hamcrest:hamcrest-core:jar:1.3:test[INFO] javax.servlet:javax.servlet-api:jar:3.1.0:provided[INFO] com.atguigu.maven:pro01-maven-java:jar:1.0-SNAPSHOT:compile[INFO] junit:junit:jar:4.12:test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071744668.png"></p><p>说明：javax.servlet:javax.servlet-api:jar:3.1.0:provided 格式显示的是一个 jar 包的坐标信息。格式是：</p><blockquote><p>groupId:artifactId:打包方式:version:依赖的范围</p></blockquote><p>这样的格式虽然和我们 XML 配置文件中坐标的格式不同，但是本质上还是坐标信息，大家需要能够认识这样的格式，将来从 Maven 命令的日志或错误信息中看到这样格式的信息，就能够识别出来这是坐标。进而根据坐标到Maven 仓库找到对应的jar包，用这样的方式解决我们遇到的报错的情况。</p><h4 id="以树形结构查看当前-Web-工程的依赖信息"><a href="#以树形结构查看当前-Web-工程的依赖信息" class="headerlink" title="以树形结构查看当前 Web 工程的依赖信息"></a>以树形结构查看当前 Web 工程的依赖信息</h4><p>mvn dependency:tree</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">[INFO] com.atguigu.maven:pro02-maven-web:war:1.0-SNAPSHOT[INFO] +- junit:junit:jar:4.12:test[INFO] | \- org.hamcrest:hamcrest-core:jar:1.3:test[INFO] +- javax.servlet:javax.servlet-api:jar:3.1.0:provided[INFO] \- com.atguigu.maven:pro01-maven-java:jar:1.0-SNAPSHOT:compile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071745710.png"></p><p>我们在 pom.xml 中并没有依赖 hamcrest-core，但是它却被加入了我们依赖的列表。原因是：junit 依赖了hamcrest-core，然后基于依赖的传递性，hamcrest-core 被传递到我们的工程了。</p><h2 id="9、生命周期"><a href="#9、生命周期" class="headerlink" title="9、生命周期"></a>9、生命周期</h2><h3 id="三个生命周期"><a href="#三个生命周期" class="headerlink" title="三个生命周期"></a>三个生命周期</h3><p>Maven 对项目构建过程分为三套相互独立的生命周期，请注意这里说的是“三套”，而且“相互独立”，这三套生命周期分别是：</p><ul><li>Clean Lifecycle：在进行真正的构建之前进行一些清理工作。</li><li>Default Lifecycle：构建的核心部分，编译，测试，打包，部署等等。</li><li>Site Lifecycle：生成项目报告，站点，发布站点。</li></ul><p>完整的项目构建过程包括： 清理、编译、测试、打包、集成测试、验证、部署</p><table><thead><tr><th>生命周期名称</th><th>作用</th><th>各个环节</th></tr></thead><tbody><tr><td>Clean</td><td>清理操作相关</td><td>1.pre-clean执行清理前的工作<br/>2.clean清理上一次构建生成的所有文件<br/>3.post-clean 执行清理后的文件</td></tr><tr><td>Site</td><td>生成站点相关</td><td>1. pre-site 在生成项目站点前要完成的工作<br/>2. site 生成项目的站点文档<br/>3. post-site在生成项目站点后要完成的工作<br/>4. site-deploy发布生成的站点到服务器上</td></tr><tr><td>Default</td><td>主要构建过程</td><td>validate 检查 generate-sources process-sources 源码<br/>compile 编译项目 main 目录下的源代码。<br/>test-compile 编译测试源代码。 <br/>package 接受编译好的代码，打包成可发布的格式，如JAR。 <br/>install 将包安装至本地仓库，以让其它项目依赖。 <br/>deploy将最终的包复制到远程的仓库，以让其它开发人员共享；<br/>或者部署到服务器上运行（需借助插件，例如：cargo）。</td></tr></tbody></table><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>为了让构建过程自动化完成，Maven 设定了三个生命周期，生命周期中的每一个环节对应构建过程中的一个操作。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>前面三个生命周期彼此是独立的。</li><li>在任何一个生命周期内部，执行任何一个具体环节的操作，都是从本周期最初的位置开始执行，直到指定的地方。（本节记住这句话就行了，其他的都不需要记）</li></ul><p>Maven 之所以这么设计其实就是为了提高构建过程的自动化程度：让使用者只关心最终要干的即可，过程中的各个环节是自动执行的。</p><h3 id="命令与生命周期的阶段"><a href="#命令与生命周期的阶段" class="headerlink" title="命令与生命周期的阶段"></a>命令与生命周期的阶段</h3><p>每个 Maven 命令对应生命周期的某个阶段，例如：mvn clean 命令对应clean生命周期的clean阶段， mvn test 命令对应default 生命周期的 test 阶段。</p><p>执行命令会将该命令在的在生命周期当中之前的阶段自动执行，比如：执行 mvn clean 命令会自动执行 pre-clean 和clean 两个阶段，mvn test 命令会自动执行 validate、compile、test 等阶段。</p><p>注意：执行某个生命周期的某个阶段不会影响其它的生命周期！</p><p>如果要同时执行多个生命周期的阶段可在命令行输入多个命令，中间以空格隔开，例如：</p><p>clean package 该命令执行 clean 生命周期的 clean 阶段和 default 生命周期的 package 阶段。</p><h2 id="10、Maven-的概念模型-了解"><a href="#10、Maven-的概念模型-了解" class="headerlink" title="10、Maven 的概念模型(了解)"></a>10、Maven 的概念模型(了解)</h2><p>Maven 包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个项目生命周期(Project Lifecycle)， 一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin) 目标(goal)的逻辑。</p><p>下图是Maven的概念模型图：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407040014277.jpg"></p><h3 id="项目对象模型-Project-Object-Model"><a href="#项目对象模型-Project-Object-Model" class="headerlink" title="项目对象模型 (Project Object Model)"></a>项目对象模型 (Project Object Model)</h3><p>一个Maven工程都有一个pom.xml文件，通过pom.xml文件定义项目的坐标、项目依赖、项目信息、插件目标 等。</p><h3 id="依赖管理系统-Dependency-Management-System"><a href="#依赖管理系统-Dependency-Management-System" class="headerlink" title="依赖管理系统(Dependency Management System)"></a>依赖管理系统(Dependency Management System)</h3><p>通过Maven的依赖管理对项目所依赖的Jar 包进行统一管理。</p><p>比如：项目依赖junit4.9，通过在pom.xml中定义junit4.9的依赖即使用junit4.9，如下所示是junit4.9的依赖定义：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐</span> <span class="token attr-name">依赖关系</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐</span> <span class="token attr-name">此项目运行使用junit，所以此项目依赖junit</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐</span> <span class="token attr-name">junit的组织名称</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐</span> <span class="token attr-name">junit的模块名称</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐</span> <span class="token attr-name">junit版本</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐</span> <span class="token attr-name">依赖范围：单元测试时使用junit</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一个项目生命周期-Project-Lifecycle"><a href="#一个项目生命周期-Project-Lifecycle" class="headerlink" title="一个项目生命周期(Project Lifecycle)"></a>一个项目生命周期(Project Lifecycle)</h3><p>使用Maven完成项目的构建，项目构建包括：清理、编译、测试、部署等过程，Maven 将这些过程规范为一个生命周期，如下所示是生命周期的各个阶段：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407040015482.png"></p><p>Maven 通过执行一些简单命令即可实现上边生命周期的各个过程，比如执行 mvn compile 执行编译、执行mvn clean执行清理。</p><h3 id="一组标准集合"><a href="#一组标准集合" class="headerlink" title="一组标准集合"></a>一组标准集合</h3><p>Maven 将整个项目管理过程定义一组标准，比如：通过 Maven 构建工程有标准的目录结构，有标准的生命周期阶段、依赖管理有标准的坐标定义等。</p><h3 id="插件-plugin-目标-goal"><a href="#插件-plugin-目标-goal" class="headerlink" title="插件(plugin)目标(goal)"></a>插件(plugin)目标(goal)</h3><p>Maven 管理项目生命周期过程都是基于插件完成的。</p><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>Maven 的核心程序仅仅负责宏观调度，不做具体工作。具体工作都是由 Maven 插件完成的。例如：编译就是由 maven-compiler-plugin-3.1.jar 插件来执行的。</p><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><p>一个插件可以对应多个目标，而每一个目标都和生命周期中的某一个环节对应。 (目标其实是插件的功能)</p><p>Default 生命周期中有 compile 和 test-compile 两个和编译相关的环节，这两个环节对应 compile 和 test-compile 两个目标，而这两个目标都是由 maven-compiler-plugin-3.1.jar 插件来执行的。</p>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十六、Python装饰器</title>
      <link href="/posts/443faff9.html"/>
      <url>/posts/443faff9.html</url>
      
        <content type="html"><![CDATA[<h1 id="十六、Python装饰器"><a href="#十六、Python装饰器" class="headerlink" title="十六、Python装饰器"></a>十六、Python装饰器</h1><h2 id="1、闭包"><a href="#1、闭包" class="headerlink" title="1、闭包"></a>1、闭包</h2><h3 id="1-1-函数引用"><a href="#1-1-函数引用" class="headerlink" title="1.1 函数引用"></a>1.1 函数引用</h3><ul><li>Python中定义的函数，也可以像变量一样，将一个函数名，赋值给另一个变量名，赋值后，此变量名就可以作为该函数的一个别名使用，进行调用函数，此功能与列表操作的<code>sort()</code>方法类似，<code>sort()</code>方法的key参数传入的就是一个函数名。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Show Run ..."</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>a <span class="token operator">=</span> show<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407102355300.png" alt="image-20240710235453105"></p><blockquote><p>注意：在将一个函数名（函数引用）赋值给一个变量时，函数名后不能添加括号。</p></blockquote><h3 id="1-2-闭包"><a href="#1-2-闭包" class="headerlink" title="1.2 闭包"></a>1.2 闭包</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>闭包（Closure）是指在一个嵌套的函数内部访问其外部函数中定义的变量或函数的能力。换句话说，闭包是一个函数对象，它可以记住并访问它创建时的上下文环境中的变量。</p><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><p>闭包通常由两个部分组成：内部函数和与其相关的环境变量。</p><ul><li>内部函数是在外部函数中定义的函数，它可以访问外部函数中的局部变量和参数，以及外部函数所在的作用域中的变量。</li><li>环境变量是在外部函数中定义的变量或其他函数对象，它被内部函数引用并记住，即使外部函数执行完成后仍然存在。</li></ul><h4 id="闭包的特点"><a href="#闭包的特点" class="headerlink" title="闭包的特点"></a>闭包的特点</h4><ol><li>内部函数可以访问外部函数中定义的变量和参数，即使外部函数已经执行完毕；</li><li>闭包可以在外部函数的作用域之外被调用和执行；</li><li>闭包可以访问并修改外部函数中的局部变量，使其具有持久性。</li></ol><h4 id="闭包的应用场景"><a href="#闭包的应用场景" class="headerlink" title="闭包的应用场景"></a>闭包的应用场景</h4><ol><li>保护私有变量：可以使用闭包来创建私有变量和方法，通过内部函数的作用域和环境变量，可以实现对外部访问的限制；</li><li>延迟执行：可以使用闭包来延迟某个函数的执行，即在函数外部创建一个闭包，将需要执行的函数作为内部函数，通过调用闭包来触发函数的执行；</li><li>缓存数据：可以使用闭包来缓存一些昂贵的计算结果，以避免重复计算，提高程序的性能。</li></ol><blockquote><p>需要注意的是：在使用闭包时，要注意管理内存，避免产生不必要的内存泄露问题。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">out_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    out_n <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">def</span> <span class="token function">inner_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>out_n<span class="token punctuation">)</span>    <span class="token keyword">return</span> inner_func<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    of1 <span class="token operator">=</span> out_func<span class="token punctuation">(</span><span class="token punctuation">)</span>    of2 <span class="token operator">=</span> out_func<span class="token punctuation">(</span><span class="token punctuation">)</span>    of1<span class="token punctuation">(</span><span class="token punctuation">)</span>    of2<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="nonlocal"><a href="#nonlocal" class="headerlink" title="nonlocal"></a>nonlocal</h4><ul><li>和全局变量一样，在函数内是不能直接修改函数外的变量的，如果修改全局变量需要使用<code>global</code>在函数内部声明变量为全局变量。闭包中要修改变量也是一样，内函数是不能直接修改外函数中定义的变量的，如果需要修改，要在内函数中使用<code>nonlocal</code>关键字声明该变量为外函数的变量。</li></ul><h5 id="不使用nonlocal修饰"><a href="#不使用nonlocal修饰" class="headerlink" title="不使用nonlocal修饰"></a>不使用nonlocal修饰</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">out_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    out_n <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">def</span> <span class="token function">inner_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        out_n <span class="token operator">=</span> <span class="token number">200</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"inner:"</span><span class="token punctuation">,</span> out_n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"outer1:"</span><span class="token punctuation">,</span> out_n<span class="token punctuation">)</span>    inner_func<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"outer2:"</span><span class="token punctuation">,</span> out_n<span class="token punctuation">)</span>    <span class="token keyword">return</span> inner_func<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    of1 <span class="token operator">=</span> out_func<span class="token punctuation">(</span><span class="token punctuation">)</span>    of1<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407110004485.png" alt="image-20240711000412399"></p><p><strong>使用nonlocal修饰</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">out_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    out_n <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">def</span> <span class="token function">inner_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">nonlocal</span> out_n        out_n <span class="token operator">=</span> <span class="token number">200</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"inner:"</span><span class="token punctuation">,</span> out_n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"outer1:"</span><span class="token punctuation">,</span> out_n<span class="token punctuation">)</span>    inner_func<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"outer2:"</span><span class="token punctuation">,</span> out_n<span class="token punctuation">)</span>    <span class="token keyword">return</span> inner_func<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    of1 <span class="token operator">=</span> out_func<span class="token punctuation">(</span><span class="token punctuation">)</span>    of1<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407110005460.png" alt="image-20240711000536370"></p><h2 id="2、装饰器"><a href="#2、装饰器" class="headerlink" title="2、装饰器"></a>2、装饰器</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>Python 语言中，装饰器是“<strong>用一个函数装饰另外一个函数并为其提供额外的能力</strong>”的语法现象。</p><p>装饰器本身是一个函数，它的参数是被装饰的函数，它的返回值是一个带有装饰功能的函数。</p><p>装饰器是一个高阶函数，它的参数和返回值都是函数。</p><p>装饰器是Python提供的一种语法糖，装饰器使用<code>@</code>符号加上装饰器名称，用于修改其他函数的行为，并且在不修改原始函数定义和调用的情况下，添加额外的功能。</p><p>装饰器提供一种简洁而优雅的方式，来扩展和修改函数或类的功能。它本质上就是一个闭包函数。</p><h3 id="装饰器的功能"><a href="#装饰器的功能" class="headerlink" title="装饰器的功能"></a>装饰器的功能</h3><ul><li>不修改已有函数的源代码；</li><li>不修改已有函数的调用方式；</li><li>给已有函数增加额外的功能。</li></ul><h3 id="装饰器的使用"><a href="#装饰器的使用" class="headerlink" title="装饰器的使用"></a>装饰器的使用</h3><ul><li>由于装饰器本质上就是一个闭包函数，所以在使用自定义装饰器之前，需要先定义一个用来作为装饰器的闭包。</li><li>而闭包的外部函数名，就作为装饰器名使用。</li></ul><p>使用闭包实现一个函数执行时间统计的功能。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">count_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span>        stop_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"函数执行时间为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>stop_time <span class="token operator">-</span> start_time<span class="token punctuation">&#125;</span></span><span class="token string">秒"</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inner<span class="token decorator annotation punctuation">@count_time</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"第</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string">次输出"</span></span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407110010963.png" alt="image-20240711001025884"></p><ul><li>从示例中可以看出，在使用count_time函数作为装饰器时，既没有改变show函数的内部定义，也没有改变show函数的调用方式，但却为show函数额外扩展了运行时间统计的功能，这就是装饰器的作用。</li></ul><h3 id="装饰器的本质"><a href="#装饰器的本质" class="headerlink" title="装饰器的本质"></a>装饰器的本质</h3><p>装饰器提供了一种简洁而优雅的方式（语法糖）来扩展和修改函数或类的功能。其本质就是函数的使用。</p><h4 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h4><h5 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h5><p>在计算器科学中，语法糖（Syntactic suger）是指一种语法上的扩展，它并不改变编程语言的功能，只是提供了更便捷、更易读的写法，使得代码更加简洁和可理解。</p><h5 id="常见的语法糖"><a href="#常见的语法糖" class="headerlink" title="常见的语法糖"></a>常见的语法糖</h5><ul><li>推导式；</li><li>装饰器；</li><li>切片；</li><li>上下文管理器。</li></ul><h5 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h5><ul><li>python解释器在遇到装饰器时，会将被装饰函数引用作为参数传递给闭包的外函数，外函数执行后，返回内函数的引用，此时，再将内函数引用赋值给被装饰器函数。</li><li>当python解释器执行完装饰过程后，被装饰函数的函数名就不再保存原函数的引用，而是保存的闭包函数inner的引用。</li><li>而当执行被装饰函数时，实际执行的是闭包函数inner，由inner间接调用被装饰函数，完成整个调用过程。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@count_time</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Python 解释器的过程：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">show <span class="token operator">=</span> count_time<span class="token punctuation">(</span>show<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="通用装饰器"><a href="#通用装饰器" class="headerlink" title="通用装饰器"></a>通用装饰器</h3><ul><li>理论上，一个装饰器可以装饰任何函数，但实际前面定义的作为装饰器的 count_time 函数却只能装饰特定的无参无返回值的函数。</li><li>如果需要装饰器可以装饰任何函数，那就需要解决被装饰函数的参数及返回值的问题。</li><li>可以通过可变参数和在内函数中返回被装饰函数执行结果的形式，解决此问题。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 作为装饰器名的外函数，使用参数接收被装饰函数的引用</span><span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 内函数的可变参数用来接收被装饰函数使用的参数</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 装饰器功能代码</span>        <span class="token comment"># 调用被装饰函数，并将接收的参数传递给被装饰函数，保存被装饰函数的执行结果</span>        result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token comment"># 返回被装饰函数的执行结果</span>        <span class="token keyword">return</span> result    <span class="token comment"># 返回内函数引用</span>    <span class="token keyword">return</span> inner<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="带参数装饰器"><a href="#带参数装饰器" class="headerlink" title="带参数装饰器"></a>带参数装饰器</h3><p>除了普通的装饰器使用方式之外，在使用装饰器时，还需要向装饰器传递一些参数，比如测试框架 pytest 实现数据驱动时，可以将测试数据以装饰器参数形式传入，此时，前面定义的作为装饰器的闭包形式就不满足需求了。</p><p>可以在通用装饰器外，再定义一层函数，用来接收装饰器的参数。</p><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">decorator_args</span><span class="token punctuation">(</span><span class="token builtin">vars</span><span class="token punctuation">,</span> datas<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> inner    <span class="token keyword">return</span> decoratordata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 装饰器传参</span><span class="token decorator annotation punctuation">@decorator_args</span><span class="token punctuation">(</span><span class="token string">"a,b,c"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="装饰器传参原理"><a href="#装饰器传参原理" class="headerlink" title="装饰器传参原理"></a>装饰器传参原理</h4><p>装饰器传参的本质就是链式语法的多次函数调用。</p><p><code>@decorator_args(&quot;a, b, c&quot;, data)</code>解析：</p><ol><li>将执行<code>@decorator_args(&quot;a, b, c&quot;, data)</code>部分；</li><li>得到结果<code>decorator_args</code>与<code>@</code>结合变成装饰器形式<code>@decorator</code>；</li><li>通过结果<code>@decorator</code>装饰器正常装饰被装饰的函数。</li></ol><h4 id="使用装饰器传参，实现数据驱动过程"><a href="#使用装饰器传参，实现数据驱动过程" class="headerlink" title="使用装饰器传参，实现数据驱动过程"></a>使用装饰器传参，实现数据驱动过程</h4><ul><li>这里没有完整实现代码，只是讲解装饰器形式如何实现数据驱动过程，了解即可。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 接收装饰器参数的函数</span><span class="token comment"># 参数一：以字符串形式接收被装饰函数的参数列表，需要与被装饰函数的参数名保持一致</span><span class="token comment"># 参数二：以[(),(),()]形式传入驱动数据</span><span class="token keyword">def</span> <span class="token function">decorator_args</span><span class="token punctuation">(</span><span class="token builtin">vars</span><span class="token punctuation">,</span> datas<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 将字符串参数分割备用</span>        v_keys <span class="token operator">=</span> <span class="token builtin">vars</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>        <span class="token comment"># 定义保存[&#123;&#125;,&#123;&#125;,&#123;&#125;]形式的数据</span>        new_datas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 遍历数据，取出一组元素数据</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> datas<span class="token punctuation">:</span>            <span class="token comment"># 定义一个新字典，用来保存变量名与传入数据组成的字典</span>            d_item <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token comment"># 使用zip函数，同时遍历两个元组，变量名作为key，元素数据作为value</span>            <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>v_keys<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># 将变量名和值对应保存到字典中</span>                d_item<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v                <span class="token comment"># 将组合好的字典追加到新数据中备用</span>            new_datas<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d_item<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token comment"># 遍历新数据，取出元素字典</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> new_datas<span class="token punctuation">:</span>            inner<span class="token punctuation">(</span><span class="token operator">**</span>item<span class="token punctuation">)</span>        <span class="token keyword">return</span> inner    <span class="token keyword">return</span> decorator<span class="token comment"># 传入驱动数据</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Hogwarts"</span><span class="token punctuation">,</span> <span class="token string">"is"</span><span class="token punctuation">,</span> <span class="token string">"Best"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 装饰器传参</span><span class="token decorator annotation punctuation">@decorator_args</span><span class="token punctuation">(</span><span class="token string">"a,b,c"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、装饰器应用"><a href="#3、装饰器应用" class="headerlink" title="3、装饰器应用"></a>3、装饰器应用</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>假设有名为<code>downlaod</code>和<code>upload</code>的两个函数，分别用于文件的上传和下载，如下所示：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import randomimport timedef download(filename):    &quot;&quot;&quot;下载文件&quot;&quot;&quot;    print(f&#39;开始下载&#123;filename&#125;.&#39;)    time.sleep(random.random() * 6)    print(f&#39;&#123;filename&#125;下载完成.&#39;)    def upload(filename):    &quot;&quot;&quot;上传文件&quot;&quot;&quot;    print(f&#39;开始上传&#123;filename&#125;.&#39;)    time.sleep(random.random() * 8)    print(f&#39;&#123;filename&#125;上传完成.&#39;)    download(&#39;MySQL从删库到跑路.avi&#39;)upload(&#39;Python从入门到住院.pdf&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>现在有一个新的需求，我们希望知道调用<code>download</code>和<code>upload</code>函数上传下载文件到底用了多少时间，这应该如何实现呢？</p><h3 id="实现一"><a href="#实现一" class="headerlink" title="实现一"></a>实现一</h3><p>相信很多小伙伴已经想到了，我们可以在函数开始执行的时候记录一个时间，在函数调用结束后记录一个时间，两个时间相减就可以计算出下载或上传的时间，代码如下所示：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">start &#x3D; time.time()download(&#39;MySQL从删库到跑路.avi&#39;)end &#x3D; time.time()print(f&#39;花费时间: &#123;end - start:.2f&#125;秒&#39;)start &#x3D; time.time()upload(&#39;Python从入门到住院.pdf&#39;)end &#x3D; time.time()print(f&#39;花费时间: &#123;end - start:.2f&#125;秒&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面记录时间、计算和显示执行时间的代码都是重复代码。<strong>重复的代码是万恶之源</strong>，那么有没有办法在不写重复代码的前提下，用一种简单优雅的方式记录下函数的执行时间呢？</p><h3 id="实现二"><a href="#实现二" class="headerlink" title="实现二"></a>实现二</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>在 Python 语言中，装饰器就是解决这类问题的最佳选择。</p><p>通过装饰器语法，我们可以把跟原来的业务（上传和下载）没有关系计时功能的代码封装到一个函数中，如果<code>upload</code>和<code>download</code>函数需要记录时间，我们直接把装饰器作用到这两个函数上即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">record_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>              result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>                <span class="token keyword">return</span> result          <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>record_time</code>函数的参数<code>func</code>代表了一个被装饰的函数</li><li>函数里面定义的<code>wrapper</code>函数是带有装饰功能的函数，它会执行被装饰的函数<code>func</code>，它还需要返回在最后产生函数执行的返回值。</li><li>上面的代码我在第4行和第6行留下了两个空行，这意味着我们可以这些地方添加代码来实现额外的功能。</li><li><code>record_time</code>函数最终会返回这个带有装饰功能的函数<code>wrapper</code>并通过它替代原函数<code>func</code>，当原函数<code>func</code>被<code>record_time</code>函数装饰后，我们调用它时其实调用的是<code>wrapper</code>函数，所以才获得了额外的能力。</li><li>由于我们要用<code>wrapper</code>替代原函数<code>func</code>，但是我们又不清楚原函数<code>func</code>会接受哪些参数，所以我们就通过可变参数和关键字参数照单全收，然后在调用<code>func</code>的时候，原封不动的全部给它。</li><li>强调一下：Python 语言支持函数的嵌套定义，我们可以在<code>record_time</code>函数中定义<code>wrapper</code>函数，这个操作在很多编程语言中并不被支持。</li></ul><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>看懂这个结构后，我们就可以把记录时间的功能写到这个装饰器中，代码如下所示。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import timedef record_time(func):    def wrapper(*args, **kwargs):        # 在执行被装饰的函数之前记录开始时间        start &#x3D; time.time()        # 执行被装饰的函数并获取返回值        result &#x3D; func(*args, **kwargs)        # 在执行被装饰的函数之后记录结束时间        end &#x3D; time.time()        # 计算和显示被装饰函数的执行时间        print(f&#39;&#123;func.__name__&#125;执行时间: &#123;end - start:.2f&#125;秒&#39;)        # 返回被装饰函数的返回值        return result        return wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>使用上面的装饰器函数有两种方式，第一种方式就是直接调用装饰器函数，传入被装饰的函数并获得返回值。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># 第一步download &#x3D; record_time(download)upload &#x3D; record_time(upload)# 第二步download(&#39;MySQL从删库到跑路.avi&#39;)upload(&#39;Python从入门到住院.pdf&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>在 Python 中，使用装饰器很有更为便捷的<strong>语法糖</strong>，可以用 <code>@装饰器函数</code> 将装饰器函数直接放在被装饰的函数上，效果跟上面的代码相同。</p><p>我们把完整的代码为大家罗列出来，大家可以再看看我们是如何定义和使用装饰器的。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import randomimport timedef record_time(func):    def wrapper(*args, **kwargs):        start &#x3D; time.time()        result &#x3D; func(*args, **kwargs)        end &#x3D; time.time()        print(f&#39;&#123;func.__name__&#125;执行时间: &#123;end - start:.2f&#125;秒&#39;)        return result    return wrapper@record_timedef download(filename):    print(f&#39;开始下载&#123;filename&#125;.&#39;)    time.sleep(random.random() * 6)    print(f&#39;&#123;filename&#125;下载完成.&#39;)@record_timedef upload(filename):    print(f&#39;开始上传&#123;filename&#125;.&#39;)    time.sleep(random.random() * 8)    print(f&#39;&#123;filename&#125;上传完成.&#39;)download(&#39;MySQL从删库到跑路.avi&#39;)upload(&#39;Python从入门到住院.pdf&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码，我们通过装饰器语法糖为<code>download</code>和<code>upload</code>函数添加了装饰器，被装饰后的<code>download</code>和<code>upload</code>函数其实就是我们在装饰器中返回的<code>wrapper</code>函数，调用它们其实就是在调用<code>wrapper</code>函数，所以才有了记录函数执行时间的功能。</p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>如果在代码的某些地方，我们想去掉装饰器的作用执行原函数，那么在定义装饰器函数的时候，需要做一点点额外的工作。</p><p>Python 标准库<code>functools</code>模块的<code>wraps</code>函数也是一个装饰器，我们将它放在<code>wrapper</code>函数上，这个装饰器可以帮我们保留被装饰之前的函数，这样在需要取消装饰器时，可以通过被装饰函数的<code>__wrapped__</code>属性获得被装饰之前的函数。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import randomimport timefrom functools import wrapsdef record_time(func):      @wraps(func)    def wrapper(*args, **kwargs):        start &#x3D; time.time()        result &#x3D; func(*args, **kwargs)        end &#x3D; time.time()        print(f&#39;&#123;func.__name__&#125;执行时间: &#123;end - start:.2f&#125;秒&#39;)        return result    return wrapper@record_timedef download(filename):    print(f&#39;开始下载&#123;filename&#125;.&#39;)    time.sleep(random.random() * 6)    print(f&#39;&#123;filename&#125;下载完成.&#39;)@record_timedef upload(filename):    print(f&#39;开始上传&#123;filename&#125;.&#39;)    time.sleep(random.random() * 8)    print(f&#39;&#123;filename&#125;上传完成.&#39;)# 调用装饰后的函数会记录执行时间download(&#39;MySQL从删库到跑路.avi&#39;)upload(&#39;Python从入门到住院.pdf&#39;)# 取消装饰器的作用不记录执行时间download.__wrapped__(&#39;MySQL必知必会.pdf&#39;)upload.__wrapped__(&#39;Python从新手到大师.pdf&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>装饰器函数本身也可以参数化</strong>，简单的说就是装饰器也是可以通过调用者传入的参数来进行定制的，这个知识点我们在后面用到的时候再为大家讲解。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十五、Python函数应用</title>
      <link href="/posts/75b7a1dc.html"/>
      <url>/posts/75b7a1dc.html</url>
      
        <content type="html"><![CDATA[<h1 id="十五、Python函数应用"><a href="#十五、Python函数应用" class="headerlink" title="十五、Python函数应用"></a>十五、Python函数应用</h1><h2 id="1、随机验证码"><a href="#1、随机验证码" class="headerlink" title="1、随机验证码"></a>1、随机验证码</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>设计一个生成随机验证码的函数，验证码由数字和英文大小写字母构成，长度可以通过参数设置。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> stringALL_CHARS <span class="token operator">=</span> string<span class="token punctuation">.</span>digits <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_letters<span class="token triple-quoted-string string">"""生成指定长度的验证码:param code_len: 验证码的长度(默认4个字符)"""</span><span class="token keyword">def</span> <span class="token function">generate_code</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> code_len<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 由大小写英文字母和数字构成的随机验证码字符串</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choices<span class="token punctuation">(</span>ALL_CHARS<span class="token punctuation">,</span> k<span class="token operator">=</span>code_len<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong>说明1</strong>：<code>string</code>模块的<code>digits</code>代表0到9的数字构成的字符串<code>&#39;0123456789&#39;</code>，<code>string</code>模块的<code>ascii_letters</code>代表大小写英文字母构成的字符串：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>说明2</strong>：<code>random</code>模块的<code>sample</code>和<code>choices</code>函数都可以实现随机抽样，</p><ul><li><code>sample</code>实现无放回抽样，这意味着抽样取出的元素是不重复的；</li><li><code>choices</code>实现有放回抽样，这意味着可能会重复选中某些元素。</li></ul><p>这两个函数的第一个参数代表抽样的总体，而参数<code>k</code>代表样本容量，需要说明的是<code>choices</code>函数的参数<code>k</code>是一个命名关键字参数，在传参时必须指定参数名。</p><p><strong>说明3</strong>：</p><p>可以用下面的代码生成5组随机验证码来测试上面的函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>generate_code<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token triple-quoted-string string">"""59tZQKU5izq8IBBbjIfX"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>generate_code<span class="token punctuation">(</span>code_len<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""FxJucwHS4H9G0yyXfzx7fohfReO22w"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明</strong>：我们设计的<code>generate_code</code>函数的参数是命名关键字参数，由于它有默认值，可以不给它传值，使用默认值4。如果需要给函数传入参数，必须指定参数名<code>code_len</code>。</p><h2 id="2、质数判断"><a href="#2、质数判断" class="headerlink" title="2、质数判断"></a>2、质数判断</h2><h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><p>设计一个判断给定的大于1的正整数是不是质数的函数。质数是只能被1和自身整除的正整数（大于1），如果一个大于1的正整数$N$是质数，那就意味着在2到$N-1$之间都没有它的因子。</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""    判断一个正整数是不是质数    :param num: 大于1的正整数    :return: 如果num是质数返回True，否则返回False"""</span><span class="token keyword">def</span> <span class="token function">is_prime</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p><strong>说明1</strong>：</p><ul><li><code>is_prime</code>函数的参数<code>num</code>后面的<code>: int</code>用来标注参数的类型，虽然它对代码的执行结果不产生任何影响，但是很好的增强了代码的可读性。</li><li>参数列表后面的<code>-&gt; bool</code>用来标注函数返回值的类型，它也不会对代码的执行结果产生影响，但是却让我们清楚的知道，调用函数会得到一个布尔值，要么是<code>True</code>，要么是<code>False</code>。</li></ul><p><strong>说明2</strong>：上面的循环并不需要从2循环到$\small{N-1}$，因为如果循环进行到$\small{\sqrt{N}}$时，还没有找到$\small{N}$的因子，那么$\small{\sqrt{N}}$之后也不会出现$\small{N}$的因子，大家可以自己想一想这是为什么。</p><h2 id="3、最大公约数和最小公倍数"><a href="#3、最大公约数和最小公倍数" class="headerlink" title="3、最大公约数和最小公倍数"></a>3、最大公约数和最小公倍数</h2><h3 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h3><p>设计计算两个正整数最大公约数和最小公倍数的函数。$x$和$y$的最大公约数是能够同时整除$x$和$y$的最大整数，如果$x$和$y$互质，那么它们的最大公约数为1；$x$和$y$的最小公倍数是能够同时被$x$和$y$整除的最小正整数，如果$x$和$y$互质，那么它们的最小公倍数为$x \times y$。</p><p>需要提醒大家注意的是，计算最大公约数和最小公倍数是两个不同的功能，应该设计成两个函数，而不是把两个功能放到同一个函数中。</p><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""求最小公倍数"""</span><span class="token keyword">def</span> <span class="token function">lcm</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> y <span class="token operator">//</span> gcd<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""求最大公约数"""</span><span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> y <span class="token operator">%</span> x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> y <span class="token operator">%</span> x<span class="token punctuation">,</span> x    <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p><strong>说明1</strong>：函数之间可以相互调用，上面求最小公倍数的<code>lcm</code>函数就调用了求最大公约数的<code>gcd</code>函数，通过$\frac{x \times y}{ gcd(x, y)}$来计算最小公倍数。</p><p><strong>说明2</strong>：上面的<code>gcd</code>函数使用了欧几里得算法计算最大公约数，欧几里得算法也称为辗转相除法，这个算法通常有更好的执行效率，不了解的小伙伴可以自行科普。</p><h2 id="4、计算样本数据统计信息"><a href="#4、计算样本数据统计信息" class="headerlink" title="4、计算样本数据统计信息"></a>4、计算样本数据统计信息</h2><h3 id="需求-3"><a href="#需求-3" class="headerlink" title="需求"></a>需求</h3><p>假设样本数据保存一个列表中，设计计算样本数据描述性统计信息的函数。描述性统计信息通常包括：算术平均值、中位数、极差（最大值和最小值的差）、方差、标准差、变异系数等，计算公式如下所示：</p><p>样本均值（sample mean）：<br>$$<br>\bar{x} &#x3D; \frac{\sum_{i&#x3D;1}^{n}x_{i}}{n} &#x3D; \frac{x_{1}+x_{2}+\cdots +x_{n}}{n}<br>$$<br>样本方差（sample variance）：<br>$$<br>s^2 &#x3D; \frac {\sum_{i&#x3D;1}^{n}(x_i - \bar{x})^2} {n-1}<br>$$<br>样本标准差（sample standard deviation）：<br>$$<br>s &#x3D; \sqrt{\frac{\sum_{i&#x3D;1}^{n}(x_i - \bar{x})^2}{n-1}}<br>$$<br>变异系数（coefficient of sample variation）：<br>$$<br>CV &#x3D; \frac{s}{\bar{x}}<br>$$</p><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">ptp</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""极差（全距）"""</span>    <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">min</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">mean</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""算术平均"""</span>    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">median</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""中位数"""</span>    temp<span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">if</span> size <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> temp<span class="token punctuation">[</span>size <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> mean<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>size <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>size <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">var</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> ddof<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""方差"""</span>    x_bar <span class="token operator">=</span> mean<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>num <span class="token operator">-</span> x_bar<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> data<span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">-</span> ddof<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">std</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> ddof<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""标准差"""</span>    <span class="token keyword">return</span> var<span class="token punctuation">(</span>data<span class="token punctuation">,</span> ddof<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span><span class="token keyword">def</span> <span class="token function">cv</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> ddof<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""变异系数"""</span>    <span class="token keyword">return</span> std<span class="token punctuation">(</span>data<span class="token punctuation">,</span> ddof<span class="token punctuation">)</span> <span class="token operator">/</span> mean<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">describe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""输出描述性统计信息"""</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'均值: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>mean<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'中位数: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>median<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'极差: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>ptp<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'方差: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>var<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'标准差: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>std<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'变异系数: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>cv<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p><strong>说明1</strong>：中位数是将数据按照升序或降序排列后位于中间的数，它描述了数据的中等水平。中位数的计算分两种情况：当数据体量$n$为奇数时，中位数是位于$\frac{n + 1}{2}$位置的元素；当数据体量$n$为偶数时，中位数是位于$\frac{n}{2}$和$\frac{n}{2} + 1$两个位置元素的均值。</p><p><strong>说明2</strong>：计算方差和标准差的函数中有一个名为<code>ddof</code>的参数，它代表了可以调整的自由度，默认值为1。在计算样本方差和样本标准差时，需要进行自由度校正；如果要计算总体方差和总体标准差，可以将<code>ddof</code>参数赋值为0，即不需要进行自由度校正。</p><p><strong>说明3</strong>：<code>describe</code>函数将上面封装好的统计函数组装到一起，用于输出数据的描述性统计信息。事实上，Python 标准库中有一个名为<code>statistics</code>的模块，它已经把获取描述性统计信息的函数封装好了，有兴趣的读者可以自行了解。</p><h2 id="5、双色球"><a href="#5、双色球" class="headerlink" title="5、双色球"></a>5、双色球</h2><p>我们用函数重构之前讲过的双色球随机选号的例子（《第09课：常用数据结构之列表-2》），将生成随机号码和输出一组号码的功能分别封装到两个函数中，然后通过调用函数实现机选<code>N</code>注号码的功能。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""双色球随机选号程序Author: 骆昊Version: 1.3"""</span><span class="token keyword">import</span> randomRED_BALLS <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">]</span>BLUE_BALLS <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    生成一组随机号码    :return: 保存随机号码的列表    """</span>    selected_balls <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>RED_BALLS<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>    selected_balls<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    selected_balls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>BLUE_BALLS<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> selected_balls<span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>balls<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    格式输出一组号码    :param balls: 保存随机号码的列表    """</span>    <span class="token keyword">for</span> ball <span class="token keyword">in</span> balls<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'\033[031m</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ball<span class="token punctuation">:</span><span class="token format-spec">0>2d</span><span class="token punctuation">&#125;</span></span><span class="token string">\033[0m'</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'\033[034m</span><span class="token interpolation"><span class="token punctuation">&#123;</span>balls<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token format-spec">0>2d</span><span class="token punctuation">&#125;</span></span><span class="token string">\033[0m'</span></span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'生成几注号码: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    display<span class="token punctuation">(</span>choose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明</strong>：大家看看<code>display(choose())</code>这行代码，这里我们先通过<code>choose</code>函数获得一组随机号码，然后把<code>choose</code>函数的返回值作为<code>display</code>函数的参数，通过<code>display</code>函数将选中的随机号码显示出来。重构之后的代码逻辑非常清晰，代码的可读性更强了。如果有人为你封装了这两个函数，你仅仅是函数的调用者，其实你根本不用关心<code>choose</code>函数和<code>display</code>函数的内部实现，你只需要知道调用<code>choose</code>函数可以生成一组随机号码，而调用<code>display</code>函数传入一个列表，就可以输出这组号码。将来我们使用各种各样的 Python 三方库时，我们也根本不关注它们的底层实现，我们需要知道的仅仅是调用哪个函数可以解决问题。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、Maven安装</title>
      <link href="/posts/4c69110c.html"/>
      <url>/posts/4c69110c.html</url>
      
        <content type="html"><![CDATA[<h1 id="二、Maven-安装"><a href="#二、Maven-安装" class="headerlink" title="二、Maven 安装"></a>二、Maven 安装</h1><h2 id="1、下载安装"><a href="#1、下载安装" class="headerlink" title="1、下载安装"></a>1、下载安装</h2><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://maven.apache.org/">【Maven官网地址】</a></p><p><a href="https://maven.apache.org/download.cgi">【Maven下载地址】</a></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061857906.png"></p><h3 id="解压Maven核心程序"><a href="#解压Maven核心程序" class="headerlink" title="解压Maven核心程序"></a>解压Maven核心程序</h3><p>将 Maven 解压到一个不含有中文和空格的目录中。</p><ul><li>bin 目录：mvn.bat （以run方式运行项目）、 mvnDebug.bat（以debug方式运行项目 ）</li><li>boot 目录：Maven 运行需要类加载器</li><li>conf 目录：settings.xml 整个 Maven 工具核心配置文件</li><li>lib 目录：Maven 运行依赖 Jar 包</li></ul><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061858278.png"></p><p>在解压目录中，我们需要着重关注 Maven 的核心配置文件：<code>conf/settings.xml</code></p><p>Maven 无需安装，将下载的压缩包解压后，即可直接使用</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061859686.png"></p><h3 id="指定Maven的本地仓库"><a href="#指定Maven的本地仓库" class="headerlink" title="指定Maven的本地仓库"></a>指定Maven的本地仓库</h3><p>Maven本地仓库默认值：用户家目录<code>/.m2/repository</code>。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061900486.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061901915.png"></p><p>由于本地仓库的默认位置是在用户的家目录下，而目录往往是在 C 盘，也就是系统盘。将来 Maven 仓库中 jar 包越来越多，仓库体积越来越大，可能会拖慢 C 盘运行速度，影响系统性能。所以建议将 Maven 的本地仓库放在其他盘符下。配置方式如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- localRepository| The path to the local repository maven will use to store artifacts.|| Default: $&#123;user.home&#125;/.m2/repository&lt;localRepository>/path/to/local/repo&lt;/localRepository>--></span><span class="token comment">&lt;!-- 需要将标签从注释中取出进行配置 没有配置，仓库的地址为默认这个存放jar包的目录可以等执行构建命令时由Maven创建--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>E:\Maven\maven-repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记住：一定要把 localRepository 标签从注释中拿出来。</p><blockquote><p>注意：本地仓库本身也需要使用一个非中文、没有空格的目录。</p></blockquote><h3 id="配置阿里云提供的镜像仓库"><a href="#配置阿里云提供的镜像仓库" class="headerlink" title="配置阿里云提供的镜像仓库"></a>配置阿里云提供的镜像仓库</h3><p>Maven 下载 jar 包默认访问境外的中央仓库，而国外网站速度很慢。改成阿里云提供的镜像仓库，访问国内网站，可以让 Maven 下载 jar 包的时候速度更快。配置的方式是：</p><h4 id="将原有的例子配置注释掉"><a href="#将原有的例子配置注释掉" class="headerlink" title="将原有的例子配置注释掉"></a>将原有的例子配置注释掉</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- &lt;mirror>  &lt;id>maven-default-http-blocker&lt;/id>  &lt;mirrorOf>external:http:*&lt;/mirrorOf>  &lt;name>Pseudo repository to mirror external repositories initially using HTTP.&lt;/name>  &lt;url>http://0.0.0.0/&lt;/url>  &lt;blocked>true&lt;/blocked>&lt;/mirror> --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071619031.png"></p><h4 id="加入我们的配置"><a href="#加入我们的配置" class="headerlink" title="加入我们的配置"></a>加入我们的配置</h4><p>将下面 mirror 标签整体复制到 settings.xml 文件的 mirrors 标签的内部。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 表示是中央仓库的镜像 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 仓库名 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 仓库地址 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置-Maven-工程的基础-JDK-版本"><a href="#配置-Maven-工程的基础-JDK-版本" class="headerlink" title="配置 Maven 工程的基础 JDK 版本"></a>配置 Maven 工程的基础 JDK 版本</h3><p>如果按照默认配置运行，Java 工程使用的默认 JDK 版本是 1.5，而我们熟悉和常用的是 JDK 1.8 版本。修改配置的方式是：将 profile 标签整个复制到 settings.xml 文件的 profiles 标签内，指定使用的JDK版本为1.8。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061904237.png"></p><h2 id="2、环境变量配置"><a href="#2、环境变量配置" class="headerlink" title="2、环境变量配置"></a>2、环境变量配置</h2><h3 id="检查-JAVA-HOME-配置是否正确"><a href="#检查-JAVA-HOME-配置是否正确" class="headerlink" title="检查 JAVA_HOME 配置是否正确"></a>检查 JAVA_HOME 配置是否正确</h3><p>Maven 是一个用 Java 语言开发的程序，它必须基于 JDK 来运行，需要通过 JAVA_HOME 来找到 JDK 的安装位置。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071620175.png"></p><p>可以使用下面的命令验证：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">C:\Users\Administrator&gt;echo %JAVA_HOME%D:\software\JavaC:\Users\Administrator&gt;java -versionjava version &quot;1.8.0_141&quot;Java(TM) SE Runtime Environment (build 1.8.0_141-b15)Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071621500.png"></p><h3 id="配置-MAVEN-HOME"><a href="#配置-MAVEN-HOME" class="headerlink" title="配置 MAVEN_HOME"></a>配置 MAVEN_HOME</h3><p>Maven 环境配置，增加一个环境变量 <code>M2_HOME</code>, 值是 Maven 的安装路径:<code>X:\xxx\apache-Maven-xxx</code> </p><blockquote><p>XXXX_HOME 通常为bin目录的上一级</p></blockquote><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071622337.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071624692.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020032052.png" alt="6"></p><h3 id="配置PATH"><a href="#配置PATH" class="headerlink" title="配置PATH"></a>配置PATH</h3><p>修改 path 则是在 path 最后面添加： <code>;%M2_HOME%\bin</code>。</p><blockquote><p>PATH 指的是bin目录</p></blockquote><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071626648.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071627269.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407071628634.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020032729.png" alt="7"></p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>通过 <code>mvn -v</code> 命令检查 Maven 是否安装成功，看到 Maven 的版本为3.3.9及Java版本为1.8即为安装成功。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020032731.png" alt="8"></p><h2 id="3、Maven仓库"><a href="#3、Maven仓库" class="headerlink" title="3、Maven仓库"></a>3、Maven仓库</h2><h3 id="3-1-Maven三类仓库"><a href="#3-1-Maven三类仓库" class="headerlink" title="3.1 Maven三类仓库"></a>3.1 Maven三类仓库</h3><h4 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h4><ul><li><p>本地仓库的默认路径为用户 .m2\repository</p></li><li><p>我们可以在 <code>setting.xml</code> 中修改本地仓库的路径</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>D:\repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><ul><li>如果项目依赖的库在本地仓库中没有找到，Maven 就会去远程仓库找，Maven 有默认的远程仓库，就是他的中央仓库</li><li>中央仓库：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></li></ul><h4 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h4><ul><li><p>一般默认的远程仓库在国内可能连接不上，所以我们可以修改远程仓库的地址为国内的镜像仓库上</p></li><li><p>修改 Maven 根目录下的 conf 文件夹中的 setting.xml 文件，内容如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyunMaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://Maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-2-Maven-仓库的作用"><a href="#3-2-Maven-仓库的作用" class="headerlink" title="3.2 Maven 仓库的作用"></a>3.2 Maven 仓库的作用</h3><p>Maven 的工作需要从仓库下载一些 Jar 包，如下图所示，本地的项目 A、项目 B 等都会通过 Maven 软件从远程仓库（可以理解为互联网上的仓库）下载 Jar 包并存在本地仓库，本地仓库就是本地文件夹，当第二次需要此 Jar 包时则不再从远程仓库下载，因为本地仓库已经存在了，可以将本地仓库理解为缓存，有了本地仓库就不用每次从远程仓 库下载了。</p><p>下图描述了 Maven 中仓库的类型：.</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020033051.jpg" alt="9"></p><p><strong>本地仓库</strong> ：用来存储从远程仓库或中央仓库下载的插件和 Jar 包，项目使用一些插件或 Jar 包，优先从本地仓库查找。默认本地仓库位置在 Maven 根目录下 conf&#x2F;settings.xml 中，可看出： ${user.dir}&#x2F;.m2&#x2F;repository，${user.dir} 表示 windows 用户目录。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020033548.png" alt="10"></p><p><strong>远程仓库</strong>：如果本地需要插件或者 Jar 包，本地仓库没有，默认去远程仓库下载。远程仓库可以在互联网内也可以在局域网内。</p><p><strong>中央仓库</strong>：在 Maven 软件中内置一个远程仓库地址 <a href="http://repo1.maven.org/Maven2">http://repo1.Maven.org/Maven2</a>，它是中央仓库，服务于整个互联网，它是由 Maven 团队自己维护，里面存储了非常全的 Jar 包，它包含了世界上大部分流行的开源项目构件。</p><p><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><h3 id="3-3-配置本地仓库"><a href="#3-3-配置本地仓库" class="headerlink" title="3.3 配置本地仓库"></a>3.3 配置本地仓库</h3><p>本课程是在无网的状态下学习，需要配置老师提供的本地仓库，将 “repository.rar”解压至自己的电脑上，本教程解压在D:\repository</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020032785.jpg" alt="11"></p><p>在 MAVE_HOME&#x2F;conf&#x2F;settings.xml 文件中配置本地仓库位置：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020032684.jpg" alt="12"></p><h3 id="3-4-全局-Setting-与用户-Setting"><a href="#3-4-全局-Setting-与用户-Setting" class="headerlink" title="3.4 全局 Setting 与用户 Setting"></a>3.4 全局 Setting 与用户 Setting</h3><ul><li>Maven 仓库地址、私服等配置信息需要在 setting.xml 文件中配置，分为全局配置和用户配置。</li><li><strong>全局配置</strong>：在 Maven 安装目录下的有 conf&#x2F;setting.xml 文件，此 setting.xml 文件用于 Maven 的所有 project 项目，它作为 Maven 的全局配置。</li><li>**用户配置(First)**：如需要个性配置则需要在用户配置中设置，用户配置的 setting.xml 文件默认的位置在：${user.dir}&#x2F;.m2&#x2F;settings.xml目录中,${user.dir} 指 windows 中的用户目录。</li><li><strong>Maven 会先找用户配置，如果找到则以用户配置文件为准，否则使用全局配置文件。</strong></li></ul><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020032728.png" alt="222"></p>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、Maven 介绍</title>
      <link href="/posts/cf2d6269.html"/>
      <url>/posts/cf2d6269.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、Maven-概述"><a href="#一、Maven-概述" class="headerlink" title="一、Maven 概述"></a>一、Maven 概述</h1><h2 id="1、Maven-简介"><a href="#1、Maven-简介" class="headerlink" title="1、Maven 简介"></a>1、Maven 简介</h2><ul><li>Maven 翻译为“专家”，“内行”。</li><li>Maven 是 Apache 下的一个纯 Java 开发的开源项目，它是一个项目<strong>管理工具</strong>，使用 Maven 对 Java 项目进行构建、依赖管理。当前使用 Maven 的项目在持续增长。</li></ul><h2 id="2、Maven的功能"><a href="#2、Maven的功能" class="headerlink" title="2、Maven的功能"></a>2、Maven的功能</h2><h3 id="Maven-作为依赖管理工具"><a href="#Maven-作为依赖管理工具" class="headerlink" title="Maven 作为依赖管理工具"></a>Maven 作为依赖管理工具</h3><p>随着我们使用越来越多的框架，或者框架封装程度越来越高，项目中使用的jar包也越来越多。项目中，一个模块里面用到上百个jar包是非常正常的。jar包所属技术的官网通常是英文界面，网站的结构又不尽相同，甚至找到下载链接还发现需要通过特殊的工具下载。框架中使用的 jar 包，不仅数量庞大，而且彼此之间存在错综复杂的依赖关系。jar 包之间有可能产生冲突。进一步增加了我们在 jar 包使用过程中的难度。</p><p>使用 Maven 后，依赖对应的 jar 包能够自动下载，方便、快捷又规范。使用 Maven 则几乎不需要管理 jar 包彼此之间存在错综复杂的依赖关系，极个别的地方调整一下即可，极大的减轻了我们的工作量。</p><h3 id="Maven-作为构建管理工具"><a href="#Maven-作为构建管理工具" class="headerlink" title="Maven 作为构建管理工具"></a>Maven 作为构建管理工具</h3><p>脱离 IDE 环境仍需构建</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061846474.png"></p><h2 id="3、Maven构建"><a href="#3、Maven构建" class="headerlink" title="3、Maven构建"></a>3、Maven构建</h2><h3 id="3-1-传统项目构建"><a href="#3-1-传统项目构建" class="headerlink" title="3.1 传统项目构建"></a>3.1 传统项目构建</h3><p>传统的使用 Eclipse 构建项目的过程如下：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020036855.png" alt="2"></p><h3 id="3-2-Maven-项目构建"><a href="#3-2-Maven-项目构建" class="headerlink" title="3.2 Maven 项目构建"></a>3.2 Maven 项目构建</h3><p>构建过程包含的主要的环节：</p><ul><li>清理：删除上一次构建的结果，为下一次构建做好准备</li><li>编译：Java 源程序编译成 *.class 字节码文件</li><li>测试：运行提前准备好的测试程序</li><li>报告：针对刚才测试的结果生成一个全面的信息</li><li>打包<ul><li>Java工程：jar包</li><li>Web工程：war包</li></ul></li><li>安装：把一个 Maven 工程经过打包操作生成的 jar 包或 war 包存入Maven的本地仓库</li><li>部署<ul><li>部署 jar 包：把一个 jar 包部署到 Nexus 私服服务器上</li><li>部署 war 包：借助相关 Maven 插件（例如 cargo），将 war 包部署到 Tomcat 服务器上</li></ul></li></ul><h3 id="3-3-Maven依赖"><a href="#3-3-Maven依赖" class="headerlink" title="3.3 Maven依赖"></a>3.3 Maven依赖</h3><p>如果 A 工程里面用到了 B 工程的类、接口、配置文件等等这样的资源，那么我们就可以说 A 依赖 B。</p><ul><li>依赖管理中要解决的具体问题：<ul><li>jar 包的下载：使用 Maven 之后，jar 包会从规范的远程仓库下载到本地</li><li>jar 包之间的依赖：通过依赖的传递性自动完成</li><li>jar 包之间的冲突：通过对依赖的配置进行调整，让某些jar包不会被导入</li></ul></li></ul><h2 id="4、Maven-的工作机制"><a href="#4、Maven-的工作机制" class="headerlink" title="4、Maven 的工作机制"></a>4、Maven 的工作机制</h2><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061852211.png"></p><h2 id="5、Jar-依赖管理"><a href="#5、Jar-依赖管理" class="headerlink" title="5、Jar 依赖管理"></a>5、Jar 依赖管理</h2><h3 id="5-1-传统项目的依赖管理"><a href="#5-1-传统项目的依赖管理" class="headerlink" title="5.1 传统项目的依赖管理"></a>5.1 传统项目的依赖管理</h3><p>传统的项目工程要管理所依赖的 Jar 包完全靠人工进行，程序员从网上下载 Jar 包添加到项目工程中，如下图：程序员手工将 Spring、SpringMVC、Mybatis 的 Jar 添加到工程中的 WEB-INF&#x2F;lib 目录下。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020036867.png" alt="4"></p><p>手工拷贝 Jar 包添加到工程中的问题是：</p><ol><li>没有对 Jar 包的版本统一管理，容易导致版本冲突。</li><li>从网上找 Jar 包非常不方便，有些 Jar 找不到。</li><li>Jar 包添加到工程中导致工程过大。</li></ol><h3 id="5-2-Maven-项目的依赖管理"><a href="#5-2-Maven-项目的依赖管理" class="headerlink" title="5.2 Maven 项目的依赖管理"></a>5.2 Maven 项目的依赖管理</h3><ul><li><p>Maven 项目管理所依赖的 Jar 包不需要手动向工程添加 Jar 包，只需要在 pom.xml（Maven工程的配置文件）添加 Jar</p></li><li><p>包的坐标，自动从 Maven 仓库中下载 Jar 包、运行，如下图：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020037479.jpg" alt="5"></p><p>使用 Maven 依赖管理添加 Jar 的好处：</p></li></ul><ol><li>通过 pom.xml 文件对 Jar 包的版本进行统一管理，可避免版本冲突。</li><li>Maven 团队维护了一个非常全的 Maven 仓库，里边包括了当前使用的 Jar 包，Maven 工程可以自动从 Maven 仓库下载 Jar 包，非常方便。</li></ol><h2 id="6、使用-Maven-的好处"><a href="#6、使用-Maven-的好处" class="headerlink" title="6、使用 Maven 的好处"></a>6、使用 Maven 的好处</h2><p>通过上边介绍传统项目和 Maven 项目在项目构建及依赖管理方面的区域，Maven 有如下的好处：</p><ul><li>一步构建：Maven 对项目构建的过程进行标准化，通过一个命令即可完成构建过程。</li><li>依赖管理：Maven 工程不用手动导 Jar 包，通过在 pom.xml 中定义坐标从 Maven 仓库自动下载，方便且不易出错。</li><li>Maven 的跨平台，可在 Window、Linux 上使用。</li><li>Maven 遵循规范开发有利于提高大型团队的开发效率，降低项目的维护成本，大公司都会考虑使用 Maven 来构建项目。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/posts/7273cdc.html"/>
      <url>/posts/7273cdc.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><a href="http://luyaguo.github.io/posts/cf2d6269.html">第一章、Maven介绍</a></p><p><a href="http://luyaguo.github.io/posts/4c69110c.html">第二章、Maven安装</a></p><p><a href="http://luyaguo.github.io/posts/1f96a812.html">第三章、Maven使用</a></p><p><a href="http://luyaguo.github.io/posts/411ad010.html">第四章、Maven依赖</a></p><p><a href="http://luyaguo.github.io/posts/d5ee1b0c.html">第五章、Maven聚合与继承</a></p><p><a href="http://luyaguo.github.io/posts/b813d57b.html">第六章、Maven配置</a></p><p><a href="http://luyaguo.github.io/posts/46b69363.html">第七章、Maven私服</a></p><p><a href="http://luyaguo.github.io/posts/a5223c76.html">第八章、Maven在IDEA中使用</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>十四、Python函数</title>
      <link href="/posts/889302c.html"/>
      <url>/posts/889302c.html</url>
      
        <content type="html"><![CDATA[<h1 id="十四、Python函数"><a href="#十四、Python函数" class="headerlink" title="十四、Python函数"></a>十四、Python函数</h1><h2 id="1、函数介绍"><a href="#1、函数介绍" class="headerlink" title="1、函数介绍"></a>1、函数介绍</h2><p>世界级的编程大师<em>Martin Fowler</em>曾经说过：“<strong>代码有很多种坏味道，重复是最坏的一种！</strong>”。要写出高质量的代码，首先就要解决重复代码的问题。</p><p>数学上的函数通常形如$y &#x3D; f(x)$或者$z &#x3D; g(x, y)$这样的形式，在$y &#x3D; f(x)$中，$f$是函数的名字，$x$是函数的自变量，$y$是函数的因变量；而在$z &#x3D; g(x, y)$中，$g$是函数名，$x$和$y$是函数的自变量，$z$是函数的因变量。Python 中的函数跟这个结构是一致的，每个函数都有自己的名字、自变量和因变量。我们通常把 Python 函数的自变量称为函数的参数，而因变量称为函数的返回值。</p><h2 id="2、定义函数"><a href="#2、定义函数" class="headerlink" title="2、定义函数"></a>2、定义函数</h2><p>Python 中可以使用<code>def</code>关键字来定义函数，函数名命名规则跟变量的命名规则是一样的，我们会通过<code>return</code>关键字来返回函数的执行结果。如果函数中没有<code>return</code>语句，那么函数会返回代表空值的<code>None</code>。</p><p>函数可以没有自变量（参数），但是函数名后面的圆括号是必须有的，如下图所示。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407022212775.png" alt="function_definition"></p><h2 id="3、调用函数"><a href="#3、调用函数" class="headerlink" title="3、调用函数"></a>3、调用函数</h2><ul><li><strong>调用函数的语法是在函数名后面跟上圆括号并传入参数</strong></li><li>定义好函数之后，只表示这个函数封装了一段代码而已</li><li>如果不主动调用函数，函数是不会主动执行的</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 自变量（参数）num是一个非负整数</span><span class="token comment"># 因变量（返回值）是num的阶乘</span><span class="token keyword">def</span> <span class="token function">fac</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">*=</span> n    <span class="token keyword">return</span> resultm <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'m = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'n = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fac<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">//</span> fac<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">//</span> fac<span class="token punctuation">(</span>m <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、函数的返回值"><a href="#4、函数的返回值" class="headerlink" title="4、函数的返回值"></a>4、函数的返回值</h2><ul><li>返回值 是函数 完成工作后，最后 给调用者的 一个结果</li><li>在函数中使用 return 关键字可以返回结果</li><li>调用函数一方，可以 使用变量来 接收 函数的返回结果</li></ul><h2 id="5、函数的参数"><a href="#5、函数的参数" class="headerlink" title="5、函数的参数"></a>5、函数的参数</h2><h3 id="形参-实参"><a href="#形参-实参" class="headerlink" title="形参&amp;&amp;实参"></a>形参&amp;&amp;实参</h3><ul><li>形参：就是函数定义时小括号里的参数，是用来接收参数用的，在函数内部作为变量使用。</li><li>实参：函数调用的时候，小括号里的参数，是用来把数据传递到 函数内部 用的。</li><li>函数可以没有形参和实参。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 形式参数</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>bresult <span class="token operator">=</span> sum2<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 实际参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数的参数类型"><a href="#函数的参数类型" class="headerlink" title="函数的参数类型"></a>函数的参数类型</h3><h4 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h4><ul><li>要求实参顺序必须和形参顺序完全一致，由形参顺序决定实参顺序。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_judgement</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""判断三条边的长度能否构成三角形"""</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">></span> c <span class="token keyword">and</span> b <span class="token operator">+</span> c <span class="token operator">></span> a <span class="token keyword">and</span> a <span class="token operator">+</span> c <span class="token operator">></span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面<code>make_judgement</code>函数有三个参数，这种参数叫做位置参数，在调用函数时通常按照从左到右的顺序依次传入，而且传入参数的数量必须和定义函数时参数的数量相同，如下所示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>make_judgement<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>make_judgement<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><p>如果不想按照从左到右的顺序依次给出<code>a</code>、<code>b</code>、<code>c</code> 三个参数的值，也可以使用关键字参数，通过“参数名&#x3D;参数值”的形式为函数传入参数，如下所示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">make_judgement<span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>make_judgement<span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="强制位置参数"><a href="#强制位置参数" class="headerlink" title="强制位置参数"></a>强制位置参数</h4><p>在定义函数时，我们可以在参数列表中用<code>/</code>设置<strong>强制位置参数</strong>（<em>positional-only arguments</em>）。所谓强制位置参数，就是调用函数时只能按照参数位置来接收参数值的参数；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># /前面的参数是强制位置参数</span><span class="token keyword">def</span> <span class="token function">make_judgement</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""判断三条边的长度能否构成三角形"""</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">></span> c <span class="token keyword">and</span> b <span class="token operator">+</span> c <span class="token operator">></span> a <span class="token keyword">and</span> a <span class="token operator">+</span> c <span class="token operator">></span> b<span class="token keyword">print</span><span class="token punctuation">(</span>make_judgement<span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># TypeError: make_judgement() got some positional-only arguments passed as keyword arguments “强制位置参数是不允许给出参数名的”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明</strong>：强制位置参数是 Python 3.8 引入的新特性，在使用低版本的 Python 解释器时需要注意。</p></blockquote><h4 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h4><p>在定义函数时，我们可以在参数列表中用<code>*</code>设置<strong>命名关键字参数</strong>。而命名关键字参数只能通过<strong>“参数名&#x3D;参数值”</strong>的方式来传递和接收参数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># *后面的参数是命名关键字参数</span><span class="token keyword">def</span> <span class="token function">make_judgement</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""判断三条边的长度能否构成三角形"""</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">></span> c <span class="token keyword">and</span> b <span class="token operator">+</span> c <span class="token operator">></span> a <span class="token keyword">and</span> a <span class="token operator">+</span> c <span class="token operator">></span> b<span class="token keyword">print</span><span class="token punctuation">(</span>make_judgement<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># TypeError: make_judgement() takes 0 positional arguments but 3 were given “函数没有位置参数但却给了3个位置参数”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h4><p>定义函数时，可以给 某个参数 指定一个默认值，具有默认值的参数就叫做 缺省参数。</p><h5 id="Case-1"><a href="#Case-1" class="headerlink" title="Case-1"></a>Case-1</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> randrange<span class="token comment"># 定义摇色子的函数</span><span class="token comment"># 函数的自变量（参数）n表示色子的个数，默认值为2</span><span class="token comment"># 函数的因变量（返回值）表示摇n颗色子得到的点数</span><span class="token keyword">def</span> <span class="token function">roll_dice</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    total <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        total <span class="token operator">+=</span> randrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> total<span class="token comment"># 如果没有指定参数，那么n使用默认值2，表示摇两颗色子</span><span class="token keyword">print</span><span class="token punctuation">(</span>roll_dice<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 传入参数3，变量n被赋值为3，表示摇三颗色子获得点数</span><span class="token keyword">print</span><span class="token punctuation">(</span>roll_dice<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Case-2"><a href="#Case-2" class="headerlink" title="Case-2"></a>Case-2</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""三个数相加求和"""</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token comment"># 调用add函数，没有传入参数，那么a、b、c都使用默认值0</span><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># 0</span><span class="token comment"># 调用add函数，传入一个参数，该参数赋值给变量a, 变量b和c使用默认值0</span><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 1</span><span class="token comment"># 调用add函数，传入两个参数，分别赋值给变量a和b，变量c使用默认值0</span><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 3</span><span class="token comment"># 调用add函数，传入三个参数，分别赋值给a、b、c三个变量</span><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>需要注意的是，<strong>带默认值的参数必须放在不带默认值的参数之后</strong>，否则将产生<code>SyntaxError</code>错误，错误消息是：non-default argument follows default argument，即“没有默认值的参数放在了带默认值的参数后面”。</p></blockquote><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>Python 语言中可以通过<strong>星号表达式</strong>语法让函数支持可变参数。所谓可变参数指的是在调用函数时，可以向函数传入<code>0</code>个或任意多个参数。</p><h5 id="args"><a href="#args" class="headerlink" title="*args"></a>*args</h5><ul><li>用星号表达式来表示 args 可以接收0个或任意多个参数</li><li>调用函数时传入的 n 个参数会组装成一个 n 元组赋给 args</li><li>如果一个参数都没有传入，那么 args 会是一个空元组</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">total</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 可变参数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> args<span class="token punctuation">:</span>        result <span class="token operator">+=</span> i<span class="token operator">*</span>i    <span class="token keyword">return</span> result<span class="token comment"># 调用方式一</span>result <span class="token operator">=</span> total<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 调用方式二</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>result <span class="token operator">=</span> total<span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="kwargs"><a href="#kwargs" class="headerlink" title="**kwargs"></a>**kwargs</h5><ul><li>参数列表中的**kwargs可以接收0个或任意多个关键字参数</li><li>调用函数时传入的关键字参数会组装成一个字典（参数名是字典中的键，参数值是字典中的值）</li><li>如果一个关键字参数都没有传入，那么kwargs会是一个空字典</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 可变参数，接收字典</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span>        d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'xiaoming'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span>f<span class="token punctuation">(</span><span class="token operator">**</span>d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在Python函数调用中，当函数的参数按照位置和关键字混合传递时出现。<strong>Python规定，所有位置参数必须在所有关键字参数之前传递。</strong>也就是说，如果你使用了关键字参数，那么它之后的所有参数都必须使用关键字参数形式传递。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'骆昊'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">43</span><span class="token punctuation">,</span> gpa<span class="token operator">=</span><span class="token number">4.95</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""(3, 2.1, True)&#123;'name': '骆昊', 'age': 43, 'gpa': 4.95&#125;"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、变量的作用域"><a href="#6、变量的作用域" class="headerlink" title="6、变量的作用域"></a>6、变量的作用域</h2><h3 id="全局变量-局部变量"><a href="#全局变量-局部变量" class="headerlink" title="全局变量&amp;&amp;局部变量"></a>全局变量&amp;&amp;局部变量</h3><p>全局变量：是在 函数外部定义 的变量，所有函数 内部 都可以使用这个变量。</p><p>局部变量：是在 函数内部 定义的变量，只能在函数内部使用。</p><h3 id="global-关键字"><a href="#global-关键字" class="headerlink" title="global 关键字"></a>global 关键字</h3><p>更改函数内部全局变量值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 全局变量</span>num1 <span class="token operator">=</span> <span class="token number">10</span>  <span class="token comment"># 不可变数据类型</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>   <span class="token comment"># 可变数据类型</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> num1  <span class="token comment"># 声明在f中使用的num1是全局变量num1</span>    num2 <span class="token operator">=</span> <span class="token number">20</span>  <span class="token comment"># 局部变量</span>    num1 <span class="token operator">=</span> <span class="token number">20</span>    list1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在函数f中打印num1的值'</span><span class="token punctuation">,</span>num1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在函数f中打印list1的值'</span><span class="token punctuation">,</span>list1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'num2的值'</span><span class="token punctuation">,</span>num2<span class="token punctuation">)</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在函数f执行后打印num1的值'</span><span class="token punctuation">,</span>num1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在函数f执行后打印list1的值'</span><span class="token punctuation">,</span>list1<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""在函数f中打印num1的值 20在函数f中打印list1的值 [1, 2, 8, 4, 5]num2的值 20在函数f执行后打印num1的值 20在函数f执行后打印list1的值 [1, 2, 8, 4, 5]"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>局部变量不能在函数外使用</li></ul><h2 id="7、用模块管理函数"><a href="#7、用模块管理函数" class="headerlink" title="7、用模块管理函数"></a>7、用模块管理函数</h2><p>不管用什么样的编程语言来写代码，给变量、函数起名字都是一个让人头疼的问题，因为我们会遇到<strong>命名冲突</strong>这种尴尬的情况。最简单的场景就是在同一个<code>.py</code>文件中定义了两个同名的函数，如下所示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello, world!'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'goodbye, world!'</span><span class="token punctuation">)</span>    foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 大家猜猜调用foo函数会输出什么</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然上面的这种情况我们很容易就能避免，但是如果项目是团队协作多人开发的时候，团队中可能有多个程序员都定义了名为<code>foo</code>的函数，这种情况下怎么解决命名冲突呢？答案其实很简单，Python 中每个文件就代表了一个模块（module），我们在不同的模块中可以有同名的函数，在使用函数的时候，我们通过<code>import</code>关键字导入指定的模块再使用<strong>完全限定名</strong>（<code>模块名.函数名</code>）的调用方式，就可以区分到底要使用的是哪个模块中的<code>foo</code>函数，代码如下所示。</p><p><code>module1.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello, world!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>module2.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'goodbye, world!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>test.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> module1<span class="token keyword">import</span> module2<span class="token comment"># 用“模块名.函数名”的方式（完全限定名）调用函数，</span>module1<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># hello, world!</span>module2<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># goodbye, world!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在导入模块时，还可以使用<code>as</code>关键字对模块进行别名，这样我们可以使用更为简短的完全限定名。</p><p><code>test.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> module1 <span class="token keyword">as</span> m1<span class="token keyword">import</span> module2 <span class="token keyword">as</span> m2m1<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># hello, world!</span>m2<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># goodbye, world!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面两段代码，我们导入的是定义函数的模块，我们也可以使用<code>from...import...</code>语法从模块中直接导入需要使用的函数，代码如下所示。</p><p><code>test.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> module1 <span class="token keyword">import</span> foofoo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># hello, world!</span><span class="token keyword">from</span> module2 <span class="token keyword">import</span> foofoo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># goodbye, world!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，如果我们如果从两个不同的模块中导入了同名的函数，后面导入的函数会替换掉之前的导入，就像下面的代码，调用<code>foo</code>会输出<code>goodbye, world!</code>，因为我们先导入了<code>module1</code>的<code>foo</code>，后导入了<code>module2</code>的<code>foo</code> 。如果两个<code>from...import...</code>反过来写，那就是另外一番光景了。</p><p><code>test.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> module1 <span class="token keyword">import</span> foo<span class="token keyword">from</span> module2 <span class="token keyword">import</span> foofoo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># goodbye, world!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果想在上面的代码中同时使用来自两个模块的<code>foo</code>函数还是有办法的，大家可能已经猜到了，还是用<code>as</code>关键字对导入的函数进行别名，代码如下所示。</p><p><code>test.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> module1 <span class="token keyword">import</span> foo <span class="token keyword">as</span> f1<span class="token keyword">from</span> module2 <span class="token keyword">import</span> foo <span class="token keyword">as</span> f2f1<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># hello, world!</span>f2<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># goodbye, world!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、高阶函数"><a href="#8、高阶函数" class="headerlink" title="8、高阶函数"></a>8、高阶函数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>我们能不能用函数作为函数的参数，用函数作为函数的返回值？</p><p>这里我们先说结论：<strong>Python 中的函数是“一等函数”</strong>，所谓“一等函数”指的就是函数可以赋值给变量，函数可以作为函数的参数，函数也可以作为函数的返回值。把一个函数作为其他函数的参数或返回值的用法，我们通常称之为“高阶函数”。</p><h3 id="解除耦合"><a href="#解除耦合" class="headerlink" title="解除耦合"></a>解除耦合</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def calc(*args, **kwargs):    items &#x3D; list(args) + list(kwargs.values())    result &#x3D; 0    for item in items:        if type(item) in (int, float):            result +&#x3D; item    return result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们希望上面的<code>calc</code>函数不仅仅可以做多个参数的求和，还可以实现更多的甚至是自定义的二元运算，我们该怎么做呢？</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>上面的代码只能求和是因为函数中使用了<code>+=</code>运算符，这使得函数跟加法运算形成了耦合关系，如果能解除这种耦合关系，函数的通用性和灵活性就会更好。代码如下所示：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def calc(init_value, op_func, *args, **kwargs):    items &#x3D; list(args) + list(kwargs.values())    result &#x3D; init_value    for item in items:        if type(item) in (int, float):            result &#x3D; op_func(result, item)    return result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上面的函数增加了两个参数，其中<code>init_value</code>代表运算的初始值，<code>op_func</code>代表二元运算函数</li><li>为了调用修改后的函数，我们先定义做加法和乘法运算的函数，代码如下所示。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token keyword">def</span> <span class="token function">mul</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要做求和或求乘积的运算，我们可以按照下面的方式调用<code>calc</code>函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>calc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> add<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 15</span><span class="token keyword">print</span><span class="token punctuation">(</span>calc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> mul<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>上面的<code>calc</code>函数通过将运算符变成函数的参数，实现了跟加法运算耦合，这是一种非常高明和实用的编程技巧，建议大家细品一下。</p><blockquote><p>需要注意：上面的代码中，将函数作为参数传入其他函数&amp;&amp;直接调用函数是有显著的区别的：<strong>调用函数需要在函数名后面跟上圆括号，而把函数作为参数时只需要函数名即可</strong>。</p></blockquote><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>如果我们没有提前定义好<code>add</code>和<code>mul</code>函数，也可以使用 Python 标准库中的<code>operator</code>模块提供的<code>add</code>和<code>mul</code>函数，它们分别代表了做加法和做乘法的二元运算，我们拿过来直接使用即可，代码如下所示。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import operatorprint(calc(0, operator.add, 1, 2, 3, 4, 5))  # 15print(calc(1, operator.mul, 1, 2, 3, 4, 5))  # 120<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="filter-map函数"><a href="#filter-map函数" class="headerlink" title="filter&amp;&amp;map函数"></a>filter&amp;&amp;map函数</h3><p>Python 内置函数中有不少高阶函数，我们前面提到过的<code>filter</code>和<code>map</code>函数就是高阶函数。</p><ul><li>filter：可以实现对序列中元素的过滤</li><li>map：可以实现对序列中元素的映射</li></ul><p>例如我们要去掉一个整数列表中的奇数，并对所有的偶数求平方得到一个新的列表，就可以直接使用这两个函数来做到，具体的做法是如下所示。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def is_even(num):    &quot;&quot;&quot;判断num是不是偶数&quot;&quot;&quot;    return num % 2 &#x3D;&#x3D; 0def square(num):    &quot;&quot;&quot;求平方&quot;&quot;&quot;    return num ** 2old_nums &#x3D; [35, 12, 8, 99, 60, 52]new_nums &#x3D; list(map(square, filter(is_even, old_nums)))print(new_nums)  # [144, 64, 3600, 2704]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="列表生成式实现"><a href="#列表生成式实现" class="headerlink" title="列表生成式实现"></a>列表生成式实现</h4><p>当然，要完成上面代码的功能，也可以使用列表生成式，列表生成式的做法更为简单优雅。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">old_nums &#x3D; [35, 12, 8, 99, 60, 52]new_nums &#x3D; [num ** 2 for num in old_nums if num % 2 &#x3D;&#x3D; 0]print(new_nums)  # [144, 64, 3600, 2704]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="sorted函数"><a href="#sorted函数" class="headerlink" title="sorted函数"></a>sorted函数</h3><p>内置函数<code>sorted</code>，它可以实现对容器型数据类型（如：列表、字典等）元素的排序。</p><h4 id="sorted函数-sort方法"><a href="#sorted函数-sort方法" class="headerlink" title="sorted函数&amp;&amp;sort方法"></a><code>sorted函数</code>&amp;&amp;<code>sort方法</code></h4><h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><p><code>list</code>类型的<code>sort</code>方法，它实现了对列表元素的排序，<code>sorted</code>函数从功能上来讲跟列表的<code>sort</code>方法没有区别，但它会返回排序后的列表对象，而不是直接修改原来的列表，这一点我们称为<strong>函数的无副作用设计</strong>。也就是说调用函数除了产生返回值以外，不会对程序的状态或外部环境产生任何其他的影响。</p><p>使用<code>sorted</code>函数排序时，可以通过高阶函数的形式自定义排序的规则，我们通过下面的例子加以说明：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">old_strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'in'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'zoo'</span><span class="token punctuation">,</span> <span class="token string">'waxberry'</span><span class="token punctuation">,</span> <span class="token string">'pear'</span><span class="token punctuation">]</span>new_strings <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>old_strings<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_strings<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""['apple', 'in', 'pear', waxberry', 'zoo']"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h5><p>如果希望根据字符串的长度而不是字母表顺序对列表元素排序，我们可以向<code>sorted</code>函数传入一个名为<code>key</code>的参数，将<code>key</code>参数赋值为获取字符串长度的函数<code>len</code>，代码如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">old_strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'in'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'zoo'</span><span class="token punctuation">,</span> <span class="token string">'waxberry'</span><span class="token punctuation">,</span> <span class="token string">'pear'</span><span class="token punctuation">]</span>new_strings <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>old_strings<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_strings<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""['in', 'zoo', 'pear', 'apple', 'waxberry']"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明</strong>：列表类型的<code>sort</code>方法也有同样的<code>key</code>参数，有兴趣的读者可以自行尝试。</p></blockquote><h2 id="9、Lambda函数"><a href="#9、Lambda函数" class="headerlink" title="9、Lambda函数"></a>9、Lambda函数</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Lambda 函数是一种快速定义单行的最小函数，可以用在任何需要函数的地方。</p><p>Python 中的 Lambda 函数是没有的名字函数，所以很多人也把它叫做<strong>匿名函数</strong>，Lambda 函数只能有一行代码，代码中的表达式产生的运算结果就是这个匿名函数的返回值。</p><p>优点：让代码更加精简，不需要考虑命名的问题</p><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul><li>定义 Lambda 函数的关键字是<code>lambda</code>，后面跟函数的参数，如果有多个参数用逗号进行分隔</li><li>冒号后面的部分就是函数的执行体，通常是一个表达式</li><li>表达式的运算结果就是 lambda 函数的返回值，不需要写<code>return</code> 关键字</li></ul><h3 id="Case-1-1"><a href="#Case-1-1" class="headerlink" title="Case-1"></a>Case-1</h3><p>之前的代码中，我们写的<code>is_even</code>和<code>square</code>函数都只有一行代码，我们可以考虑用 lambda 函数来替换掉它们，代码如下所示。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def is_even(num):    &quot;&quot;&quot;判断num是不是偶数&quot;&quot;&quot;    return num % 2 &#x3D;&#x3D; 0def square(num):    &quot;&quot;&quot;求平方&quot;&quot;&quot;    return num ** 2old_nums &#x3D; [35, 12, 8, 99, 60, 52]new_nums &#x3D; list(map(lambda x: x ** 2, filter(lambda x: x % 2 &#x3D;&#x3D; 0, old_nums)))print(new_nums)&quot;&quot;&quot;[144, 64, 3600, 2704]&quot;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Case-2-1"><a href="#Case-2-1" class="headerlink" title="Case-2"></a>Case-2</h3><p>前面我们说过，Python 中的函数是“一等函数”，函数是可以直接赋值给变量的。在学习了 lambda 函数之后，前面我们写过的一些函数就可以用一行代码来实现它们了，大家可以看看能否理解下面的求阶乘和判断素数的函数。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import functoolsimport operator# 用一行代码实现计算阶乘的函数fac &#x3D; lambda n: functools.reduce(operator.mul, range(2, n + 1), 1)# 用一行代码实现判断素数的函数is_prime &#x3D; lambda x: all(map(lambda f: x % f, range(2, int(x ** 0.5) + 1)))# 调用Lambda函数print(fac(6))        # 720print(is_prime(37))  # True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>提示1</strong>：上面使用的<code>reduce</code>函数是 Python 标准库<code>functools</code>模块中的函数，它可以实现对一组数据的归约操作，类似于我们之前定义的<code>calc</code>函数，第一个参数是代表运算的函数，第二个参数是运算的数据，第三个参数是运算的初始值。很显然，<code>reduce</code>函数也是高阶函数，它和<code>filter</code>函数、<code>map</code>函数一起构成了处理数据中非常关键的三个动作：<strong>过滤</strong>、<strong>映射</strong>和<strong>归约</strong>。</p><p><strong>提示2</strong>：上面判断素数的 lambda 函数通过<code>range</code>函数构造了从$\small{2}$到$\small{\sqrt{x}}$的范围，检查这个范围有没有<code>x</code>的因子。<code>all</code>函数也是 Python 内置函数，如果传入的序列中所有的布尔值都是<code>True</code>，<code>all</code>函数返回<code>True</code>，否则<code>all</code>函数返回<code>False</code>。</p></blockquote><h2 id="10、偏函数"><a href="#10、偏函数" class="headerlink" title="10、偏函数"></a>10、偏函数</h2><p>偏函数是指固定函数的某些参数，生成一个新的函数，这样就无需在每次调用函数时都传递相同的参数。在 Python 语言中，我们可以使用<code>functools</code>模块的<code>partial</code>函数来创建偏函数。例如，<code>int</code>函数在默认情况下可以将字符串视为十进制整数进行类型转换，如果我们修修改它的<code>base</code>参数，就可以定义出三个新函数，分别用于将二进制、八进制、十六进制字符串转换为整数，代码如下所示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> functoolsint2 <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>int8 <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>int16 <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'1001'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 1001</span><span class="token keyword">print</span><span class="token punctuation">(</span>int2<span class="token punctuation">(</span><span class="token string">'1001'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 9</span><span class="token keyword">print</span><span class="token punctuation">(</span>int8<span class="token punctuation">(</span><span class="token string">'1001'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 513</span><span class="token keyword">print</span><span class="token punctuation">(</span>int16<span class="token punctuation">(</span><span class="token string">'1001'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 4097</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不知大家是否注意到，<code>partial</code>函数的第一个参数和返回值都是函数，它将传入的函数处理成一个新的函数返回。通过构造偏函数，我们可以结合实际的使用场景将原函数变成使用起来更为便捷的新函数，不知道大家有没有觉得这波操作很有意思。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Python 中的函数是一等函数，可以赋值给变量，也可以作为函数的参数和返回值，这也就意味着我们可以在 Python 中使用高阶函数。高阶函数的概念对新手并不友好，但它却带来了函数设计上的灵活性。如果我们要定义的函数非常简单，只有一行代码，而且不需要函数名来复用它，我们可以使用 lambda 函数。</p><h2 id="11、内置函数"><a href="#11、内置函数" class="headerlink" title="11、内置函数"></a>11、内置函数</h2><p>Python 标准库中有一类函数是不需要<code>import</code>就能够直接使用的，我们将其称之为<strong>内置函数</strong>，这些内置函数不仅有用而且还很常用，下面的表格列出了一部分的内置函数。</p><p>推荐博客：<a href="https://web.suda.edu.cn/hejun/chapter2/python_2_5.html">https://web.suda.edu.cn/hejun/chapter2/python_2_5.html</a></p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>abs</code></td><td>返回一个数的绝对值，例如：<code>abs(-1.3)</code>会返回<code>1.3</code>。</td></tr><tr><td><code>bin</code></td><td>把一个整数转换成以<code>&#39;0b&#39;</code>开头的二进制字符串，例如：<code>bin(123)</code>会返回<code>&#39;0b1111011&#39;</code>。</td></tr><tr><td><code>chr</code></td><td>将Unicode编码转换成对应的字符，例如：<code>chr(8364)</code>会返回<code>&#39;€&#39;</code>。</td></tr><tr><td><code>hex</code></td><td>将一个整数转换成以<code>&#39;0x&#39;</code>开头的十六进制字符串，例如：<code>hex(123)</code>会返回<code>&#39;0x7b&#39;</code>。</td></tr><tr><td><code>input</code></td><td>从输入中读取一行，返回读到的字符串。</td></tr><tr><td><code>len</code></td><td>获取字符串、列表等的长度。</td></tr><tr><td><code>max</code></td><td>返回多个参数或一个可迭代对象中的最大值，例如：<code>max(12, 95, 37)</code>会返回<code>95</code>。</td></tr><tr><td><code>min</code></td><td>返回多个参数或一个可迭代对象中的最小值，例如：<code>min(12, 95, 37)</code>会返回<code>12</code>。</td></tr><tr><td><code>oct</code></td><td>把一个整数转换成以<code>&#39;0o&#39;</code>开头的八进制字符串，例如：<code>oct(123)</code>会返回<code>&#39;0o173&#39;</code>。</td></tr><tr><td><code>open</code></td><td>打开一个文件并返回文件对象。</td></tr><tr><td><code>ord</code></td><td>将字符转换成对应的Unicode编码，例如：<code>ord(&#39;€&#39;)</code>会返回<code>8364</code>。</td></tr><tr><td><code>pow</code></td><td>求幂运算，例如：<code>pow(2, 3)</code>会返回<code>8</code>；<code>pow(2, 0.5)</code>会返回<code>1.4142135623730951</code>。</td></tr><tr><td><code>print</code></td><td>打印输出。</td></tr><tr><td><code>range</code></td><td>构造一个范围序列，例如：<code>range(100)</code>会产生<code>0</code>到<code>99</code>的整数序列。</td></tr><tr><td><code>round</code></td><td>按照指定的精度对数值进行四舍五入，例如：<code>round(1.23456, 4)</code>会返回<code>1.2346</code>。</td></tr><tr><td><code>sum</code></td><td>对一个序列中的项从左到右进行求和运算，例如：<code>sum(range(1, 101))</code>会返回<code>5050</code>。</td></tr><tr><td><code>type</code></td><td>返回对象的类型，例如：<code>type(10)</code>会返回<code>int</code>；而<code> type(&#39;hello&#39;)</code>会返回<code>str</code>。</td></tr></tbody></table><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407030027927.png" alt="image-20240703002732256"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407030028145.png" alt="image-20240703002828629"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407030029614.png" alt="image-20240703002904131"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407030029243.png" alt="image-20240703002937803"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><strong>函数是对功能相对独立且会重复使用的代码的封装</strong>。学会使用定义和使用函数，就能够写出更为优质的代码。当然，Python 语言的标准库中已经为我们提供了大量的模块和常用的函数，用好这些模块和函数就能够用更少的代码做更多的事情；如果这些模块和函数不能满足我们的要求，可能就需要自定义函数，然后再通过模块的概念来管理这些自定义函数。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十三、Python异常</title>
      <link href="/posts/a96bf9aa.html"/>
      <url>/posts/a96bf9aa.html</url>
      
        <content type="html"><![CDATA[<h1 id="十三、Python异常"><a href="#十三、Python异常" class="headerlink" title="十三、Python异常"></a>十三、Python异常</h1><h2 id="1、常见的异常类型"><a href="#1、常见的异常类型" class="headerlink" title="1、常见的异常类型"></a>1、常见的异常类型</h2><p>在 Python 中，把程序运行时产生错误的情况叫做异常。出现异常情况有很多，常见的异常有以下几种：</p><table><thead><tr><th>报错类型</th><th>描述</th></tr></thead><tbody><tr><td>AssertionError</td><td>当assert断言条件为假的时候抛出的异常。</td></tr><tr><td>AttributeError</td><td>当访问的对象属性不存在的时候抛出的异常</td></tr><tr><td>IndexError</td><td>超出对象索引的范围时抛出的异常。</td></tr><tr><td>KeyError</td><td>在字典中查找一个不存在的key抛出的异常</td></tr><tr><td>NameError</td><td>访问一个不存在的变量时抛出的异常。</td></tr><tr><td>OSError</td><td>操作系统产生的异常。</td></tr><tr><td>SyntaxError</td><td>语法错误时会抛出此异常。</td></tr><tr><td>TypeError</td><td>类型错误，通常是不同类型之间的操作会出现此异常。</td></tr><tr><td>ZeroDivisionError</td><td>进行数学运算时除数为0时会出现此异常。</td></tr><tr><td>ImportError</td><td>无法导入模块或者对象，主要是路径有误或名称错误</td></tr><tr><td>IndentationError</td><td>代码没有正确对齐，主要是缩进错误</td></tr><tr><td>IOError</td><td>输入&#x2F;输出异常，主要是无法打开文件</td></tr><tr><td>OverflowError</td><td>数值运算超出最大限制</td></tr><tr><td>TabError</td><td>Tab和空格混用</td></tr><tr><td>ValueError</td><td>传入无效的值，即使值的类型是正确的</td></tr></tbody></table><p>一旦程序发生异常，表明该程序在执行时出现了非正常的情况，无法再执行下去。默认情况下，程序会终止退出。</p><h2 id="2、exceptions-模块"><a href="#2、exceptions-模块" class="headerlink" title="2、exceptions 模块"></a>2、exceptions 模块</h2><p>Python在<code>exceptions</code>模块内建了很多的异常类型，通过使用<code>dir()</code>函数来查看<code>exceptions</code>中的异常类型，如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> exceptions<span class="token keyword">print</span> <span class="token builtin">dir</span><span class="token punctuation">(</span>exceptions<span class="token punctuation">)</span><span class="token comment"># ['ArithmeticError', 'AssertionError'...]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然你也可以查阅Python的文档库进行更详细的了解。</p><ul><li>[<a href="https://docs.python.org/2.7/l...]">https://docs.python.org/2.7/l...]</a>(</li></ul><h2 id="3、异常处理"><a href="#3、异常处理" class="headerlink" title="3、异常处理"></a>3、异常处理</h2><h3 id="try…except…else…finally…"><a href="#try…except…else…finally…" class="headerlink" title="try…except…else…finally…"></a>try…except…else…finally…</h3><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment"># 可能产生异常的代码块</span><span class="token keyword">except</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>Error1<span class="token punctuation">,</span> Error2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">[</span> <span class="token keyword">as</span> e<span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment"># 处理异常的代码块2</span><span class="token keyword">except</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>Error3<span class="token punctuation">,</span> Error4<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">[</span> <span class="token keyword">as</span> e<span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment"># 处理异常的代码块3</span><span class="token keyword">except</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">as</span> e<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment"># 处理其它异常的代码块n</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment"># 代码块1无异常时执行的代码块</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token comment"># 无论try中代码块是否发生异常都会执行该代码块</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>1、首先执行try中代码块，如果出现异常，立即终止代码执行，转而到except块中进行异常处理<br>2、异常处理except模块可以多个，从上往下匹配，如果能够匹配成功，立即执行相应的异常处理代码块，执行完毕后，不在往下匹配，转到3执行<br>3、执行异常处理完毕后，如果有finally字句则执行finally字句，如果没有则执行后续语句<br>4、如果匹配不到异常，有finally则执行finally，然后则抛出错误，终止程序执行。<br>5、如果没有异常，如果有else字句则执行else字句，执行完else后，有finally字句则执行，没有则执行后续语句</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token string">'10'</span>      <span class="token comment"># 变量a的类型错误</span>    b <span class="token operator">=</span> <span class="token number">0</span>         <span class="token comment"># 变量b作为被除数不能为0</span>    c <span class="token operator">=</span> a <span class="token operator">/</span> b    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"result："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token keyword">except</span> <span class="token punctuation">(</span>ValueError<span class="token punctuation">,</span> TypeError<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ValueError or TypeError:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">except</span> <span class="token punctuation">(</span>ZeroDivisionError<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ZeroDivisionError:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"other exceptions:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"continue..."</span><span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>1、try 代码块有且仅有一个，但 except 代码块可以有多个，且每个 except 代码块都可以同时处理多种异常。</p><p>2、前面的except已经捕获并处理了异常，后面的except将不会进行检查异常了，而是直接跳过。</p><p>3、as e 是可选参数，但是为了后续操作方便（如 打印异常信息），一般会给每一个进入到 except 的异常类型起一个别名 e。</p><p>4、Exception 是可选参数，它代表所有的异常情况，一般用在最后一个except 代码块中。</p><p>5、else 的代码块，只有当 try 的代码块没有出现异常时才会显现出来，否则 else 中的代码块不会执行。</p><p>6、try 中是否出现异常，finally 中的代码都会执行。</p><p>7、finally 中一般不使用 return 语句，如果 finally 中含有 return 语句，在 try代码块 return 之前，会执行 finally 中的语句，导致 try 中的 return 被忽略了，最终返回的值是 finally 中 return 的值。</p><h2 id="4、raise-关键字"><a href="#4、raise-关键字" class="headerlink" title="4、raise 关键字"></a>4、raise 关键字</h2><p>如果你需要自主抛出异常一个异常，可以使用<code>raise</code>关键字，等同于C#和Java中的<code>throw</code>，其语法规则如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">raise</span> NameError<span class="token punctuation">(</span><span class="token string">"bad name!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>raise 语句有如下三种常用的用法：</p><ol><li>raise：单独一个 raise。该语句引发当前上下文中捕获的异常（比如在 except 块中），或默认引发 RuntimeError 异常。</li><li>raise 异常类：raise 后带一个异常类。该语句引发指定异常类的默认实例。</li><li>raise 异常对象：引发指定的异常对象。</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>raise 语句每次只能引发一个异常实例</li><li><code>raise</code>关键字后面可以指定你要抛出的异常实例，一般来说抛出的异常越详细越好</li></ul><h2 id="5、自定义异常类型"><a href="#5、自定义异常类型" class="headerlink" title="5、自定义异常类型"></a>5、自定义异常类型</h2><p>Python中自定义自己的异常类型非常简单，只需要要从<code>Exception</code>类继承即可(直接或间接)：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SomeCustomException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">AnotherException</span><span class="token punctuation">(</span>SomeCustomException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般你在自定义异常类型时，需要考虑的问题应该是这个异常所应用的场景。如果内置异常已经包括了你需要的异常，建议考虑使用内置的异常类型。比如你希望在函数参数错误时抛出一个异常，你可能并不需要定义一个<code>InvalidArgumentError</code>，使用内置的<code>ValueError</code>即可。</p><h2 id="6、经验案例"><a href="#6、经验案例" class="headerlink" title="6、经验案例"></a>6、经验案例</h2><h3 id="传递异常-re-raise-Exception"><a href="#传递异常-re-raise-Exception" class="headerlink" title="传递异常 re-raise Exception"></a>传递异常 re-raise Exception</h3><p>捕捉到了异常，但是又想重新抛出它（传递异常），使用不带参数的<code>raise</code>语句即可：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        f1<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">raise</span>  <span class="token comment"># don't raise e !!!</span>f2<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Python2中，为了保持异常的完整信息，那么你捕获后再次抛出时千万不能在<code>raise</code>后面加上异常对象，否则你的**<code>trace</code>信息就会从此处截断**。以上是最简单的重新抛出异常的做法，也是推荐的做法。</p><p>还有一些技巧可以考虑，比如抛出异常前你希望对异常的信息进行更新。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        f1<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        e<span class="token punctuation">.</span>args <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token string">'more info'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Python3对重复传递异常有所改进，你可以自己尝试一下，不过建议还是遵循以上规则。</p><h3 id="Exception-和-BaseException"><a href="#Exception-和-BaseException" class="headerlink" title="Exception 和 BaseException"></a>Exception 和 BaseException</h3><p>当我们要捕获一个通用异常时，应该用<code>Exception</code>还是<code>BaseException</code>？我建议你还是看一下<a href="https://link.segmentfault.com/?enc=LW0zBRA6217YxqPNNpnRHw==.d1ODSL+UfDyMePF9fpGouuycqD74EfhKcnsZ1bX5sfhrwknqhPhx/08x9Hzd/K+okp6qOHfAUKMgMm0pHxTWtaKrCsEDv10URdg93AMfIOw="> 官方文档说明</a>，这两个异常到底有啥区别呢？ 请看它们之间的继承关系。</p><pre class="line-numbers language-ada" data-language="ada"><code class="language-ada"><span class="token variable">BaseException</span> <span class="token operator">+</span><span class="token comment">-- SystemExit</span> <span class="token operator">+</span><span class="token comment">-- KeyboardInterrupt</span> <span class="token operator">+</span><span class="token comment">-- GeneratorExit</span> <span class="token operator">+</span><span class="token comment">-- Exception</span>      <span class="token operator">+</span><span class="token comment">-- StopIteration...</span>      <span class="token operator">+</span><span class="token comment">-- StandardError...</span>      <span class="token operator">+</span><span class="token comment">-- Warning...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从<code>Exception</code>的层级结构来看，<code>BaseException</code>是最基础的异常类，<code>Exception</code>继承了它。<code>BaseException</code>除了包含所有的<code>Exception</code>外还包含了<code>SystemExit</code>，<code>KeyboardInterrupt</code>和<code>GeneratorExit</code>三个异常。</p><p>由此看来你的程序在捕获所有异常时更应该使用<code>Exception</code>而不是<code>BaseException</code>，因为被排除的三个异常属于更高级别的异常，合理的做法应该是交给Python的解释器处理。</p><h3 id="except-Exception-as-e和-except-Exception-e"><a href="#except-Exception-as-e和-except-Exception-e" class="headerlink" title="except Exception as e和 except Exception, e"></a>except Exception as e和 except Exception, e</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    do_something<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> NameError <span class="token keyword">as</span> e<span class="token punctuation">:</span>  <span class="token comment"># should</span>    <span class="token keyword">pass</span><span class="token keyword">except</span> KeyError<span class="token punctuation">,</span> e<span class="token punctuation">:</span>  <span class="token comment"># should not</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Python2的时代，你可以使用以上两种写法中的任意一种。在Python3中你只能使用第一种写法，第二种写法已经不再支持。第一个种写法可读性更好，而且为了程序的兼容性和后期移植的成本，请你果断抛弃第二种写法。</p><h3 id="raise-“Exception-string”"><a href="#raise-“Exception-string”" class="headerlink" title="raise “Exception string”"></a>raise “Exception string”</h3><p>把字符串当成异常抛出看上去是一个非常简洁的办法，但其实是一个非常不好的习惯。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> is_work_done<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> <span class="token string">"Work is not done!"</span> <span class="token comment"># not cool</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的语句如果抛出异常，那么会是这样的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"/demo/exception_hanlding.py"</span><span class="token punctuation">,</span> line <span class="token number">48</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">raise</span> <span class="token string">"Work is not done!"</span>TypeError<span class="token punctuation">:</span> exceptions must be old<span class="token operator">-</span>style classes <span class="token keyword">or</span> derived <span class="token keyword">from</span> BaseException<span class="token punctuation">,</span> <span class="token keyword">not</span> <span class="token builtin">str</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这在 Python2.4 以前是可以接受的做法，但是没有指定异常类型有可能会让下游没办法正确捕获并处理这个异常，从而导致你的程序难以维护。简单说，这种写法是是封建时代的陋习，应该扔了。</p><h3 id="使用内置的语法范式代替try-except"><a href="#使用内置的语法范式代替try-except" class="headerlink" title="使用内置的语法范式代替try&#x2F;except"></a>使用内置的语法范式代替try&#x2F;except</h3><p>Python 本身提供了很多的语法范式简化了异常的处理，比如<code>for</code>语句就处理了的<code>StopIteration</code>异常，让你很流畅地写出一个循环。</p><p><code>with</code>语句在打开文件后会自动调用<code>finally</code>并关闭文件。</p><p>我们在写 Python 代码时应该尽量避免在遇到这种情况时还使用try&#x2F;except&#x2F;finally的思维来处理。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># should not</span><span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>a_file<span class="token punctuation">)</span>    do_something<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># should </span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>a_file<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    do_something<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再比如，当我们需要访问一个不确定的属性时，有可能你会写出这样的代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    test <span class="token operator">=</span> Test<span class="token punctuation">(</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> test<span class="token punctuation">.</span>name  <span class="token comment"># not sure if we can get its name</span><span class="token keyword">except</span> AttributeError<span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'default'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实你可以使用更简单的<code>getattr()</code>来达到你的目的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'default'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十二、Python集合(set)</title>
      <link href="/posts/5276a915.html"/>
      <url>/posts/5276a915.html</url>
      
        <content type="html"><![CDATA[<h1 id="十二、Python集合-set"><a href="#十二、Python集合-set" class="headerlink" title="十二、Python集合(set)"></a>十二、Python集合(set)</h1><h2 id="1、集合的特点"><a href="#1、集合的特点" class="headerlink" title="1、集合的特点"></a>1、集合的特点</h2><ol><li>集合内的数据对象都是唯一的，不允许有重复元素，如果添加重复元素，则会自动过滤</li><li>集合是一种无序且无重复元素的数据结构</li><li>集合是可迭代对象</li><li>集合的底层是字典结构</li><li>可以进行交集、并集的运算。</li><li>与dict类似，是一组key的集合(不存储value)</li></ol><h2 id="2、定义"><a href="#2、定义" class="headerlink" title="2、定义"></a>2、定义</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>集合（set）是一个<strong>无序的不重复元素</strong>序列，可以使用大括号 <strong><code>&#123; &#125;</code></strong> 或者 <strong><code>set()</code></strong> 函数创建集合。</p><blockquote><p><strong>注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</strong></p></blockquote><h4 id="空集合"><a href="#空集合" class="headerlink" title="空集合"></a>空集合</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""set() &lt;class 'set'>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有元素的集合"><a href="#有元素的集合" class="headerlink" title="有元素的集合"></a>有元素的集合</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""&#123;1, 2, 3, 4&#125; &lt;class 'set'>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># list-->set</span>s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment"># tuple-->set</span>s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment"># str-->set</span>s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment"># dict-->set</span>s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""&#123;1, 2, 3&#125;&#123;1, 2, 3&#125;&#123;'3', '2', '1'&#125;&#123;1, 'a'&#125;"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>名称</th><th>符号</th><th>空元素</th><th>数据类型</th><th>是否可改(增加、删除、修改)</th><th>是否允许重复</th><th>是否支持索引</th><th>符号支持</th></tr></thead><tbody><tr><td>列表</td><td>[ ]方括号</td><td>list1&#x3D;[]</td><td>&lt;class ‘list’&gt;</td><td>可以</td><td>允许</td><td>支持</td><td>+ * in</td></tr><tr><td>元组</td><td>()小括号</td><td>tuple1&#x3D;()</td><td>&lt;class ‘tuple’&gt;</td><td>不可以</td><td>允许</td><td>支持</td><td>+ * in</td></tr><tr><td>集合</td><td><code>&#123;&#125;大括号</code></td><td>set1&#x3D;set()</td><td><code>&lt;class &#39;set&#39;&gt;</code></td><td><code>可以</code></td><td><code>不允许</code></td><td>不支持</td><td>&amp;|-^in</td></tr></tbody></table><h2 id="3、集合使用"><a href="#3、集合使用" class="headerlink" title="3、集合使用"></a>3、集合使用</h2><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><h4 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h4><p>add()：向集合内增加元素，如果添加的元素已经存在的话，则不执行任何操作</p><h4 id="update-x"><a href="#update-x" class="headerlink" title="update(x)"></a>update(x)</h4><p>update(x)：可以添加元素，且参数可以是列表，元组，字典等</p><p>语法格式如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token punctuation">.</span>update<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>x  可以有多个，用逗号分开。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">thisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>thisset<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token comment"># &#123;1, 3, 'Google', 'Taobao', 'Runoob'&#125;</span>thisset<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token comment"># &#123;1, 3, 4, 5, 6, 'Google', 'Taobao', 'Runoob'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h4><ul><li><code>pop()</code>：pop会从集合中随机删除一个数</li><li><code>remove(x)</code>：删除指定元素，如果是不存在的元素会报错。</li><li><code>discard(x)</code>：与remove(x)类似，如果是不存在的元素不会报错。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">thisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>thisset<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token comment"># &#123;'Google', 'Runoob'&#125;</span>thisset<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"Facebook"</span><span class="token punctuation">)</span>   <span class="token comment"># 不存在会发生错误</span><span class="token comment"># Traceback (most recent call last):</span><span class="token comment">#   File "&lt;stdin>", line 1, in &lt;module></span><span class="token comment"># KeyError: 'Facebook'</span>  thisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>thisset<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token string">"Facebook"</span><span class="token punctuation">)</span>  <span class="token comment"># 不存在不会发生错误</span><span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token comment"># &#123;'Taobao', 'Google', 'Runoob'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运算操作"><a href="#运算操作" class="headerlink" title="运算操作"></a>运算操作</h3><table><thead><tr><th>符号</th><th>名称</th><th>函数</th></tr></thead><tbody><tr><td>&amp;</td><td>交集</td><td>set1.intersection(set2)：求set1和set2的交集</td></tr><tr><td>|</td><td>并集</td><td>set1.union(set2)：求set1和set2的并集</td></tr><tr><td>-</td><td>差集</td><td>set1.difference(set2)：求set1和set2的差集</td></tr><tr><td>^</td><td>交叉补集</td><td>set1.symmetric_difference(set2)：求set1和set2的交叉补集</td></tr></tbody></table><p><strong>交集</strong>: 交集可以使用符号：【&amp;】完成。跟数学中的交集是一样的，就是求两个集合中共同都有的元素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sports1 <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'足球'</span><span class="token punctuation">,</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'网球'</span><span class="token punctuation">,</span><span class="token string">'乒乓球'</span><span class="token punctuation">&#125;</span>sports2<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'乒乓球'</span><span class="token punctuation">,</span><span class="token string">'排球'</span><span class="token punctuation">,</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'网球'</span><span class="token punctuation">,</span><span class="token string">'冰球'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports1<span class="token operator">&amp;</span>sports2<span class="token punctuation">)</span><span class="token comment"># &#123;'篮球', '乒乓球', '网球'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>并集</strong>：并集可以使用符号：【|】完成，就是将两个集合并在一起。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sports1 <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'足球'</span><span class="token punctuation">,</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'网球'</span><span class="token punctuation">,</span><span class="token string">'乒乓球'</span><span class="token punctuation">&#125;</span>sports2<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'乒乓球'</span><span class="token punctuation">,</span><span class="token string">'排球'</span><span class="token punctuation">,</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'网球'</span><span class="token punctuation">,</span><span class="token string">'冰球'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports1<span class="token operator">|</span>sports2<span class="token punctuation">)</span><span class="token comment"># &#123;'冰球', '篮球', '网球', '足球', '排球', '乒乓球'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>差集</strong>：差集使用符号：【-】完成，就是求当前与另一个集合不同的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sports1 <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'足球'</span><span class="token punctuation">,</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'网球'</span><span class="token punctuation">,</span><span class="token string">'乒乓球'</span><span class="token punctuation">&#125;</span>sports2<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'乒乓球'</span><span class="token punctuation">,</span><span class="token string">'排球'</span><span class="token punctuation">,</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'网球'</span><span class="token punctuation">,</span><span class="token string">'冰球'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports1<span class="token operator">-</span>sports2<span class="token punctuation">)</span>  <span class="token comment"># 就是求sports1与sports2不同的是</span><span class="token comment"># &#123;'足球'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>交叉补集</strong>:</p><p>理解下<strong>交叉补集</strong>：集合A 是{1、2、3 }，集合B 是 {2、3、4 } . 交叉补集就只保留 1 和 4 。因为 1 是 A 独有的， 4 是B 独有的。交叉补集会去掉共有的部分，只保留双方独有的部分。</p><p>现在我们求sports1和sports2的交叉补集,使用符号是:【^】完成。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sports1 <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'足球'</span><span class="token punctuation">,</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'网球'</span><span class="token punctuation">,</span><span class="token string">'乒乓球'</span><span class="token punctuation">&#125;</span>sports2<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'乒乓球'</span><span class="token punctuation">,</span><span class="token string">'排球'</span><span class="token punctuation">,</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'网球'</span><span class="token punctuation">,</span><span class="token string">'冰球'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports1<span class="token operator">^</span>sports2<span class="token punctuation">)</span>  <span class="token comment"># &#123;'冰球', '足球', '排球'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>add()</td><td>为集合添加元素</td></tr><tr><td><code>clear()</code></td><td>移除集合中的所有元素</td></tr><tr><td>copy()</td><td>拷贝一个集合</td></tr><tr><td>pop()</td><td>随机移除元素</td></tr><tr><td>remove()</td><td>移除指定元素</td></tr><tr><td>union</td><td>返回两个集合的并集</td></tr><tr><td>update()</td><td>给集合添加元素</td></tr><tr><td>difference()</td><td>返回多个集合的差集</td></tr><tr><td>difference_update()</td><td>移除集合中的元素，该元素在指定的集合也存在。</td></tr><tr><td>discard()</td><td>删除集合中指定的元素</td></tr><tr><td>intersection()</td><td>返回集合的交集</td></tr><tr><td>intersection_update()</td><td>删除集合中的元素，该元素在指定的集合中不存在。</td></tr><tr><td>isdisjoint()</td><td>判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。</td></tr><tr><td>issubset()</td><td>判断指定集合是否为该方法参数集合的子集。</td></tr><tr><td>issuperset()</td><td>判断该方法的参数集合是否为指定集合的子集</td></tr><tr><td>symmetric_difference()</td><td>返回两个集合中不重复的元素集合。</td></tr><tr><td>symmetric_difference_update()</td><td>移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</td></tr></tbody></table><h3 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h3><p>有一个无序且元素数据重复的列表 nums, <code>nums=[5,8,7,6,4,1,3,5,1,8,4]</code>,要求对这个列表里的元素去重，并进行降序排序。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方法一：调用列表的sort方法</span>nums2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>nums2<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token comment"># 方法二：使用sorted内置函数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、可变类型-不可变类型"><a href="#4、可变类型-不可变类型" class="headerlink" title="4、可变类型 &amp; 不可变类型"></a>4、可变类型 &amp; 不可变类型</h2><p>不可变数据类型在创建后，其值就不能被改变。Python中的以下数据类型是不可变的：</p><ol><li>数字（例如：int, float, complex）</li><li>字符串（例如：str）</li><li>元组（例如：tuple）</li><li>布尔类型（例如：bool）</li></ol><p>可变数据类型的值可以在创建后被改变。Python中的以下数据类型是可变的：</p><ol><li>列表（例如：list）</li><li>字典（例如：dict）</li><li>集合（例如：set）</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十一、Python字典</title>
      <link href="/posts/24bfa655.html"/>
      <url>/posts/24bfa655.html</url>
      
        <content type="html"><![CDATA[<h1 id="十一、Python字典-dict"><a href="#十一、Python字典-dict" class="headerlink" title="十一、Python字典(dict)"></a>十一、Python字典(dict)</h1><h2 id="1、字典（dict）"><a href="#1、字典（dict）" class="headerlink" title="1、字典（dict）"></a>1、字典（dict）</h2><p>Python 提供了字典，可以保存具有映射关系的数据，所以字典相当于保存了两组数据。其中一组数据是关键数据，被称为 key，里面的数据是不能重复的；另一组数据可通过 key 来访问，被称为 value，value是允许重复的。</p><p><strong>由于字典中的 key 是非常关键的数据，而且程序需要通过 key 来访问 value，因此字典中的 key 不允许重复。</strong></p><p>字典&amp;&amp;列表的区别：</p><ol><li>列表 是 有序 的对象集合</li><li>字典 是 无序 的对象集合</li></ol><h2 id="2、字典定义"><a href="#2、字典定义" class="headerlink" title="2、字典定义"></a>2、字典定义</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ol><li>字典用花括号&#x2F;大括号 <code>&#123;&#125;</code> 定义</li><li>字典使用 键值对 存储数据，键值对之间使用 , 分隔<ul><li>键 <code>key</code> 是索引</li><li>值 <code>value</code> 是数据</li><li>键 和 值 之间使用 <code>:</code> 分隔</li><li>键必须是唯一的</li><li>值 可以取任何数据类型，但 键 只能使用 字符串、数字或 元组</li></ul></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  key1<span class="token punctuation">:</span> value1<span class="token punctuation">,</span>   key2<span class="token punctuation">:</span> value2<span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>   keyn<span class="token punctuation">:</span> valuen<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>字典中的键 key 是不允许重复的，如果里面有重复的，后面的默认覆盖前面的。</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">'小宝'</span><span class="token punctuation">:</span><span class="token string">'13850501856'</span><span class="token punctuation">,</span>  <span class="token string">'小鹏'</span><span class="token punctuation">:</span><span class="token string">'13900881234'</span><span class="token punctuation">,</span>  <span class="token string">'小宝'</span><span class="token punctuation">:</span><span class="token string">'13850508000'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span class="token comment"># &#123;'小宝': '13850508000', '小鹏': '13900881234'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="空字典"><a href="#空字典" class="headerlink" title="空字典"></a>空字典</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方式一</span>d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 方式二</span>d <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""&#123;&#125; &lt;class 'dict'>&#123;&#125; &lt;class 'dict'>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、字典的使用"><a href="#3、字典的使用" class="headerlink" title="3、字典的使用"></a>3、字典的使用</h2><h3 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h3><ul><li>字典和列表一样，也能够存储多个数据</li><li>列表中找某个元素时，是根据下标进行的；字典中找某个元素时，是根据’名字’（就是冒号:前面的那个值）</li><li>字典的每个元素由 2 部分组成，键:值</li><li><strong>键可以使用数字、布尔值、布尔值、元组等不可变数据类型，但是一般习惯使用字符串</strong></li><li><strong>每个字典里的 <code>key</code> 都是唯一的，如果出现了多个 key,后面的 value 会覆盖前一个 key 对应的 value.</strong></li></ul><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><p>字典中不存在索引，那如何获取里面的数据呢？两种方式：</p><ol><li>**字典名[key]**：没有找到对应的 key，会报错。</li><li>**字典名.get(key, defaultvalue)**：第一个参数是 key，第二个参数是默认值，即没有找到对应的 key，显示的内容。</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 字典</span>dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">'小宝'</span><span class="token punctuation">:</span><span class="token string">'13850501856'</span><span class="token punctuation">,</span>  <span class="token string">'小鹏'</span><span class="token punctuation">:</span><span class="token string">'13900881234'</span><span class="token punctuation">,</span>  <span class="token string">'小亮'</span><span class="token punctuation">:</span><span class="token string">'13899006745'</span><span class="token punctuation">,</span>  <span class="token string">'小音'</span><span class="token punctuation">:</span><span class="token string">'15900671234'</span><span class="token punctuation">,</span>  <span class="token string">'小伦'</span><span class="token punctuation">:</span><span class="token string">'15899996789'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">[</span><span class="token string">'小亮'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'小伦'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&#x3D;&#x3D;区别&#x3D;&#x3D;：<strong>如果 key 在字典中不存在的情况下。第一种方式报错，第二种方式不报错，而且还可以设置默认值。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">[</span><span class="token string">'小飞'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 报错的</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'小飞'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'小飞'</span><span class="token punctuation">,</span><span class="token string">'不存在此数据'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="添加与修改元素"><a href="#添加与修改元素" class="headerlink" title="添加与修改元素"></a>添加与修改元素</h3><p>1）**<code>字典名[key] = 新值</code>**</p><ul><li>添加一个键值对</li><li>修改里面的一个键值对的值</li></ul><p>2）**<code>setdefault(key, value)</code>**：该方法总能返回指定 key 对应的 value；但是如果该 key-value 对不存在，则先为该 key 设置默认的 value，然后再返回该 key 对应的 value，存在则直接返回 key 对应的 value 值</p><p>3）**<code>update(dict参数)</code>**：可使用一个字典所包含的 key-value 对来更新己有的字典。在执行 update() 方法时，如果己包含，那么原 value 会被覆盖；如果不包含，则添加进去。没有返回值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">'小宝'</span><span class="token punctuation">:</span><span class="token string">'13850501856'</span><span class="token punctuation">,</span>  <span class="token string">'小鹏'</span><span class="token punctuation">:</span><span class="token string">'13900881234'</span><span class="token punctuation">,</span>  <span class="token string">'小亮'</span><span class="token punctuation">:</span><span class="token string">'13899006745'</span><span class="token punctuation">&#125;</span>dict1<span class="token punctuation">[</span><span class="token string">'小鹏'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'18912346666'</span>result1 <span class="token operator">=</span> dict1<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'小飞'</span><span class="token punctuation">,</span><span class="token string">'18912346666'</span><span class="token punctuation">)</span>result2 <span class="token operator">=</span> dict1<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'小战'</span><span class="token punctuation">:</span><span class="token string">'18912346666'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""18912346666None"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>setdefault和update了解即可</p></blockquote><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>元素删除方法也有多种，比如使用del、pop()、popitem()</p><ol><li><strong><code>del 字典名[key]</code></strong> : 删除指定 key 的键值对</li><li><strong><code>字典对象.pop(key)</code></strong> : 用于获取指定 key 对应的 value，并删除这个 key-value 对</li><li><strong><code>字典对象.popitem()</code></strong> : popitem() 方法用于<strong>随机</strong>弹出字典中的一个 key-value 对</li><li>**<code>字典对象.clear()</code>**：如果全部都不想要可以使用clear()</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">'小鹏'</span><span class="token punctuation">:</span> <span class="token string">'13900881234'</span><span class="token punctuation">,</span>   <span class="token string">'小亮'</span><span class="token punctuation">:</span> <span class="token string">'13899006745'</span><span class="token punctuation">,</span>   <span class="token string">'小飞'</span><span class="token punctuation">:</span> <span class="token string">'18912346666'</span><span class="token punctuation">,</span>   <span class="token string">'小战'</span><span class="token punctuation">:</span> <span class="token string">'18912346666'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 打印长度为4</span><span class="token keyword">del</span> dict1<span class="token punctuation">[</span><span class="token string">'小战'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 打印长度为3</span>dict1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'小飞'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 打印长度为2</span>dict1<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 打印长度为1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><ul><li>**<code>items()</code>**：表示获取字典中的所有键值对</li><li>**<code>keys()</code>**：表示获取字典中的所有键</li><li>**<code>values()</code>**：表示获取字典中的所有值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">'小宝'</span><span class="token punctuation">:</span><span class="token string">'13850501856'</span><span class="token punctuation">,</span>  <span class="token string">'小鹏'</span><span class="token punctuation">:</span><span class="token string">'13900881234'</span><span class="token punctuation">,</span>  <span class="token string">'小亮'</span><span class="token punctuation">:</span><span class="token string">'13899006745'</span><span class="token punctuation">,</span>  <span class="token string">'小音'</span><span class="token punctuation">:</span><span class="token string">'15900671234'</span><span class="token punctuation">,</span>  <span class="token string">'小伦'</span><span class="token punctuation">:</span><span class="token string">'15899996789'</span><span class="token punctuation">&#125;</span>  <span class="token comment"># 遍历打印所有的键值对</span><span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span>  <span class="token comment"># 遍历打印所有的key</span><span class="token keyword">for</span> key <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment"># 遍历打印所有的value</span><span class="token keyword">for</span> value <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十、Python元组</title>
      <link href="/posts/81c8b757.html"/>
      <url>/posts/81c8b757.html</url>
      
        <content type="html"><![CDATA[<h1 id="十、Python元组"><a href="#十、Python元组" class="headerlink" title="十、Python元组"></a>十、Python元组</h1><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><ul><li>Tuple（元组）与列表类似，不同之处在于元组的 元素不能修改</li><li>元组 表示多个元素组成的序列</li><li>用于存储 一串 信息，数据之间使用 <code>,</code> 分隔</li></ul><ul><li>元组的声明使用的符号是: <code>小括号</code></li></ul><h2 id="2、元组VS列表"><a href="#2、元组VS列表" class="headerlink" title="2、元组VS列表"></a>2、元组VS列表</h2><p>Python的元组与列表类似，不同之处在于<strong>元组的元素不能修改</strong>。元组使用小括号，列表使用方括号。</p><table><thead><tr><th>声明方式</th><th>声明方式</th><th>空元素</th><th>数据类型</th><th>是否可改(增加、删除、修改)</th><th>允许重复元素否</th><th>是否支持索引切片</th></tr></thead><tbody><tr><td>元组</td><td><code>使用小括号()</code></td><td>tuple1&#x3D;()</td><td><code>&lt;class &#39;tuple&#39;&gt;</code></td><td><code>不允许</code></td><td>允许</td><td>支持</td></tr><tr><td>列表</td><td>使用方括号[]</td><td>list1&#x3D;[ ]</td><td>&lt;class ‘list’&gt;</td><td>允许</td><td>允许</td><td>支持</td></tr></tbody></table><h2 id="3、元组的创建"><a href="#3、元组的创建" class="headerlink" title="3、元组的创建"></a>3、元组的创建</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方式一</span>tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>tuple1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 方式一</span>tuple2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>   <span class="token comment"># 元组里只有一个元素时，加一个逗号</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 方式三</span>tuple3 <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># tuple():类型转换</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>tuple3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 方式四</span>tuple4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple4<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>tuple4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""(1, 2, 3, True, 'hello')&lt;class 'tuple'>(1,)&lt;class 'tuple'>()&lt;class 'tuple'>()&lt;class 'tuple'>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1）定义只有一个元素的元组，需要<strong>在唯一的元素后写一个逗号</strong></p><p>2）元组的操作只是支持：index 和 count，不支持增加、删除和修改元素，所以跟索引相关的方法都没有了。查看数组的长度是仍然使用：len() 函数</p><p>3）当然也可以通过索引和切片获取里面的元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'足球'</span><span class="token punctuation">,</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'网球'</span><span class="token punctuation">,</span><span class="token string">'乒乓球'</span><span class="token punctuation">,</span><span class="token string">'排球'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''结果如下：篮球排球乒乓球('网球', '乒乓球', '排球')('足球', '篮球', '网球')('足球', '网球', '排球')('排球', '乒乓球', '网球', '篮球', '足球')('乒乓球', '网球', '篮球', '足球')'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）元组遍历的方式也跟列表的方式是一样的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 元组的遍历</span><span class="token keyword">for</span> sport <span class="token keyword">in</span> sports<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sport<span class="token punctuation">)</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> sport <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>sports<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> sport<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sports<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> sports<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）总之，tuple 放弃了对元素的增删（内存结构设计上变的更精简），换取的是性能上的提升：创建 tuple 比 list 要快，存储空间比 list 占用更小。所以就出现了“能用 tuple 的地方就不用 list”的说法。</p><h2 id="4、支持的运算符"><a href="#4、支持的运算符" class="headerlink" title="4、支持的运算符"></a>4、支持的运算符</h2><table><thead><tr><th>运算符</th><th>含义</th><th>表达式</th><th>结果</th></tr></thead><tbody><tr><td><code>+</code></td><td>列表合并在一起</td><td><code>(1, 2, 3)+(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</code></td><td><code>(1, 2, 3, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</code></td></tr><tr><td><code>*</code></td><td>列表重复</td><td><code>(&#39;a&#39;,) * 3</code></td><td><code>(&#39;a&#39;, &#39;a&#39;, &#39;a&#39;)</code></td></tr><tr><td><code>in</code></td><td>是否为列表元素</td><td><code>&#39;a&#39; in (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</code></td><td><code>True</code></td></tr></tbody></table><h2 id="5、range-函数"><a href="#5、range-函数" class="headerlink" title="5、range() 函数"></a>5、range() 函数</h2><p>1）系统提供的内建函数</p><p>2）原型：range([start, ] end [, step&#x3D;1]) ，生成一个等差序列[start, end)</p><ul><li>start：表示列表起始值，包含， 默认为0 </li><li>stop：表示列表结束值，但是不包含 </li><li>step：步长， 默认为1</li></ul><p>3）range一般用于for-in循环遍历</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""range(0, 10)&lt;class 'range'>--------------------[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;class 'list'>--------------------(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)&lt;class 'tuple'>--------------------&lt;enumerate object at 0x000001497E2779A8>&lt;class 'enumerate'>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h2><p>如果不会涉及到对元素的操作可以使用元组的，这样访问速度会更快。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九、Python列表</title>
      <link href="/posts/cb27b5d4.html"/>
      <url>/posts/cb27b5d4.html</url>
      
        <content type="html"><![CDATA[<h1 id="九、列表"><a href="#九、列表" class="headerlink" title="九、列表"></a>九、列表</h1><h2 id="0、序列"><a href="#0、序列" class="headerlink" title="0、序列"></a>0、序列</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在python中，有这样一些类型，它们的成员是有序排列的，并且可以通过下标访问成员，这些类型称之为序列。eg：列表、range、元组和字符串；</p><h3 id="序列的通用操作"><a href="#序列的通用操作" class="headerlink" title="序列的通用操作"></a>序列的通用操作</h3><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><table><thead><tr><th><strong>函数</strong></th><th><strong>描述</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>len(item)</td><td>计算容器中元素个数</td><td></td></tr><tr><td>del(item)</td><td>删除变量</td><td>del 有两种方式</td></tr><tr><td>max(item)</td><td>返回容器中元素最大值</td><td>如果是字典，只针对 key 比较</td></tr><tr><td>min(item)</td><td>返回容器中元素最小值</td><td>如果是字典，只针对 key 比较</td></tr></tbody></table><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><table><thead><tr><th><strong>描述</strong></th><th><strong>Python</strong> <strong>表达式</strong></th><th><strong>结果</strong></th><th><strong>支持的数据类型</strong></th></tr></thead><tbody><tr><td>切片</td><td>“0123456789”[::-2]</td><td>“97531”</td><td>字符串、列表、元组</td></tr></tbody></table><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><table><thead><tr><th><strong>运算符</strong></th><th><strong>Python</strong> <strong>表达式</strong></th><th><strong>结果</strong></th><th><strong>描述</strong></th><th><strong>支持的数据类型</strong></th></tr></thead><tbody><tr><td>+</td><td>[1, 2] + [3, 4]</td><td>[1, 2, 3, 4]</td><td>合并</td><td>字符串、列表、元组</td></tr><tr><td>*</td><td>[“Hi!”] * 4</td><td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td>重复</td><td>字符串、列表、元组</td></tr><tr><td>in</td><td>3 in (1, 2, 3)</td><td>True</td><td>元素是否存在</td><td>字符串、列表、元组、字典</td></tr><tr><td>not in</td><td>4 not in (1, 2, 3)</td><td>True</td><td>元素是否不存在</td><td>字符串、列表、元组、字典</td></tr><tr><td>&gt; &gt;&#x3D; &#x3D;&#x3D; &lt; &lt;&#x3D;</td><td>(1, 2, 3) &lt; (2, 2, 3)</td><td>True</td><td>元素比较</td><td>字符串、列表、元组</td></tr></tbody></table><h2 id="1、列表介绍"><a href="#1、列表介绍" class="headerlink" title="1、列表介绍"></a>1、列表介绍</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul><li>List（列表） 是 Python 中使用 最频繁 的数据类型，在其他语言中通常叫做 数组</li><li>数据可以是任意类型的，里面的数据也可以重复</li><li>格式：<code>[元素1, 元素2, 元素3, ..., 元素n]</code></li><li>列表的 索引 从 0 开始</li><li>索引 就是数据在 列表 中的位置编号，索引 又可以被称为 下标</li></ul><blockquote><p>注意：从列表中取值时，如果 超出索引范围，程序会报错</p></blockquote><h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><p>语法：<strong>列表名 &#x3D; [ 元素1，元素2，元素3…..]</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 列表的创建</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 空列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>list3 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 类型转换：把参数转换为列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span>list3 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'12345678'</span><span class="token punctuation">)</span> <span class="token comment"># 类型转换：str-->list</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[]&lt;class 'list'>[1, 2, 3, True, False, 'hello'][]['1', '2', '3', '4', '5', '6', '7', '8']"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、列表的索引与切片"><a href="#2、列表的索引与切片" class="headerlink" title="2、列表的索引与切片"></a>2、列表的索引与切片</h2><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>列表跟字符串一样，里面的元素就像一个个士兵站好的队伍一样，站队的时候他们都会报数。从头到尾每个士兵都会报一个递增的数字，在我们列表这里也是如此的，报数的数字就是对应元素的索引（index），但是与我们生活中不同的是，**列表第一元素的索引是<code>0</code>**。</p><p>字符串中是支持负数下标的，列表是否支持？同样也是 -1 开始，并且是从右向左的。</p><p>可以使用 heros[-1] 打印一下。</p><p>事实上结果是完全没有问题的，索引的使用和字符串是一模一样的。即：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">></span> 列表<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token string">'探险家'</span><span class="token punctuation">,</span><span class="token string">'河流之王'</span><span class="token punctuation">,</span><span class="token string">'荒漠屠夫'</span><span class="token punctuation">,</span><span class="token string">'齐天大圣'</span><span class="token punctuation">,</span><span class="token string">'冰晶凤凰'</span><span class="token punctuation">,</span><span class="token string">'赛恩'</span><span class="token punctuation">]</span><span class="token operator">></span>       <span class="token operator">|</span>       <span class="token operator">|</span>          <span class="token operator">|</span>        <span class="token operator">|</span>          <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">></span> 正索引<span class="token punctuation">:</span>   <span class="token number">0</span>       <span class="token number">1</span>          <span class="token number">2</span>        <span class="token number">3</span>          <span class="token number">4</span>       <span class="token number">5</span><span class="token operator">></span> 负索引<span class="token punctuation">:</span>   <span class="token operator">-</span><span class="token number">6</span>      <span class="token operator">-</span><span class="token number">5</span>        <span class="token operator">-</span><span class="token number">4</span>       <span class="token operator">-</span><span class="token number">3</span>          <span class="token operator">-</span><span class="token number">2</span>      <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="切片-1"><a href="#切片-1" class="headerlink" title="切片"></a>切片</h3><p>通过索引，我们可以访问list(列表)的单个元素。但有时候我们要取列表的一个片段，这就是“切片”操作。切片返回的是一个列表，可以理解为“子列表”。</p><p>切片是通过索引来实现的，比如： <code>heros[1:3]</code>，这里索引变成两个用冒号<code>:</code>分隔，分别是切片的开始索引和结束索引，<code>[1:3]</code>代表的是一个左闭右开的区间，即包含左边索引的元素，到右边索引为止但不包括该元素。</p><p>切片还有更加高级的用法就是控制步长和方向。格式：<code>列表名[start：end：step]</code></p><ul><li>start和end是左闭右开的区间</li><li>step表示的是步长，并且步长可以是正向（从左向右）也可以是逆向（从右向左）取元素。</li><li>step如果是负数表示的是逆向，如果是正数表示的是正向</li><li>如果end省略则表示到列表最后一个元素，如果start省略表示从第一个元素开始</li></ul><h2 id="3、列表的数据操作"><a href="#3、列表的数据操作" class="headerlink" title="3、列表的数据操作"></a>3、列表的数据操作</h2><h3 id="运算符操作"><a href="#运算符操作" class="headerlink" title="运算符操作"></a>运算符操作</h3><p>列表作为Python的一种“内置类型”，它也像基本类型数字、字符串那样可以进行一些运算符的运算，如下表所示：</p><table><thead><tr><th>运算符</th><th>含义</th><th>表达式</th><th>结果</th></tr></thead><tbody><tr><td><code>+</code></td><td>列表合并在一起</td><td><code>[1, 2, 3]+[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></td><td><code>[1, 2, 3, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></td></tr><tr><td><code>*</code></td><td>列表重复</td><td><code>[&#39;a&#39;] * 3</code></td><td><code>[&#39;a&#39;, &#39;a&#39;, &#39;a&#39;]</code></td></tr><tr><td><code>in</code></td><td>是否为列表元素</td><td><code>&#39;a&#39; in [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></td><td><code>True</code></td></tr></tbody></table><p>我们对于可变数据（例如，列表，数据库等）的操作，一般包含增、删、改、查四个方面。</p><h4 id="列表的加法-乘法"><a href="#列表的加法-乘法" class="headerlink" title="列表的加法&amp;乘法"></a>列表的加法&amp;乘法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 列表的加法和乘法</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span>list3 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'12345678'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3 <span class="token operator">+</span> list2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3 <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""['1', '2', '3', '4', '5', '6', '7', '8', 1, 2, 3, True, False, 'hello']['1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8']"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="成员判断"><a href="#成员判断" class="headerlink" title="成员判断"></a>成员判断</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 列表的成员运算</span>list3 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'12345678'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> list3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""FalseFalseFalse"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表的常用方法"><a href="#列表的常用方法" class="headerlink" title="列表的常用方法"></a>列表的常用方法</h3><table><thead><tr><th><strong>分类</strong></th><th><strong>关键字</strong> <strong>&#x2F;</strong> <strong>函数</strong> <strong>&#x2F;</strong> <strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>增加</td><td>列表.insert(索引, 数据)</td><td>在指定位置插入数据</td></tr><tr><td></td><td>列表.append(数据)</td><td>在末尾追加数据</td></tr><tr><td></td><td>列表.extend(列表2)</td><td>将列表2 的数据追加到列表</td></tr><tr><td>修改</td><td>列表[索引] &#x3D; 数据</td><td>修改指定索引的数据</td></tr><tr><td>删除</td><td>del 列表[索引]</td><td>删除指定索引的数据</td></tr><tr><td></td><td>列表.remove[数据]</td><td>删除第一个出现的指定数据</td></tr><tr><td></td><td>列表.pop</td><td>删除末尾数据</td></tr><tr><td></td><td>列表.pop(索引)</td><td>删除指定索引数据</td></tr><tr><td></td><td>列表.clear</td><td>清空列表</td></tr><tr><td>统计</td><td>len(列表)</td><td>列表长度</td></tr><tr><td></td><td>列表.count(数据)</td><td>数据在列表中出现的次数</td></tr><tr><td>排序</td><td>列表.sort()</td><td>升序排序</td></tr><tr><td></td><td>列表.sort(reverse&#x3D;True)</td><td>降序排序</td></tr><tr><td></td><td>列表.reverse()</td><td>逆序、反转</td></tr></tbody></table><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>添加元素有一下几个方法:</p><ul><li>append 在末尾添加元素</li><li>insert 在指定位置插入元素</li><li>extend 合并两个列表</li></ul><h5 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h5><p>append 会把新元素添加到列表末尾</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 添加元素</span>list3 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'12345'</span><span class="token punctuation">)</span>list3<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'666'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token comment"># 添加列表</span>list3<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token comment"># 插入元素</span>list3<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""['1', '2', '3', '4', '5', '666']['1', '2', '3', '4', '5', '666', 1, 2, 3]['1', '2', 'hello', '3', '4', '5', '666', 1, 2, 3]"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h5><p>insert(index, object) 在指定位置 index 前插入元素 object</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">strs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">]</span>strs<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span>  <span class="token comment"># ['a', 'b', 'm', 'h', 's']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="extend"><a href="#extend" class="headerlink" title="extend()"></a>extend()</h5><p>通过 extend 可以将另一个集合中的元素逐一添加到列表中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">]</span>a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""['a', 'b', 'c', 'd', 'e', 'f']['d','e','f']"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h4><p>我们是通过指定下标来访问列表元素，因此修改元素的时候，为指定的列表下标赋值即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义变量A，默认有3个元素</span>A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'xiaoWang'</span><span class="token punctuation">,</span><span class="token string">'xiaoZhang'</span><span class="token punctuation">,</span><span class="token string">'xiaoHua'</span><span class="token punctuation">]</span><span class="token comment"># 修改元素</span>A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'xiaoLu'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----修改之后，列表A的数据-----A=%s"</span> <span class="token operator">%</span> A<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h4><p>所谓的查找，就是看看指定的元素是否存在，以及查看元素所在的位置，主要包含一下几个方法：</p><ul><li>in 和 not in</li><li>index 和 count</li></ul><h5 id="in-not-in"><a href="#in-not-in" class="headerlink" title="in, not in"></a>in, not in</h5><p>python 中查找的常用方法为：</p><ul><li>in（存在）,如果存在那么结果为true，否则为false</li><li>not in（不存在），如果不存在那么结果为true，否则false</li></ul><h5 id="index-count"><a href="#index-count" class="headerlink" title="index, count"></a>index, count</h5><ul><li>index 用来查找元素所在的位置，如果未找到则会报错；</li><li>count 用来计算某个元素出现的次数。它们的使用和字符串里的使用效果一致。</li></ul><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><p>列表元素的常用删除方法有：</p><ul><li>del：根据下标进行删除</li><li>pop：删除最后一个元素</li><li>remove：根据元素的值进行删除</li></ul><h5 id="del"><a href="#del" class="headerlink" title="del()"></a>del()</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">movieName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'加勒比海盗'</span><span class="token punctuation">,</span><span class="token string">'骇客帝国'</span><span class="token punctuation">,</span><span class="token string">'速度与激情'</span><span class="token punctuation">]</span><span class="token keyword">del</span> movieName<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>movieName<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">movieName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'加勒比海盗'</span><span class="token punctuation">,</span><span class="token string">'第一滴血'</span><span class="token punctuation">,</span><span class="token string">'速度与激情'</span><span class="token punctuation">]</span>movieName<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>movieName<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">movieName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'加勒比海盗'</span><span class="token punctuation">,</span><span class="token string">'霍比特人'</span><span class="token punctuation">,</span><span class="token string">'速度与激情'</span><span class="token punctuation">]</span>movieName<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'指环王'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>movieName<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="排序-sort-reverse"><a href="#排序-sort-reverse" class="headerlink" title="排序(sort, reverse)"></a>排序(sort, reverse)</h4><ul><li>sort 方法是将 list 按特定顺序重新排列，默认为由小到大，参数 reverse&#x3D;True 可改为倒序，由大到小。</li><li>reverse 方法是将 list 逆置。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 逆置，不排序</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 默认从小到大排序</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 从大到小排序</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、列表的遍历"><a href="#4、列表的遍历" class="headerlink" title="4、列表的遍历"></a>4、列表的遍历</h2><p>遍历就是 从头到尾 依次从列表中获取数据。在循环体内部针对 每一个元素，执行相同的操作。</p><h3 id="使用-for-循环"><a href="#使用-for-循环" class="headerlink" title="使用 for 循环"></a>使用 for 循环</h3><p>while 循环是一种基本的遍历列表数据的方式，但是最常用也是最简单的方式是使用 for 循环</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 列表的遍历</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> list2<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> item <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 枚举</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> list2<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><pre class="line-numbers language-none"><code class="language-none">123TrueFalsehello------------------------------0 11 22 33 True4 False5 hello------------------------------0 11 22 33 True4 False5 hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-while-循环"><a href="#使用-while-循环" class="headerlink" title="使用 while 循环"></a>使用 while 循环</h3><p>为了更有效率的输出列表的每个数据，可以使用循环来完成</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">namesList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'xiaoWang'</span><span class="token punctuation">,</span><span class="token string">'xiaoZhang'</span><span class="token punctuation">,</span><span class="token string">'xiaoHua'</span><span class="token punctuation">]</span>length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>namesList<span class="token punctuation">)</span>  <span class="token comment"># 获取列表长度</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>namesList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    i<span class="token operator">+=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><pre class="line-numbers language-none"><code class="language-none">xiaoWangxiaoZhangxiaoHua<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5、列表嵌套"><a href="#5、列表嵌套" class="headerlink" title="5、列表嵌套"></a>5、列表嵌套</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>​类似 while 循环的嵌套，列表也是支持嵌套的。一个列表中的元素又是一个列表，那么这就是列表的嵌套。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> schoolNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">,</span> <span class="token number">333</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> schoolNames<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment"># 获取数字 33</span><span class="token number">33</span><span class="token operator">>></span><span class="token operator">></span> schoolNames<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'abc'</span>  <span class="token comment"># 把 33 修改为 'abc'</span><span class="token operator">>></span><span class="token operator">></span> schoolNames<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">,</span> <span class="token number">333</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> schoolNames<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment"># 获取 'abc' 里的字符c</span><span class="token string">'c'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说，<strong>操作嵌套列表，只要把要操作元素的下标当作变量名来使用即可。</strong></p><h3 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h3><p>一个学校，有3个办公室，现在有8位老师等待工位的分配，请编写程序，完成随机的分配</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token comment"># 定义一个列表用来保存3个办公室</span>offices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 定义一个列表用来存储8位老师的名字</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">,</span><span class="token string">'H'</span><span class="token punctuation">]</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>    index <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>        offices<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> tempNames <span class="token keyword">in</span> offices<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'办公室%d的人数为:%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>tempNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    i<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> tempNames<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token operator">%</span>name<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下:</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252159146.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八、Python字符串</title>
      <link href="/posts/a8a24bfc.html"/>
      <url>/posts/a8a24bfc.html</url>
      
        <content type="html"><![CDATA[<h1 id="八、Python字符串"><a href="#八、Python字符串" class="headerlink" title="八、Python字符串"></a>八、Python字符串</h1><h2 id="1、字符串介绍"><a href="#1、字符串介绍" class="headerlink" title="1、字符串介绍"></a>1、字符串介绍</h2><p>字符串就是 一串字符，是编程语言中表示文本的数据类型。</p><p>在 Python 中可以使用 一对双引号 “ 或者 一对单引号 ‘ 定义一个字符串。</p><h3 id="字符串表示方式"><a href="#字符串表示方式" class="headerlink" title="字符串表示方式"></a>字符串表示方式</h3><p>字符串是以单引号或者双引号括起来的任意文本，也可以是以三引号’’’或者”””引起来的任意文本。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">"I'm Tom"</span>  <span class="token comment"># 一对双引号 </span>b <span class="token operator">=</span> <span class="token string">'Tom said:"I am Tom"'</span>  <span class="token comment"># 一对单引号</span>c <span class="token operator">=</span> <span class="token string">'Tom said:"I\'m Tom"'</span>  <span class="token comment"># 转义字符</span>d <span class="token operator">=</span> <span class="token triple-quoted-string string">'''Tom said:"I'm Tom"'''</span>  <span class="token comment"># 三个单引号</span>e <span class="token operator">=</span> <span class="token triple-quoted-string string">"""Tom said:"I'm Tom" """</span>  <span class="token comment"># 三个双引号</span>f <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 空串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong>：</p><ul><li>双引号或者单引号中的数据，就是字符串</li><li>如果使用一对引号来定义字符串，当出现符号冲突时可以使用转义字符</li><li>使用三个单引号、双引号定义的字符串可以包裹任意文本</li></ul><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>转义字符是很多程序语言、数据格式和通信协议的形式文法的一部分，使用<code>\</code>来表示一个转义字符。常见的转义字符以及它所代表的含义如下表:</p><table><thead><tr><th align="center">转义字符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">\r</td><td align="center">将当前位置移到本行开头</td></tr><tr><td align="center">\n</td><td align="center">将当前位置移到下一行开头</td></tr><tr><td align="center">\t</td><td align="center">用来表示一个制表符</td></tr><tr><td align="center"><code>\\</code></td><td align="center">代表一个反斜线字符<code>\</code></td></tr><tr><td align="center">&#39;</td><td align="center">用来显示一个单引号</td></tr><tr><td align="center">&quot;</td><td align="center">用来显示一个双引号</td></tr></tbody></table><h2 id="2、索引和切片"><a href="#2、索引和切片" class="headerlink" title="2、索引和切片"></a>2、索引和切片</h2><h3 id="下标-索引"><a href="#下标-索引" class="headerlink" title="下标&#x2F;索引"></a>下标&#x2F;索引</h3><p>所谓<code>“下标”</code>又叫<code>“索引”</code>，就是编号，就好比超市中的存储柜的编号，通过这个编号就能找到相应的存储空间。</p><p>可以使用 索引 获取一个字符串中 指定位置的字符，索引计数从 0 开始。</p><p>如果有字符串:<code>name = &#39;abcdef&#39;</code>，在内存中的实际存储如下:</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252158232.png" alt="img"></p><p>如果想取出部分字符，那么可以通过<code>下标</code>的方法，（注意在计算机中，下标从 0 开始）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'abcdef'</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""abc"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>所谓遍历，可以理解为按照一定的规则(一般情况下就是数据的下标)，访问每一个数据。</p><p>字符串是可迭代对象，能够进行遍历。可以使用 while 和 for 语句，对字符串里的元素进行遍历。</p><p>while 语句遍历:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">msg <span class="token operator">=</span> <span class="token string">'hello world'</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>for 语句遍历:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token comment"># 字符串的遍历</span><span class="token keyword">for</span> i <span class="token keyword">in</span> s1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> index<span class="token punctuation">,</span>value <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""hello world********************0 h1 e2 l3 l4 o5  6 w7 o8 r9 l10 d********************0 h1 e2 l3 l4 o5  6 w7 o8 r9 l10 d"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>切片是指对操作的对象截取其中一部分的操作。<strong>字符串、列表、元组</strong>都支持切片操作。</p><p><strong>切片的语法：<code>[起始:结束:步长]</code>，也可以简化使用 <code>[起始:结束]</code></strong></p><blockquote><p><strong>注意：选取的区间从”起始”位开始，到”结束”位的前一位结束（不包含结束位本身)，步长表示选取间隔。</strong></p></blockquote><p>索引是通过下标取某一个元素，切片是通过下标去某一段元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'Hello World!'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># o</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># lo W 包含下标 3，不含下标 7</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Hello World! 取出所有元素（没有起始位和结束位之分），默认步长为1</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># ello World! 从下标为1开始，取出 后面所有的元素（没有结束位）</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># Hell 从起始位置开始，取到 下标为4的前一个元素（不包括结束位本身）</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Hello World 从起始位置开始，取到 倒数第一个元素（不包括结束位本身）</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># rld 从倒数第4个元素开始，取到 倒数第1个元素（不包括结束位本身）</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># el 从下标为1开始，取到下标为5的前一个元素，步长为2（不包括结束位本身）</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># oW ol 从下标为7的元素开始(包含下标为7的元素)，倒着取到下标为2的元素(不包括下标为2的元素) </span><span class="token comment"># python 字符串快速逆置</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># !dlroW olleH 从后向前，按步长为1进行取值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 类型转换</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># int-->str</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#list-->str</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#tuple-->str</span><span class="token triple-quoted-string string">"""12 &lt;class 'str'>[1, 2, 3, 4] &lt;class 'str'>(1,) &lt;class 'str'>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、字符串通用操作"><a href="#3、字符串通用操作" class="headerlink" title="3、字符串通用操作"></a>3、字符串通用操作</h2><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><p>字符串和字符串之间能够使用加法运算符，作用是将两个字符串拼接成为一个字符串。例如:<code>&#39;hello&#39; + &#39;world&#39;</code>的结果是 <code>&#39;helloworld&#39;</code></p><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p>字符串和数字之间可以做乘法运算，结果是将指定的字符串重复多次。例如:<code>&#39;hello&#39;*2</code>的结果是<code>hellohello</code></p><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>字符串和字符串之间，如果使用比较运算符进行计算，会获取字符对应的编码，然后进行比较。</p><h3 id="成员运算"><a href="#成员运算" class="headerlink" title="成员运算"></a>成员运算</h3><p>成员运算符 (in 和 not in) 可以用来快速的判断元素是否在指定的可迭代对象里，语法格式 <code>要判断的元素 in 可迭代对象</code>。</p><h4 id="in-运算符"><a href="#in-运算符" class="headerlink" title="in 运算符"></a>in 运算符</h4><p>思考：怎样判断一个字符是否在指定的字符串里？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">msg <span class="token operator">=</span> <span class="token string">'hello'</span>char <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个字符:'</span><span class="token punctuation">)</span><span class="token comment"># 使用字符串的 find 方法可以判断字符是否存在</span><span class="token keyword">if</span> msg<span class="token punctuation">.</span>find<span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您输入的字符存在'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您输入的字符不存在'</span><span class="token punctuation">)</span><span class="token comment"># 使用 in 运算符可以更加方便的查看字符是否存在</span><span class="token keyword">if</span> char <span class="token keyword">in</span> msg<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您输入的字符存在'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您输入的字符不存在'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="not-in-运算符"><a href="#not-in-运算符" class="headerlink" title="not in 运算符"></a>not in 运算符</h4><p>和 in 运算符的使用方式一致，只不过 not in 用来判断元素是否 不在 指定的字符串里。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>不是所有的数据都能使用身份运算符，身份运算符后面只能是一个可迭代对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'h'</span> <span class="token keyword">in</span> <span class="token string">'hello'</span>  <span class="token string">'zhangsan'</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'henry'</span><span class="token punctuation">,</span><span class="token string">'merry'</span><span class="token punctuation">,</span><span class="token string">'jack'</span><span class="token punctuation">]</span><span class="token number">1</span> <span class="token keyword">in</span> <span class="token number">123</span> <span class="token comment"># 报错，数字 123 不是一个可迭代对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>除上述几种运算符以外，字符串默认不支持其他运算符。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 序列的通用操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token operator">+</span><span class="token string">' mia'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">min</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""11w  FalseTrue"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、字符串常用方法"><a href="#4、字符串常用方法" class="headerlink" title="4、字符串常用方法"></a>4、字符串常用方法</h2><p>字符串的常见操作包括：</p><ul><li><a href="#tag01">获取长度</a>:len</li><li><a href="#tag02">查找内容</a>:find,index,rfind,rindex</li><li><a href="#tag03">判断</a>:startswith,endswith,isalpha,isdigit,isalnum,isspace</li><li><a href="#tag04">计算出现次数</a>:count</li><li><a href="#tag05">替换内容</a>:replace</li><li><a href="#tag06">切割字符串</a>:split,rsplit,splitlines,partition,rpartition</li><li><a href="#tag07">修改大小写</a>:capitalize,title,upper,lower</li><li><a href="#tag08">空格处理</a>:ljust,rjust,center,lstrip,rstrip,strip</li><li><a href="#tag09">字符串拼接</a>:join</li></ul><blockquote><p><strong>在 Python 中，字符串是不可变的！所有的字符串相关方法，都不会改变原有的字符串，都是返回一个结果，在这个新的返回值里，保留了执行后的结果！</strong></p></blockquote><h3 id="3-1、-获取长度"><a href="#3-1、-获取长度" class="headerlink" title="3.1、 获取长度"></a>3.1、 获取长度</h3><h4 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h4><p>len() 函数可以获取字符串的长度。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>mystr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 17 获取字符串的长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-2、-查找内容"><a href="#3-2、-查找内容" class="headerlink" title="3.2、 查找内容"></a>3.2、 查找内容</h3><p>查找相关的方法，使用方式大致相同，但是略有区别。</p><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p><strong>查找指定内容在字符串中是否存在，如果存在就返回该内容在字符串中第一次出现的开始位置索引值，如果不存在，则返回-1.</strong></p><h5 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">S<span class="token punctuation">.</span>find<span class="token punctuation">(</span>sub <span class="token punctuation">[</span><span class="token punctuation">,</span> start<span class="token punctuation">[</span><span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'好风光'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 10 '好风光'第一次出现时，'好'所在的位置</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># -1  '你好'不存在，返回 -1</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'风'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 15 从下标12开始查找'风',找到风所在的位置 15</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'风光'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># -1 从下标1开始到12查找"风光",未找到，返回 -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="rfind"><a href="#rfind" class="headerlink" title="rfind()"></a>rfind()</h4><p><strong>类似于 find()函数，不过是从右边开始查找。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h4><p><strong>跟 find() 方法一样，只不过，find() 方法未找到时，返回-1，而 str 未找到时，会报一个异常。</strong></p><p>语法格式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">S<span class="token punctuation">.</span>index<span class="token punctuation">(</span>sub<span class="token punctuation">[</span><span class="token punctuation">,</span> start<span class="token punctuation">[</span><span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="rindex"><a href="#rindex" class="headerlink" title="rindex()"></a>rindex()</h4><p>类似于 index()，不过是从右边开始。</p><h3 id="3-3、判断"><a href="#3-3、判断" class="headerlink" title="3.3、判断"></a>3.3、判断</h3><p>python 提供了非常丰富的方法，可以用来对一个字符串进行判断。</p><h4 id="startswith"><a href="#startswith" class="headerlink" title="startswith()"></a>startswith()</h4><p>判断字符串是否以指定内容开始。 语法格式:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">S<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>prefix<span class="token punctuation">[</span><span class="token punctuation">,</span> start<span class="token punctuation">[</span><span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'今'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'今日'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="endswith"><a href="#endswith" class="headerlink" title="endswith()"></a>endswith()</h4><p>判断字符串是否以指定内容结束。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'好风光'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#True</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'好日子'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="isalpha"><a href="#isalpha" class="headerlink" title="isalpha()"></a>isalpha()</h4><p>判断字符串是否是纯字母。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>mystr <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># False 因为中间有空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="isdigit"><a href="#isdigit" class="headerlink" title="isdigit()"></a>isdigit()</h4><p>判断一个字符串是否是纯数字，只要出现非0~9的数字，结果就是False.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'1234'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># True</span>mystr <span class="token operator">=</span> <span class="token string">'123.4'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># False</span>mystr <span class="token operator">=</span> <span class="token string">'-1234'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="isalnum"><a href="#isalnum" class="headerlink" title="isalnum()"></a>isalnum()</h4><p>判断是否由数字和字母组成。只要出现了非数字和字母，就返回False.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'abcd'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>mystr <span class="token operator">=</span> <span class="token string">'1234'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>mystr <span class="token operator">=</span> <span class="token string">'abcd1234'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>mystr <span class="token operator">=</span> <span class="token string">'abcd1234_'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="isspace"><a href="#isspace" class="headerlink" title="isspace()"></a>isspace()</h4><p>如果 mystr 中只包含空格，则返回 True，否则返回 False.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># False mystr是一个空字符串</span>mystr <span class="token operator">=</span> <span class="token string">'  '</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># True 只有空格</span>mystr <span class="token operator">=</span> <span class="token string">' d'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># False 除了空格外还有其他内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4、计算出现次数"><a href="#3-4、计算出现次数" class="headerlink" title="3.4、计算出现次数"></a>3.4、计算出现次数</h3><h4 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h4><p>返回 str 在 start 和 end 之间 在 mystr 里面出现的次数。</p><p>语法格式:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">S<span class="token punctuation">.</span>count<span class="token punctuation">(</span>sub<span class="token punctuation">[</span><span class="token punctuation">,</span> start<span class="token punctuation">[</span><span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 3. '好'字出现三次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-5、替换"><a href="#3-5、替换" class="headerlink" title="3.5、替换"></a>3.5、替换</h3><h4 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h4><p>替换字符串中指定的内容，如果指定次数 count，则替换不会超过 count 次。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span>newstr <span class="token operator">=</span> mystr<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'坏'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">)</span>  <span class="token comment"># 今天天气好晴朗，处处好风光呀好风光  原字符串未改变！</span><span class="token keyword">print</span><span class="token punctuation">(</span>newstr<span class="token punctuation">)</span>  <span class="token comment"># 今天天气坏晴朗，处处坏风光呀坏风光 得到的新字符串里，'好'被修改成了'坏'</span>newstr <span class="token operator">=</span> mystr<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">,</span><span class="token string">'坏'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 指定了替换的次数</span><span class="token keyword">print</span><span class="token punctuation">(</span>newstr<span class="token punctuation">)</span> <span class="token comment"># 今天天气坏晴朗，处处坏风光呀好风光 只有两处的'好'被替换成了'坏'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-6、内容分隔"><a href="#3-6、内容分隔" class="headerlink" title="3.6、内容分隔"></a>3.6、内容分隔</h3><p>内容分隔主要涉及到 split,splitlines,partition 和 rpartition 四个方法。</p><h4 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h4><p>以指定字符串为分隔符切片，如果 maxsplit 有指定值，则仅分隔 <code>maxsplit + 1</code> 个子字符串。<strong>返回的结果是一个列表。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span>result <span class="token operator">=</span> mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 没有指定分隔符，默认使用空格，换行等空白字符进行分隔</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment"># ['今天天气好晴朗，处处好风光呀好风光'] 没有空白字符，所以，字符串未被分隔</span>result <span class="token operator">=</span> mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">)</span>  <span class="token comment"># 以 '好' 为分隔符</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment"># ['今天天气', '晴朗，处处','风光呀,'风光']</span>result <span class="token operator">=</span> mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"好"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 以 '好' 为分隔符，最多切割成3份</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment"># ['今天天气', '晴朗，处处', '风光呀好风光']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="rsplit"><a href="#rsplit" class="headerlink" title="rsplit()"></a>rsplit()</h4><p>用法和 split 基本一致，只不过是从右往左分隔。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#['今天天气好晴朗，处处好风光呀', '风光']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="splitlines"><a href="#splitlines" class="headerlink" title="splitlines()"></a>splitlines()</h4><p>按照行分隔，返回一个包含各行作为元素的列表。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'hello \nworld'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="partition"><a href="#partition" class="headerlink" title="partition()"></a>partition()</h4><p>把 mystr 以 str 分割成三部分，str 前，str 和 str 后，三部分组成一个元组</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""('今天天气', '好', '晴朗，处处好风光呀好风光')"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="rpartition"><a href="#rpartition" class="headerlink" title="rpartition"></a>rpartition</h4><p>类似于 partition()函数,不过是从右边开始.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>rpartition<span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""('今天天气好晴朗，处处好风光呀', '好', '风光')"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-7、修改大小写"><a href="#3-7、修改大小写" class="headerlink" title="3.7、修改大小写"></a>3.7、修改大小写</h3><p>修改大小写的功能只对英文有效，主要包括，首字母大写 capitalize,每个单词的首字母大写 title,全小写 lower,全大写 upper.</p><h4 id="capitalize"><a href="#capitalize" class="headerlink" title="capitalize()"></a>capitalize()</h4><p>第一个单词的首字母大写。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># Hello world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="title"><a href="#title" class="headerlink" title="title()"></a>title()</h4><p>每个单词的首字母大写。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># Hello World</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="lower"><a href="#lower" class="headerlink" title="lower()"></a>lower()</h4><p>所有都变成小写。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'hElLo WorLD'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># hello world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="upper"><a href="#upper" class="headerlink" title="upper()"></a>upper()</h4><p>所有都变成大写。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#HELLO WORLD</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-8、空格处理"><a href="#3-8、空格处理" class="headerlink" title="3.8、空格处理"></a>3.8、空格处理</h3><p>Python 为我们提供了各种操作字符串里表格的方法。</p><h4 id="1-ljust"><a href="#1-ljust" class="headerlink" title="1. ljust()"></a>1. ljust()</h4><p>返回指定长度的字符串，并在右侧使用空白字符补全(左对齐)。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># hello     在右边补了五个空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-rjust"><a href="#2-rjust" class="headerlink" title="2. rjust()"></a>2. rjust()</h4><p>返回指定长度的字符串，并在左侧使用空白字符补全(右对齐)。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#      hello在左边补了五个空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-center"><a href="#3-center" class="headerlink" title="3. center()"></a>3. center()</h4><p>返回指定长度的字符串，并在两端使用空白字符补全(居中对齐)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#  hello   两端加空格，让内容居中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-lstrip"><a href="#4-lstrip" class="headerlink" title="4. lstrip()"></a>4. lstrip()</h4><p>删除 mystr 左边的空白字符。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'    he   llo      '</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#he   llo      只去掉了左边的空格，中间和右边的空格被保留</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-rstrip"><a href="#5-rstrip" class="headerlink" title="5. rstrip()"></a>5. rstrip()</h4><p>删除 mystr 右边的空白字符。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'    he   llo      '</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#    he   llo右边的空格被删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6-strip"><a href="#6-strip" class="headerlink" title="6. strip()"></a>6. strip()</h4><p>删除两断的空白字符。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'    he   llo      '</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#he   llo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-9、字符串拼接"><a href="#3-9、字符串拼接" class="headerlink" title="3.9、字符串拼接"></a>3.9、字符串拼接</h3><p><strong>把参数进行遍历，取出参数里的每一项，然后再在后面加上 mystr。</strong></p><p><strong>语法格式</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">S<span class="token punctuation">.</span>join<span class="token punctuation">(</span>iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'a'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'hxmdq'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hi'</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'good'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""haxamadaqhiahelloagood"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>作用：可以把列表或者元组快速的转变成为字符串，并且以指定的字符分隔。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">txt <span class="token operator">=</span> <span class="token string">'_'</span><span class="token keyword">print</span><span class="token punctuation">(</span>txt<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hi'</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'good'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>txt<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'good'</span><span class="token punctuation">,</span><span class="token string">'hi'</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""hi_hello_goodgood_hi_hello"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、字符集"><a href="#5、字符集" class="headerlink" title="5、字符集"></a>5、字符集</h2><p>计算机只能处理数字(其实就是数字0和数字1)，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111&#x3D;十进制255），0 - 255被用来表示大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码。</p><p>ASCII码表使用7位二进制表示一个字符，它的区间范围时0~127，一共只能表示128个字符，仅能支持英语。随着计算机科学的发展，西欧语言、希腊语、泰语、阿拉伯语、希伯来语等语言的字符也被添加到码表中，形成了一个新的码表ISO8859-1(又被称为Latin1)码表。ISO8859-1使用8位二进制表示一个字符串，完全兼容ASCII码表。</p><p>Unicode（统一码、万国码、单一码）是计算机科学领域里的一项业界标准，包括字符集、编码方案等。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p><h3 id="字符和编码相互转换"><a href="#字符和编码相互转换" class="headerlink" title="字符和编码相互转换"></a>字符和编码相互转换</h3><p>使用 chr 和 ord 方法，可以实现字符和编码之间的相互转换。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 使用ord方法，可以获取一个字符对应的编码</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 使用chr方法，可以获取一个编码对应的字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="编码规则"><a href="#编码规则" class="headerlink" title="编码规则"></a>编码规则</h3><p>使用Unicode为每种语言的每个字符都设定了唯一的二进制编码，但是它还是存在一定的问题，不够完美。</p><p>例如，汉字 “你” 转换成为一个字符结果是<code>0x4f60</code>,转换成为二进制就是 <code>01001111 01100000</code>，此时就有两个问题:</p><ol><li><code>1001111 01100000</code> 到底是一个汉字 “你” ，还是两个 Latin1 字符？</li><li>如果Unicode进行了规定，每个字符都使用n个八位来表示，对于Latin1字符来说，又会浪费很多存储空间。</li></ol><p>为了解决这个问题，就出现了一些编码规则，按照一定的编码规则对Unicode数字进行计算，得出新的编码。在中国常用的字符编码有 <code>GBK</code>,<code>Big5</code>和<code>utf8</code>这三种编码规则。</p><p>使用字符串的encode方法，可以将字符串按照指定的编码格式转换称为二进制；使用decode 方法，可以将一个二进制数据按照指定的编码格式转换成为字符串。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">'你'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>  <span class="token comment"># 将字符 你 按照utf8格式编码称为二进制</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class 'bytes'></span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>  <span class="token comment"># b'\xe4\xbd\xa0'</span>s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span> <span class="token comment"># 将二进制按照utf8格式解码称为字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>s3 <span class="token operator">=</span> <span class="token string">'你'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span> <span class="token comment"># 将字符 你 按照gbk格式转换称为二进制</span><span class="token keyword">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span>  <span class="token comment"># b'\xc4\xe3'</span>s4 <span class="token operator">=</span> s3<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>  <span class="token comment"># 将二进制按照gbk格式解码称为字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、format-方法"><a href="#6、format-方法" class="headerlink" title="6、format 方法"></a>6、format 方法</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><code>str.format()</code> 方法通过字符串中的大括号<code>&#123;&#125;</code> 来识别替换字段 <code>replacement field</code>，从而完成字符串的格式化。</li><li><code>替换字段</code> 由字段名 <code>field name</code> 和转换字段 <code>conversion field</code> 以及格式说明符 <code>format specifier</code> 组成，即一般形式为 {字段名!转换字段:格式说明符}。</li><li>字段名分为简单字段名 <code>simple field name</code> 和复合字段名 <code>compound field name</code>。而转换字段和格式说明符都是可选的。</li></ul><h3 id="字段名"><a href="#字段名" class="headerlink" title="字段名"></a>字段名</h3><p>form 的完整格式是{字段名!转换字符:格式说明符}。其中字段名师必须的，而且可以分为简单字段名和复合字段名。</p><h3 id="简单字段名"><a href="#简单字段名" class="headerlink" title="简单字段名"></a>简单字段名</h3><p>简单字段名有三种写法:</p><ul><li>省略字段名:<code>&#123;&#125;</code></li><li>使用非负十进制整数<code>&#123;0&#125;</code></li><li>变量名{name}</li></ul><h4 id="省略字段名"><a href="#省略字段名" class="headerlink" title="省略字段名"></a>省略字段名</h4><p>大括号内省略字段名，传递<strong>位置参数</strong>。</p><ul><li>替换字段形式： <code>&#123;&#125;</code></li><li>注意：大括号个数可以少于位置参数的个数，反之不然。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 省略字段名传递位置参数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫&#123;&#125;，今年&#123;&#125;岁。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我叫小明，今年18岁。"""</span><span class="token comment"># 大括号个数可以少于位置参数的个数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我爱吃&#123;&#125;和&#123;&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'香蕉'</span><span class="token punctuation">,</span> <span class="token string">'苹果'</span><span class="token punctuation">,</span> <span class="token string">'大鸭梨'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我爱吃香蕉和苹果。"""</span><span class="token comment"># 大括号个数多于位置参数的个数则会报错</span><span class="token comment"># print('我还吃&#123;&#125;和&#123;&#125;。'.format('西红柿'))</span><span class="token triple-quoted-string string">"""IndexError: tuple index out of range"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数字字段名"><a href="#数字字段名" class="headerlink" title="数字字段名"></a>数字字段名</h4><p>可以通过数字形式的简单字段名传递位置参数。</p><ul><li>数字必须是大于等于 0 的整数。</li><li>带数字的替换字段可以重复使用。</li><li>数字形式的简单字段名相当于把 format 中的所有位置参数整体当作一个元组，通过字段名中的数字进行取值。即 {0} 等价于 tuple[0]，所以大括号内的数字不能越界。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 通过数字形式的简单字段名传递位置参数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'身高&#123;0&#125;，家住&#123;1&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">1.8</span><span class="token punctuation">,</span> <span class="token string">'铜锣湾'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""身高1.8，家住铜锣湾"""</span><span class="token comment"># 数字形式的简单字段名可以重复使用。</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我爱&#123;0&#125;。\n她今年&#123;1&#125;。\n我也爱&#123;0&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'阿香'</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我爱阿香。她今年17。我也爱阿香。"""</span><span class="token comment"># 体会把所有位置参数整体当成元组来取值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'阿香爱吃&#123;1&#125;、&#123;3&#125;和&#123;0&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    <span class="token string">'榴莲'</span><span class="token punctuation">,</span> <span class="token string">'臭豆腐'</span><span class="token punctuation">,</span> <span class="token string">'皮蛋'</span><span class="token punctuation">,</span> <span class="token string">'鲱鱼罐头'</span><span class="token punctuation">,</span> <span class="token string">'螺狮粉'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""阿香爱吃臭豆腐、鲱鱼罐头和榴莲。"""</span><span class="token comment"># 尝试一下越界错误</span><span class="token comment"># print('&#123;1&#125;'.format('错误用法'))</span><span class="token triple-quoted-string string">"""IndexError: tuple index out of range"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="变量字段名"><a href="#变量字段名" class="headerlink" title="变量字段名"></a>变量字段名</h4><p>使用<strong>变量名形式</strong>的简单字段名传递<strong>关键字参数</strong>。</p><ul><li>关键字参数的位置可以随意调换。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用变量名形式的简单字段名传递关键字参数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我大哥是&#123;name&#125;，今年&#123;age&#125;岁。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'阿飞'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我大哥是阿飞，今年20岁。"""</span><span class="token comment"># 关键字参数的顺序可以随意调换</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我大哥是&#123;name&#125;，今年&#123;age&#125;岁。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'阿飞'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我大哥是阿飞，今年20岁。"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="简单字段名的混合使用"><a href="#简单字段名的混合使用" class="headerlink" title="简单字段名的混合使用"></a>简单字段名的混合使用</h4><ul><li>混合使用数字形式和变量名形式的字段名，可以同时传递位置参数和关键字参数。</li><li>关键字参数必须位于位置参数之后。</li><li>混合使用时可以省略数字。</li><li>省略字段名 <code>&#123;&#125;</code> 不能和数字形式的字段名 <code>&#123;非负整数&#125;</code> 同时使用。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 混合使用数字形式和变量名形式的字段名</span><span class="token comment"># 可以同时传递位置参数和关键字参数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是一个关于&#123;0&#125;、&#123;1&#125;和&#123;girl&#125;的故事。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'阿飞'</span><span class="token punctuation">,</span> girl<span class="token operator">=</span><span class="token string">'阿香'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""这是一个关于小明、阿飞和阿香的故事。"""</span><span class="token comment"># 但是关键字参数必须位于位置参数之后</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是一个关于&#123;0&#125;、&#123;1&#125;和&#123;girl&#125;的故事。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>     <span class="token string">'小明'</span><span class="token punctuation">,</span> girl<span class="token operator">=</span><span class="token string">'阿香'</span> <span class="token punctuation">,</span> <span class="token string">'阿飞'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SyntaxError: positional argument follows keyword argument"""</span><span class="token comment"># 数字也可以省略</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是一个关于&#123;&#125;、&#123;&#125;和&#123;girl&#125;的故事。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'阿飞'</span><span class="token punctuation">,</span> girl<span class="token operator">=</span><span class="token string">'阿香'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 但是省略字段名不能和数字形式的字段名同时出现</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是一个关于&#123;&#125;、&#123;1&#125;和&#123;girl&#125;的故事。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'阿飞'</span><span class="token punctuation">,</span> girl<span class="token operator">=</span><span class="token string">'阿香'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""ValueError: cannot switch from automatic field numbering to manual field specification"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用元组和字典传参"><a href="#使用元组和字典传参" class="headerlink" title="使用元组和字典传参"></a>使用元组和字典传参</h4><p><code>str.format()</code> 方法还可以使用 <code>*元组</code> 和 <code>**字典</code> 的形式传参，两者可以混合使用。 位置参数、关键字参数、<code>*元组</code> 和 <code>**字典</code> 也可以同时使用，但是要注意，位置参数要在关键字参数前面，<code>*元组</code> 要在 <code>**字典</code> 前面。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用元组传参</span>infos <span class="token operator">=</span> <span class="token string">'钢铁侠'</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token string">'小辣椒'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是&#123;&#125;，身价&#123;&#125;亿。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">*</span>infos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我是钢铁侠，身家66亿。"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是&#123;2&#125;，身价&#123;1&#125;亿。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">*</span>infos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我是小辣椒，身家66亿。"""</span><span class="token comment"># 使用字典传参</span>venom <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'毒液'</span><span class="token punctuation">,</span> <span class="token string">'weakness'</span><span class="token punctuation">:</span> <span class="token string">'火'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是&#123;name&#125;，我怕&#123;weakness&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">**</span>venom<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我是毒液，我怕火。"""</span><span class="token comment"># 同时使用元组和字典传参</span>hulk <span class="token operator">=</span> <span class="token string">'绿巨人'</span><span class="token punctuation">,</span> <span class="token string">'拳头'</span>captain <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'美国队长'</span><span class="token punctuation">,</span> <span class="token string">'weapon'</span><span class="token punctuation">:</span> <span class="token string">'盾'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是&#123;&#125;, 我怕&#123;weapon&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">*</span>hulk<span class="token punctuation">,</span> <span class="token operator">**</span>captain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是&#123;name&#125;, 我怕&#123;1&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">*</span>hulk<span class="token punctuation">,</span> <span class="token operator">**</span>captain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我是绿巨人, 我怕盾。我是美国队长, 我怕拳头。"""</span><span class="token comment"># 同时使用位置参数、元组、关键字参数、字典传参</span><span class="token comment"># 注意：</span><span class="token comment"># 位置参数要在关键字参数前面</span><span class="token comment"># *元组要在**字典前面</span>tup <span class="token operator">=</span> <span class="token string">'鹰眼'</span><span class="token punctuation">,</span>dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'weapon'</span><span class="token punctuation">:</span> <span class="token string">'箭'</span><span class="token punctuation">&#125;</span>text <span class="token operator">=</span> <span class="token string">'我是&#123;1&#125;，我怕&#123;weakness&#125;。我是&#123;0&#125;，我用&#123;weapon&#125;。'</span>text <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    <span class="token operator">*</span>tup<span class="token punctuation">,</span> <span class="token string">'黑寡妇'</span><span class="token punctuation">,</span> weakness<span class="token operator">=</span><span class="token string">'男人'</span><span class="token punctuation">,</span> <span class="token operator">**</span>dic<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我是黑寡妇，我怕男人。我是鹰眼，我用箭。"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复合字段名"><a href="#复合字段名" class="headerlink" title="复合字段名"></a>复合字段名</h3><p>同时使用了数字和变量名两种形式的字段名就是<strong>复合字段名</strong>。</p><p>复合字段名</p><p>支持两种操作符：</p><ul><li><code>.</code> 点号</li><li><code>[]</code> 中括号</li></ul><h4 id="使用-点号"><a href="#使用-点号" class="headerlink" title="使用. 点号"></a>使用<code>.</code> 点号</h4><p><strong>传递位置参数</strong></p><ul><li>替换字段形式：<code>&#123;数字.属性名&#125;</code></li><li>只有一个替换字段的时候可以省略数字</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    self<span class="token punctuation">.</span>gender <span class="token operator">=</span> genderp <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'female'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'姓名是&#123;0.name&#125;,年龄是&#123;0.age&#125;,性别是&#123;0.gender&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'姓名是&#123;.name&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 只有一个替换字段时，可以省略数字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用-中括号"><a href="#使用-中括号" class="headerlink" title="使用[]中括号"></a>使用<code>[]</code>中括号</h4><ul><li>用列表传递位置参数</li><li>用元组传递位置参数</li><li>用字典传递位置参数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 中括号用法：用列表传递位置参数</span>infos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'阿星'</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">]</span>food <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'霸王花'</span><span class="token punctuation">,</span> <span class="token string">'爆米花'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫&#123;0[0]&#125;，警号&#123;0[1]&#125;，爱吃&#123;1[0]&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    infos<span class="token punctuation">,</span> food<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我叫阿星，警号9527，爱吃霸王花。"""</span><span class="token comment"># 中括号用法：用元组传递位置参数</span>food <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'僵尸'</span><span class="token punctuation">,</span> <span class="token string">'脑子'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫&#123;0[0]&#125;，年龄&#123;1&#125;，爱吃&#123;0[1]&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    food<span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我叫僵尸，年龄66，爱吃脑子。"""</span><span class="token comment"># 中括号用法：用字典传递位置参数</span>dic <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'阿星'</span><span class="token punctuation">,</span> pid<span class="token operator">=</span><span class="token number">9527</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是&#123;[name]&#125;！'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 多个替换字段，不能省略数字</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是&#123;0[name]&#125;，警号&#123;0[pid]&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我是阿星！我是阿星，警号9527。"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转换字段"><a href="#转换字段" class="headerlink" title="转换字段"></a>转换字段</h3><p><strong>转换字段</strong> <code>conversion field</code> 的取值有三种，前面要加 <code>!</code>：</p><ul><li><code>s</code>：传递参数之前先对参数调用 <code>str()</code></li><li><code>r</code>：传递参数之前先对参数调用 <code>repr()</code></li><li><code>a</code>：传递参数之前先对参数调用 <code>ascii()</code></li></ul><blockquote><p><code>ascii()</code> 函数类似 <code>repr()</code> 函数，返回一个可以表示对象的字符串。 但是对于非 <code>ASCII</code> 字符，使用 <code>\x</code>，<code>\u</code> 或者 <code>\U</code> 转义。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 转换字段</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I am &#123;!s&#125;!'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'Bruce Lee 李小龙'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I am &#123;!r&#125;!'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'Bruce Lee 李小龙'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I am &#123;!a&#125;!'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'Bruce Lee 李小龙'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""I am Bruce Lee 李小龙!I am 'Bruce Lee 李小龙'!I am 'Bruce Lee \u674e\u5c0f\u9f99'!"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七、Python流程控制语句</title>
      <link href="/posts/1573f088.html"/>
      <url>/posts/1573f088.html</url>
      
        <content type="html"><![CDATA[<h1 id="七、Python流程控制语句"><a href="#七、Python流程控制语句" class="headerlink" title="七、Python流程控制语句"></a>七、Python流程控制语句</h1><h2 id="1、选择结构"><a href="#1、选择结构" class="headerlink" title="1、选择结构"></a>1、选择结构</h2><h3 id="单分支选择结构"><a href="#单分支选择结构" class="headerlink" title="单分支选择结构"></a>单分支选择结构</h3><h4 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h4><p>if 语句是用来进行判断的，其使用格式如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 要判断的条件<span class="token punctuation">:</span>    条件成立时要做的事情<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注意：代码的缩进为一个 tab 键，或者 4 个空格</p></blockquote><h3 id="双分支选择结构"><a href="#双分支选择结构" class="headerlink" title="双分支选择结构"></a>双分支选择结构</h3><h4 id="if-else-语句"><a href="#if-else-语句" class="headerlink" title="if-else 语句"></a>if-else 语句</h4><p>if 和 else 语句以及各自的缩进部分共同是一个 完整的代码块</p><h5 id="使用格式"><a href="#使用格式" class="headerlink" title="使用格式"></a>使用格式</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 条件<span class="token punctuation">:</span>  满足条件时的操作<span class="token keyword">else</span><span class="token punctuation">:</span>  不满足条件时的操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">weather <span class="token operator">=</span> <span class="token string">'晴天'</span><span class="token keyword">if</span> weather <span class="token operator">==</span> <span class="token string">'下雨'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'出门要带伞'</span><span class="token punctuation">)</span> <span class="token comment"># 缩进</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'戴个帽子'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多分支选择结构"><a href="#多分支选择结构" class="headerlink" title="多分支选择结构"></a>多分支选择结构</h3><h4 id="if-elif-else-语句"><a href="#if-elif-else-语句" class="headerlink" title="if-elif-else 语句"></a>if-elif-else 语句</h4><p>使用 if 可以 判断条件；使用 else 可以处理 条件不成立 的情况。</p><p>但是，如果希望 再增加一些条件，条件不同，需要执行的代码也不同 时，就可以使用 elif。</p><h5 id="使用格式-1"><a href="#使用格式-1" class="headerlink" title="使用格式"></a>使用格式</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> xxx1<span class="token punctuation">:</span>  事情<span class="token number">1</span><span class="token keyword">elif</span> xxx2<span class="token punctuation">:</span>  事情<span class="token number">2</span><span class="token keyword">elif</span> xxx3<span class="token punctuation">:</span>  事情<span class="token number">3</span><span class="token keyword">else</span><span class="token punctuation">:</span>  不满足条件时的操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># bmi计算 bmi =w/(h*h)</span>w <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入你的体重，单位kg：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入你的身高，单位米：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bmi <span class="token operator">=</span> w <span class="token operator">/</span> <span class="token punctuation">(</span>h <span class="token operator">*</span> h<span class="token punctuation">)</span><span class="token keyword">if</span> bmi <span class="token operator">&lt;</span> <span class="token number">18.5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'多吃一点才健康'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> bmi <span class="token operator">&lt;</span> <span class="token number">23.9</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你的体型非常的标准'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'适当的可以多运动一下'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="嵌套选择"><a href="#嵌套选择" class="headerlink" title="嵌套选择"></a>嵌套选择</h3><p>在开发中，使用 if 进行条件判断，如果希望 在条件成立的执行语句中 再 增加条件判断，就可以使用 if 的嵌套</p><p>if 的嵌套 的应用场景就是：在之前条件满足的前提下，再增加额外的判断</p><p>if 的嵌套 的语法格式，除了缩进之外 和之前的没有区别</p><h4 id="if-嵌套"><a href="#if-嵌套" class="headerlink" title="if 嵌套"></a>if 嵌套</h4><h5 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 条件<span class="token number">1</span><span class="token punctuation">:</span>    满足条件<span class="token number">1</span> 做的事情<span class="token number">1</span>    满足条件<span class="token number">1</span> 做的事情<span class="token number">2</span>    <span class="token keyword">if</span> 条件<span class="token number">2</span><span class="token punctuation">:</span>        满足条件<span class="token number">2</span> 做的事情<span class="token number">1</span>        满足条件<span class="token number">2</span> 做的事情<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>外层的 if 判断，也可以是 if-else</li><li>内层的 if 判断，也可以是 if-else</li><li>根据实际开发的情况，进行选择</li></ul><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="区间比较"><a href="#区间比较" class="headerlink" title="区间比较"></a>区间比较</h4><p>在Python中允许类似于 <code>5 &lt; a &lt; 10</code> 的写法，这种写法在很多编程语言里都是不允许的，需要使用逻辑与运算符进行连接。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span><span class="token number">1</span> <span class="token operator">&lt;</span> a <span class="token operator">&lt;</span> <span class="token number">20</span>  <span class="token comment"># True</span><span class="token number">11</span> <span class="token operator">&lt;</span> a <span class="token operator">&lt;</span> <span class="token number">20</span>  <span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><h5 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h5><ul><li><p><code>变量 = 值1 if 条件 else 值2</code></p></li><li><p>当条件成立时把 值1 赋值给变量，条件不成立时把 值2 赋值给变量，其实就是对 if…else 语句的一种简写。</p></li></ul><h5 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">30</span><span class="token keyword">if</span> a <span class="token operator">></span> b<span class="token punctuation">:</span>    c <span class="token operator">=</span> a<span class="token keyword">else</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> b<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a和b两个数的较大值是%d'</span><span class="token operator">%</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的 <code>if...else</code> 代码可以简写成以下格式:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">30</span>c <span class="token operator">=</span> a <span class="token keyword">if</span> a <span class="token operator">></span> b <span class="token keyword">else</span> b<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a和b两个数的较大值是%d'</span> <span class="token operator">%</span> c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h4><p>if 语句需要一个判断条件，这个判断条件的结果需要一个布尔值。如果此时输入的判断条件不是一个布尔值，在代码执行的过程中，会将这个值自动转换成为一个布尔值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1小于2'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"hello"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这段代码是否会输出呢？"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提示：在Python中，转换成为布尔值时，只有 <code>0,&quot;&quot;,&#39;&#39;,None,(),&#123;&#125;,[]</code> 会被转换成为False,其他都会被转换成为True</p><h2 id="2、循环语句"><a href="#2、循环语句" class="headerlink" title="2、循环语句"></a>2、循环语句</h2><p>循环的作用就是让 指定的代码 重复的执行。</p><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>while 循环最常用的应用场景就是 让执行的代码按照指定的次数 重复 执行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> 判断条件<span class="token punctuation">:</span>    代码块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="while-if-语句区别"><a href="#while-if-语句区别" class="headerlink" title="while &amp; if 语句区别"></a>while &amp; if 语句区别</h4><p>我们发现，while 循环的语法结构和 if 语句的结构很相像，那么这两个之间有什么区别呢？</p><ul><li>if 语句只会执行一次判断条件，条件成立以后，只会执行一次代码块；</li><li>while 语句，会先执行一次判断条件，如果条件成立，会执行一次代码块，代码块执行完成以后，会再次判断条件语句，如果还成立，将会再执行代码语句… 直到最后条件不成立。</li></ul><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252157191.jpg" alt="img"></p><p>输出十遍 hello world</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 一定要记得让 i += 1, 否则会造成死循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h4><p>概念：条件始终为真的循环称为死循环<br>在循环语句中，表达式永远为真，致循环持续执行，程序无法终止</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"放我出去"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>除了 while 循环以外，for 可以完成循环的功能。 </p><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><p>在 Python 中 for 循环可以遍历任何序列的项目，如一个列表或者一个字符串等。</p><h4 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> 临时变量 <span class="token keyword">in</span> 列表或者字符串等可迭代对象<span class="token punctuation">:</span>    循环满足条件时执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>注意: in 的后面必须要是一个可迭代对象!!!</li><li><strong>目前接触的可迭代对象: 字符串、列表、字典、元组、集合、range</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 遍历字符串</span><span class="token keyword">for</span> s <span class="token keyword">in</span> <span class="token string">"hello"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""hello"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打印数字</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""01234"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="range-函数"><a href="#range-函数" class="headerlink" title="range() 函数"></a>range() 函数</h4><p><code>range()</code>函数可以用来创建一个数字序列，常与for循环结合使用来重复执行代码块指定的次数。</p><p>range() 可以传递三个参数，分别表示 起始、结束和步长。</p><ul><li><code>range(101)</code>：可以用来产生0到100范围的整数，需要注意的是取不到101。</li><li><code>range(1, 101)</code>：可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间。</li><li><code>range(1, 101, 2)</code>：可以用来产生1到100的奇数，其中2是步长，即每次数值递增的值。</li><li><code>range(100, 0, -2)</code>：可以用来产生100到1的偶数，其中-2是步长，即每次数字递减的值。</li></ul><h3 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h3><p>break 和 continue 都用在循环语句里，用来控制循环。</p><h4 id="break-的使用"><a href="#break-的使用" class="headerlink" title="break 的使用"></a>break 的使用</h4><p><strong>作用：退出循环<br>注意：只能跳出距离最近的for或者while循环</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>    i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""123456"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在循环过程中，如果 某一个条件满足后，不 再希望 循环继续执行，可以使用 break 退出循环。</p><h4 id="continue-的使用"><a href="#continue-的使用" class="headerlink" title="continue 的使用"></a>continue 的使用</h4><p><strong>作用：跳过本次循环后面的剩余语句，然后继续下一次循环</strong><br><strong>注意：只能跳过距离最近的for或者while循环</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token triple-quoted-string string">"""1234568910"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="与else结合"><a href="#与else结合" class="headerlink" title="与else结合"></a>与else结合</h4><p><strong>没有通过 break 退出循环，循环结束后，会执行的代码</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token string">'不是质数'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token string">'是质数'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ol><li><strong>在 Python 中，break 和 continue 只能用于循环语句中。</strong></li><li><strong>break 和 continue 在嵌套循环中使用时，只对最内层循环有效。</strong></li></ol><h3 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h3><p>作用：当语句要求不希望任何命令或代码来执行时使用。</p><p>说明：pass 语句表示一个空操作，在执行时没有任何的响应，pass 的位置最终应该有代码来执行，只不过暂时写不出来。</p><p>可以使用在流程控制和循环语句中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h3><p>类似 if 的嵌套，while 嵌套就是：while 里面还有 while</p><h4 id="while-嵌套的格式"><a href="#while-嵌套的格式" class="headerlink" title="while 嵌套的格式"></a>while 嵌套的格式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> 条件<span class="token number">1</span><span class="token punctuation">:</span>      外循环代码块      <span class="token keyword">while</span> 条件<span class="token number">2</span><span class="token punctuation">:</span>            内循环代码块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>内循环一旦开始，则要执行到条件2不满足，才会继续执行外循环的代码。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 内外循环的控制变量不能一样</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    j <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 内循环的控制变量必须要在外循环里初始化</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'j= %d'</span> <span class="token operator">%</span> j<span class="token punctuation">)</span>        j <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i= %d'</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="else-语法"><a href="#else-语法" class="headerlink" title="else 语法"></a>else 语法</h3><p>在 Python 中，循环语句还可以和 else 语句联合使用。</p><h4 id="while…else…"><a href="#while…else…" class="headerlink" title="while…else…"></a>while…else…</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> 判断条件<span class="token punctuation">:</span>  条件成立时，循环体代码<span class="token keyword">else</span><span class="token punctuation">:</span>  条件不成立时，执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for…else…"><a href="#for…else…" class="headerlink" title="for…else…"></a>for…else…</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> 序列：   循环体代码 <span class="token keyword">else</span><span class="token punctuation">:</span>   循环完所有序列，执行的代码 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="else-作用"><a href="#else-作用" class="headerlink" title="else 作用"></a>else 作用</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"循环条件成立时执行的代码"</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环条件不成立时执行的代码'</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""循环条件成立时执行的代码循环条件成立时执行的代码循环条件成立时执行的代码循环条件成立时执行的代码循环条件成立时执行的代码循环条件不成立时执行的代码"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上述结构中，我们可以看出，在非死循环中，正常情况下 else 里的语句都是会被执行的。那这个else语句到底有什么作用呢？</p><p>一般情况下，循环语句和 else 共同出现时，在循环语句里都会配合 break 语句来使用。查看下面的代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环条件成立时执行的代码'</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环条件不成立时执行的代码'</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""循环条件成立时执行的代码循环条件成立时执行的代码循环条件成立时执行的代码循环条件成立时执行的代码循环条件成立时执行的代码"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行后发现 else 没有被执行，<strong>只要循环没有顺利完成，中间被 break 中断了则 else 里面的内容就不会执行。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、Python运算符</title>
      <link href="/posts/3b6ddeb5.html"/>
      <url>/posts/3b6ddeb5.html</url>
      
        <content type="html"><![CDATA[<h1 id="六、Python-运算符"><a href="#六、Python-运算符" class="headerlink" title="六、Python 运算符"></a>六、Python 运算符</h1><h2 id="1、算数运算符"><a href="#1、算数运算符" class="headerlink" title="1、算数运算符"></a>1、算数运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>两个对象相加</td></tr><tr><td>-</td><td>减</td><td>得到负数或是一个数减去另一个数</td></tr><tr><td>*</td><td>乘</td><td>两个数相乘或是返回一个被重复若干次的字符串</td></tr><tr><td>&#x2F;</td><td>除</td><td>b &#x2F; a 输出结果 2</td></tr><tr><td><code>//</code></td><td>取整除</td><td>返回商的整数部分</td></tr><tr><td><code>%</code></td><td>取余</td><td>返回除法的余数</td></tr><tr><td><code>**</code></td><td>指数</td><td>a**b 为10的20次方</td></tr><tr><td>()</td><td>小括号</td><td>提高运算优先级</td></tr></tbody></table><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>1、优先级顺序为： <code>**</code> &gt; <code>* / % //</code> &gt; <code>+ -</code> </p><p>2、为了避免歧义，建议使用 () 来处理运算符优先级。 </p><p>3、不同类型的数字在进行混合运算时，整数将会转换成浮点数进行运算。</p><h3 id="字符串中使用"><a href="#字符串中使用" class="headerlink" title="字符串中使用"></a>字符串中使用</h3><p>1）如果是两个字符串做加法运算，会直接把这两个字符串拼接成一个字符串。</p><p>2）如果是数字和字符串做加法运算，会直接报错。</p><p>3）如果是数字和字符串做乘法运算，会将这个字符串重复多次。</p><h2 id="2、赋值运算符"><a href="#2、赋值运算符" class="headerlink" title="2、赋值运算符"></a>2、赋值运算符</h2><h3 id="基本赋值运算符"><a href="#基本赋值运算符" class="headerlink" title="基本赋值运算符"></a>基本赋值运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td><code>=</code></td><td>赋值运算符</td><td>把  &#x3D;  号右边的结果 赋给 左边的变量</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 单个变量赋值</span>num <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 同时为多个变量赋值(使用等号连接)</span>a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token comment"># 多个变量赋值(使用逗号分隔)</span>num1<span class="token punctuation">,</span> f1<span class="token punctuation">,</span> str1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+&#x3D;</td><td>加法赋值运算符</td><td>c +&#x3D; a 等效于 c &#x3D; c + a</td></tr><tr><td>-&#x3D;</td><td>减法赋值运算符</td><td>c -&#x3D; a 等效于 c &#x3D; c - a</td></tr><tr><td>*&#x3D;</td><td>乘法赋值运算符</td><td>c *&#x3D; a 等效于 c &#x3D; c * a</td></tr><tr><td>&#x2F;&#x3D;</td><td>除法赋值运算符</td><td>c &#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F; a</td></tr><tr><td>&#x2F;&#x2F;&#x3D;</td><td>取整除赋值运算符</td><td>c &#x2F;&#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F;&#x2F; a</td></tr><tr><td>%&#x3D;</td><td>取模赋值运算符</td><td>c %&#x3D; a 等效于 c &#x3D; c % a</td></tr><tr><td>**&#x3D;</td><td>幂赋值运算符</td><td>c * *&#x3D; a 等效于 c &#x3D; c * * a</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：赋值运算符是从右往左运算，将等号右边的值赋值给等号左边，所以，<strong>等号的左边一定不能是常量或者表达式。</strong></p></blockquote><h2 id="3、比较运算符"><a href="#3、比较运算符" class="headerlink" title="3、比较运算符"></a>3、比较运算符</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>等于 - 比较对象是否相等</td></tr><tr><td>!&#x3D;</td><td>不等于 - 比较两个对象是否不相等</td></tr><tr><td>&lt;&gt;</td><td>不等于 - 比较两个对象是否不相等</td></tr><tr><td>&gt;</td><td>大于 - 返回x是否大于y</td></tr><tr><td>&lt;</td><td>小于 - 返回x是否小于y</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于 - 返回x是否大于等于y。</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于 - 返回x是否小于等于y。</td></tr></tbody></table><h3 id="字符串使用比较运算符"><a href="#字符串使用比较运算符" class="headerlink" title="字符串使用比较运算符"></a>字符串使用比较运算符</h3><p>1）数字和字符串做<code>==</code>运算结果是false,除了 <code>==</code> 以外的逻辑运算时，会直接报错。</p><p>2）如果是两个字符串进行比较，会将每个字符都转换成对应的编码，然后逐一进行对比。</p><h2 id="4、逻辑运算符"><a href="#4、逻辑运算符" class="headerlink" title="4、逻辑运算符"></a>4、逻辑运算符</h2><table><thead><tr><th align="center">运算符</th><th>逻辑表达式</th><th>描述</th></tr></thead><tbody><tr><td align="center">and</td><td>x and y</td><td>只要有一个运算数是False，结果就是False;<br/> 只有所有的运算数都为True时，结果才是True</td></tr><tr><td align="center">or</td><td>x or y</td><td>只要有一个运算数是True，结果就是True; <br/>只有所有的运算数都为False时，结果才是False</td></tr><tr><td align="center">not</td><td>not x</td><td>布尔”非” - <br/>如果 x 为 True，返回 False 。<br/>如果 x 为 False，它返回 True。</td></tr></tbody></table><blockquote><p>优先级：not &gt; and &gt; or</p></blockquote><h3 id="提高"><a href="#提高" class="headerlink" title="提高"></a>提高</h3><p>面试题：以下代码的输出结果是什么，为什么会有这样的输出？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">34</span>a <span class="token operator">></span> <span class="token number">10</span> <span class="token keyword">and</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span>a <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token keyword">and</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span>a <span class="token operator">></span> <span class="token number">10</span> <span class="token keyword">or</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你好世界'</span><span class="token punctuation">)</span>a <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token keyword">or</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你好世界'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252157211.png" alt="image-20230405233439331"></p><h2 id="5、位运算符"><a href="#5、位运算符" class="headerlink" title="5、位运算符"></a>5、位运算符</h2><table><thead><tr><th>位运算</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符：<br/>参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td></tr><tr><td>|</td><td>按位或运算符：<br/>只要对应的二个二进位有一个为1时，结果位就为1。</td></tr><tr><td>^</td><td>按位异或运算符：<br/>当两对应的二进位相异时，结果为1</td></tr><tr><td>~</td><td>按位取反运算符：<br/>对数据的每个二进制位取反,即把1变为0,把0变为1 。~x 类似于 -x-1</td></tr><tr><td>&lt;&lt;</td><td>左移动运算符：<br/>运算数的各二进位全部左移若干位，由 <strong>&lt;&lt;</strong> 右边的数字指定了移动的位数，高位丢弃，低位补0。</td></tr><tr><td>&gt;&gt;</td><td>右移动运算符：<br/>把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，**&gt;&gt;** 右边的数字指定了移动的位数</td></tr></tbody></table><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>变量 a 为 60，b 为 13，二进制格式如下：</p><pre class="line-numbers language-none"><code class="language-none">a &#x3D; 0011 1100  # 60的二进制b &#x3D; 0000 1101  # 13的二进制-----------------(a &amp; b) &#x3D; 0000 1100     12(a | b) &#x3D; 0011 1101     61(a ^ b) &#x3D; 0011 0001     49(~a) &#x3D; 1100 0011        -61(a &lt;&lt; 2) &#x3D; 1111 0000    240(a &gt;&gt; 2) &#x3D; 0000 1111    15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、成员运算符"><a href="#6、成员运算符" class="headerlink" title="6、成员运算符"></a>6、成员运算符</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回True，否则返回 False</td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'12'</span> <span class="token keyword">in</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hi'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""TrueTrue"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、身份运算符"><a href="#7、身份运算符" class="headerlink" title="7、身份运算符"></a>7、身份运算符</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>is</td><td>判断两个标识符是否引用同一个对象，是的话返回真，否则返回假</td></tr><tr><td>is not</td><td>判断两个标识符是否不是引用同一个对象是的话返回真，否则返回假</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> <span class="token keyword">not</span> b<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""FalseTrue"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、运算符优先级"><a href="#8、运算符优先级" class="headerlink" title="8、运算符优先级"></a>8、运算符优先级</h2><p>当多种运算符做混合运算时，就会涉及到先运算哪个，后运算哪个问题。以下表格列出了从最高到最低优先级的所有运算符：</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>指数 (最高优先级)</td></tr><tr><td>~ + -</td><td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td>* &#x2F; % &#x2F;&#x2F;</td><td>乘，除，取模和取整除</td></tr><tr><td>+ -</td><td>加法减法</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>右移，左移运算符</td></tr><tr><td>&amp;</td><td>位 ‘AND’</td></tr><tr><td>^ |</td><td>位运算符</td></tr><tr><td>&lt;&#x3D; &lt; &gt; &gt;&#x3D;</td><td>比较运算符</td></tr><tr><td>&lt;&gt; &#x3D;&#x3D; !&#x3D;</td><td>等于运算符</td></tr><tr><td>&#x3D; %&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; -&#x3D; +&#x3D; *&#x3D; **&#x3D;</td><td>赋值运算符</td></tr><tr><td>is is not</td><td>身份运算符</td></tr><tr><td>in not in</td><td>成员运算符</td></tr><tr><td>not&gt;and&gt;or</td><td>逻辑运算符</td></tr></tbody></table><h2 id="9、总结"><a href="#9、总结" class="headerlink" title="9、总结"></a>9、总结</h2><p>在以后的实际开发中，如果有多种运算符进行混合运算时，<strong>强烈建议使用小括号来手动的控制运算符的优先级！</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">b <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token keyword">or</span> <span class="token boolean">True</span> <span class="token keyword">and</span> <span class="token boolean">False</span>    <span class="token comment"># bad </span>c <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token keyword">and</span> <span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># good</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、Python数据类型</title>
      <link href="/posts/f4791b73.html"/>
      <url>/posts/f4791b73.html</url>
      
        <content type="html"><![CDATA[<h1 id="五、Python-数据类型"><a href="#五、Python-数据类型" class="headerlink" title="五、Python 数据类型"></a>五、Python 数据类型</h1><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252156406.png" alt="image-20240615172802531"></p><h2 id="1、整型（Integers）"><a href="#1、整型（Integers）" class="headerlink" title="1、整型（Integers）"></a>1、整型（Integers）</h2><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 整数的变量的定义</span>num <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment"># 负数</span>num2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token comment"># 查看变量的数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""10-10&lt;class 'int'>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、浮点型（Floating-point-numbers）"><a href="#2、浮点型（Floating-point-numbers）" class="headerlink" title="2、浮点型（Floating point numbers）"></a>2、浮点型（Floating point numbers）</h2><p>浮点型由整数部分和小数部分组成。</p><blockquote><p>注意：运算可能有四舍五入的误差。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math<span class="token comment"># 浮点数的计算</span>n1 <span class="token operator">=</span> <span class="token number">2.1</span>n2 <span class="token operator">=</span> <span class="token number">15.256</span><span class="token comment"># 四舍五入round</span>n3 <span class="token operator">=</span><span class="token builtin">round</span><span class="token punctuation">(</span>n1<span class="token operator">+</span>n2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>n3<span class="token punctuation">)</span><span class="token comment"># 向上取整 ceil</span>n4 <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>n1<span class="token operator">+</span>n2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"向上取整的结果是"</span><span class="token punctuation">,</span> n4<span class="token punctuation">)</span><span class="token comment"># 向下取整 floor</span>n5 <span class="token operator">=</span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>n1<span class="token operator">+</span>n2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"向下取整的结果是"</span><span class="token punctuation">,</span> n5<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""17.36向上取整的结果是 18向下取整的结果是 17"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、布尔型（Boolean）"><a href="#3、布尔型（Boolean）" class="headerlink" title="3、布尔型（Boolean）"></a>3、布尔型（Boolean）</h2><p>1、布尔类型的变量只有 <strong>True、False</strong> 两种值。</p><p>2、作用：作为真假的判断。</p><p>3、在Python中，能够解释为假的值有：<strong>None、0、0.0、False、所有的空容器（空列表、空元组、空字典、空集合、空字符串）</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token boolean">True</span>b<span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>）<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>）<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>）      <span class="token triple-quoted-string string">"""True FalseFalseFalseFalseFalseFalseFalseFalse"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、字符串（String）"><a href="#4、字符串（String）" class="headerlink" title="4、字符串（String）"></a>4、字符串（String）</h2><h3 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h3><p>1、字符串就是 一串字符，是编程语言中表示文本的数据类型。<br>2、在 Python 中可以使用 <code>一对双引号 &quot;</code> 或者 <code>一对单引号 &#39;</code> 定义一个字符串。<br>3、字符串是以单引号或者双引号括起来的任意文本，也可以是以<code>三引号&#39;&#39;&#39;</code>或者<code>&quot;&quot;&quot;</code>引起来的任意文本。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建字符串</span>s1 <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>s2 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>s3 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''2024helloworld'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span>s4 <span class="token operator">=</span> <span class="token string">"It's a hat"</span><span class="token keyword">print</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span>s5 <span class="token operator">=</span> <span class="token string">'1234\'\"6666'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""hellohello2024helloworldIt's a hat1234'"6666"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-运算"><a href="#4-2-运算" class="headerlink" title="4.2 运算"></a>4.2 运算</h3><h4 id="加法运算"><a href="#加法运算" class="headerlink" title="加法运算"></a>加法运算</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 字符串拼接</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------字符串拼接-------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">+</span> s4 <span class="token operator">+</span> s5<span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">5</span><span class="token triple-quoted-string string">"""-------字符串拼接-------helloIt's a hat1234'"6666"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：字符串与数字不能相加，print(s1 + 12) 报错</p></blockquote><h4 id="乘法运算"><a href="#乘法运算" class="headerlink" title="乘法运算"></a>乘法运算</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 字符串乘法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----字符串乘法-------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'@'</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token string">'happy'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""-----字符串乘法-------hellohello@@@@@@@@@@@@@@@@@@@@happyhappyhappy"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-索引"><a href="#4-3-索引" class="headerlink" title="4.3 索引"></a>4.3 索引</h3><p>可以使用 索引 获取一个字符串中 指定位置的字符，索引计数从 0 开始。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252157263.png" alt="image-20240615175041198"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建字符串</span>s <span class="token operator">=</span> <span class="token string">'hello,world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""hod"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-切片"><a href="#4-4-切片" class="headerlink" title="4.4 切片"></a>4.4 切片</h3><p>切片格式：变量名[起始索引:结束索引+1:步数]</p><ul><li>步数默认为1，可省略不写</li><li>起始索引默认为0，可省略不写</li><li>结束索引默认为-1,可省略不写</li><li>包头不包尾</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'hello,world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> <span class="token string">'123456789'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""hellwor13579147"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-字符串反转"><a href="#4-5-字符串反转" class="headerlink" title="4.5 字符串反转"></a>4.5 字符串反转</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 字符串反转</span>s2 <span class="token operator">=</span> <span class="token string">'123456789'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""987654321987654321"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、数据类型转换"><a href="#5、数据类型转换" class="headerlink" title="5、数据类型转换"></a>5、数据类型转换</h2><table><thead><tr><th>函数名</th><th>函数值</th></tr></thead><tbody><tr><td>int(x [,base ])</td><td>将数字或字符串转换为整数，如果x为浮点数，则自动截断小数部分</td></tr><tr><td>float(x)</td><td>将 x 转换为一个浮点数</td></tr><tr><td>str(x)</td><td>将对象  x  转换为字符串</td></tr><tr><td>bool(x)</td><td>将对象 x 转换成为布尔值</td></tr></tbody></table><h3 id="1）转换成为整数"><a href="#1）转换成为整数" class="headerlink" title="1）转换成为整数"></a>1）转换成为整数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 转换为整数int</span><span class="token comment"># 字符串str-->整数int</span><span class="token comment"># 纯数字的字符串</span>s <span class="token operator">=</span> <span class="token string">'2024'</span>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 浮点数float-->整数int</span>s1 <span class="token operator">=</span> <span class="token number">2.23</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 布尔bool-->整数int</span>s2<span class="token punctuation">,</span> s3 <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""&lt;class 'str'> &lt;class 'int'>21 0"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 123.456 和 12ab 字符串，都包含非法字符，不能被转换成为整数，会报错</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">"123.456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">"12ab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h4><p>Python语言支持二进制、八进制、十六进制以及十进制的数字表示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">12</span>  <span class="token comment"># 默认数字是十进制</span>b <span class="token operator">=</span> <span class="token number">0b11101</span>   <span class="token comment"># 以0b开头的数字是二进制</span>c <span class="token operator">=</span> <span class="token number">0o12</span>  <span class="token comment"># 以 0o 开头的数字是八进制</span>d <span class="token operator">=</span> <span class="token number">0x1A</span>  <span class="token comment"># 以 0x 开头的数字是十六进制</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><p>不同进制的数字之间可以通过一定的计算规则相互转换。</p><p>使用 int() 函数进行类型转换时，还可以传入两个参数，第二个参数用来表示进制。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">"21"</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 17.八进制的21</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">"F0"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 240.十六进制的F0</span><span class="token triple-quoted-string string">"""以下写法会报错。八进制里允许的最大值是7,所以 29 不是一个合法的八进制数print(int("29",8))"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）转换成为浮点数"><a href="#2）转换成为浮点数" class="headerlink" title="2）转换成为浮点数"></a>2）转换成为浮点数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 转换为浮点数float</span><span class="token comment"># str-->float</span>s <span class="token operator">=</span> <span class="token string">'324.6'</span> <span class="token comment"># 有没有小数点都可以</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># int-->float</span>n <span class="token operator">=</span> <span class="token number">2024</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># bool-->float</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""324.62024.01.0 0.0"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3）转换成为字符串"><a href="#3）转换成为字符串" class="headerlink" title="3）转换成为字符串"></a>3）转换成为字符串</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 转换为字符串str</span><span class="token comment"># int-->str</span>n <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># float -->str</span>f <span class="token operator">=</span> <span class="token number">5.3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># bool --> str</span>a <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""5&lt;class 'str'>5.3&lt;class 'str'>&lt;class 'bool'>&lt;class 'str'>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4）转换成为布尔值"><a href="#4）转换成为布尔值" class="headerlink" title="4）转换成为布尔值"></a>4）转换成为布尔值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 转换为布尔bool</span><span class="token comment"># str-->bool</span>s <span class="token operator">=</span> <span class="token string">'0'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>s1 <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment"># 空串</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># int-->bool</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># float-->bool</span>f<span class="token operator">=</span><span class="token number">0.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""TrueFalseFalseFalse"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、其他类型转换（了解）"><a href="#6、其他类型转换（了解）" class="headerlink" title="6、其他类型转换（了解）"></a>6、其他类型转换（了解）</h2><table><thead><tr><th>eval(str)</th><th>用来计算在字符串中的有效Python表达式，并返回一个对象</th></tr></thead><tbody><tr><td>chr(x)</td><td>将一个整数转换为一个Unicode字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为它的ASCII整数值</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转换为一个八进制字符串</td></tr><tr><td>bin(x)</td><td>将一个整数转换为一个二进制字符串</td></tr><tr><td>tuple(s)</td><td>将序列 s 转换为一个元组</td></tr><tr><td>list(s )</td><td>将序列 s 转换为一个列表</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、Python标识符和关键字</title>
      <link href="/posts/a0114f4c.html"/>
      <url>/posts/a0114f4c.html</url>
      
        <content type="html"><![CDATA[<h1 id="四、Python-标示符和关键字"><a href="#四、Python-标示符和关键字" class="headerlink" title="四、Python 标示符和关键字"></a>四、Python 标示符和关键字</h1><h2 id="1、标示符"><a href="#1、标示符" class="headerlink" title="1、标示符"></a>1、标示符</h2><p>​计算机编程语言中，标示符是用户编程时使用的名字，用于给变量、常量、函数、语句块等命名，以建立起名称与使用之间的关系。</p><blockquote><p>名字需要有 <strong>见名知义</strong> 的效果</p></blockquote><h2 id="2、命名规则"><a href="#2、命名规则" class="headerlink" title="2、命名规则"></a>2、命名规则</h2><ol><li>标示符由字母、下划线和数字组成</li><li>不能以数字开头</li><li>严格区分大小写</li><li>不能与关键字重名</li></ol><h2 id="3、命名规则"><a href="#3、命名规则" class="headerlink" title="3、命名规则"></a>3、命名规则</h2><p>命名规则 可以被视为一种 惯例，并无绝对与强制。目的是为了 增加代码的识别和可读性。</p><h3 id="命名法"><a href="#命名法" class="headerlink" title="_ 命名法"></a>_ 命名法</h3><p>在 Python 中，如果 变量名 需要由 二个 或 多个单词 组成时，可以按照以下方式命名：</p><ul><li>每个单词都使用小写字母</li><li>单词与单词之间使用 _下划线 连接</li><li>例如：first_name、last_name、qq_number、qq_password</li></ul><h3 id="驼峰命名法"><a href="#驼峰命名法" class="headerlink" title="驼峰命名法"></a>驼峰命名法</h3><p>当 变量名 是由2个或多个单词组成时，还可以利用驼峰命名法来命名。</p><ul><li>小驼峰式命名法（lower camel case）： 第一个单词以小写字母开始，后续单词的首字母大写，例如：myName、aDog</li><li>大驼峰式命名法（upper camel case）： 每一个单词的首字母都采用大写字母，例如：FirstName、LastName.</li></ul><p>还有一种命名法是用下划线“_”来连接所有的单词，比如send_buf. Python的命令规则遵循PEP8标准：</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>变量名，函数名和文件名全小写，使用下划线连接； </li><li>类名遵守大驼峰命名法； </li><li>常量名全大写；</li></ul><h2 id="4、关键字"><a href="#4、关键字" class="headerlink" title="4、关键字"></a>4、关键字</h2><p>关键字的概念：一些具有特殊功能的标识符，这就是所谓的关键字。</p><ul><li>关键字就是在 Python 内部已经使用的标识符</li><li>关键字具有特殊的功能和含义</li><li>开发者不允许定义和关键字相同的名字的标示符</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> keyword<span class="token keyword">print</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span><span class="token comment"># ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、Python变量</title>
      <link href="/posts/f3c29cb0.html"/>
      <url>/posts/f3c29cb0.html</url>
      
        <content type="html"><![CDATA[<h1 id="三、Python-变量"><a href="#三、Python-变量" class="headerlink" title="三、Python 变量"></a>三、Python 变量</h1><p>​在编程语言中，<strong>变量是数据的载体</strong>，<strong>简单来说就是一块保存数据的内存空间，空间里面放着变量的值，变量的值可以被读取和修改，这是所有计算和控制的基础</strong>。计算机能处理的数据有很多种类型，最常见的就是数值，除了数值之外还有文本、图形、音频、视频等各种各样的数据。这里我们先了解几种常用的数据类型。</p><ul><li>整型（int）：Python中可以处理任意大小的整数，而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是256）的表示法。</li><li>浮点型（float）：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</li><li>字符串型（str）：字符串是以单引号或双引号括起来的任意文本，比如<code>&#39;hello&#39;</code>和<code>&quot;hello&quot;</code>。</li><li>布尔型（bool）：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>。</li></ul><h2 id="1、变量的定义"><a href="#1、变量的定义" class="headerlink" title="1、变量的定义"></a>1、变量的定义</h2><p>​对于重复使用，并且经常需要修改的数据，可以定义为变量，来提高编程效率。定义变量后可以使用变量名来访问变量值。</p><p>​定义变量的语法为: <code>变量名 = 变量值</code></p><blockquote><p>注意：</p><p>1、&#x3D; 两边要留一个空格</p><p>2、变量必须先定义后使用</p></blockquote><h2 id="2、变量命名规则"><a href="#2、变量命名规则" class="headerlink" title="2、变量命名规则"></a>2、变量命名规则</h2><p>​在 Python 中，变量的命名需要遵循以下这些规则，这些规则又分为必须遵守的硬性规则和建议遵守的非硬性规则。</p><p>硬性规则：</p><ul><li>规则1：变量名由<strong>字母</strong>、数字和<strong>下划线</strong>构成，数字不能开头</li><li>规则2：<strong>大小写敏感</strong>，简单的说就是大写的A和小写的a是两个不同的变量。</li><li>规则3：不要使用关键字或者保留字</li></ul><p>非硬性规则：</p><ul><li>规则1：变量名通常使用小写英文字母，多个单词用下划线进行连接。</li><li>规则2：受保护的变量用单个下划线开头（后面会讲到）。</li><li>​规则3：私有的变量用两个下划线开头（后面会讲到）。</li></ul><p>给变量（事实上应该是所有的标识符）命名时，都要做到<strong>见名知意</strong>。</p><p>补充说明变量:</p><ul><li>变量名：我们可以理解为箱子，箱子里面放的就是右侧的值。当需要使用变量值，就把对应的箱子拿来。</li><li>变量即是可以变化的量，可以随时进行修改。</li><li>程序就是用来处理数据的，而变量就是用来存储数据的。</li></ul><h2 id="3、变量的使用"><a href="#3、变量的使用" class="headerlink" title="3、变量的使用"></a>3、变量的使用</h2><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">45</span>          <span class="token comment"># 变量a保存了45</span>c <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token comment"># 变量c保存了布尔类型的值：True</span><span class="token comment"># 多个变量的值相同</span>num1 <span class="token operator">=</span> num2 <span class="token operator">=</span> num3 <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 多个变量的值不同，元组赋值</span>a，b <span class="token operator">=</span> <span class="token number">10</span>，<span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的a,b,c,d就是我们声明的变量，等号后面就是变量中存的值。</p><h3 id="变量的修改"><a href="#变量的修改" class="headerlink" title="变量的修改"></a>变量的修改</h3><p>创建变量后，可以在代码中重新赋值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">year <span class="token operator">=</span> <span class="token number">2023</span><span class="token keyword">print</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span>  <span class="token comment"># 2023</span>year <span class="token operator">=</span> <span class="token number">2024</span><span class="token keyword">print</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span>  <span class="token comment"># 2024</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不同类型的变量也可以进行修改、重新赋值，与类型无关。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">money <span class="token operator">=</span> <span class="token number">10</span>money <span class="token operator">=</span> <span class="token string">'10元'</span><span class="token keyword">print</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span>  <span class="token comment"># 10元  正常运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4、常量"><a href="#4、常量" class="headerlink" title="4、常量"></a>4、常量</h2><p>1、程序在运行的过程中，值永远不会发生改变的量称之为常量。</p><p>2、python没有专门的常量类型，一般约定俗成使用<strong>大写</strong>表示常量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 圆周率</span>PI <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token comment"># 我的生日</span>MY_BIRTHDAY <span class="token operator">=</span> <span class="token string">'2024-01-09'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、查看数据类型"><a href="#5、查看数据类型" class="headerlink" title="5、查看数据类型"></a>5、查看数据类型</h2><p>​在 python 中，只要定义了一个变量，而且它有数据，那么它的类型就已经确定了，不需要咱们开发者主动的去说明它的类型，系统会自动辨别。也就是说在使用的时候 **”变量没有类型，数据才有类型”**。</p><p>​如果临时想要查看一个变量存储的数据类型，使用 **<code>type</code>(变量的名字)**，来查看变量存储的数据类型。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">100</span>   b <span class="token operator">=</span> <span class="token string">"123"</span> c <span class="token operator">=</span> <span class="token number">1.8</span>d <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252156344" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、Python注释</title>
      <link href="/posts/3fa3fa66.html"/>
      <url>/posts/3fa3fa66.html</url>
      
        <content type="html"><![CDATA[<h1 id="二、Python-注释"><a href="#二、Python-注释" class="headerlink" title="二、Python 注释"></a>二、Python 注释</h1><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><p>​注释是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性。当然，我们也可以将源代码中暂时不需要运行的代码段通过注释来去掉，这样当你需要重新使用这些代码的时候，去掉注释符号就可以了。</p><p>简单的说，<strong>注释会让代码更容易看懂但不会影响程序的执行结果</strong>。</p><h2 id="2、分类"><a href="#2、分类" class="headerlink" title="2、分类"></a>2、分类</h2><h3 id="2-1、块注释"><a href="#2-1、块注释" class="headerlink" title="2.1、块注释"></a>2.1、块注释</h3><ol><li>以 <code>#</code> 开始，一直到本行结束都是注释</li><li>为了保证代码的可读性，**# 后面建议先添加一个空格**，然后再编写相应的说明文字（PEP8）</li><li>注释不会运行</li><li>代码是给机器执行用的，注释是给人看的，方便阅读代码时，能够快速的了解代码的功能</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 块注释</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我在学习python'</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2、行内注释"><a href="#2-2、行内注释" class="headerlink" title="2.2、行内注释"></a>2.2、行内注释</h3><ol><li>以<code>#</code>开始，一直到本行结束都是注释</li><li>与代码写在同一行</li><li><code># </code>前面至少有两个空格</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我在学习python'</span><span class="token punctuation">)</span>  <span class="token comment"># 与代码同行,前面至少有两个空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3、多行注释"><a href="#2-3、多行注释" class="headerlink" title="2.3、多行注释"></a>2.3、多行注释</h3><ol><li>如果希望编写的注释信息很多，一行无法显示，就可以使用多行注释</li><li><strong>多行注释</strong>：三个引号开头，三个引号结尾。我们称之为多行注释。<ul><li>以<code>&#39;&#39;&#39;</code>开始，并以<code>&#39;&#39;&#39;</code> 结束</li><li>以<code>&quot;&quot;&quot;</code>开始，并以<code>&quot;&quot;&quot;</code> 结束</li></ul></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 多行注释</span><span class="token comment"># 1.使用三个单引号</span><span class="token triple-quoted-string string">'''中间的任何内容都是注释，可以有多行但中间不能再有三个单引号'''</span><span class="token comment"># 2.使用三个双引号</span><span class="token triple-quoted-string string">"""中间都是注释内容，但不能出现三个双引号"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、使用规范"><a href="#3、使用规范" class="headerlink" title="3、使用规范"></a>3、使用规范</h2><ol><li>注释不是越多越好，对于一目了然的代码，不需要添加注释</li><li>对于 复杂的操作，应该在操作开始前写上若干行注释</li><li>对于 不是一目了然的代码，应在其行尾添加注释</li><li>绝不要描述代码，假设阅读代码的人比你更懂 Python，他只是不知道你的代码要做什么</li></ol><h2 id="4、输入输出函数"><a href="#4、输入输出函数" class="headerlink" title="4、输入输出函数"></a>4、输入输出函数</h2><h3 id="4-1、print-：输出-打印指定内容"><a href="#4-1、print-：输出-打印指定内容" class="headerlink" title="4.1、print()：输出&#x2F;打印指定内容"></a>4.1、print()：输出&#x2F;打印指定内容</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>objects<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> flush<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="逗号的使用"><a href="#逗号的使用" class="headerlink" title="逗号的使用"></a>逗号的使用</h4><ol><li>想要在一行中打印多个内容，可以在print()函数中使用逗号隔开多个内容</li><li>变量、数字、字符串都可以</li><li>注意使用英文的逗号</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在一行中打印多个内容</span>year <span class="token operator">=</span> <span class="token number">2024</span><span class="token keyword">print</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token string">'年，我要减肥'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token string">'年，我要读100本书'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token string">'年，我要去10个城市旅游'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="seq"><a href="#seq" class="headerlink" title="seq"></a>seq</h4><p>设置多个内容之间的分隔符，默认分隔符空格</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">year <span class="token operator">=</span> <span class="token number">2024</span><span class="token keyword">print</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token string">"年，我要减肥"</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="end"><a href="#end" class="headerlink" title="end"></a>end</h4><p>end：设置结束符，默认结束符’\n’</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">year <span class="token operator">=</span> <span class="token number">2024</span><span class="token keyword">print</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token string">"年，我要读100本书"</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token string">"年，我要去10个城市旅游"</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h4><p>如果希望输出文字信息的同时，一起输出 数据，就需要使用到 格式化操作符</p><ul><li>% 被称为 格式化操作符，专门用于处理字符串中的格式</li><li>包含 % 的字符串，被称为 格式化字符串</li></ul><ul><li>% 和不同的 字符 连用，不同类型的数据 需要使用 不同的格式化字符</li></ul><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252156646.png" alt="image-20240612225920229"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">month <span class="token operator">=</span> <span class="token number">2</span>day <span class="token operator">=</span> <span class="token number">20</span>weather <span class="token operator">=</span> <span class="token string">"晴"</span>temp <span class="token operator">=</span> <span class="token number">19.5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"今天是 %02d 月 %d 日, 天气%s，温度%.1f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>month<span class="token punctuation">,</span> day<span class="token punctuation">,</span> weather<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2、input-函数：输入指定内容"><a href="#4-2、input-函数：输入指定内容" class="headerlink" title="4.2、input()函数：输入指定内容"></a>4.2、input()函数：输入指定内容</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">变量 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"提示信息："</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>所谓 输入，就是用 代码 获取 用户 通过 键盘 输入的信息;</li><li>用户输入的 任何内容 Python 都认为是一个 字符串;</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、Python介绍</title>
      <link href="/posts/648b9225.html"/>
      <url>/posts/648b9225.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、Python-介绍"><a href="#一、Python-介绍" class="headerlink" title="一、Python 介绍"></a>一、Python 介绍</h1><h2 id="1、Python-语言介绍"><a href="#1、Python-语言介绍" class="headerlink" title="1、Python 语言介绍"></a>1、Python 语言介绍</h2><h3 id="一、什么是Python？"><a href="#一、什么是Python？" class="headerlink" title="一、什么是Python？"></a>一、什么是Python？</h3><p>Python就是一门<strong>解释型</strong>的编程语言，而且是现在世界上最流行的编程语言之一。 语言排行榜：<a href="https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252148836.png" alt="image-20240606234958678"></p><h3 id="二、Python发展背景"><a href="#二、Python发展背景" class="headerlink" title="二、Python发展背景"></a>二、Python发展背景</h3><ul><li>Python的作者，Guido von Rossum（吉多·范·罗苏姆)，荷兰人。1982年，吉多从阿姆斯特丹大学获得了数学和计算机硕士学位。然而，尽管他算得上是一位数学家，但他更加享受计算机带来的乐趣。用他的话说，虽然拥有数学和计算机双料资质，他总趋向于做计算机相关的工作，并热衷于做任何和编程相关的事情。</li><li>在那个时候，吉多接触并使用过诸如Pascal、C、Fortran等语言。这些语言的基本设计原则是让机器能更快运行。在80年代，虽然IBM和苹果已经掀起了个人电脑浪潮，但这些个人电脑的配置很低。比如早期的Macintosh，只有8MHz的CPU主频和128KB的RAM，一个大的数组就能占满内存。所有的编译器的核心是做优化，以便让程序能够运行。为了增进效率，语言也迫使程序员像计算机一样思考，以便能写出更符合机器口味的程序。在那个时代，程序员恨不得用手榨取计算机每一寸的能力。有人甚至认为C语言的指针是在浪费内存。至于动态类型，内存自动管理，面向对象…… 别想了，那会让你的电脑陷入瘫痪。</li><li>这种编程方式让吉多感到苦恼。吉多知道如何用C语言写出一个功能，但整个编写过程需要耗费大量的时间，即使他已经准确的知道了如何实现。他的另一个选择是shell。Bourne Shell作为UNIX系统的解释器已经长期存在。UNIX的管理员们常常用shell去写一些简单的脚本，以进行一些系统维护的工作，比如定期备份、文件系统管理等等。shell可以像胶水一样，将UNIX下的许多功能连接在一起。许多C语言下上百行的程序，在shell下只用几行就可以完成。然而，shell的本质是调用命令。它并不是一个真正的语言。比如说，shell没有数值型的数据类型，加法运算都很复杂。总之，shell不能全面的调动计算机的功能。</li><li>吉多希望有一种语言，这种语言能够像C语言那样，能够全面调用计算机的功能接口，又可以像shell那样，可以轻松的编程。ABC语言让吉多看到希望。ABC是由荷兰的数学和计算机研究所开发的。吉多在该研究所工作，并参与到ABC语言的开发。ABC语言以教学为目的。与当时的大部分语言不同，ABC语言的目标是“让用户感觉更好”。ABC语言希望让语言变得容易阅读，容易使用，容易记忆，容易学习，并以此来激发人们学习编程的兴趣。比如下面是一段来自Wikipedia的ABC程序，这个程序用于统计文本中出现的词的总数：</li></ul><pre class="line-numbers language-abc" data-language="abc"><code class="language-abc">HOW TO RETURN words document:      PUT &#123;&#125; IN collection      FOR line IN document:         FOR word IN split line:            IF word not.in collection:               INSERT word IN collection      RETURN collection<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HOW TO用于定义一个函数。一个Python程序员应该很容易理解这段程序。ABC语言使用冒号和缩进来表示程序块，行尾没有分号。for和if结构中也没有括号() 。赋值采用的是PUT，而不是更常见的等号。这些改动让ABC程序读起来像一段文字。</li><li>尽管ABC已经具备了良好的可读性和易用性，ABC语言最终没有流行起来。在当时，ABC语言编译器需要比较高配置的电脑才能运行。而这些电脑的使用者通常精通计算机，他们更多考虑程序的效率，而非它的学习难度。除了硬件上的困难外，ABC语言的设计也存在一些致命的问题：<ul><li>可拓展性差。ABC语言不是模块化语言。如果想在ABC语言中增加功能，比如对图形化的支持，就必须改动很多地方。</li><li>不能直接进行IO。ABC语言不能直接操作文件系统。尽管你可以通过诸如文本流的方式导入数据，但ABC无法直接读写文 件。输入输出的困难对于计算机语言来说是致命的。你能想像一个打不开车门的跑车么？</li><li>过度革新。ABC用自然语言的方式来表达程序的意义，比如上面程序中的HOW TO 。然而对于程序员来说，他们更习惯 用function或者define来定义一个函数。同样，程序员更习惯用等号来分配变量。尽管ABC语言很特别，但学习难度 也很大。</li><li>传播困难。ABC编译器很大，必须被保存在磁带上。当时吉多在访问的时候，就必须有一个大磁带来给别人安装ABC编译器。这样，ABC语言就很难快速传播。</li></ul></li><li>1989年，为了打发圣诞节假期，吉多开始写Python语言的编译器。Python这个名字，来自吉多所挚爱的电视剧Monty Python’s Flying Circus。他希望这个新的叫做Python的语言，能符合他的理想：创造一种C和shell之间，功能全面，易学易用，可拓展的语言。吉多作为一个语言设计爱好者，已经有过设计语言的尝试。这一次，也不过是一次纯粹的hacking行为。</li></ul><h3 id="三、Python语言的诞生"><a href="#三、Python语言的诞生" class="headerlink" title="三、Python语言的诞生"></a>三、Python语言的诞生</h3><ul><li><p>1991年，第一个Python编译器诞生。它是用C语言实现的，并能够调用C语言的库文件。从一出生，Python已经具有了 ：类，函数，异常处理，包含表和词典在内的核心数据类型，以及模块为基础的拓展系统。</p></li><li><p>Python语法很多来自C，但又受到ABC语言的强烈影响。来自ABC语言的一些规定直到今天还富有争议，比如强制缩进。 但这些语法规定让Python容易读。另一方面，Python聪明的选择服从一些惯例，特别是C语言的惯例，比如回归等号赋值。吉多认为，如果“常识”上确立的东西，没有必要过度纠结。</p></li><li><p>Python从一开始就特别在意可拓展性。Python可以在多个层次上拓展。从高层上，你可以直接引入. py文件。在底层，你可以引用C语言的库。Python程序员可以快速的使用Python写. py文件作为拓展模块。但当性能是考虑的重要因素时，Python程序员可以深入底层，写C程序，编译为.so文件引入到Python中使用。Python就好像是使用钢构建房一样，先规定好大的框架。而程序员可以在此框架下相当自由的拓展或更改。</p></li><li><p>最初的Python完全由吉多本人开发。Python得到吉多同事的欢迎。他们迅速的反馈使用意见，并参与到Python的改进。吉多和一些同事构成Python的核心团队。他们将自己大部分的业余时间用于hack Python。随后，Python拓 展到研究所之外。Python将许多机器层面上的细节隐藏，交给编译器处理，并凸显出逻辑层面的编程思考。Python程 序员可以花更多的时间用于思考程序的逻辑，而不是具体的实现细节。这一特征吸引了广大的程序员，Python开始流行。</p></li><li><p>计算机硬件越来越强大，Python又容易使用，所以许多人开始转向Python。吉多维护了一个mail list，Python用户就通过邮件进行交流。Python用户来自许多领域，有不同的背景，对Python也有不同的需求。Python相当的开放，又容 易拓展，所以当用户不满足于现有功能，很容易对Python进行拓展或改造。随后，这些用户将改动发给吉多，并由吉多决定是否将新的特征加入到Python或者标准库中。如果代码能被纳入Python自身或者标准库，这将极大的荣誉。由于吉多至高无上的决定权，他因此被称为“终身的仁慈独裁者”。2018年7月12日，在完成PEP（Python Enhancement Proposals）572后，吉多决定退出Python核心决策层。</p></li><li><p>Python以及其标准库的功能强大。这些是整个社区的贡献。Python的开发者来自不同领域，他们将不同领域的优点带给Python。比如Python标准库中的正则表达是参考Perl，而lambda, map, filter, reduce等函数参考了Lisp。Python本身的一些功能以及大部分的标准库来自于社区。Python的社 区不断扩大，进而拥有了自己的newsgroup，网站，以及基金。从Python 2.0开始，Python也从mail list的开发方式，转为完全开源的开发方式。社区气氛已经形成，工作被整个社区分担，Python也获得了更加高速的发展。</p></li><li><p>到今天，Python的框架已经确立。Python语言以对象为核心组织代码，支持多种编程范式，采用动态类型，自动进行内存回收。Python支持解释运行，并能调用C库进行拓展。Python有强大的标准库。由于标准库的体系已经稳定，所以Python的生态系统开始拓展到第三方包。这些包，如Django、web.py、wxpython、numpy、matplotlib、PIL，将Python升级成了物种丰富的热带雨林。</p></li><li><p>Python崇尚优美、清晰、简单，是一个优秀并广泛使用的语言。Python在TIOBE排行榜中排行第八，它是Google的第三大开发语言，Dropbox的基础语言，豆瓣的服务器语言。Python的发展史可以作为一个代表，带给我许多启示。</p></li><li><p>在Python的开发过程中，社区起到了重要的作用。吉多自认为自己不是全能型的程序员，所以他只负责制订框架。如果问题太复杂，他会选择绕过去，也就是cut the corner。这些问题最终由社区中的其他人解决。社区中的人才是异常丰富的，就连创建网站，筹集基金这样与开发稍远的事情，也有人乐意于处理。如今的项目开发越来越复杂，越来越庞大，合作以及开放的心态成为项目最终成功的关键。</p></li><li><p>Python从其他语言中学到了很多，无论是已经进入历史的ABC，还是依然在使用的C和Perl，以及许多没有列出的其他 语言。可以说，Python的成功代表了它所有借鉴的语言的成功。同样，Ruby借鉴了Python，它的成功也代表了Python某些方面的成功。每个语言都是混合体，都有它优秀的地方，但也有各种各样的缺陷。同时，一个语言“好与不好”的评判，往往受制于平台、硬件、时代等等外部原因，程序员经历过许多语言之争。</p></li></ul><h3 id="四、关键点常识"><a href="#四、关键点常识" class="headerlink" title="四、关键点常识"></a>四、关键点常识</h3><ul><li>Python是从ABC发展起来，并且结合了Unix shell和C语言的习惯。</li><li>Python的解释器如今有多个语言实现，我们常用的是CPython（官方版本的C语言实现），其他还有Jython（可以运行在Java平台）、IronPython（可以运行在.NET和Mono平台）、PyPy（Python实现的，支持JIT即时编译）</li><li>Python目前有两个版本，Python2和Python3，最新版分别为2.7.16和3.7.3（截止至2019年4月）</li></ul><h3 id="五、Python-优缺点"><a href="#五、Python-优缺点" class="headerlink" title="五、Python 优缺点"></a>五、Python 优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>简单：Python是一种代表简单主义思想的语言。阅读一个良好的Python程序就感觉像是在读英语一样，尽管这个英语的要求非常严格！Python的这种伪代码本质是它最大的优点之一。它使你能够专注于解决问题而不是去搞明白语言本身。</li><li>易学：就如同你即将看到的一样，Python极其容易上手。前面已经提到了，Python有极其简单的语法。</li><li>免费、开源：Python是FLOSS（自由&#x2F;开放源码软件）之一。简单地说，你可以自由地发布这个软件的拷贝、阅读它的源代码、对它做改动、把它的一部分用于新的自由软件中。FLOSS是基于一个团体分享知识的概念。这是为什么Python如此优秀的原因之一——它是由一群希望看到一个更加优秀的Python的人创造并经常改进着的。</li><li>高层语言：当你用Python语言编写程序的时候，你无需考虑诸如如何管理你的程序使用的内存一类的底层细节。</li><li>可移植性：由于它的开源本质，Python已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。如果你小心地避免使用依赖于系统的特性，那么你的所有Python程序无需修改就可以在下述任何平台上面运行。这些平台包括Linux、Windows、FreeBSD、Macintosh、Solaris、OS&#x2F;2、Amiga、AROS、AS&#x2F;400、BeOS、OS&#x2F;390、z&#x2F;OS、Palm OS、QNX、VMS、Psion、Acom RISC OS、VxWorks、PlayStation、Sharp Zaurus、Windows CE甚至还有PocketPC、Symbian以及Google基于linux开发的Android平台！</li><li>面向对象：Python既支持面向过程的编程也支持面向对象的编程。在“面向过程”的语言中，程序是由过程或仅仅是可重用代码的函数构建起来的。在“面向对象”的语言中，程序是由数据和功能组合而成的对象构建起来的。与其他主要的语言如C++和Java相比，Python以一种非常强大又简单的方式实现面向对象编程。</li><li>可扩展性：如果你需要你的一段关键代码运行得更快或者希望某些算法不公开，你可以把你的部分程序用C或C++编写，然后在你的Python程序中使用它们。</li><li>规范的代码：Python采用强制缩进的方式使得代码具有极佳的可读性。</li><li>解释型语言：一个用编译型语言比如C或C++写的程序可以从源文件（即C或C++语言）转换到一个你的计算机使用的语言（二进制代码，即0和1）。这个过程通过编译器和不同的标记、选项完成。当你运行你的程序的时候，连接&#x2F;转载器软件把你的程序从硬盘复制到内存中并且运行。而Python语言写的程序不需要编译成二进制代码。你可以直接从源代码运行程序。在计算机内部，Python解释器把源代码转换成称为字节码的中间形式，然后再把它翻译成计算机使用的机器语言并运行。事实上，由于你不再需要担心如何编译程序，如何确保连接转载正确的库等等，所有这一切使得使用Python更加简单。由于你只需要把你的Python程序拷贝到另外一台计算机上，它就可以工作了，这也使得你的Python程序更加易于移植。</li><li>丰富的库：Python标准库确实很庞大。它可以帮助你处理各种工作，包括正则表达式、文档生成、单元测试、线程、数据库、网页浏览器、CGI、FTP、电子邮件、XML、XML-RPC、HTML、WAV文件、密码系统、GUI（图形用户界面）、Tk和其他与系统有关的操作。记住，只要安装了Python，所有这些功能都是可用的。这被称作Python的“功能齐全”理念。除了标准库以外，还有许多其他高质量的库，如wxPython、Twisted和Python图像库等等。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>Python语言非常完善，没有明显的短板和缺点，唯一的缺点就是执行效率慢，这个是解释型语言所通有的，同时这个缺点也将被计算机越来越强大的性能所弥补。</p><h3 id="六、Python的设计哲学"><a href="#六、Python的设计哲学" class="headerlink" title="六、Python的设计哲学"></a>六、Python的设计哲学</h3><p>Python的设计哲学总结起来就是：</p><ul><li>优雅</li><li>明确：<ul><li>用一种方法，最好是只有一种方法来做一件事</li><li>如果面临多种选择，Python开发者一般会拒绝花俏的语法，而选择明确没有或很少有歧义的语法</li></ul></li><li>简单：代码像纯英文一样便于理解。</li></ul><p>在Python的交互编程终端里输入<code>import this</code> 可以查看原文。下面是Python设计哲学原文及翻译：</p><pre class="line-numbers language-none"><code class="language-none">Beautiful is better than ugly. 优美胜于丑陋Explicit is better than implicit. 明了胜于晦涩Simple is better than complex. 简单胜过复杂Complex is better than complicated. 复杂胜过凌乱Flat is better than nested.　　　　　　扁平胜于嵌套Sparse is better than dense. 　　　　 间隔胜于紧凑Readability counts.　　　　　　　　　　 可读性很重要Special cases aren&#39;t special enough to break the rules. 即使假借特例的实用性之名，也不违背这些规则Although practicality beats purity.　　　虽然实用性次于纯度Errors should never pass silently.　　　 错误不应该被无声的忽略Unless explicitly silenced.　　　　　　　 除非明确的沉默　　　　　　　In the face of ambiguity, refuse the temptation to guess. 当存在多种可能时，不要尝试去猜测There should be one-- and preferably only one --obvious way to do it. 应该有一个，最好只有一个，明显能做到这一点Although that way may not be obvious at first unless you&#39;re Dutch.虽然这种 方式可能不容易，除非你是python之父Now is better than never. 现在做总比不做好Although never is often better than *right* now. 虽然过去从未比现在好If the implementation is hard to explain, it&#39;s a bad idea. 如果这个实现不容易解释，那么它肯定是坏主意If the implementation is easy to explain, it may be a good idea. 如果这个实现容易解释，那么它很可能是个好主意Namespaces are one honking great idea -- let&#39;s do more of those! 命名空间是一种绝妙的理念，应当多加利用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、Python应用场景"><a href="#七、Python应用场景" class="headerlink" title="七、Python应用场景"></a>七、Python应用场景</h3><ul><li><strong>Web应用开发</strong></li></ul><p>Python经常被用于Web开发。比如，通过mod_wsgi模块，Apache可以运行用Python编写的Web程序。Python定义了WSGI标准应用接口来协调Http服务器与基于Python的Web程序之间的通信。一些Web框架，如Django,TurboGears,web2py,Zope等，可以让程序员轻松地开发和管理复杂的Web程序。</p><ul><li><strong>操作系统管理、服务器运维的自动化脚本</strong></li></ul><p>在很多操作系统里，Python是标准的系统组件。 大多数Linux发行版以及NetBSD、OpenBSD和Mac OS X都集成了Python，可以在终端下直接运行Python。有一些Linux发行版的安装器使用Python语言编写，比如Ubuntu的Ubiquity安装器,Red Hat Linux和Fedora的Anaconda安装器。Gentoo Linux使用Python来编写它的Portage包管理系统。Python标准库包含了多个调用操作系统功能的库。通过pywin32这个第三方软件 包，Python能够访问Windows的COM服务及其它Windows API。使用IronPython，Python程序能够直接调用.Net Framework。一般说来，Python编写的系统管理脚本在可读性、性能、代码重用度、扩展性几方面都优于普通的shell脚本。</p><ul><li><strong>网络爬虫</strong></li></ul><p>Python有大量的HTTP请求处理库和HTML解析库，并且有成熟高效的爬虫框架Scrapy和分布式解决方案scrapy-redis，在爬虫的应用方面非常广泛。</p><ul><li><strong>科学计算</strong></li></ul><p>NumPy、SciPy、Pandas、Matplotlib可以让Python程序员编写科学计算程序。</p><ul><li><strong>桌面软件</strong></li></ul><p>PyQt、PySide、wxPython、PyGTK是Python快速开发桌面应用程序的利器。</p><ul><li><strong>服务器软件（网络软件）</strong></li></ul><p>Python对于各种网络协议的支持很完善，因此经常被用于编写服务器软件、网络爬虫。第三方库Twisted支持异步网络编程和多数标准的网络协议(包含客户端和服务器)，并且提供了多种工具，被广泛用于编写高性能的服务器软件。</p><ul><li><strong>游戏</strong></li></ul><p>很多游戏使用C++编写图形显示等高性能模块，而使用Python或者Lua编写游戏的逻辑、服务器。相较于Python，Lua的功能更简单、体积更小；而Python则支持更多的特性和数据类型。</p><p>Google、NASA、Facebook都在内部大量地使用Python。</p><h2 id="2、安装配置-Python"><a href="#2、安装配置-Python" class="headerlink" title="2、安装配置 Python"></a>2、安装配置 Python</h2><p>想要进行 Python 开发，首先需要下载和配置Python解释器。</p><h3 id="下载-Python"><a href="#下载-Python" class="headerlink" title="下载 Python"></a>下载 Python</h3><ul><li>访问Python 官网: <a href="https://www.python.org/">https://www.python.org/</a></li><li>点击 downloads 按钮，在下拉框中选择系统类型(windows&#x2F;Mac OS&#x2F;Linux等)</li><li>选择下载最新版本的Python</li></ul><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252149086.png" alt="img"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252149797.png" alt="image-20230403232911008"></p><p>对于Windows操作系统，可以下载“executable installer”。</p><h3 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h3><p>双击运行刚才下载的安装程序，会打开Python环境的安装向导。在执行安装向导的时候，记得勾选“<code>Add Python 3.x to PATH</code>”选项，这个选项会帮助我们将Python的解释器添加到PATH环境变量中（不理解没关系，照做就行），具体的步骤如下图所示。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252150675" alt="图片"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252150035" alt="图片"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252150043" alt="图片"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252150380" alt="图片"></p><h3 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h3><ul><li><p>点击电脑左下角开始按钮，输入<code>cmd</code> 进入到windows的命令行模式。</p></li><li><p>在命令行中输入Python,正确显示Python版本，即表示Python安装成功 <img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252150870.png" alt="img"></p></li><li><p>如果在命令行中输入python出现如下错误 </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252150286.png" alt="img"> 可能是因为在安装 Python 的过程中没有勾选 <code>Add Python 3.X to PATH</code> 选项，此时需要手动对 Python 进行配置。</p></li></ul><h3 id="手动配置-Python"><a href="#手动配置-Python" class="headerlink" title="手动配置 Python"></a>手动配置 Python</h3><p>注意：如果在安装过程中，已经勾选了 <code>Add Python 3.X to PATH</code>选项，并且在<code>cmd</code> 命令模式下输入<code>python</code>指令不报错，就不需要再手动的配置Python.</p><ul><li><p>右键<code>此电脑</code> –&gt; 选择 <code>属性</code> </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252151342.png" alt="img"></p></li><li><p>选择<code>高级系统设置</code>–&gt;<code>环境变量</code>–&gt;找到并且双击<code>Path</code> </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252151305.png" alt="img"></p></li><li><p>双击<code>Path</code>,在弹框里点击新建，找到Python的安装目录，把路径添加进去 </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252151235.png" alt="img"></p></li><li><p>这里新添加的路径 <code>C:\Users\chris\AppData\Local\Programs\Python\Python37</code> 是Python安装好以后，<code>Python.exe</code> 这个可执行文件所在的目录。 </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252151999.png" alt="img"></p></li></ul><h2 id="3、pip-的使用"><a href="#3、pip-的使用" class="headerlink" title="3、pip 的使用"></a>3、pip 的使用</h2><p>pip 是一个现代的，通用的 Python 包管理工具。提供了对 Python 包的查找、下载、安装、卸载的功能，便于我们对 Python 的资源包进行管理。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在安装 Python 时，会自动下载并且安装pip。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li><p>在 windows 命令行里，输入 <code>pip -V</code> 可以查看 pip 的版本。 </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252151823.png" alt="img"></p></li><li><p>如果在命令行里，运行<code>pip -V</code>,出现如下提示: </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252151764.png" alt="img"> 可能是因为在安装 python 的过程中未勾选 <code>Add Python 3.X to PATH</code> 选项，需要手动的配置 pip 的环境变量。</p></li><li><p>右键<code>此电脑</code>–&gt;<code>环境变量</code>–&gt;找到并且双击<code>Path</code>–&gt;在弹窗里点击新建–&gt;找到pip的安装目录，把路径添加进去。 </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252151851.png" alt="img"></p></li><li><p>这里新添加的路径  <code>C:\Users\chris\AppData\Local\Programs\Python\Python37\Scripts</code> 是 Python 安装好以后，<code>pip.exe</code>  这个可执行文件所在的目录。 </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252152337.png" alt="img"></p></li></ul><h3 id="使用-pip-管理-Python-包"><a href="#使用-pip-管理-Python-包" class="headerlink" title="使用 pip 管理 Python 包"></a>使用 pip 管理 Python 包</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252152694.png" alt="image-20230405000344455"></p><ul><li>pip install <code>&lt;包名&gt;</code> 安装指定的包</li><li>pip uninstall <code>&lt;包名&gt;</code> 删除指定的包</li><li>pip list 显示已经安装的包</li><li>pip freeze 显示已经安装的包，并且以指定的格式显示</li><li>pip install -r required.txt 安装required.txt文件里列出的安装包</li></ul><h3 id="修改-pip-下载源"><a href="#修改-pip-下载源" class="headerlink" title="修改 pip 下载源"></a>修改 pip 下载源</h3><p>运行pip install 命令会从网站上下载指定的python包，默认是从 <code>https://files.pythonhosted.org/</code> 网站上下载。这是个国外的网站，遇到网络情况不好的时候，可能会下载失败，我们可以通过命令，修改 pip 现在软件时的源。 格式:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> 包名 <span class="token parameter variable">-i</span> 国内源地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例: <code>pip install flask -i https://pypi.mirrors.ustc.edu.cn/simple/</code> 就是从中国科技大学 (ustc) 的服务器上下载 flask(基于 python 的第三方 web 框架)</p><p>国内常用的 pip 下载源列表:</p><ul><li>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></li><li>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></li><li>豆瓣(douban) <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></li><li>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a></li><li>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a></li><li>豆瓣：<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></li></ul><p>note：新版ubuntu要求使用https源，要注意。</p><p><strong>例如：pip3 install -i <a href="https://pypi.doubanio.com/simple/">https://pypi.doubanio.com/simple/</a> 包名</strong></p><h4 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h4><p><code>pip -i 库名 下载源</code>，将下载的库保存到<code>Lib/site-packages</code>中。</p><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> requests <span class="token parameter variable">-i</span> http://pypi.douban.com/simple/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252152281.png" alt="image-20230405003900931"></p><blockquote><p>安装成功后执行pip仍报错，提示pip要升级，执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-m</span> pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="永久使用"><a href="#永久使用" class="headerlink" title="永久使用"></a>永久使用</h4><p>1）Linux 下，修改 <code>~/.pip/pip.conf</code> (没有就创建一个文件夹及文件。文件夹要加“.”，表示是隐藏文件夹)，内容如下：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">global</span><span class="token punctuation">]</span></span><span class="token key attr-name">index-url</span> <span class="token punctuation">=</span> <span class="token value attr-value">http://pypi.douban.com/simple/</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">install</span><span class="token punctuation">]</span></span><span class="token key attr-name">trusted-host</span> <span class="token punctuation">=</span> <span class="token value attr-value">pypi.douban.com</span><span class="token key attr-name">timeout</span> <span class="token punctuation">=</span> <span class="token value attr-value">6000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）windows 下，需要创建一个 pip 目录，再新建文件 pip.ini。相关步骤如下：</p><ul><li><p>在资源管理器的地址栏输入<code>%appdata%</code>后回车,打开 appdata 文件夹</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252152928.png" alt="image-20230405005857993"></p></li><li><p>新建一个 pip 文件夹，在 pip 文件夹里面新建一个配置文件 <code>pip.ini</code></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252152227.png" alt="image-20230405010028182"></p></li><li><p>在配置文件中写入如下内容后保存即可：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">global</span><span class="token punctuation">]</span></span><span class="token key attr-name">index-url</span> <span class="token punctuation">=</span> <span class="token value attr-value">http://pypi.douban.com/simple/</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">install</span><span class="token punctuation">]</span></span><span class="token key attr-name">trusted-host</span> <span class="token punctuation">=</span> <span class="token value attr-value">pypi.douban.com</span><span class="token key attr-name">timeout</span> <span class="token punctuation">=</span> <span class="token value attr-value">6000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在次执行 <code>pip install 库名</code>，就回去上面设置的数据源中查照并下载，如下图：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252152074.png" alt="image-20230405010244625"></p></li></ul><h2 id="4、PyCharm-开发工具"><a href="#4、PyCharm-开发工具" class="headerlink" title="4、PyCharm 开发工具"></a>4、PyCharm 开发工具</h2><p>​IDE的概念 IDE(Integrated Development Environment)又被称为<strong>集成开发环境</strong>。说白了，就是有一款图形化界面的软件，它集成了编辑代码，编译代码，分析代码，执行代码以及调试代码等功能。在我们Python开发中，最常用的IDE是Pycharm.</p><p>​pycharm由捷克公司JetBrains开发的一款IDE,提供代码分析、图形化调试器，集成测试器、集成版本控制系统等，主要用来编写Python代码。</p><p>​下面就简单介绍下PyCharm的下载、安装与使用：</p><h3 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h3><p>下载地址:<a href="http://www.jetbrains.com/pycharm/download">http://www.jetbrains.com/pycharm/download</a></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252153512" alt="图片"></p><ol><li>选择自己对应的操作系统，点击Download，就可以下载了。注：默认是最新版本，选择Other version下载其他版本。</li><li>下载完成后可以直接安装了。安装步骤依次下一步就可以。</li></ol><p>安装完成之后会有一个配置设置，选择下面的就可以了。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252153801.png" alt="图片"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>运行Pycharm,选择<code>Create New Project</code>,创建一个新的Python工程。 </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252153822.png" alt="img"></p></li><li><p>选择’Pure Python’创建一个新的纯Python工程项目，<code>Location</code>表示该项目的保存路径，<code>Interpreter</code> 用来指定Python解释器的版本。 </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252153822.png" alt="img"></p></li><li><p>右击项目，选择<code>New</code>，再选择<code>Python File</code> </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252154253.png" alt="img"></p></li><li><p>在弹出的对话框中输入的文件名<code>HelloPython</code>，点击OK，表示创建一个Python程序的文本文件，文本文件后缀名默认.py </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252154700.png" alt="img"></p></li><li><p>在新建的<code>HelloPython.py</code>文件里，输入以下代码，并在空白处右键选择<code>Run</code>运行，表示输出一段<code>hello world</code>字符串。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252154687.png" alt="img"></p></li><li><p>运行成功后，Pycharm Console窗口将显示我们的输出结果。 </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252154484.png" alt="img"></p></li></ol><p><strong>print()</strong> 方法用于打印输出，Python最常见的一个函数。使用时就是将要打印的内容放到print的括号里面。</p><ul><li>使用 PyCharm 下载库</li></ul><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252155013.png" alt="image-20230405172858727"></p><h2 id="5、交互式编程"><a href="#5、交互式编程" class="headerlink" title="5、交互式编程"></a>5、交互式编程</h2><p>简单说来，就是直接在终端中运行解释器，而不使用文件名的方式来执行文件。这种交互式的编程环境，我们也可以称之为 REPL,即读取 (Read) 输入的内容，执行 (Eval) 用户输入的指令，打印 (Print) 执行结果,然后进行循环 (Loop)，Python 支持交互式编程。</p><h3 id="一、Python的交互式编程"><a href="#一、Python的交互式编程" class="headerlink" title="一、Python的交互式编程"></a>一、Python的交互式编程</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252155220.png" alt="img"></p><h3 id="二、Pycharm-里进入交互式编程"><a href="#二、Pycharm-里进入交互式编程" class="headerlink" title="二、Pycharm 里进入交互式编程"></a>二、Pycharm 里进入交互式编程</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252155461.png" alt="img"></p><h3 id="三、IPython-的安装和使用"><a href="#三、IPython-的安装和使用" class="headerlink" title="三、IPython 的安装和使用"></a>三、IPython 的安装和使用</h3><p>pyton自带的交互式编程，功能不够强大，例如，不能实现语法高亮，自动换行等功能。可以使用第三方的包IPython(Interactive Python)，来对自带的Python shell进行功能扩展。</p><h4 id="安装-IPython"><a href="#安装-IPython" class="headerlink" title="安装 IPython"></a>安装 IPython</h4><p>使用 pip 命令，可以快速的安装 IPython.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> ipython<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252155040.png" alt="image-20230405105708728"></p><h4 id="使用-IPython"><a href="#使用-IPython" class="headerlink" title="使用 IPython"></a>使用 IPython</h4><p>在命令行中输入 ipython 即可进入到 ipython 交互式编程。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252155556.png" alt="image-20230405105801060"></p><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252156247.png" alt="img"></p><h3 id="四、交互式编程的优缺点"><a href="#四、交互式编程的优缺点" class="headerlink" title="四、交互式编程的优缺点"></a>四、交互式编程的优缺点</h3><ul><li>优点：</li></ul><p>适合于学习&#x2F;验证 Python 语法或者局部代码</p><ul><li>缺点：<ul><li>代码不能保存</li><li>不适合运行太大的程序</li></ul></li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/posts/a378bd8e.html"/>
      <url>/posts/a378bd8e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><a href="http://luyaguo.github.io/posts/648b9225.html">第一章、Python介绍</a></p><p><a href="http://luyaguo.github.io/posts/3fa3fa66.html">第二章、Python注释</a></p><p><a href="http://luyaguo.github.io/posts/f3c29cb0.html">第三章、Python变量</a></p><p><a href="http://luyaguo.github.io/posts/a0114f4c.html">第四章、Python标识符和关键字</a></p><p><a href="http://luyaguo.github.io/posts/f4791b73.html">第五章、Python数据类型</a></p><p><a href="http://luyaguo.github.io/posts/3b6ddeb5.html">第六章、Python运算符</a></p><p><a href="http://luyaguo.github.io/posts/1573f088.html">第七章、Python流程控制语句</a></p><p><a href="http://luyaguo.github.io/posts/a8a24bfc.html">第八章、Python字符串</a></p><p><a href="http://luyaguo.github.io/posts/cb27b5d4.html">第九章、Python列表</a></p><p><a href="http://luyaguo.github.io/posts/81c8b757.html">第十章、Python元组</a></p><p><a href="http://luyaguo.github.io/posts/24bfa655.html">第十一章、Python字典</a></p><p><a href="http://luyaguo.github.io/posts/5276a915.html">第十二章、Python集合</a></p><p><a href="http://luyaguo.github.io/posts/a96bf9aa.html">第十三章、Python异常</a></p><p><a href="http://luyaguo.github.io/posts/889302c.html">第十四章、Python函数</a></p><p><a href="http://luyaguo.github.io/posts/75b7a1dc.html">第十五章、Python函数应用</a></p><p><a href="http://luyaguo.github.io/posts/443faff9.html">第十六章、Python装饰器</a></p><p><a href="http://luyaguo.github.io/posts/bf89ed04.html">第十七章、Python模块</a></p><p><a href="http://luyaguo.github.io/posts/48fb83cb.html">第十八章、Python文件和IO操作</a></p><p><a href="http://luyaguo.github.io/posts/aeb329b4.html">第十九章、Python面向对象程序设计</a></p><p><a href="http://luyaguo.github.io/posts/53eca6fc.html">第二十章、Python正则表达式</a></p><p><a href="http://luyaguo.github.io/posts/5894594d.html">第二十一章、Python多任务进程编程</a></p><p><a href="http://luyaguo.github.io/posts/5a8a6c8d.html">第二十二章、Python多任务线程编程</a></p><p><a href="http://luyaguo.github.io/posts/e1a025b5.html">第二十三章、Python多任务协程编程</a></p><p><a href="http://luyaguo.github.io/posts/aff67c23.html">第二十四章、Python网络编程</a></p><p><a href="http://luyaguo.github.io/posts/6c0dee42.html">第二十五章、Python数据库操作</a></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><a href="https://python.tutorial.hogwarts.ceshiren.com/python_programming/v2/L1/tutorial/%E5%88%9D%E8%AF%86Python/">Python编程语言</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端开发规范</title>
      <link href="/posts/28c50d86.html"/>
      <url>/posts/28c50d86.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、命名规范"><a href="#一、命名规范" class="headerlink" title="一、命名规范"></a>一、命名规范</h1><p>常用的命名规范：</p><ul><li>camelCase（小驼峰式命名法 —— 首字母小写）</li><li>PascalCase（大驼峰式命名法 —— 首字母大写）</li><li>kebab-case（短横线连接式）</li><li>Snake （下划线连接式）</li></ul><h2 id="1-1-项目文件命名"><a href="#1-1-项目文件命名" class="headerlink" title="1.1 项目文件命名"></a>1.1 项目文件命名</h2><h3 id="1-1-1-项目名"><a href="#1-1-1-项目名" class="headerlink" title="1.1.1 项目名"></a>1.1.1 项目名</h3><p>全部采用小写方式， 以短横线分隔。例：my-project-name。</p><h3 id="1-1-2-目录名"><a href="#1-1-2-目录名" class="headerlink" title="1.1.2 目录名"></a>1.1.2 目录名</h3><p>参照项目命名规则，有复数结构时，要采用复数命名法。例：docs、assets、components、directives、mixins、utils、views。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">my-project-name/ |- BuildScript // 流水线部署文件目录 |- docs           // 项目的细化文档目录（可选） |- nginx          // 部署在容器上前端项目 nginx 代理文件目录 |- node_modules   // 下载的依赖包 |- public // 静态页面目录 |- index.html // 项目入口 |- src            // 源码目录 |- api        // http 请求目录 |- assets     // 静态资源目录，这里的资源会被wabpack构建 |- icon   // icon 存放目录 |- img    // 图片存放目录 |- js     // 公共 js 文件目录 |- scss   // 公共样式 scss 存放目录 |- frame.scss   // 入口文件 |- global.scss  // 公共样式 |- reset.scss   // 重置样式 |- components     // 组件 |- plugins        // 插件 |- router         // 路由 |- routes         // 详细的路由拆分目录（可选） |- index.js |- store          // 全局状态管理 |- utils          // 工具存放目录 |- request.js // 公共请求工具 |- views          // 页面存放目录 |- App.vue        // 根组件 |- main.js        // 入口文件 |- tests          // 测试用例 |- .browserslistrc// 浏览器兼容配置文件 |- .editorconfig  // 编辑器配置文件 |- .eslintignore  // eslint 忽略规则 |- .eslintrc.js   // eslint 规则 |- .gitignore     // git 忽略规则 |- babel.config.js // babel 规则 |- Dockerfile // Docker 部署文件 |- jest.config.js |- package-lock.json |- package.json // 依赖 |- README.md // 项目 README |- vue.config.js // webpack 配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-3-图像文件名"><a href="#1-1-3-图像文件名" class="headerlink" title="1.1.3 图像文件名"></a>1.1.3 图像文件名</h3><p>全部采用小写方式， 优先选择单个单词命名，多个单词命名以下划线分隔。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">banner_sina.gifmenu_aboutus.gifmenutitle_news.giflogo_police.giflogo_national.gifpic_people.jpgpic_TV.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-4-HTML-文件名"><a href="#1-1-4-HTML-文件名" class="headerlink" title="1.1.4 HTML 文件名"></a>1.1.4 HTML 文件名</h3><p>全部采用小写方式， 优先选择单个单词命名，多个单词命名以下划线分隔。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">|- error_report.html|- success_report.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-1-5-CSS-文件名"><a href="#1-1-5-CSS-文件名" class="headerlink" title="1.1.5 CSS 文件名"></a>1.1.5 CSS 文件名</h3><p>全部采用小写方式， 优先选择单个单词命名，多个单词命名以短横线分隔。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">|- normalize.less|- base.less|- date-picker.scss|- input-number.scss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-6-JavaScript-文件名"><a href="#1-1-6-JavaScript-文件名" class="headerlink" title="1.1.6 JavaScript 文件名"></a>1.1.6 JavaScript 文件名</h3><p>全部采用小写方式， 优先选择单个单词命名，多个单词命名以短横线分隔。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">|- index.js|- plugin.js|- util.js|- date-util.js|- account-model.js|- collapse-transition.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><em>上述规则可以快速记忆为“静态文件下划线，编译文件短横线”。</em></p></blockquote><h2 id="1-2-Vue-组件命名"><a href="#1-2-Vue-组件命名" class="headerlink" title="1.2 Vue 组件命名"></a>1.2 Vue 组件命名</h2><h3 id="1-2-1-单文件组件名"><a href="#1-2-1-单文件组件名" class="headerlink" title="1.2.1 单文件组件名"></a>1.2.1 单文件组件名</h3><p>文件扩展名为 .vue 的 single-file components (单文件组件)。单文件组件名应该始终是单词大写开头 (PascalCase)。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">components/|- MyComponent.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2-2-单例组件名"><a href="#1-2-2-单例组件名" class="headerlink" title="1.2.2 单例组件名"></a>1.2.2 单例组件名</h3><p>只拥有单个活跃实例的组件应该以 The 前缀命名，以示其唯一性。<br>这不意味着组件只可用于一个单页面，而是<em>每个页面</em>只使用一次。这些组件永远不接受任何 prop，因为它们是为你的应用定制的。如果你发现有必要添加 prop，那就表明这实际上是一个可复用的组件，<em>只是目前</em>在每个页面里只使用一次。<br>比如，头部和侧边栏组件几乎在每个页面都会使用，不接受 prop，该组件是专门为该应用所定制的。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">components/|- TheHeading.vue|- TheSidebar.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-3-基础组件名"><a href="#1-2-3-基础组件名" class="headerlink" title="1.2.3 基础组件名"></a>1.2.3 基础组件名</h3><blockquote><p><em>基础组件：不包含业务，独立、具体功能的基础组件，比如日期选择器、模态框等。这类组件作为项目的基础控件，会被大量使用，因此组件的 API 进行过高强度的抽象，可以通过不同配置实现不同的功能。</em></p></blockquote><p>应用特定样式和约定的基础组件(也就是展示类的、无逻辑的或无状态、不掺杂业务逻辑的组件) 应该全部以一个特定的前缀开头 —— Base。基础组件在一个页面内可使用多次，在不同页面内也可复用，是高可复用组件。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">components/|- BaseButton.vue|- BaseTable.vue|- BaseIcon.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-4-业务组件"><a href="#1-2-4-业务组件" class="headerlink" title="1.2.4 业务组件"></a>1.2.4 业务组件</h3><blockquote><p><em>业务组件：它不像基础组件只包含某个功能，而是在业务中被多个页面复用的（具有可复用性），它与基础组件的区别是，业务组件只在当前项目中会用到，不具有通用性，而且会包含一些业务，比如数据请求；而基础组件不含业务，在任何项目中都可以使用，功能单一，比如一个具有数据校验功能的输入框。</em></p></blockquote><p>掺杂了复杂业务的组件（拥有自身 data、prop 的相关处理）即业务组件应该以 Custom 前缀命名。业务组件在一个页面内比如：某个页面内有一个卡片列表，而样式和逻辑跟业务紧密相关的卡片就是业务组件。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">components/|- CustomCard.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2-5-紧密耦合的组件名"><a href="#1-2-5-紧密耦合的组件名" class="headerlink" title="1.2.5 紧密耦合的组件名"></a>1.2.5 紧密耦合的组件名</h3><p>和父组件紧密耦合的子组件应该以父组件名作为前缀命名。 因为编辑器通常会按字母顺序组织文件，所以这样做可以把相关联的文件排在一起。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">components/|- TodoList.vue|- TodoListItem.vue|- TodoListItemButton.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-6-组件名中单词顺序"><a href="#1-2-6-组件名中单词顺序" class="headerlink" title="1.2.6 组件名中单词顺序"></a>1.2.6 组件名中单词顺序</h3><p>组件名应该以高级别的 (通常是一般化描述的) 单词开头，以描述性的修饰词结尾。 因为编辑器通常会按字母顺序组织文件，所以现在组件之间的重要关系一目了然。如下组件主要是用于搜索和设置功能。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">components/|- SearchButtonClear.vue|- SearchButtonRun.vue|- SearchInputQuery.vue|- SearchInputExcludeGlob.vue|- SettingsCheckboxTerms.vue|- SettingsCheckboxLaunchOnStartup.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有另一种多级目录的方式，把所有的搜索组件放到“search”目录，把所有的设置组件放到“settings”目录。我们只推荐在非常大型 (如有 100+ 个组件) 的应用下才考虑这么做，因为在多级目录间找来找去，要比在单个 components 目录下滚动查找要花费更多的精力。</p><h3 id="1-2-7-完整单词的组件名"><a href="#1-2-7-完整单词的组件名" class="headerlink" title="1.2.7 完整单词的组件名"></a>1.2.7 完整单词的组件名</h3><p>组件名应该倾向于完整单词而不是缩写。 编辑器中的自动补全已经让书写长命名的代价非常之低了，而其带来的明确性却是非常宝贵的。不常用的缩写尤其应该避免。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">components/|- StudentDashboardSettings.vue|- UserProfileOptions.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1-3-代码参数命名"><a href="#1-3-代码参数命名" class="headerlink" title="1.3 代码参数命名"></a>1.3 代码参数命名</h2><h3 id="1-3-1-name"><a href="#1-3-1-name" class="headerlink" title="1.3.1 name"></a>1.3.1 name</h3><p>组件名应该始终是多个单词，应该始终是 PascalCase 的。 根组件 App 以及 、 之类的 Vue 内置组件除外。这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">export default &#123;  name: 'ToDoList', // ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-2-prop"><a href="#1-3-2-prop" class="headerlink" title="1.3.2 prop"></a>1.3.2 prop</h3><p>在声明 prop 的时候，其命名应该始终使用 camelCase，而在模板和 JSX 中应该始终使用 kebab-case。我们单纯的遵循每个语言的约定，在 JavaScript 中更自然的是 camelCase。而在 HTML 中则是 kebab-case。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;WelcomeMessage greeting-text="hi"/><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'MyComponent'</span><span class="token punctuation">,</span> <span class="token comment">// ...</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">greetingText</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'syncing'</span><span class="token punctuation">,</span> <span class="token string">'synced'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-3-router"><a href="#1-3-3-router" class="headerlink" title="1.3.3 router"></a>1.3.3 router</h3><p>Vue Router Path 命名采用 kebab-case 格式。 用 Snake（如：&#x2F;user_info）或 camelCase（如：&#x2F;userInfo)的单词会被当成一个单词，搜索引擎无法区分语义。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">// bad&#123;  path: '/user_info', // user_info 当成一个单词  name: 'UserInfo',  component: UserInfo,  meta: &#123;    title: ' - 用户',    desc: '' &#125;&#125;,// good&#123;  path: '/user-info', // 能解析成 user info  name: 'UserInfo',  component: UserInfo,  meta: &#123;    title: ' - 用户',    desc: '' &#125;&#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-4-模板中组件"><a href="#1-3-4-模板中组件" class="headerlink" title="1.3.4 模板中组件"></a>1.3.4 模板中组件</h3><p>对于绝大多数项目来说，在单文件组件和字符串模板中组件名应该总是 PascalCase 的，但是在 DOM 模板中总是 kebab-case 的。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- 在单文件组件和字符串模板中 --> &lt;MyComponent/>&lt;!-- 在 DOM 模板中 --> &lt;my-component>&lt;/my-component><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-5-自闭合组件"><a href="#1-3-5-自闭合组件" class="headerlink" title="1.3.5 自闭合组件"></a>1.3.5 自闭合组件</h3><p>在单文件组件、字符串模板和 JSX 中没有内容的组件应该是自闭合的——但在 DOM 模板里永远不要这样做。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- 在单文件组件和字符串模板中 -->&lt;MyComponent/>&lt;!-- 在所有地方 -->&lt;my-component>&lt;/my-component><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-6-变量"><a href="#1-3-6-变量" class="headerlink" title="1.3.6 变量"></a>1.3.6 变量</h3><ul><li>命名方法：camelCase</li><li>命名规范：类型 + 对象描述或属性的方式</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">// badvar getTitle = "LoginTable"// goodlet tableTitle = "LoginTable"let mySchool = "我的学校"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-7-常量"><a href="#1-3-7-常量" class="headerlink" title="1.3.7 常量"></a>1.3.7 常量</h3><ul><li>命名方法：全部大写下划线分割</li><li>命名规范：使用大写字母和下划线来组合命名，下划线用以分割单词</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">const MAX_COUNT = 10 const URL = 'http://test.host.com' <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-3-8-方法"><a href="#1-3-8-方法" class="headerlink" title="1.3.8 方法"></a>1.3.8 方法</h3><ul><li>命名方法：camelCase</li><li>命名规范：统一使用动词或者动词 + 名词形式</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">// 1、普通情况下，使用动词 + 名词形式// badgo、nextPage、show、open、login// goodjumpPage、openCarInfoDialog// 2、请求数据方法，以 data 结尾// badtakeData、confirmData、getList、postForm// goodgetListData、postFormData// 3、单个动词的情况init、refresh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>动词</th><th>含义</th><th>返回值</th></tr></thead><tbody><tr><td>can</td><td>判断是否可执行某个动作 (权 )</td><td>函数返回一个布尔值。true：可执行；false：不可执行；</td></tr><tr><td>has</td><td>判断是否含有某个值</td><td>函数返回一个布尔值。true：含有此值；false：不含有此值；</td></tr><tr><td>is</td><td>判断是否为某个值</td><td>函数返回一个布尔值。true：为某个值；false：不为某个值；</td></tr><tr><td>get</td><td>获取某个值</td><td>函数返回一个非布尔值</td></tr><tr><td>set</td><td>设置某个值</td><td>无返回值、返回是否设置成功或者返回链式对象</td></tr></tbody></table><h3 id="1-3-9-自定义事件"><a href="#1-3-9-自定义事件" class="headerlink" title="1.3.9 自定义事件"></a>1.3.9 自定义事件</h3><p>自定义事件应始终使用 kebab-case 的事件名。<br>不同于组件和 prop，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">this.$emit('my-event')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;MyComponent @my-event="handleDoSomething" /><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不同于组件和 prop，事件名不会被用作一个 JavaScript 变量名或 property 名，所以就没有理由使用 camelCase 或 PascalCase 了。并且 v-on 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，所以 v-on:myEvent 将会变成 v-on:myevent——导致 myEvent 不可能被监听到。</p><ul><li>原生事件参考列表<br>由原生事件可发现其使用方式如下：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;div  @blur="toggleHeaderBlur"  @focus="toggleHeaderFocus"  @click="toggleMenu"  @keydown.esc="handleKeydown"  @keydown.enter="handleKeydown"  @keydown.up.prevent="handleKeydown"  @keydown.down.prevent="handleKeydown"  @keydown.tab="handleKeydown"  @keydown.delete="handleKeydown"  @mouseenter="hasMouseHoverHead = true"  @mouseleave="hasMouseHoverHead = false">&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而为了区分<em>原生事件</em>和<em>自定义事件</em>在 Vue 中的使用，建议除了多单词事件名使用 kebab-case 的情况下，命名还需遵守为 on + 动词 的形式，如下：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- 父组件 -->&lt;div  @on-search="handleSearch"  @on-clear="handleClear"  @on-clickoutside="handleClickOutside">&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">// 子组件export default &#123;  methods: &#123;    handleTriggerItem () &#123; this.$emit('on-clear') &#125; &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-10-事件方法"><a href="#1-3-10-事件方法" class="headerlink" title="1.3.10 事件方法"></a>1.3.10 事件方法</h3><ul><li>命名方法：camelCase</li><li>命名规范：handle + 名称（可选）+ 动词</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;template> &lt;div    @click.native.stop="handleItemClick()"    @mouseenter.native.stop="handleItemHover()"> &lt;/div>&lt;/template>&lt;script>export default &#123;  methods: &#123;    handleItemClick () &#123; //... &#125;,    handleItemHover () &#123; //... &#125; &#125;&#125;&lt;/script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、代码规范"><a href="#二、代码规范" class="headerlink" title="二、代码规范"></a>二、代码规范</h1><h2 id="2-1-Vue"><a href="#2-1-Vue" class="headerlink" title="2.1 Vue"></a>2.1 Vue</h2><h3 id="2-1-1-代码结构"><a href="#2-1-1-代码结构" class="headerlink" title="2.1.1 代码结构"></a>2.1.1 代码结构</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;template> &lt;div id="my-component"> &lt;DemoComponent /> &lt;/div>&lt;/template>&lt;script>import DemoComponent from '../components/DemoComponent'export default &#123;  name: 'MyComponent',  components: &#123; DemoComponent &#125;,  mixins: [],  props: &#123;&#125;,  data () &#123; return &#123;&#125; &#125;,  computed: &#123;&#125;,  watch: &#123;&#125;  created () &#123;&#125;,  mounted () &#123;&#125;,  destroyed () &#123;&#125;,  methods: &#123;&#125;,&#125;&lt;/script>&lt;style lang="scss" scoped>#my-component &#123;&#125;&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-2-data"><a href="#2-1-2-data" class="headerlink" title="2.1.2 data"></a>2.1.2 data</h3><p>组件的 data 必须是一个函数。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">// In a .vue fileexport default &#123;  data () &#123; return &#123;      foo: 'bar' &#125; &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-3-prop"><a href="#2-1-3-prop" class="headerlink" title="2.1.3 prop"></a>2.1.3 prop</h3><p>Prop 定义应该尽量详细。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">[</span> <span class="token string">'syncing'</span><span class="token punctuation">,</span>  <span class="token string">'synced'</span><span class="token punctuation">,</span> <span class="token string">'version-conflict'</span><span class="token punctuation">,</span> <span class="token string">'error'</span> <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-4-computed"><a href="#2-1-4-computed" class="headerlink" title="2.1.4 computed"></a>2.1.4 computed</h3><p>应该把复杂计算属性分割为尽可能多的更简单的属性。 小的、专注的计算属性减少了信息使用时的假设性限制，所以需求变更时也用不着那么多重构了。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">// badcomputed: &#123;   price: function () &#123;  var basePrice = this.manufactureCost / (1 - this.profitMargin)  return (       basePrice -       basePrice * (this.discountPercent || 0)  )  &#125; &#125;// goodcomputed: &#123;  basePrice: function () &#123; return this.manufactureCost / (1 - this.profitMargin) &#125;,  discount: function () &#123; return this.basePrice * (this.discountPercent || 0) &#125;,  finalPrice: function () &#123; return this.basePrice - this.discount &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-5-为-v-for-设置键值"><a href="#2-1-5-为-v-for-设置键值" class="headerlink" title="2.1.5 为 v-for 设置键值"></a>2.1.5 为 v-for 设置键值</h3><p>在组件上必须用 key 搭配 v-for，以便维护内部组件及其子树的状态。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;ul> &lt;li v-for="todo in todos"    :key="todo.id">      &#123;&#123; todo.text &#125;&#125; &lt;/li>&lt;/ul><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-6-v-if-和-v-for-互斥"><a href="#2-1-6-v-if-和-v-for-互斥" class="headerlink" title="2.1.6 v-if 和 v-for 互斥"></a>2.1.6 v-if 和 v-for 互斥</h3><p>永远不要把 v-if 和 v-for 同时用在同一个元素上。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- bad：控制台报错 -->&lt;ul> &lt;li v-for="user in users" v-if="shouldShowUsers"    :key="user.id">      &#123;&#123; user.name &#125;&#125; &lt;/li>&lt;/ul><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般我们在两种常见的情况下会倾向于这样做：</p><ul><li>为了过滤一个列表中的项目 (比如 v-for&#x3D;”user in users” v-if&#x3D;”user.isActive”)。在这种情形下，请将 users 替换为一个计算属性 (比如 activeUsers)，让其返回过滤后的列表。</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">computed: &#123;  activeUsers: function () &#123; return this.users.filter((user) => &#123; return user.isActive &#125;) &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;ul> &lt;li v-for="user in activeUsers"    :key="user.id">      &#123;&#123; user.name &#125;&#125; &lt;/li>&lt;/ul><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>为了避免渲染本应该被隐藏的列表 (比如 v-for&#x3D;”user in users” v-if&#x3D;”shouldShowUsers”)。这种情形下，请将 v-if 移动至容器元素上 (比如 ul, ol)。</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- bad -->&lt;ul> &lt;li v-for="user in users" v-if="shouldShowUsers"    :key="user.id">      &#123;&#123; user.name &#125;&#125; &lt;/li>&lt;/ul>&lt;!-- good -->&lt;ul v-if="shouldShowUsers"> &lt;li v-for="user in users"    :key="user.id">      &#123;&#123; user.name &#125;&#125; &lt;/li>&lt;/ul><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-7-多个-attribute-的元素"><a href="#2-1-7-多个-attribute-的元素" class="headerlink" title="2.1.7 多个 attribute 的元素"></a>2.1.7 多个 attribute 的元素</h3><p>多个 attribute 的元素应该分多行撰写，每个 attribute 一行。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- bad -->&lt;img src="https://vuejs.org/images/logo.png" alt="Vue Logo">&lt;MyComponent foo="a" bar="b" baz="c"/><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- good -->&lt;img src="https://vuejs.org/images/logo.png" alt="Vue Logo">&lt;MyComponent foo="a" bar="b" baz="c"/><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-8-模板中简单的表达式"><a href="#2-1-8-模板中简单的表达式" class="headerlink" title="2.1.8 模板中简单的表达式"></a>2.1.8 模板中简单的表达式</h3><p>组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法。<br>复杂表达式会让你的模板变得不那么声明式。我们应该尽量描述应该出现的是什么，而非如何计算那个值。而且计算属性和方法使得代码可以重用。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">// bad&#123;&#123;  fullName.split(' ').map((word) => &#123; return word[0].toUpperCase() + word.slice(1) &#125;).join(' ')&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更好的做法：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- 在模板中 -->&#123;&#123; normalizedFullName &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">// 复杂表达式已经移入一个计算属性computed: &#123;  normalizedFullName: function () &#123; return this.fullName.split(' ').map(function (word) &#123; return word[0].toUpperCase() + word.slice(1) &#125;).join(' ') &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-9-带引号的-attribute-值"><a href="#2-1-9-带引号的-attribute-值" class="headerlink" title="2.1.9 带引号的 attribute 值"></a>2.1.9 带引号的 attribute 值</h3><p>非空 HTML 特性值应该始终带双引号。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- bad -->&lt;input type=text>&lt;AppSidebar :style=&#123;width:sidebarWidth+'px'&#125;><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- good -->&lt;input type="text">&lt;AppSidebar :style="&#123; width: sidebarWidth + 'px' &#125;"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-1-10-指令缩写"><a href="#2-1-10-指令缩写" class="headerlink" title="2.1.10 指令缩写"></a>2.1.10 指令缩写</h3><ul><li>用 : 表示 v-bind:</li><li>用 @ 表示 v-on:</li><li>用 # 表示 v-slot:</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;input  :value="newTodoText"  :placeholder="newTodoInstructions">&lt;input  @input="onInput"  @focus="onFocus">&lt;template #header> &lt;h1>Here might be a page title&lt;/h1>&lt;/template>&lt;template #footer> &lt;p>Here's some contact info&lt;/p>&lt;/template><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-HTML"><a href="#2-2-HTML" class="headerlink" title="2.2 HTML"></a>2.2 HTML</h2><h3 id="2-2-1-文件模板"><a href="#2-2-1-文件模板" class="headerlink" title="2.2.1 文件模板"></a>2.2.1 文件模板</h3><p>HTML5 文件模板：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!DOCTYPE html> &lt;html lang="zh-CN"> &lt;head> &lt;meta charset="UTF-8"> &lt;title>HTML5标准模版&lt;/title> &lt;/head> &lt;body> &lt;/body>&lt;/html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>移动端：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!DOCTYPE html>&lt;html lang="zh-CN">&lt;head> &lt;meta charset="UTF-8"> &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no"> &lt;meta name="format-detection" content="telephone=no"> &lt;title>移动端HTML模版&lt;/title> &lt;!-- S DNS预解析 --> &lt;link rel="dns-prefetch" href=""> &lt;!-- E DNS预解析 --> &lt;!-- S 线上样式页面片，开发请直接取消注释引用 --> &lt;!-- #include virtual="" --> &lt;!-- E 线上样式页面片 --> &lt;!-- S 本地调试，根据开发模式选择调试方式，请开发删除 --> &lt;link rel="stylesheet" href="css/index.css"> &lt;!-- /本地调试方式 --> &lt;link rel="stylesheet" href="http://srcPath/index.css"> &lt;!-- /开发机调试方式 --> &lt;!-- E 本地调试 -->&lt;/head>&lt;body>&lt;/body>&lt;/html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PC 端：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!DOCTYPE html>&lt;html lang="zh-CN">&lt;head> &lt;meta charset="UTF-8"> &lt;meta name="keywords" content="your keywords"> &lt;meta name="description" content="your description"> &lt;meta name="author" content="author,email address"> &lt;meta name="robots" content="index,follow"> &lt;meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1"> &lt;meta name="renderer" content="ie-stand"> &lt;title>PC端HTML模版&lt;/title> &lt;!-- S DNS预解析 --> &lt;link rel="dns-prefetch" href=""> &lt;!-- E DNS预解析 --> &lt;!-- S 线上样式页面片，开发请直接取消注释引用 --> &lt;!-- #include virtual="" --> &lt;!-- E 线上样式页面片 --> &lt;!-- S 本地调试，根据开发模式选择调试方式，请开发删除 --> &lt;link rel="stylesheet" href="css/index.css"> &lt;!-- /本地调试方式 --> &lt;link rel="stylesheet" href="http://srcPath/index.css"> &lt;!-- /开发机调试方式 --> &lt;!-- E 本地调试 -->&lt;/head>&lt;body>&lt;/body>&lt;/html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-2-元素及标签闭合"><a href="#2-2-2-元素及标签闭合" class="headerlink" title="2.2.2 元素及标签闭合"></a>2.2.2 元素及标签闭合</h3><p>HTML 元素共有以下5种：</p><ul><li>空元素：area、base、br、col、command、embed、hr、img、input、keygen、link、meta、param、source、track、wbr</li><li>原始文本元素：script、style</li><li>RCDATA 元素：textarea、title</li><li>外来元素：来自 MathML 命名空间和 SVG 命名空间的元素</li><li>常规元素：其他 HTML 允许的元素都称为常规元素<br>为了能让浏览器更好的解析代码以及能让代码具有更好的可读性，有如下约定：</li><li>所有具有开始标签和结束标签的元素都要写上起止标签，某些允许省略开始标签或和束标签的元素亦都要写上。</li><li>空元素标签都不加 “&#x2F;” 字符。</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- good -->&lt;div> &lt;h1>我是h1标题&lt;/h1> &lt;p>我是一段文字，我有始有终，浏览器能正确解析&lt;/p>&lt;/div>&lt;br data-tomark-pass>&lt;!-- bad -->&lt;div> &lt;h1>我是h1标题&lt;/h1> &lt;p>我是一段文字，我有始无终，浏览器亦能正确解析&lt;/div>&lt;br/><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-3-代码嵌套"><a href="#2-2-3-代码嵌套" class="headerlink" title="2.2.3 代码嵌套"></a>2.2.3 代码嵌套</h3><p>元素嵌套规范，每个块状元素独立一行，内联元素可选。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- good -->&lt;div> &lt;h1>&lt;/h1> &lt;p>&lt;/p>&lt;/div> &lt;p>&lt;span>&lt;/span>&lt;span>&lt;/span>&lt;/p>&lt;!-- bad -->&lt;div> &lt;h1>&lt;/h1>&lt;p>&lt;/p>&lt;/div> &lt;p>  &lt;span>&lt;/span> &lt;span>&lt;/span>&lt;/p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>段落元素与标题元素只能嵌套内联元素。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- good -->&lt;h1>&lt;span>&lt;/span>&lt;/h1>&lt;p>&lt;span>&lt;/span>&lt;span>&lt;/span>&lt;/p>&lt;!-- bad -->&lt;h1>&lt;div>&lt;/div>&lt;/h1>&lt;p>&lt;div>&lt;/div>&lt;div>&lt;/div>&lt;/p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-CSS"><a href="#2-3-CSS" class="headerlink" title="2.3 CSS"></a>2.3 CSS</h2><h3 id="2-3-1-样式文件"><a href="#2-3-1-样式文件" class="headerlink" title="2.3.1 样式文件"></a>2.3.1 样式文件</h3><p>样式文件必须写上 <a href="https://link.zhihu.com/?target=https://github.com/charset">@charset</a> 规则，并且一定要在样式文件的第一行首个字符位置开始写，编码名用 “UTF-8”。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">@charset "UTF-8";.jdc &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">/* @charset规则不在文件首行首个字符开始 */@charset "UTF-8";.jdc &#123;&#125;/* @charset规则没有用小写 */@CHARSET "UTF-8";.jdc &#123;&#125;/* 无@charset规则 */.jdc &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-2-代码格式化"><a href="#2-3-2-代码格式化" class="headerlink" title="2.3.2 代码格式化"></a>2.3.2 代码格式化</h3><p>样式书写一般有两种：一种是紧凑格式 （Compact），一种是展开格式（Expanded）。</p><ul><li>推荐：展开格式（Expanded）</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  display: block;  width: 50px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：紧凑格式 （Compact）</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123; display: block; width: 50px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-3-代码大小写"><a href="#2-3-3-代码大小写" class="headerlink" title="2.3.3 代码大小写"></a>2.3.3 代码大小写</h3><p>样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  display: block;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.JDC &#123;  DISPLAY: BLOCK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-4-代码易读性"><a href="#2-3-4-代码易读性" class="headerlink" title="2.3.4 代码易读性"></a>2.3.4 代码易读性</h3><ol><li>左括号与类名之间一个空格，冒号与属性值之间一个空格。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  width: 100%;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc&#123;  width:100%;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>逗号分隔的取值，逗号之后一个空格。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  box-shadow: 1px 1px 1px #333, 2px 2px 2px #ccc;&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  box-shadow: 1px 1px 1px #333,2px 2px 2px #ccc;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>为单个 CSS 选择器或新声明开启新行。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc, .jdc_logo, .jdc_hd &#123;  color: #ff0;&#125;.nav&#123;  color: #fff;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc, .jdc_logo, .jdc_hd &#123;  color: #ff0;&#125;.nav&#123;  color: #fff;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>颜色值 rgb() rgba() hsl() hsla() rect() 中不需有空格，且取值不要带有不必要的 0。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  color: rgba(255,255,255,.5);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  color: rgba( 255, 255, 255, 0.5 );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>属性值十六进制数值能用简写的尽量用简写。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  color: #fff;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  color: #ffffff;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>不要为 0 指明单位。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  margin: 0 10px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  margin: 0px 10px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-5-属性值引号"><a href="#2-3-5-属性值引号" class="headerlink" title="2.3.5 属性值引号"></a>2.3.5 属性值引号</h3><p>CSS 属性值需要用到引号时，统一使用单引号。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;font-family: ‘Hiragino Sans GB’;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  font-family: "Hiragino Sans GB";&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-6-属性书写建议"><a href="#2-3-6-属性书写建议" class="headerlink" title="2.3.6 属性书写建议"></a>2.3.6 属性书写建议</h3><p>建议遵循以下顺序：</p><ol><li>布局定位属性：display &#x2F; position &#x2F; float &#x2F; clear &#x2F; visibility &#x2F; overflow</li><li>自身属性：width &#x2F; height &#x2F; margin &#x2F; padding &#x2F; border &#x2F; background</li><li>文本属性：color &#x2F; font &#x2F; text-decoration &#x2F; text-align &#x2F; vertical-align &#x2F; white- space &#x2F; break-word</li><li>其他属性（CSS3）：content &#x2F; cursor &#x2F; border-radius &#x2F; box-shadow &#x2F; text-shadow &#x2F; background: linear-gradient …</li></ol><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  display: block;  position: relative; float: left;  width: 100px;  height: 100px;  margin: 0 10px;  padding: 20px 0;  font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;  color: #333;  background: rgba(0,0,0,.5); -webkit-border-radius: 10px; -moz-border-radius: 10px; -o-border-radius: 10px; -ms-border-radius: 10px;  border-radius: 10px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-7-CSS3-浏览器私有前缀"><a href="#3-3-7-CSS3-浏览器私有前缀" class="headerlink" title="3.3.7 CSS3 浏览器私有前缀"></a>3.3.7 CSS3 浏览器私有前缀</h3><p>CSS3 浏览器私有前缀在前，标准前缀在后。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123; -webkit-border-radius: 10px; -moz-border-radius: 10px; -o-border-radius: 10px; -ms-border-radius: 10px;  border-radius: 10px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-JavaScript"><a href="#2-4-JavaScript" class="headerlink" title="2.4 JavaScript"></a>2.4 JavaScript</h3><h3 id="2-4-1-单行代码块"><a href="#2-4-1-单行代码块" class="headerlink" title="2.4.1 单行代码块"></a>2.4.1 单行代码块</h3><p>在单行代码块中使用空格。</p><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">function foo () &#123;return true&#125;if (foo) &#123;bar = 0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">function foo () &#123; return true &#125;if (foo) &#123; bar = 0 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-4-2-大括号风格"><a href="#2-4-2-大括号风格" class="headerlink" title="2.4.2 大括号风格"></a>2.4.2 大括号风格</h3><p>在编程过程中，大括号风格与缩进风格紧密联系，用来描述大括号相对代码块位置的方法有很多。在 JavaScript 中，主要有三种风格，如下：</p><ul><li>【推荐】One True Brace Style</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">if (foo) &#123;  bar()&#125; else &#123;  baz()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Stroustrup</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">if (foo) &#123;  bar()&#125;else &#123;  baz()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Allman</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">if (foo)&#123;  bar()&#125;else&#123;  baz()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-3-代码中的空格"><a href="#2-4-3-代码中的空格" class="headerlink" title="2.4.3 代码中的空格"></a>2.4.3 代码中的空格</h3><ol><li>逗号前后的空格可以提高代码的可读性，团队约定在逗号后面使用空格，逗号前面不加空格。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">var foo = 1, bar = 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">var foo = 1,bar = 2var foo = 1 , bar = 2var foo = 1 ,bar = 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>对象字面量的键和值之间不能存在空格，且要求对象字面量的冒号和值之间存在一个空格。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">var obj = &#123; 'foo': 'haha' &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">var obj = &#123; 'foo' : 'haha' &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>代码块前要添加空格。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">if (a) &#123;  b()&#125;function a () &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">if (a)&#123;  b()&#125;function a ()&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>函数声明括号前要加空格。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">function func (x) &#123; // ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">function func(x) &#123; // ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>在函数调用时，禁止使用空格。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">fn()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">fn ()fn()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在操作符前后都需要添加空格。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">var sum = 1 + 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">var sum = 1+2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="三、注释规范"><a href="#三、注释规范" class="headerlink" title="三、注释规范"></a>三、注释规范</h1><p>注释的目的：</p><ul><li>提高代码的可读性，从而提高代码的可维护性<br>注释的原则：</li><li>如无必要，勿增注释 ( As short as possible )</li><li>如有必要，尽量详尽 ( As long as necessary )</li></ul><h2 id="3-1-HTML-文件注释"><a href="#3-1-HTML-文件注释" class="headerlink" title="3.1 HTML 文件注释"></a>3.1 HTML 文件注释</h2><h3 id="3-1-1-单行注释"><a href="#3-1-1-单行注释" class="headerlink" title="3.1.1 单行注释"></a>3.1.1 单行注释</h3><p>一般用于简单的描述，如某些状态描述、属性描述等。<br>注释内容前后各一个空格字符，注释位于要注释代码的上面，单独占一行。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- Comment Text -->&lt;div>...&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>不推荐</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;div>...&lt;/div>&lt;!-- Comment Text -->&lt;div>&lt;!-- Comment Text -->  ...&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-2-模块注释"><a href="#3-1-2-模块注释" class="headerlink" title="3.1.2 模块注释"></a>3.1.2 模块注释</h3><p>一般用于描述模块的名称以及模块开始与结束的位置。<br>注释内容前后各一个空格字符，模块与模块之间相隔一行。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- S Comment Text A --> &lt;div class="mod_a">  ...&lt;/div>&lt;!-- E Comment Text A -->&lt;!-- S Comment Text B --> &lt;div class="mod_b">  ...&lt;/div>&lt;!-- E Comment Text B --><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不推荐</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- S Comment Text A -->&lt;div class="mod_a">  ...&lt;/div>&lt;!-- E Comment Text A -->&lt;!-- S Comment Text B --> &lt;div class="mod_b">  ...&lt;/div>&lt;!-- E Comment Text B --><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-3-嵌套模块注释"><a href="#3-1-3-嵌套模块注释" class="headerlink" title="3.1.3 嵌套模块注释"></a>3.1.3 嵌套模块注释</h3><p>当模块注释内再出现模块注释的时候，为了突出主要模块，嵌套模块不再使用。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- S Comment Text -->&lt;!-- E Comment Text --><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而改用</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- /Comment Text --><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注释写在模块结尾标签底部，单独一行。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- S Comment Text A -->&lt;div class="mod_a"> &lt;div class="mod_b">        ... &lt;/div> &lt;!-- /mod_b --> &lt;div class="mod_c">     ... &lt;/div> &lt;!-- /mod_c -->&lt;/div>&lt;!-- E Comment Text A --><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-CSS-文件注释"><a href="#3-2-CSS-文件注释" class="headerlink" title="3.2 CSS 文件注释"></a>3.2 CSS 文件注释</h2><h3 id="3-2-1-单行注释"><a href="#3-2-1-单行注释" class="headerlink" title="3.2.1 单行注释"></a>3.2.1 单行注释</h3><p>注释内容第一个字符和最后一个字符都是一个空格字符，单独占一行，行与行之间相隔一行。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">/* Comment Text */ .jdc &#123;&#125; /* Comment Text */ .jdc &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">/*Comment Text*/.jdc &#123;  display: block;&#125;.jdc &#123;  display: block;/*Comment Text*/&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-2-模块注释"><a href="#3-2-2-模块注释" class="headerlink" title="3.2.2 模块注释"></a>3.2.2 模块注释</h3><p>注释内容第一个字符和最后一个字符都是一个空格字符，&#x2F; <em>与 模块信息描述占一行，多个横线分隔符 - 与</em> &#x2F; 占一行，行与行之间相隔两行。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">/* Module A---------------------------------------------------------------- */.mod_a &#123;&#125;/* Module B---------------------------------------------------------------- */.mod_b &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">/* Module A ---------------------------------------------------- */.mod_a &#123;&#125;/* Module B ---------------------------------------------------- */.mod_b &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-3-文件注释"><a href="#3-2-3-文件注释" class="headerlink" title="3.2.3 文件注释"></a>3.2.3 文件注释</h3><p>在样式文件编码声明 <a href="https://link.zhihu.com/?target=https://github.com/charset">@charset</a> 语句下面注明页面名称、作者、创建日期等信息。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">写文章撤销重做清除格式标题加粗斜体列表目录引用分割线代码块注释图片视频链接公式表格附件文档历史版本更多一、命名规范常用的命名规范：camelCase（小驼峰式命名法 —— 首字母小写）PascalCase（大驼峰式命名法 —— 首字母大写）kebab-case（短横线连接式）Snake （下划线连接式）1.1 项目文件命名1.1.1 项目名全部采用小写方式， 以短横线分隔。例：my-project-name。1.1.2 目录名参照项目命名规则，有复数结构时，要采用复数命名法。例：docs、assets、components、directives、mixins、utils、views。my-project-name/|- BuildScript // 流水线部署文件目录|- docs           // 项目的细化文档目录（可选）|- nginx          // 部署在容器上前端项目 nginx 代理文件目录|- node_modules   // 下载的依赖包|- public // 静态页面目录 |- index.html // 项目入口|- src            // 源码目录 |- api        // http 请求目录 |- assets     // 静态资源目录，这里的资源会被wabpack构建 |- icon   // icon 存放目录 |- img    // 图片存放目录 |- js     // 公共 js 文件目录 |- scss   // 公共样式 scss 存放目录 |- frame.scss   // 入口文件 |- global.scss  // 公共样式 |- reset.scss   // 重置样式 |- components     // 组件 |- plugins        // 插件 |- router         // 路由 |- routes         // 详细的路由拆分目录（可选） |- index.js |- store          // 全局状态管理 |- utils          // 工具存放目录 |- request.js // 公共请求工具 |- views          // 页面存放目录 |- App.vue        // 根组件 |- main.js        // 入口文件 |- tests          // 测试用例 |- .browserslistrc// 浏览器兼容配置文件 |- .editorconfig  // 编辑器配置文件 |- .eslintignore  // eslint 忽略规则 |- .eslintrc.js   // eslint 规则 |- .gitignore     // git 忽略规则 |- babel.config.js // babel 规则 |- Dockerfile // Docker 部署文件 |- jest.config.js |- package-lock.json |- package.json // 依赖 |- README.md // 项目 README |- vue.config.js // webpack 配置1.1.3 图像文件名全部采用小写方式， 优先选择单个单词命名，多个单词命名以下划线分隔。banner_sina.gifmenu_aboutus.gifmenutitle_news.giflogo_police.giflogo_national.gifpic_people.jpgpic_TV.jpg1.1.4 HTML 文件名全部采用小写方式， 优先选择单个单词命名，多个单词命名以下划线分隔。|- error_report.html|- success_report.html1.1.5 CSS 文件名全部采用小写方式， 优先选择单个单词命名，多个单词命名以短横线分隔。|- normalize.less|- base.less|- date-picker.scss|- input-number.scss1.1.6 JavaScript 文件名全部采用小写方式， 优先选择单个单词命名，多个单词命名以短横线分隔。|- index.js|- plugin.js|- util.js|- date-util.js|- account-model.js|- collapse-transition.js上述规则可以快速记忆为“静态文件下划线，编译文件短横线”。1.2 Vue 组件命名1.2.1 单文件组件名文件扩展名为 .vue 的 single-file components (单文件组件)。单文件组件名应该始终是单词大写开头 (PascalCase)。components/|- MyComponent.vue1.2.2 单例组件名只拥有单个活跃实例的组件应该以 The 前缀命名，以示其唯一性。这不意味着组件只可用于一个单页面，而是每个页面只使用一次。这些组件永远不接受任何 prop，因为它们是为你的应用定制的。如果你发现有必要添加 prop，那就表明这实际上是一个可复用的组件，只是目前在每个页面里只使用一次。比如，头部和侧边栏组件几乎在每个页面都会使用，不接受 prop，该组件是专门为该应用所定制的。components/|- TheHeading.vue|- TheSidebar.vue1.2.3 基础组件名基础组件：不包含业务，独立、具体功能的基础组件，比如日期选择器、模态框等。这类组件作为项目的基础控件，会被大量使用，因此组件的 API 进行过高强度的抽象，可以通过不同配置实现不同的功能。应用特定样式和约定的基础组件(也就是展示类的、无逻辑的或无状态、不掺杂业务逻辑的组件) 应该全部以一个特定的前缀开头 —— Base。基础组件在一个页面内可使用多次，在不同页面内也可复用，是高可复用组件。components/|- BaseButton.vue|- BaseTable.vue|- BaseIcon.vue1.2.4 业务组件业务组件：它不像基础组件只包含某个功能，而是在业务中被多个页面复用的（具有可复用性），它与基础组件的区别是，业务组件只在当前项目中会用到，不具有通用性，而且会包含一些业务，比如数据请求；而基础组件不含业务，在任何项目中都可以使用，功能单一，比如一个具有数据校验功能的输入框。掺杂了复杂业务的组件（拥有自身 data、prop 的相关处理）即业务组件应该以 Custom 前缀命名。业务组件在一个页面内比如：某个页面内有一个卡片列表，而样式和逻辑跟业务紧密相关的卡片就是业务组件。components/|- CustomCard.vue1.2.5 紧密耦合的组件名和父组件紧密耦合的子组件应该以父组件名作为前缀命名。 因为编辑器通常会按字母顺序组织文件，所以这样做可以把相关联的文件排在一起。components/|- TodoList.vue|- TodoListItem.vue|- TodoListItemButton.vue1.2.6 组件名中单词顺序组件名应该以高级别的 (通常是一般化描述的) 单词开头，以描述性的修饰词结尾。 因为编辑器通常会按字母顺序组织文件，所以现在组件之间的重要关系一目了然。如下组件主要是用于搜索和设置功能。components/|- SearchButtonClear.vue|- SearchButtonRun.vue|- SearchInputQuery.vue|- SearchInputExcludeGlob.vue|- SettingsCheckboxTerms.vue|- SettingsCheckboxLaunchOnStartup.vue还有另一种多级目录的方式，把所有的搜索组件放到“search”目录，把所有的设置组件放到“settings”目录。我们只推荐在非常大型 (如有 100+ 个组件) 的应用下才考虑这么做，因为在多级目录间找来找去，要比在单个 components 目录下滚动查找要花费更多的精力。1.2.7 完整单词的组件名组件名应该倾向于完整单词而不是缩写。 编辑器中的自动补全已经让书写长命名的代价非常之低了，而其带来的明确性却是非常宝贵的。不常用的缩写尤其应该避免。components/|- StudentDashboardSettings.vue|- UserProfileOptions.vue1.3 代码参数命名1.3.1 name组件名应该始终是多个单词，应该始终是 PascalCase 的。 根组件 App 以及 、 之类的 Vue 内置组件除外。这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。export default &#123;  name: 'ToDoList', // ...&#125;1.3.2 prop在声明 prop 的时候，其命名应该始终使用 camelCase，而在模板和 JSX 中应该始终使用 kebab-case。我们单纯的遵循每个语言的约定，在 JavaScript 中更自然的是 camelCase。而在 HTML 中则是 kebab-case。&lt;WelcomeMessage greeting-text="hi"/>export default &#123;  name: 'MyComponent', // ...  props: &#123;    greetingText: &#123;      type: String,      required: true,      validator: function (value) &#123; return ['syncing', 'synced',].indexOf(value) !== -1 &#125; &#125; &#125;&#125;1.3.3 routerVue Router Path 命名采用 kebab-case 格式。 用 Snake（如：/user_info）或 camelCase（如：/userInfo)的单词会被当成一个单词，搜索引擎无法区分语义。// bad&#123;  path: '/user_info', // user_info 当成一个单词  name: 'UserInfo',  component: UserInfo,  meta: &#123;    title: ' - 用户',    desc: '' &#125;&#125;,// good&#123;  path: '/user-info', // 能解析成 user info  name: 'UserInfo',  component: UserInfo,  meta: &#123;    title: ' - 用户',    desc: '' &#125;&#125;,1.3.4 模板中组件对于绝大多数项目来说，在单文件组件和字符串模板中组件名应该总是 PascalCase 的，但是在 DOM 模板中总是 kebab-case 的。&lt;!-- 在单文件组件和字符串模板中 --> &lt;MyComponent/>&lt;!-- 在 DOM 模板中 --> &lt;my-component>&lt;/my-component>1.3.5 自闭合组件在单文件组件、字符串模板和 JSX 中没有内容的组件应该是自闭合的——但在 DOM 模板里永远不要这样做。&lt;!-- 在单文件组件和字符串模板中 -->&lt;MyComponent/>&lt;!-- 在所有地方 -->&lt;my-component>&lt;/my-component>1.3.6 变量命名方法：camelCase命名规范：类型 + 对象描述或属性的方式// badvar getTitle = "LoginTable"// goodlet tableTitle = "LoginTable"let mySchool = "我的学校"1.3.7 常量命名方法：全部大写下划线分割命名规范：使用大写字母和下划线来组合命名，下划线用以分割单词const MAX_COUNT = 10 const URL = 'http://test.host.com' 1.3.8 方法命名方法：camelCase命名规范：统一使用动词或者动词 + 名词形式// 1、普通情况下，使用动词 + 名词形式// badgo、nextPage、show、open、login// goodjumpPage、openCarInfoDialog// 2、请求数据方法，以 data 结尾// badtakeData、confirmData、getList、postForm// goodgetListData、postFormData// 3、单个动词的情况init、refresh动词含义返回值can判断是否可执行某个动作 (权 )函数返回一个布尔值。true：可执行；false：不可执行；has判断是否含有某个值函数返回一个布尔值。true：含有此值；false：不含有此值；is判断是否为某个值函数返回一个布尔值。true：为某个值；false：不为某个值；get获取某个值函数返回一个非布尔值set设置某个值无返回值、返回是否设置成功或者返回链式对象1.3.9 自定义事件自定义事件应始终使用 kebab-case 的事件名。不同于组件和 prop，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。this.$emit('my-event')&lt;MyComponent @my-event="handleDoSomething" />不同于组件和 prop，事件名不会被用作一个 JavaScript 变量名或 property 名，所以就没有理由使用 camelCase 或 PascalCase 了。并且 v-on 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，所以 v-on:myEvent 将会变成 v-on:myevent——导致 myEvent 不可能被监听到。原生事件参考列表由原生事件可发现其使用方式如下：&lt;div  @blur="toggleHeaderBlur"  @focus="toggleHeaderFocus"  @click="toggleMenu"  @keydown.esc="handleKeydown"  @keydown.enter="handleKeydown"  @keydown.up.prevent="handleKeydown"  @keydown.down.prevent="handleKeydown"  @keydown.tab="handleKeydown"  @keydown.delete="handleKeydown"  @mouseenter="hasMouseHoverHead = true"  @mouseleave="hasMouseHoverHead = false">&lt;/div>而为了区分原生事件和自定义事件在 Vue 中的使用，建议除了多单词事件名使用 kebab-case 的情况下，命名还需遵守为 on + 动词 的形式，如下：&lt;!-- 父组件 -->&lt;div  @on-search="handleSearch"  @on-clear="handleClear"  @on-clickoutside="handleClickOutside">&lt;/div>// 子组件export default &#123;  methods: &#123;    handleTriggerItem () &#123; this.$emit('on-clear') &#125; &#125;&#125;1.3.10 事件方法命名方法：camelCase命名规范：handle + 名称（可选）+ 动词&lt;template> &lt;div    @click.native.stop="handleItemClick()"    @mouseenter.native.stop="handleItemHover()"> &lt;/div>&lt;/template>&lt;script>export default &#123;  methods: &#123;    handleItemClick () &#123; //... &#125;,    handleItemHover () &#123; //... &#125; &#125;&#125;&lt;/script>二、代码规范2.1 Vue2.1.1 代码结构&lt;template> &lt;div id="my-component"> &lt;DemoComponent /> &lt;/div>&lt;/template>&lt;script>import DemoComponent from '../components/DemoComponent'export default &#123;  name: 'MyComponent',  components: &#123; DemoComponent &#125;,  mixins: [],  props: &#123;&#125;,  data () &#123; return &#123;&#125; &#125;,  computed: &#123;&#125;,  watch: &#123;&#125;  created () &#123;&#125;,  mounted () &#123;&#125;,  destroyed () &#123;&#125;,  methods: &#123;&#125;,&#125;&lt;/script>&lt;style lang="scss" scoped>#my-component &#123;&#125;&lt;/style>2.1.2 data组件的 data 必须是一个函数。// In a .vue fileexport default &#123;  data () &#123; return &#123;      foo: 'bar' &#125; &#125;&#125;2.1.3 propProp 定义应该尽量详细。export default &#123;  props: &#123;    status: &#123;      type: String,      required: true,      validator: function (value) &#123; return [ 'syncing',  'synced', 'version-conflict', 'error' ].indexOf(value) !== -1 &#125; &#125; &#125;&#125;2.1.4 computed应该把复杂计算属性分割为尽可能多的更简单的属性。 小的、专注的计算属性减少了信息使用时的假设性限制，所以需求变更时也用不着那么多重构了。// badcomputed: &#123;   price: function () &#123;  var basePrice = this.manufactureCost / (1 - this.profitMargin)  return (       basePrice -       basePrice * (this.discountPercent || 0)  )  &#125; &#125;// goodcomputed: &#123;  basePrice: function () &#123; return this.manufactureCost / (1 - this.profitMargin) &#125;,  discount: function () &#123; return this.basePrice * (this.discountPercent || 0) &#125;,  finalPrice: function () &#123; return this.basePrice - this.discount &#125;&#125;2.1.5 为 v-for 设置键值在组件上必须用 key 搭配 v-for，以便维护内部组件及其子树的状态。&lt;ul> &lt;li v-for="todo in todos"    :key="todo.id">      &#123;&#123; todo.text &#125;&#125; &lt;/li>&lt;/ul>2.1.6 v-if 和 v-for 互斥永远不要把 v-if 和 v-for 同时用在同一个元素上。&lt;!-- bad：控制台报错 -->&lt;ul> &lt;li v-for="user in users" v-if="shouldShowUsers"    :key="user.id">      &#123;&#123; user.name &#125;&#125; &lt;/li>&lt;/ul>一般我们在两种常见的情况下会倾向于这样做：为了过滤一个列表中的项目 (比如 v-for=”user in users” v-if=”user.isActive”)。在这种情形下，请将 users 替换为一个计算属性 (比如 activeUsers)，让其返回过滤后的列表。computed: &#123;  activeUsers: function () &#123; return this.users.filter((user) => &#123; return user.isActive &#125;) &#125;&#125;&lt;ul> &lt;li v-for="user in activeUsers"    :key="user.id">      &#123;&#123; user.name &#125;&#125; &lt;/li>&lt;/ul>为了避免渲染本应该被隐藏的列表 (比如 v-for=”user in users” v-if=”shouldShowUsers”)。这种情形下，请将 v-if 移动至容器元素上 (比如 ul, ol)。&lt;!-- bad -->&lt;ul> &lt;li v-for="user in users" v-if="shouldShowUsers"    :key="user.id">      &#123;&#123; user.name &#125;&#125; &lt;/li>&lt;/ul>&lt;!-- good -->&lt;ul v-if="shouldShowUsers"> &lt;li v-for="user in users"    :key="user.id">      &#123;&#123; user.name &#125;&#125; &lt;/li>&lt;/ul>2.1.7 多个 attribute 的元素多个 attribute 的元素应该分多行撰写，每个 attribute 一行。&lt;!-- bad -->&lt;img src="https://vuejs.org/images/logo.png" alt="Vue Logo">&lt;MyComponent foo="a" bar="b" baz="c"/>&lt;!-- good -->&lt;img src="https://vuejs.org/images/logo.png" alt="Vue Logo">&lt;MyComponent foo="a" bar="b" baz="c"/>2.1.8 模板中简单的表达式组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法。复杂表达式会让你的模板变得不那么声明式。我们应该尽量描述应该出现的是什么，而非如何计算那个值。而且计算属性和方法使得代码可以重用。// bad&#123;&#123;  fullName.split(' ').map((word) => &#123; return word[0].toUpperCase() + word.slice(1) &#125;).join(' ')&#125;&#125;更好的做法：&lt;!-- 在模板中 -->&#123;&#123; normalizedFullName &#125;&#125;// 复杂表达式已经移入一个计算属性computed: &#123;  normalizedFullName: function () &#123; return this.fullName.split(' ').map(function (word) &#123; return word[0].toUpperCase() + word.slice(1) &#125;).join(' ') &#125;&#125;2.1.9 带引号的 attribute 值非空 HTML 特性值应该始终带双引号。&lt;!-- bad -->&lt;input type=text>&lt;AppSidebar :style=&#123;width:sidebarWidth+'px'&#125;>&lt;!-- good -->&lt;input type="text">&lt;AppSidebar :style="&#123; width: sidebarWidth + 'px' &#125;">2.1.10 指令缩写用 : 表示 v-bind:用 @ 表示 v-on:用 # 表示 v-slot:&lt;input  :value="newTodoText"  :placeholder="newTodoInstructions">&lt;input  @input="onInput"  @focus="onFocus">&lt;template #header> &lt;h1>Here might be a page title&lt;/h1>&lt;/template>&lt;template #footer> &lt;p>Here's some contact info&lt;/p>&lt;/template>2.2 HTML2.2.1 文件模板HTML5 文件模板：&lt;!DOCTYPE html> &lt;html lang="zh-CN"> &lt;head> &lt;meta charset="UTF-8"> &lt;title>HTML5标准模版&lt;/title> &lt;/head> &lt;body> &lt;/body>&lt;/html>移动端：&lt;!DOCTYPE html>&lt;html lang="zh-CN">&lt;head> &lt;meta charset="UTF-8"> &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no"> &lt;meta name="format-detection" content="telephone=no"> &lt;title>移动端HTML模版&lt;/title> &lt;!-- S DNS预解析 --> &lt;link rel="dns-prefetch" href=""> &lt;!-- E DNS预解析 --> &lt;!-- S 线上样式页面片，开发请直接取消注释引用 --> &lt;!-- #include virtual="" --> &lt;!-- E 线上样式页面片 --> &lt;!-- S 本地调试，根据开发模式选择调试方式，请开发删除 --> &lt;link rel="stylesheet" href="css/index.css"> &lt;!-- /本地调试方式 --> &lt;link rel="stylesheet" href="http://srcPath/index.css"> &lt;!-- /开发机调试方式 --> &lt;!-- E 本地调试 -->&lt;/head>&lt;body>&lt;/body>&lt;/html>PC 端：&lt;!DOCTYPE html>&lt;html lang="zh-CN">&lt;head> &lt;meta charset="UTF-8"> &lt;meta name="keywords" content="your keywords"> &lt;meta name="description" content="your description"> &lt;meta name="author" content="author,email address"> &lt;meta name="robots" content="index,follow"> &lt;meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1"> &lt;meta name="renderer" content="ie-stand"> &lt;title>PC端HTML模版&lt;/title> &lt;!-- S DNS预解析 --> &lt;link rel="dns-prefetch" href=""> &lt;!-- E DNS预解析 --> &lt;!-- S 线上样式页面片，开发请直接取消注释引用 --> &lt;!-- #include virtual="" --> &lt;!-- E 线上样式页面片 --> &lt;!-- S 本地调试，根据开发模式选择调试方式，请开发删除 --> &lt;link rel="stylesheet" href="css/index.css"> &lt;!-- /本地调试方式 --> &lt;link rel="stylesheet" href="http://srcPath/index.css"> &lt;!-- /开发机调试方式 --> &lt;!-- E 本地调试 -->&lt;/head>&lt;body>&lt;/body>&lt;/html>2.2.2 元素及标签闭合HTML 元素共有以下5种：空元素：area、base、br、col、command、embed、hr、img、input、keygen、link、meta、param、source、track、wbr原始文本元素：script、styleRCDATA 元素：textarea、title外来元素：来自 MathML 命名空间和 SVG 命名空间的元素常规元素：其他 HTML 允许的元素都称为常规元素为了能让浏览器更好的解析代码以及能让代码具有更好的可读性，有如下约定：所有具有开始标签和结束标签的元素都要写上起止标签，某些允许省略开始标签或和束标签的元素亦都要写上。空元素标签都不加 “/” 字符。&lt;!-- good -->&lt;div> &lt;h1>我是h1标题&lt;/h1> &lt;p>我是一段文字，我有始有终，浏览器能正确解析&lt;/p>&lt;/div>&lt;br data-tomark-pass>&lt;!-- bad -->&lt;div> &lt;h1>我是h1标题&lt;/h1> &lt;p>我是一段文字，我有始无终，浏览器亦能正确解析&lt;/div>&lt;br/>2.2.3 代码嵌套元素嵌套规范，每个块状元素独立一行，内联元素可选。&lt;!-- good -->&lt;div> &lt;h1>&lt;/h1> &lt;p>&lt;/p>&lt;/div> &lt;p>&lt;span>&lt;/span>&lt;span>&lt;/span>&lt;/p>&lt;!-- bad -->&lt;div> &lt;h1>&lt;/h1>&lt;p>&lt;/p>&lt;/div> &lt;p>  &lt;span>&lt;/span> &lt;span>&lt;/span>&lt;/p>段落元素与标题元素只能嵌套内联元素。&lt;!-- good -->&lt;h1>&lt;span>&lt;/span>&lt;/h1>&lt;p>&lt;span>&lt;/span>&lt;span>&lt;/span>&lt;/p>&lt;!-- bad -->&lt;h1>&lt;div>&lt;/div>&lt;/h1>&lt;p>&lt;div>&lt;/div>&lt;div>&lt;/div>&lt;/p>2.3 CSS2.3.1 样式文件样式文件必须写上 @charset 规则，并且一定要在样式文件的第一行首个字符位置开始写，编码名用 “UTF-8”。推荐：@charset "UTF-8";.jdc &#123;&#125;不推荐：/* @charset规则不在文件首行首个字符开始 */@charset "UTF-8";.jdc &#123;&#125;/* @charset规则没有用小写 */@CHARSET "UTF-8";.jdc &#123;&#125;/* 无@charset规则 */.jdc &#123;&#125;2.3.2 代码格式化样式书写一般有两种：一种是紧凑格式 （Compact），一种是展开格式（Expanded）。推荐：展开格式（Expanded）.jdc &#123;  display: block;  width: 50px;&#125;不推荐：紧凑格式 （Compact）.jdc &#123; display: block; width: 50px;&#125;2.3.3 代码大小写样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写。推荐：.jdc &#123;  display: block;&#125;不推荐：.JDC &#123;  DISPLAY: BLOCK;&#125;2.3.4 代码易读性左括号与类名之间一个空格，冒号与属性值之间一个空格。推荐：.jdc &#123;  width: 100%;&#125;不推荐：.jdc&#123;  width:100%;&#125;逗号分隔的取值，逗号之后一个空格。推荐：.jdc &#123;  box-shadow: 1px 1px 1px #333, 2px 2px 2px #ccc;&#125; 不推荐：.jdc &#123;  box-shadow: 1px 1px 1px #333,2px 2px 2px #ccc;&#125;为单个 CSS 选择器或新声明开启新行。推荐：.jdc, .jdc_logo, .jdc_hd &#123;  color: #ff0;&#125;.nav&#123;  color: #fff;&#125;不推荐：.jdc, .jdc_logo, .jdc_hd &#123;  color: #ff0;&#125;.nav&#123;  color: #fff;&#125;颜色值 rgb() rgba() hsl() hsla() rect() 中不需有空格，且取值不要带有不必要的 0。推荐：.jdc &#123;  color: rgba(255,255,255,.5);&#125;不推荐：.jdc &#123;  color: rgba( 255, 255, 255, 0.5 );&#125;属性值十六进制数值能用简写的尽量用简写。推荐：.jdc &#123;  color: #fff;&#125;不推荐：.jdc &#123;  color: #ffffff;&#125;不要为 0 指明单位。推荐：.jdc &#123;  margin: 0 10px;&#125;不推荐：.jdc &#123;  margin: 0px 10px;&#125;2.3.5 属性值引号CSS 属性值需要用到引号时，统一使用单引号。推荐：.jdc &#123;font-family: ‘Hiragino Sans GB’;&#125;不推荐：.jdc &#123;  font-family: "Hiragino Sans GB";&#125;2.3.6 属性书写建议建议遵循以下顺序：布局定位属性：display / position / float / clear / visibility / overflow自身属性：width / height / margin / padding / border / background文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background: linear-gradient ….jdc &#123;  display: block;  position: relative; float: left;  width: 100px;  height: 100px;  margin: 0 10px;  padding: 20px 0;  font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;  color: #333;  background: rgba(0,0,0,.5); -webkit-border-radius: 10px; -moz-border-radius: 10px; -o-border-radius: 10px; -ms-border-radius: 10px;  border-radius: 10px;&#125;3.3.7 CSS3 浏览器私有前缀CSS3 浏览器私有前缀在前，标准前缀在后。.jdc &#123; -webkit-border-radius: 10px; -moz-border-radius: 10px; -o-border-radius: 10px; -ms-border-radius: 10px;  border-radius: 10px;&#125;2.4 JavaScript2.4.1 单行代码块在单行代码块中使用空格。不推荐：function foo () &#123;return true&#125;if (foo) &#123;bar = 0&#125;推荐：function foo () &#123; return true &#125;if (foo) &#123; bar = 0 &#125;2.4.2 大括号风格在编程过程中，大括号风格与缩进风格紧密联系，用来描述大括号相对代码块位置的方法有很多。在 JavaScript 中，主要有三种风格，如下：【推荐】One True Brace Styleif (foo) &#123;  bar()&#125; else &#123;  baz()&#125;Stroustrupif (foo) &#123;  bar()&#125;else &#123;  baz()&#125;Allmanif (foo)&#123;  bar()&#125;else&#123;  baz()&#125;2.4.3 代码中的空格逗号前后的空格可以提高代码的可读性，团队约定在逗号后面使用空格，逗号前面不加空格。推荐：var foo = 1, bar = 2不推荐：var foo = 1,bar = 2var foo = 1 , bar = 2var foo = 1 ,bar = 2对象字面量的键和值之间不能存在空格，且要求对象字面量的冒号和值之间存在一个空格。推荐：var obj = &#123; 'foo': 'haha' &#125;不推荐：var obj = &#123; 'foo' : 'haha' &#125;代码块前要添加空格。推荐：if (a) &#123;  b()&#125;function a () &#123;&#125;不推荐：if (a)&#123;  b()&#125;function a ()&#123;&#125;函数声明括号前要加空格。推荐：function func (x) &#123; // ...&#125;不推荐：function func(x) &#123; // ...&#125;在函数调用时，禁止使用空格。推荐：fn()不推荐：fn ()fn()在操作符前后都需要添加空格。推荐：var sum = 1 + 2不推荐：var sum = 1+2三、注释规范注释的目的：提高代码的可读性，从而提高代码的可维护性注释的原则：如无必要，勿增注释 ( As short as possible )如有必要，尽量详尽 ( As long as necessary )3.1 HTML 文件注释3.1.1 单行注释一般用于简单的描述，如某些状态描述、属性描述等。注释内容前后各一个空格字符，注释位于要注释代码的上面，单独占一行。推荐：&lt;!-- Comment Text -->&lt;div>...&lt;/div>不推荐&lt;div>...&lt;/div>&lt;!-- Comment Text -->&lt;div>&lt;!-- Comment Text -->  ...&lt;/div>3.1.2 模块注释一般用于描述模块的名称以及模块开始与结束的位置。注释内容前后各一个空格字符，模块与模块之间相隔一行。推荐：&lt;!-- S Comment Text A --> &lt;div class="mod_a">  ...&lt;/div>&lt;!-- E Comment Text A -->&lt;!-- S Comment Text B --> &lt;div class="mod_b">  ...&lt;/div>&lt;!-- E Comment Text B -->不推荐&lt;!-- S Comment Text A -->&lt;div class="mod_a">  ...&lt;/div>&lt;!-- E Comment Text A -->&lt;!-- S Comment Text B --> &lt;div class="mod_b">  ...&lt;/div>&lt;!-- E Comment Text B -->3.1.3 嵌套模块注释当模块注释内再出现模块注释的时候，为了突出主要模块，嵌套模块不再使用。&lt;!-- S Comment Text -->&lt;!-- E Comment Text -->而改用&lt;!-- /Comment Text -->注释写在模块结尾标签底部，单独一行。&lt;!-- S Comment Text A -->&lt;div class="mod_a"> &lt;div class="mod_b">        ... &lt;/div> &lt;!-- /mod_b --> &lt;div class="mod_c">     ... &lt;/div> &lt;!-- /mod_c -->&lt;/div>&lt;!-- E Comment Text A -->3.2 CSS 文件注释3.2.1 单行注释注释内容第一个字符和最后一个字符都是一个空格字符，单独占一行，行与行之间相隔一行。推荐：/* Comment Text */ .jdc &#123;&#125; /* Comment Text */ .jdc &#123;&#125;不推荐：/*Comment Text*/.jdc &#123;  display: block;&#125;.jdc &#123;  display: block;/*Comment Text*/&#125;3.2.2 模块注释注释内容第一个字符和最后一个字符都是一个空格字符，/ 与 模块信息描述占一行，多个横线分隔符 - 与 / 占一行，行与行之间相隔两行。推荐：/* Module A---------------------------------------------------------------- */.mod_a &#123;&#125;/* Module B---------------------------------------------------------------- */.mod_b &#123;&#125;不推荐：/* Module A ---------------------------------------------------- */.mod_a &#123;&#125;/* Module B ---------------------------------------------------- */.mod_b &#123;&#125;3.2.3 文件注释在样式文件编码声明 @charset 语句下面注明页面名称、作者、创建日期等信息。et "UTF-8";/** * @desc File Info * @author Author Name * @date 2015-10-10 */3.3 JavaScript 文件注释3.3.1 单行注释单行注释使用 //，注释应单独一行写在被注释对象的上方，不要追加在某条语句的后面。推荐：// is current tabconst active = true不推荐：const active = true // is current tab注释行的上方需要有一个空行（除非注释行上方是一个块的顶部），以增加可读性。推荐：function getType () &#123;   console.log('fetching type...') // set the default type to 'no type' const type = this.type || 'no type' return type&#125;// 注释行上面是一个块的顶部时不需要空行function getType () &#123;  // set the default type to 'no type' const type = this.type || 'no type'  return type&#125;不推荐：function getType () &#123;   console.log('fetching type...') // set the default type to 'no type' const type = this.type || 'no type' return type&#125;3.3.2 多行注释多行注释使用 /* … /，而不是多行的 //。推荐：/** * make() returns a new element * based on the passed-in tag name */function make (tag) &#123; // ... return element&#125;不推荐：// make() returns a new element// based on the passed in tag namefunction make (tag) &#123; // ... return element&#125;3.3.3 注释空格注释内容和注释符之间需要有一个空格，以增加可读性。eslint: spaced-comment。推荐：// is current tabconst active = true/** * make() returns a new element * based on the passed-in tag name */function make(tag) &#123;  // ... return element&#125;不推荐：//is current tabconst active = true/** *make() returns a new element *based on the passed-in tag name */function make(tag) &#123;  // ... return element&#125;3.3.4 特殊标记有时我们发现某个可能的 bug，但因为一些原因还没法修复；或者某个地方还有一些待完成的功能，这时我们需要使用相应的特殊标记注释来告知未来的自己或合作者。常用的特殊标记有两种：// FIXME : 说明问题是什么// TODO : 说明还要做什么或者问题的解决方案class Calculator extends Abacus &#123;  constructor () &#123; super () // FIXME: shouldn’t use a global here      total = 0 // TODO: total should be configurable by an options param this.total = 0 &#125;&#125;3.3.5 文档类注释文档类注释，如函数、类、文件、事件等；都使用 jsdoc 规范。/** * Book类，代表一个书本. * @constructor * @param &#123;string&#125; title - 书本的标题. * @param &#123;string&#125; author - 书本的作者. */function Book (title, author) &#123; this.title = title this.author = author&#125;Book.prototype = &#123; /**   * 获取书本的标题   * @returns &#123;string|*&#125;   */  getTitle: function () &#123; return this.title &#125;, /**   * 设置书本的页数   * @param pageNum &#123;number&#125; 页数   */  setPageNum: function (pageNum) &#123; this.pageNum=pageNum &#125;&#125;3.3.6 注释工具ESLint 是当下最流行的 JS 代码检查工具，ESLint 中有一些注释相关的规则，用户可选择开启：valid-jsdocrequire-jsdocno-warning-commentscapitalized-commentsline-comment-positionlines-around-commentmultiline-comment-styleno-inline-commentsspaced-comment四、其它缩进换行请使用两个空格。大型团队多人协作项目推荐 JavaScript 代码末尾加分号。小型个人创新练手项目可尝试使用 JavaScript 代码末尾不加分号的风格，更加清爽简练。发布设置添加封面添加文章封面图片上传格式支持 JPEG、JPG、PNG投稿至问题未选择创作声明无声明*文章话题添加话题发布设置字数：22448Markdown 语法识别中草稿保存中…预览发布&#123;"fetchRoot":&#123;"www":"https:\u002F\u002Fwww.zhihu.com","api":"https:\u002F\u002Fapi.zhihu.com","lens":"https:\u002F\u002Flens.zhihu.com","zhuanlan":"https:\u002F\u002Fzhuanlan.zhihu.com\u002Fapi\u002F","walletpay":"https:\u002F\u002Fwalletpay.zhihu.com","captcha":"https:\u002F\u002Fcaptcha.zhihu.com","vzuu":"https:\u002F\u002Fv.vzuu.com","openapi":"https:\u002F\u002Fopenapi.zhihu.com","svip":"https:\u002F\u002Fsvip.zhihu.com"&#125;,"host":"zhihu.com","protocol":"https:","wwwHost":"www.zhihu.com","videoHost":"video.zhihu.com","zhuanlanHost":"zhuanlan.zhihu.com","allowSignUp":true,"refreshValidityPeriod":"30","release":"966-eb94742e","currentEntry":"column","isMobileEntry":false,"apollo":&#123;"env":"prod","globalSilence":"","ncgModeSign":"3f8e56febda4fb3bbea72e379d76de1e","topstory_rec_adp":"1","editor_adapt_native":"0","content_publish_pin":"1","test_canary":"member|0-100,1-0","use_new_player":"member|0-0,1-100","player_vendor":"member|0-0,1-100,2-0","use_hevc":"member|0-0,1-100","upload_use_signature":"member|0-0,1-100","use_backdrop_blur":"member|0-0,1-100","article_title_imagex":"member|0-0,1-100","play_station":"member|0-0,1-100","contentItem_cover_imagex":"member|0-50,1-50"&#125;&#125;&#123;"initialState":&#123;"common":&#123;"ask":&#123;&#125;&#125;,"loading":&#123;"global":&#123;"count":0&#125;,"local":&#123;"env\u002FgetIpinfo\u002F":false&#125;&#125;,"entities":&#123;"users":&#123;"0f89728969245f477116bc433d5d0ad0":&#123;"uid":1663655962757169200,"userType":"people","id":"0f89728969245f477116bc433d5d0ad0"&#125;&#125;,"questions":&#123;&#125;,"answers":&#123;&#125;,"articles":&#123;&#125;,"columns":&#123;&#125;,"topics":&#123;&#125;,"roundtables":&#123;&#125;,"favlists":&#123;&#125;,"comments":&#123;&#125;,"notifications":&#123;&#125;,"ebooks":&#123;&#125;,"activities":&#123;&#125;,"feeds":&#123;&#125;,"pins":&#123;&#125;,"promotions":&#123;&#125;,"drafts":&#123;&#125;,"chats":&#123;&#125;,"posts":&#123;&#125;,"zvideos":&#123;&#125;,"zvideoContributions":&#123;&#125;,"briefs":&#123;&#125;,"eduCourses":&#123;&#125;&#125;,"currentUser":"0f89728969245f477116bc433d5d0ad0","account":&#123;"unlockTicketStatus":false,"unlockTicket":null,"challenge":[],"errorStatus":false,"message":"","isFetching":false,"accountInfo":&#123;&#125;,"urlToken":&#123;"loading":false&#125;,"cardUserInfo":&#123;"vipInfo":&#123;&#125;&#125;,"handleWidget":&#123;&#125;,"widgetList":[],"userWidgetId":""&#125;,"settings":&#123;"socialBind":null,"inboxMsg":null,"notification":&#123;&#125;,"email":&#123;&#125;,"privacyFlag":null,"blockedUsers":&#123;"isFetching":false,"paging":&#123;"pageNo":1,"pageSize":6&#125;,"data":[]&#125;,"blockedFollowees":&#123;"isFetching":false,"paging":&#123;"pageNo":1,"pageSize":6&#125;,"data":[]&#125;,"ignoredTopics":&#123;"isFetching":false,"paging":&#123;"pageNo":1,"pageSize":6&#125;,"data":[]&#125;,"restrictedTopics":null,"laboratory":&#123;&#125;&#125;,"notification":&#123;&#125;,"people":&#123;"profileStatus":&#123;&#125;,"activitiesByUser":&#123;&#125;,"answersByUser":&#123;&#125;,"answersSortByVotesByUser":&#123;&#125;,"answersIncludedByUser":&#123;&#125;,"votedAnswersByUser":&#123;&#125;,"thankedAnswersByUser":&#123;&#125;,"voteAnswersByUser":&#123;&#125;,"thankAnswersByUser":&#123;&#125;,"topicAnswersByUser":&#123;&#125;,"zvideosByUser":&#123;&#125;,"articlesByUser":&#123;&#125;,"articlesSortByVotesByUser":&#123;&#125;,"articlesIncludedByUser":&#123;&#125;,"pinsByUser":&#123;&#125;,"questionsByUser":&#123;&#125;,"commercialQuestionsByUser":&#123;&#125;,"favlistsByUser":&#123;&#125;,"followingByUser":&#123;&#125;,"followersByUser":&#123;&#125;,"mutualsByUser":&#123;&#125;,"followingColumnsByUser":&#123;&#125;,"followingQuestionsByUser":&#123;&#125;,"followingFavlistsByUser":&#123;&#125;,"followingTopicsByUser":&#123;&#125;,"publicationsByUser":&#123;&#125;,"columnsByUser":&#123;&#125;,"allFavlistsByUser":&#123;&#125;,"brands":null,"creationsByUser":&#123;&#125;,"creationsSortByVotesByUser":&#123;&#125;,"creationsFeed":&#123;&#125;,"infinity":&#123;&#125;,"batchUsers":&#123;&#125;,"profileInfinity":null&#125;,"env":&#123;"ab":&#123;"config":&#123;"params":[],"experiments":[],"chains":[],"encodedParams":"CgInBxIBAA=="&#125;,"triggers":&#123;&#125;&#125;,"abV2":&#123;"config":&#123;"paramMap":&#123;"pc_mou_cre_remove":&#123;"value":"1","abId":"rl-mou_create_remove-1"&#125;,"in_editor_title":&#123;"value":"1","abId":"rl-pineditor_title-1"&#125;,"ws_pin_contentpub":&#123;"value":"0"&#125;,"pm_noanonymity_A":&#123;"value":"1","abId":"rl-Noanonymity_B-1"&#125;,"ws_platform_new":&#123;"value":"1","abId":"author_platform-1"&#125;,"ws_pre_guess_his":&#123;"value":"0","abId":"pre_guess_his-0"&#125;&#125;,"abMap":&#123;"rl-mou_create_remove-1":&#123;"abId":"rl-mou_create_remove-1","layerId":"rl-mou_create_remove","diversionType":2&#125;,"rl-pineditor_title-1":&#123;"abId":"rl-pineditor_title-1","layerId":"rl-pineditor_title","diversionType":2&#125;,"rl-Noanonymity_B-1":&#123;"abId":"rl-Noanonymity_B-1","layerId":"rl-Noanonymity_B","diversionType":2&#125;,"author_platform-1":&#123;"abId":"author_platform-1","layerId":"author_platform_layer","diversionType":2&#125;,"pre_guess_his-0":&#123;"abId":"pre_guess_his-0","layerId":"web_standard_domain_layer17","diversionType":2&#125;&#125;&#125;,"triggers":&#123;&#125;&#125;,"userAgent":&#123;"Edge":false,"IE":false,"Wechat":false,"Weibo":false,"QQ":false,"MQQBrowser":false,"Qzone":false,"Mobile":false,"Android":false,"iOS":false,"isAppleDevice":false,"Zhihu":false,"ZhihuHybrid":false,"isBot":false,"Tablet":false,"UC":false,"Quark":false,"Sogou":false,"Qihoo":false,"Baidu":false,"BaiduApp":false,"Safari":false,"GoogleBot":false,"AndroidDaily":false,"iOSDaily":false,"WxMiniProgram":false,"BaiduMiniProgram":false,"QQMiniProgram":false,"JDMiniProgram":false,"isWebView":false,"isMiniProgram":false,"origin":"Mozilla\u002F5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\u002F537.36 (KHTML, like Gecko) Chrome\u002F116.0.0.0 Safari\u002F537.36 Edg\u002F116.0.1938.69"&#125;,"appViewConfig":&#123;&#125;,"ctx":&#123;"path":"\u002Fwrite","query":&#123;&#125;,"href":"http:\u002F\u002Fzhuanlan.zhihu.com\u002Fwrite","host":"zhuanlan.zhihu.com"&#125;,"trafficSource":"production","edition":&#123;"beijing":true,"baidu":false,"sogou":false,"baiduBeijing":false,"sogouBeijing":false,"sogouInput":false,"oppoSearch":false,"baiduSearch":false,"googleSearch":false,"shenma":false,"miniProgram":false,"xiaomi":false,"huaweiSearch":false&#125;,"theme":"light","appHeaderTheme":&#123;"current":"normal","disable":true,"normal":&#123;"bgColor":"GBK99A"&#125;,"custom":&#123;"bgColor":"GBK99A"&#125;&#125;,"enableShortcut":true,"referer":"https:\u002F\u002Fzhuanlan.zhihu.com\u002Fp\u002F638330080","xUDId":"AIBYIoHZzhWPTkVTA6nmsrVXlj4iL5-g4dk=","mode":"ssr","conf":&#123;&#125;,"xTrafficFreeOrigin":"","ipInfo":&#123;"cityName":"北京","countryName":"中国","regionName":"北京","countryCode":"CN"&#125;,"logged":true,"vars":&#123;"passThroughHeaders":&#123;&#125;&#125;&#125;,"me":&#123;"columnContributions":[]&#125;,"label":&#123;&#125;,"ecommerce":&#123;&#125;,"comments":&#123;"pagination":&#123;&#125;,"collapsed":&#123;&#125;,"reverse":&#123;&#125;,"reviewing":&#123;&#125;,"conversation":&#123;&#125;,"parent":&#123;&#125;&#125;,"commentsV2":&#123;"stickers":[],"commentWithPicPermission":&#123;&#125;,"notificationsComments":&#123;&#125;,"pagination":&#123;&#125;,"collapsed":&#123;&#125;,"reverse":&#123;&#125;,"reviewing":&#123;&#125;,"conversation":&#123;&#125;,"conversationMore":&#123;&#125;,"parent":&#123;&#125;&#125;,"pushNotifications":&#123;"default":&#123;"isFetching":false,"isDrained":false,"ids":[]&#125;,"follow":&#123;"isFetching":false,"isDrained":false,"ids":[]&#125;,"vote_thank":&#123;"isFetching":false,"isDrained":false,"ids":[]&#125;,"currentTab":"default","notificationsCount":&#123;"default":0,"follow":0,"vote_thank":0&#125;&#125;,"messages":&#123;"data":&#123;&#125;,"currentTab":"common","messageCount":0&#125;,"register":&#123;"registerValidateSucceeded":null,"registerValidateErrors":&#123;&#125;,"registerConfirmError":null,"sendDigitsError":null,"registerConfirmSucceeded":null&#125;,"login":&#123;"loginUnregisteredError":false,"loginBindWechatError":false,"loginConfirmError":null,"sendDigitsError":null,"needSMSIdentify":false,"validateDigitsError":false,"loginConfirmSucceeded":null,"qrcodeLoginToken":"","qrcodeLoginScanStatus":0,"qrcodeLoginError":null,"qrcodeLoginReturnNewToken":false&#125;,"switches":&#123;&#125;,"captcha":&#123;"captchaNeeded":false,"captchaValidated":false&#125;,"sms":&#123;"supportedCountries":[]&#125;,"chat":&#123;"chats":&#123;&#125;,"inbox":&#123;"recents":&#123;"isFetching":false,"isDrained":false,"isPrevDrained":false,"result":[],"next":null,"key":null&#125;,"strangers":&#123;"isFetching":false,"isDrained":false,"isPrevDrained":false,"result":[],"next":null,"key":null&#125;,"friends":&#123;"isFetching":false,"isDrained":false,"isPrevDrained":false,"result":[],"next":null,"key":null&#125;,"search":&#123;"isFetching":false,"isDrained":false,"isPrevDrained":false,"result":[],"next":null,"key":null&#125;,"config":&#123;"newCount":0,"strangerMessageSwitch":false,"strangerMessageUnread":false,"friendCount":0&#125;&#125;,"global":&#123;"isChatMqttExisted":false&#125;&#125;,"emoticons":&#123;"emoticonGroupList":[],"emoticonGroupDetail":&#123;&#125;&#125;,"creator":&#123;"tools":&#123;"question":&#123;"invitationCount":&#123;"questionFolloweeCount":0,"questionTotalCount":0&#125;&#125;,"recommend":&#123;"recommendTimes":&#123;&#125;&#125;&#125;,"explore":&#123;&#125;,"levelUpperLimit":10,"mcn":&#123;&#125;,"mcnManage":&#123;&#125;,"tasks":&#123;&#125;,"announcement":&#123;&#125;,"creatorsRecommendInfo":&#123;&#125;&#125;,"creators":&#123;"common":&#123;"applyStatus":&#123;&#125;,"rightsStatus":&#123;&#125;&#125;,"bayesDomains":&#123;"status":&#123;&#125;,"options":&#123;"topDomains":null,"allDomains":null,"editable":0&#125;,"contents":null&#125;,"school":&#123;"tabs":[],"contents":[],"banner":null,"entities":&#123;&#125;&#125;,"faq":&#123;"tabs":[],"article":&#123;&#125;&#125;,"knowledgeIncome":&#123;&#125;,"safeguardRights":&#123;&#125;,"analytics":&#123;"all":&#123;&#125;,"answer":&#123;&#125;,"zvideo":&#123;&#125;,"article":&#123;&#125;,"pin":&#123;&#125;,"singleContent":&#123;&#125;&#125;,"account":&#123;"growthLevel":&#123;&#125;&#125;,"KMResource":&#123;&#125;,"training":&#123;&#125;,"ToolsQuestion":&#123;"goodatTopics":[]&#125;,"ToolsHotspot":&#123;"domains":[]&#125;,"ToolsRecommend":&#123;&#125;,"ToolsCustomPromotion":&#123;"itemLists":&#123;&#125;,"baseInfo":&#123;&#125;&#125;,"ToolsSearchQuestion":&#123;&#125;,"editorSetting":&#123;&#125;,"MCNManage":&#123;&#125;,"knowledgeTasks":&#123;&#125;,"incomeAnalysis":&#123;"income":&#123;"aggregation":&#123;&#125;&#125;&#125;,"creationManage":&#123;"editModal":&#123;"status":false&#125;&#125;,"activity":&#123;&#125;,"announcement":&#123;&#125;,"home":&#123;"currentCreatorUrlToken":null,"rights":[],"newRights":[],"scoreInfo":&#123;&#125;,"menusShowControlByServer":&#123;"bVipRecomend":false,"creationRelationship":false&#125;,"newTasks":&#123;"creatorTask":&#123;"tasks":[],"des":[]&#125;&#125;,"bannerList":[],"recentlyCreated":[],"homecard":&#123;&#125;&#125;,"videoSupport":&#123;"textBenefit":&#123;&#125;&#125;,"videoDistribution":&#123;&#125;,"profilePoster":&#123;"creatorPosterConfig":&#123;&#125;,"creatorPosterData":&#123;&#125;&#125;&#125;,"answers":&#123;"voters":&#123;&#125;,"copyrightApplicants":&#123;&#125;,"favlists":&#123;&#125;,"newAnswer":&#123;&#125;,"entityWords":&#123;&#125;,"concernedUpvoters":&#123;&#125;,"simpleConcernedUpvoters":&#123;&#125;,"paidContent":&#123;&#125;,"settings":&#123;&#125;&#125;,"recommendation":&#123;"homeRecommendations":[]&#125;,"shareTexts":&#123;&#125;,"articles":&#123;"voters":&#123;&#125;,"concernedUpvoters":&#123;&#125;&#125;,"previewPost":&#123;&#125;,"favlists":&#123;"relations":&#123;&#125;&#125;,"columns":&#123;"voters":&#123;&#125;&#125;,"reward":&#123;"answer":&#123;&#125;,"article":&#123;&#125;,"question":&#123;&#125;&#125;,"video":&#123;"data":&#123;&#125;,"shareVideoDetail":&#123;&#125;,"last":&#123;&#125;&#125;,"topstory":&#123;"recommend":&#123;"isFetching":false,"isDrained":false,"afterId":0,"items":[],"next":null&#125;,"follow":&#123;"isFetching":false,"isDrained":false,"afterId":0,"items":[],"next":null&#125;,"followWonderful":&#123;"isFetching":false,"isDrained":false,"afterId":0,"items":[],"next":null&#125;,"sidebar":null,"announcement":&#123;&#125;,"hotList":[],"guestFeeds":&#123;"isFetching":false,"isDrained":false,"afterId":0,"items":[],"next":null&#125;,"followExtra":&#123;"isNewUser":null,"isFetched":false,"followCount":0,"followers":[]&#125;,"hotDaily":&#123;"data":[],"paging":&#123;&#125;&#125;,"hotHighlight":&#123;"isFetching":false,"isDrained":false,"data":[],"paging":&#123;&#125;&#125;,"banner":&#123;&#125;,"commercialBanner":&#123;"show":false,"banner":&#123;&#125;,"trackData":&#123;&#125;&#125;,"video":&#123;"items":[],"next":null,"isLoading":false,"isDrained":false&#125;&#125;,"readStatus":&#123;&#125;,"column":&#123;&#125;,"requestColumn":&#123;"categories":[],"error":null&#125;,"articleContribution":&#123;"contributeRequests":[],"deleteContributeIdList":[],"handledContributeIdList":[],"recommendedColumns":[],"pinnedColumns":[],"sentContributeRequestsIdList":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]&#125;,"columnContribution":&#123;"contributeRequests":[],"autoInviteEnabled":false,"recommendedContributors":[],"contributionInvitation":null&#125;,"draftHistory":&#123;"history":&#123;&#125;,"drafts":&#123;&#125;&#125;,"upload":&#123;&#125;,"articleDraft":&#123;"titleImage":"","titleImageSize":&#123;&#125;,"isTitleImageFullScreen":false,"canTitleImageFullScreen":false,"title":"","titleImageUploading":false,"error":"","content":"","draftLoading":false,"updating":false,"globalLoading":false,"pendingVideo":&#123;"resource":null,"error":null&#125;,"deleteFail":&#123;"fail":false&#125;,"recommendTopics":[],"selectedColumn":0,"articleDisclaimers":[]&#125;,"articleDrafts":&#123;"isDrained":false,"isLoading":false,"items":[]&#125;,"columnAutocomplete":&#123;"users":[],"friends":[]&#125;,"columnCollection":&#123;&#125;,"userProfit":&#123;"permission":&#123;"permissionStatus":&#123;"zhiZixuan":0,"recommend":-1,"task":0,"plugin":0,"infinity":0&#125;,"visible":false&#125;,"linkCardLimit":0&#125;,"mcn":&#123;"bindInfo":&#123;&#125;,"memberCategoryList":[],"producerList":[],"categoryList":[],"lists":&#123;&#125;,"banners":&#123;&#125;,"protocolStatus":&#123;"isAgreedNew":true,"isAgreedOld":true&#125;,"probationCountdownDays":0&#125;,"zvideos":&#123;"campaignVideoList":&#123;&#125;,"campaigns":&#123;&#125;,"tagoreCategory":[],"recommendations":&#123;&#125;,"insertable":&#123;&#125;,"recruit":&#123;"form":&#123;"platform":"","nickname":"","followerCount":"","domain":"","contact":""&#125;,"submited":false,"ranking":[]&#125;,"qyActivityData":&#123;&#125;,"talkActivityData":&#123;&#125;,"party2022ActivityData":&#123;&#125;,"batchVideos":&#123;&#125;,"contribution":&#123;"selectedContribution":null,"campaign":null,"configs":&#123;&#125;,"contributionLists":&#123;&#125;,"recommendQuestions":&#123;"isLoading":true,"paging":&#123;"isEnd":false,"isStart":true,"totals":0&#125;,"data":[]&#125;,"questionSearchResults":&#123;"isLoading":true,"paging":&#123;"isEnd":false,"isStart":true,"totals":0&#125;,"data":[]&#125;&#125;,"creationReferences":&#123;&#125;,"zvideoCollection":&#123;&#125;,"zvideoGrant":&#123;&#125;,"collectData":&#123;"isFetching":false,"list":[]&#125;,"videoSource":&#123;"isLoaded":false&#125;&#125;,"republish":&#123;&#125;,"commentPermission":&#123;&#125;,"creatorRightStatus":&#123;"list":[]&#125;,"adPromotion":&#123;"answer":&#123;&#125;,"article":&#123;&#125;&#125;&#125;,"fetchHost":"www.zhihu.com","subAppName":"column","spanName":"WritePage","canaryConfig":&#123;"test_canary":"0","use_new_player":"1","player_vendor":"1","use_hevc":"1","upload_use_signature":"1","use_backdrop_blur":"1","article_title_imagex":"1","play_station":"1"&#125;&#125;想来知乎工作？请发送邮件到 jobs@zhihu.comF-8";/** * @desc File Info * @author Author Name * @date 2015-10-10 */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-JavaScript-文件注释"><a href="#3-3-JavaScript-文件注释" class="headerlink" title="3.3 JavaScript 文件注释"></a>3.3 JavaScript 文件注释</h2><h3 id="3-3-1-单行注释"><a href="#3-3-1-单行注释" class="headerlink" title="3.3.1 单行注释"></a>3.3.1 单行注释</h3><p>单行注释使用 &#x2F;&#x2F;，注释应单独一行写在被注释对象的上方，不要追加在某条语句的后面。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">// is current tabconst active = true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">const active = true // is current tab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注释行的上方需要有一个空行（除非注释行上方是一个块的顶部），以增加可读性。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">function getType () &#123;   console.log('fetching type...') // set the default type to 'no type' const type = this.type || 'no type' return type&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">// 注释行上面是一个块的顶部时不需要空行function getType () &#123;  // set the default type to 'no type' const type = this.type || 'no type'  return type&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">function getType () &#123;   console.log('fetching type...') // set the default type to 'no type' const type = this.type || 'no type' return type&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-2-多行注释"><a href="#3-3-2-多行注释" class="headerlink" title="3.3.2 多行注释"></a>3.3.2 多行注释</h3><p>多行注释使用 &#x2F;** …* &#x2F;，而不是多行的 &#x2F;&#x2F;。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">/** * make() returns a new element * based on the passed-in tag name */function make (tag) &#123; // ... return element&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">// make() returns a new element// based on the passed in tag namefunction make (tag) &#123; // ... return element&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-3-注释空格"><a href="#3-3-3-注释空格" class="headerlink" title="3.3.3 注释空格"></a>3.3.3 注释空格</h3><p>注释内容和注释符之间需要有一个空格，以增加可读性。eslint: spaced-comment。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">// is current tabconst active = true/** * make() returns a new element * based on the passed-in tag name */function make(tag) &#123;  // ... return element&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">//is current tabconst active = true/** *make() returns a new element *based on the passed-in tag name */function make(tag) &#123;  // ... return element&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-4-特殊标记"><a href="#3-3-4-特殊标记" class="headerlink" title="3.3.4 特殊标记"></a>3.3.4 特殊标记</h3><p>有时我们发现某个可能的 bug，但因为一些原因还没法修复；或者某个地方还有一些待完成的功能，这时我们需要使用相应的特殊标记注释来告知未来的自己或合作者。常用的特殊标记有两种：</p><ul><li>&#x2F;&#x2F; FIXME : 说明问题是什么</li><li>&#x2F;&#x2F; TODO : 说明还要做什么或者问题的解决方案</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">class Calculator extends Abacus &#123;  constructor () &#123; super () // FIXME: shouldn’t use a global here      total = 0 // TODO: total should be configurable by an options param this.total = 0 &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-5-文档类注释"><a href="#3-3-5-文档类注释" class="headerlink" title="3.3.5 文档类注释"></a>3.3.5 文档类注释</h3><p>文档类注释，如函数、类、文件、事件等；都使用 jsdoc 规范。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">/** * Book类，代表一个书本. * @constructor * @param &#123;string&#125; title - 书本的标题. * @param &#123;string&#125; author - 书本的作者. */function Book (title, author) &#123; this.title = title this.author = author&#125;Book.prototype = &#123; /**   * 获取书本的标题   * @returns &#123;string|*&#125;   */  getTitle: function () &#123; return this.title &#125;, /**   * 设置书本的页数   * @param pageNum &#123;number&#125; 页数   */  setPageNum: function (pageNum) &#123; this.pageNum=pageNum &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-6-注释工具"><a href="#3-3-6-注释工具" class="headerlink" title="3.3.6 注释工具"></a>3.3.6 注释工具</h3><p>ESLint 是当下最流行的 JS 代码检查工具，ESLint 中有一些注释相关的规则，用户可选择开启：</p><ul><li>valid-jsdoc</li><li>require-jsdoc</li><li>no-warning-comments</li><li>capitalized-comments</li><li>line-comment-position</li><li>lines-around-comment</li><li>multiline-comment-style</li><li>no-inline-comments</li><li>spaced-comment</li></ul><h1 id="四、其它"><a href="#四、其它" class="headerlink" title="四、其它"></a>四、其它</h1><ul><li>缩进换行请使用两个空格。</li><li>大型团队多人协作项目推荐 JavaScript 代码末尾加分号。</li><li>小型个人创新练手项目可尝试使用 JavaScript 代码末尾不加分号的风格，更加清爽简练。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="New-Post"><a href="#New-Post" class="headerlink" title="New Post"></a>New Post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new post <span class="token parameter variable">-p</span> maven/一、Maven介绍 <span class="token string">"Maven"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
