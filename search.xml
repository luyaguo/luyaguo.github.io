<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>post</title>
      <link href="/2024/07/06/maven/%E4%B8%83%E3%80%81Maven%E7%A7%81%E6%9C%8D/"/>
      <url>/2024/07/06/maven/%E4%B8%83%E3%80%81Maven%E7%A7%81%E6%9C%8D/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>六、Maven配置</title>
      <link href="/2024/07/06/maven/%E5%85%AD%E3%80%81Maven%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/07/06/maven/%E5%85%AD%E3%80%81Maven%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="六、Maven配置"><a href="#六、Maven配置" class="headerlink" title="六、Maven配置"></a>六、Maven配置</h1><h2 id="9-properties-介绍"><a href="#9-properties-介绍" class="headerlink" title="9 properties 介绍"></a>9 properties 介绍</h2><ul><li>可以理解成定义的版本变量</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--可以理解成定义的版本变量--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit_version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit_version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--junit--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;junit_version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--引入版本变量--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hamcrest-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hamcrest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-DependencyManagement-与-PluginManagement-介绍"><a href="#10-DependencyManagement-与-PluginManagement-介绍" class="headerlink" title="10 DependencyManagement 与 PluginManagement 介绍"></a>10 DependencyManagement 与 PluginManagement 介绍</h2><h3 id="DependencyManagement"><a href="#DependencyManagement" class="headerlink" title="DependencyManagement"></a>DependencyManagement</h3><p>dependencyManagement 一般统一在父模块中进行声明，使用：其实相当于一个对所有依赖 Jar 包进行版本管理统一声明管理，但父模块中只是声明，并不真导入。</p><h4 id="parent-pom-xml"><a href="#parent-pom-xml" class="headerlink" title="parent&#x2F;pom.xml"></a>parent&#x2F;pom.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-beanutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-beanutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="child-pom-xml"><a href="#child-pom-xml" class="headerlink" title="child&#x2F;pom.xml"></a>child&#x2F;pom.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.wanhe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-beanutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-beanutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>pluginManagement 理解同 dependencyManagement</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、Maven聚合与继承</title>
      <link href="/2024/07/06/maven/%E4%BA%94%E3%80%81Maven%E8%81%9A%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF/"/>
      <url>/2024/07/06/maven/%E4%BA%94%E3%80%81Maven%E8%81%9A%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="五、Maven聚合与继承"><a href="#五、Maven聚合与继承" class="headerlink" title="五、Maven聚合与继承"></a>五、Maven聚合与继承</h1><h2 id="1、聚合"><a href="#1、聚合" class="headerlink" title="1、聚合"></a>1、聚合</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>my-app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 模块设置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>my-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 打包方式必须为pom方式--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设在HoictasStudio-MavenParent模块中添如以上代码，输入<code>clean install</code>命令后，即可同时安装多个Jar到本地仓库中</p><pre class="line-numbers language-none"><code class="language-none">[INFO] HoictasStudio-MavenDemo01 ...SUCCESS [  4.618 s][INFO] HoictasStudio-MavenDemo02 ...SUCCESS [  0.828 s][INFO] HoictasStudio-MavenDemo03 ...SUCCESS [  0.923 s][INFO] HoictasStudio-MavenParent ...SUCCESS [  0.021 s]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、继承"><a href="#2、继承" class="headerlink" title="2、继承"></a>2、继承</h2><p>子模块可以继承父模块的内容</p><h3 id="2-1-语法示例"><a href="#2-1-语法示例" class="headerlink" title="2.1 语法示例"></a>2.1 语法示例</h3><p>那么，我们需要<code>my-module</code>去继承<code>my-app</code>，则需要在<code>my-module</code>的pom文件中添加以下代码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>my-app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>my-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、Maven依赖</title>
      <link href="/2024/07/06/maven/%E5%9B%9B%E3%80%81Maven%E4%BE%9D%E8%B5%96/"/>
      <url>/2024/07/06/maven/%E5%9B%9B%E3%80%81Maven%E4%BE%9D%E8%B5%96/</url>
      
        <content type="html"><![CDATA[<h1 id="四、Maven依赖"><a href="#四、Maven依赖" class="headerlink" title="四、Maven依赖"></a>四、Maven依赖</h1><h2 id="1、依赖管理"><a href="#1、依赖管理" class="headerlink" title="1、依赖管理"></a>1、依赖管理</h2><h3 id="1-1-什么是依赖？"><a href="#1-1-什么是依赖？" class="headerlink" title="1.1 什么是依赖？"></a>1.1 什么是依赖？</h3><p>一个 Java 项目可能要使用一些第三方的 Jar 包才可以运行，那么我们说这个 Java 项目依赖了这些第三方的 Jar 包。比如项目依赖 lombok、mysql。</p><h3 id="1-2-什么是依赖管理？"><a href="#1-2-什么是依赖管理？" class="headerlink" title="1.2 什么是依赖管理？"></a>1.2 什么是依赖管理？</h3><ul><li>就是对项目所有依赖，进行规范化管理，通过 GAV 坐标。全网唯一的 GAV 坐标，决定使用哪一个 Jar 包。</li><li>依赖管理一般放在 pom.xml 文件中。</li></ul><h3 id="1-3-添加依赖"><a href="#1-3-添加依赖" class="headerlink" title="1.3 添加依赖"></a>1.3 添加依赖</h3><p>在pom.xml中添加dependency标签，如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>&lt;/dependency<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐</span> <span class="token attr-name">添加junit4.9依赖</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-查找坐标"><a href="#1-4-查找坐标" class="headerlink" title="1.4 查找坐标"></a>1.4 查找坐标</h3><p>添加依赖需要指定依赖 Jar 包的坐标，但是很多情况我们是不知道 Jar 包的的坐标，可以通过如下方式查询： </p><h4 id="方法一：从互联网搜索"><a href="#方法一：从互联网搜索" class="headerlink" title="方法一：从互联网搜索"></a>方法一：从互联网搜索</h4><p><a href="http://search.maven.org/">http://search.Maven.org/</a></p><h4 id="方法二：从中央仓库搜索"><a href="#方法二：从中央仓库搜索" class="headerlink" title="方法二：从中央仓库搜索"></a>方法二：从中央仓库搜索</h4><p><a href="http://mvnrepository.com/">http://mvnrepository.com/</a></p><p>网站搜索示例：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061818895.png" alt="38"></p><h2 id="2、传递依赖"><a href="#2、传递依赖" class="headerlink" title="2、传递依赖"></a>2、传递依赖</h2><h3 id="2-1-什么是传递依赖？"><a href="#2-1-什么是传递依赖？" class="headerlink" title="2.1 什么是传递依赖？"></a>2.1 什么是传递依赖？</h3><p>当 A 依赖 B、B 依赖 C，在 A 中导入 B 后会自动导入 C，C 是 A 的传递依赖。</p><p>举例 : junit-&gt;hmcrest</p><h3 id="2-2-依赖范围对传递依赖的影响（了解）"><a href="#2-2-依赖范围对传递依赖的影响（了解）" class="headerlink" title="2.2 依赖范围对传递依赖的影响（了解）"></a>2.2 依赖范围对传递依赖的影响（了解）</h3><p>依赖会有依赖范围，依赖范围对传递依赖也有影响，有 A、B、C，A 依赖B，B 依赖 C，C 可能是 A 的传递依赖，如下图：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061815428.png" alt="39"></p><p>最左边一列为直接依赖，理解为A依赖B的范围，最顶层一行为传递依赖，理解为B依赖C的范围，行与列的交叉即为A传递依赖C的范围。</p><p>举例：</p><p>比如 A 对 B 有 compile 依赖，B 对 C 有 runtime 依赖，那么根据表格所示 A 对 C 有 runtime 依赖。测试 dao 依赖 junit，scope 为 test，service 依赖 dao.</p><p>查看下图红色框内所示传递依赖范围：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061822174.png" alt="40"></p><p>所以 Maven-ﬁrst 所依赖的 junit 的 Jar 没有加入到 Maven-web 工程。</p><p>如果修改 Maven-ﬁrst 依赖 junit 的 scope 为 compile，Maven-ﬁrst所依赖的junit 的 Jar 包会加入到 Maven-web 工程 中，符合上边表格所示，查看下图红色框内所示：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061822234.png" alt="41"></p><h2 id="3、依赖冲突"><a href="#3、依赖冲突" class="headerlink" title="3、依赖冲突"></a>3、依赖冲突</h2><h3 id="3-0-什么是传递依赖？"><a href="#3-0-什么是传递依赖？" class="headerlink" title="3.0 什么是传递依赖？"></a>3.0 什么是传递依赖？</h3><ul><li>当 A 依赖 B、B 依赖 C（v1.0），</li><li>当 A 依赖 M、M 依赖 C (v2.0)</li></ul><p>同时加入以下依赖，观察依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐</span> <span class="token attr-name">struts2‐spring‐plugin</span> <span class="token attr-name">依赖</span> <span class="token attr-name">spirng‐beans‐3.0.5</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.struts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>struts2‐spring‐plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐</span> <span class="token attr-name">spring‐context</span> <span class="token attr-name">依赖</span> <span class="token attr-name">spring‐beans‐4.2.4</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring‐context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：系统将导入 spring-beans-3.0.5</p><h3 id="3-1-依赖调解原则"><a href="#3-1-依赖调解原则" class="headerlink" title="3.1 依赖调解原则"></a>3.1 依赖调解原则</h3><p>Maven 自动按照下边的原则调解：</p><h4 id="第一声明者优先原则"><a href="#第一声明者优先原则" class="headerlink" title="第一声明者优先原则"></a>第一声明者优先原则</h4><p>在 pom 文件定义依赖，先声明的依赖为准。</p><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>如果将上边 struts-spring-plugins 和 spring-context 顺序颠倒，系统将导入 spring-beans-4.2.4。 </p><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>由于 spring-context 在前边以 spring-context 依赖的 spring-beans-4.2.4 为准，所以最终 spring-beans-4.2.4 添加到了工程中。</p><h4 id="路径近者优先原则"><a href="#路径近者优先原则" class="headerlink" title="路径近者优先原则"></a>路径近者优先原则</h4><p>A 依赖 spirng-beans-4.2.4，A 依赖 B 依赖 spirng-beans-3.0.5，则 spring-beans-4.2.4 优先被依赖在 A 中，因为spring-beans-4.2.4 相对spirng-beans-3.0.5 被 A 依赖的路径最近。</p><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><p>在本工程中的pom中加入spirng-beans-4.2.4的依赖，根据路径近者优先原则，系统将导入spirng-beans-4.2.4：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring‐beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-排除依赖"><a href="#3-2-排除依赖" class="headerlink" title="3.2 排除依赖"></a>3.2 排除依赖</h3><p>上边的问题也可以通过排除依赖方法辅助依赖调解，如下：</p><p>比如在依赖 struts2-spring-plugin 的设置中添加排除依赖，排除 spring-beans，下边的配置表示：依赖 struts2-spring-plugin，但排除 struts2-spring-plugin 所依赖的 spring-beans。</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;!‐‐ struts2‐spring‐plugin 依赖 spirng‐beans‐3.0.5 ‐‐&gt;&lt;dependency&gt;  &lt;groupId&gt;org.apache.struts&lt;&#x2F;groupId&gt;  &lt;artifactId&gt;struts2‐spring‐plugin&lt;&#x2F;artifactId&gt;  &lt;version&gt;2.3.24&lt;&#x2F;version&gt;  &lt;!‐‐ 排除 spring‐beans ‐‐&gt;  &lt;exclusions&gt;      &lt;exclusion&gt;          &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;          &lt;artifactId&gt;spring‐beans&lt;&#x2F;artifactId&gt;      &lt;&#x2F;exclusion&gt;      &lt;exclusion&gt;          &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;          &lt;artifactId&gt;spring‐context&lt;&#x2F;artifactId&gt;      &lt;&#x2F;exclusion&gt;  &lt;&#x2F;exclusions&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、锁定版本"><a href="#4、锁定版本" class="headerlink" title="4、锁定版本"></a>4、锁定版本</h2><p>面对众多的依赖，有一种方法不用考虑依赖路径、声明优化等因素可以采用直接锁定版本的方法确定依赖构件的版本，版本锁定后则不考虑依赖的声明顺序或依赖的路径，以锁定的版本的为准添加到工程中，此方法在企业开发中常用。</p><p>如下的配置是锁定了 spring-beans 和 spring-context 的版本：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐这里锁定版本为</span> <span class="token attr-name">4.2.4</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring‐beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring‐context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：在工程中锁定依赖的版本并不代表在工程中添加了依赖，如果工程需要添加锁定版本的依赖则需要单独添加<code>&lt;dependencies&gt;&lt;/dependencies&gt;</code>标签</strong>，如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐这里是添加依赖</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring‐beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring‐context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上边添加的依赖并没有指定版本，原因是已在<code>&lt;dependencyManagement</code>中锁定了版本，所以在<code>&lt;dependency&gt;</code> 下不需要再指定版本。</p><h2 id="5、依赖范围"><a href="#5、依赖范围" class="headerlink" title="5、依赖范围"></a>5、依赖范围</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>Maven 提供了 6 种可选依赖范围:</p><ul><li><strong>compile</strong>：编译范围，指A在编译时依赖B，此范围为默认依赖范围。编译范围的依赖会用在编译、测试、运 行，由于运行时需要所以编译范围的依赖会被打包。</li><li><strong>provided</strong>：provided依赖只有在当JDK或者一个容器已提供该依赖之后才使用， provided依赖在编译和测试时需要，在运行时不需要，比如：servlet api被tomcat容器提供。</li><li><strong>runtime</strong>：runtime依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如：jdbc的驱动包。由于 运行时需要所以runtime范围的依赖会被打包。</li><li><strong>test</strong>：test范围依赖 在编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用，比如：junit。由于运行时不需要所以test范围依赖不会被打包。</li><li><strong>system</strong>：system范围依赖与provided类似，但是你必须显式的提供一个对于本地系统中Jar文件的路径，需 要指定systemPath磁盘路径，system依赖不推荐使用。</li><li><strong>import</strong>: 导入范围，他只是用在 dependencyManagement 中，表示从其他的 pom 中导入 dependecy 的配置。（以下引用官网案例并不难理解。）</li></ul><p><img src="/medias/loading.gif" data-original="E:\mycode\maven-guo\Maven\Maven笔记\img\42.png" alt="42"></p><p>在 Maven-web 工程中测试各各 scope。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>默认引入 的Jar包——- compile 【默认范围 可以不写】（编译、测试、运行 都有效 ）</li><li>servlet-api 、jsp-api——- provided （编译、测试 有效， 运行时无效 防止和tomcat下Jar冲突）</li><li>jdbc驱动Jar包—- runtime （测试、运行 有效 ）</li><li>junit—– test （测试有效）</li><li>依赖范围由强到弱的顺序是：<code>compile&gt;provided&gt;runtime&gt;test</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2024/07/06/maven/Maven/"/>
      <url>/2024/07/06/maven/Maven/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2024/07/06/python/Python/"/>
      <url>/2024/07/06/python/Python/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>十七、Python模块</title>
      <link href="/2024/07/05/python/%E5%8D%81%E4%B8%83%E3%80%81Python%E6%A8%A1%E5%9D%97/"/>
      <url>/2024/07/05/python/%E5%8D%81%E4%B8%83%E3%80%81Python%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="十七、Python模块"><a href="#十七、Python模块" class="headerlink" title="十七、Python模块"></a>十七、Python模块</h1><h2 id="1、模块简介"><a href="#1、模块简介" class="headerlink" title="1、模块简介"></a>1、模块简介</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在模块中，我们不但可以直接存放变量，还能存放函数，还能存放类。不知道你们还有没有印象，我们封装函数用的是 <code>def</code> , 封装类用的是 <code>class</code> 。而我们封装模块，是不需要任何语句的。</p><p><strong>在 Python 中，一个 .py 文件就称之为一个模块（Module）。</strong></p><p>其实模块就是函数功能的扩展。因为模块其实就是实现一项或多项功能的程序块。</p><h3 id="Why-Need？"><a href="#Why-Need？" class="headerlink" title="Why Need？"></a>Why Need？</h3><p>然有了函数，那为啥那需要模块？</p><ul><li>最大的好处是大大提高了代码的可维护性。</li><li>当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括 Python 内置的模块和来自第三方的模块。</li><li>使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中。</li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>Python 本身就内置了很多非常有用的模块，只要安装完毕，这些模块就可以立刻使用。比如我的 Python 安装目录是默认的安装目录，在 D:\python\Lib，然后找到 Lib 目录，就可以发现里面<code>.py</code> 文件就是模块了。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407042229580.png" alt="image-20240704222957360"></p><p>模块可以分为标准库模块和自定义模块，Lib 目录下的都是标准库模块。</p><h2 id="2、模块使用"><a href="#2、模块使用" class="headerlink" title="2、模块使用"></a>2、模块使用</h2><ul><li>模块 就好比是 工具包，要想使用这个工具包中的工具，就需要 导入 import 这个模块</li><li>每一个以扩展名 py 结尾的 python 源代码文件都是一个 模块</li><li>在模块中定义的 全局变量 、 函数 都是模块能够提供给外界直接使用的工具</li></ul><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>Python 模块的使用跟其他编程语言也是类似的。你要使用某个模块，在使用之前，必须要导入这个模块。导入模块我们使用关键字 <code>import</code>。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p><code>import</code> 的语法基本如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> module1<span class="token punctuation">[</span><span class="token punctuation">,</span> module2<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> moduleN<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如我们使用标准库模块中的 math 模块。当解释器遇到 <code>import</code> 语句，如果模块在当前的搜索路径就会被导入。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""3.141592653589793"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一个模块只会被导入一次，不管你执行了多少次 import。这样可以防止导入模块被一遍又一遍地执行。</p></blockquote><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>&#x3D;&#x3D;当我们使用 import 语句的时候，Python 解释器是怎样找到对应的文件的呢？&#x3D;&#x3D;</p><p>这就涉及到 Python 的搜索路径，搜索路径是由一系列目录名组成的，Python 解释器就依次从这些目录中去寻找所引入的模块。</p><p>搜索路径是在 Python 编译或安装的时候确定的，安装新的库应该也会修改。搜索路径被存储在 <code>sys</code> 模块中的 <code>path</code> 变量 。</p><p>因此，我们可以查一下路径：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""['D:\\python\\python37.zip', 'D:\\python\\DLLs', 'D:\\python\\lib', 'D:\\python', 'D:\\python\\lib\\site-packages', 'E:\\application\\pycharm\\PyCharm 2024.1.1\\plugins\\python\\helpers\\pycharm_matplotlib_backend']"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="from···import···"><a href="#from···import···" class="headerlink" title="from···import···"></a>from···import···</h3><p>直接导入某个模块中的属性和方法，我们可以使用 <code>from···import</code> 语句。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> modname <span class="token keyword">import</span> name1<span class="token punctuation">[</span><span class="token punctuation">,</span> name2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> nameN<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sys <span class="token keyword">import</span> path<span class="token keyword">print</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""['D:\\python\\python37.zip', 'D:\\python\\DLLs', 'D:\\python\\lib', 'D:\\python', 'D:\\python\\lib\\site-packages', 'E:\\application\\pycharm\\PyCharm 2024.1.1\\plugins\\python\\helpers\\pycharm_matplotlib_backend']"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="from-···-import"><a href="#from-···-import" class="headerlink" title="from ··· import *"></a>from ··· import *</h3><p><code>from ··· import *</code> 语句可以把某个模块中的所有方法属性都导入。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sys <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">print</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>executable<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""3.7.9 (tags/v3.7.9:13c94747c7, Aug 17 2020, 18:58:18) [MSC v.1900 64 bit (AMD64)]D:\python\python.exe"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：这提供了一个简单的方法来导入一个模块中的所有方法属性。然而这种声明不该被过多地使用。</p></blockquote><h2 id="3、主模块和非主模块"><a href="#3、主模块和非主模块" class="headerlink" title="3、主模块和非主模块"></a>3、主模块和非主模块</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>主模块：如果一个模块被直接使用，而没有被别人调用，我们称这个模块为主模块。</p><p>非主模：如果一个模块被别人调用，我们称这个模块为非主模块。</p><h3 id="name-属性"><a href="#name-属性" class="headerlink" title="name 属性"></a>name 属性</h3><p>在 Python 中，有主模块和非主模块之分，那么怎么区分主模块和非主模块呢？</p><p><code>__name__</code> 属性是系统给出的，利用这个变量可以判断一个模块是否是主模块。如果一个属性的值是 <code>__main__</code> ，那么就说明这个模块是主模块，反之亦然。</p><blockquote><p>注意：这个 <code>__main__</code> 属性只是帮助我们判断是否是主模块，并不是说这个属性决定他们是否是主模块，决定是否是主模块的条件只是这个模块有没有被人调用。</p></blockquote><p>具体看示例：</p><p>首先创建了模块 lname ，然后判断一下是否是主模块，如果是主模块就输出 <code>main</code> 不是，就输出 <code>not main</code> ，首先直接运行该模块，由于该模块是直接使用，而没有被人调用，所以是主模块，因此输出了 <code>main</code> ，具体看下图：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407042255874.png" alt="image-20240704225535645"></p><p>然后又创建一个 user_lname 模块，里面只是简单的导入了 lname 模块，然后执行，输出的结果是 <code>not main</code> ，因为 lname 模块被该模块调用了，所以不是主模块，输出结果如图：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407042256973.png" alt="image-20240704225618753"></p><h2 id="4、包"><a href="#4、包" class="headerlink" title="4、包"></a>4、包</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>相同名字的函数和变量完全可以分别存在不同的模块中，但是这里也有个问题，如果不同的人编写的模块名相同怎么办？</p><p>为了避免模块名冲突，Python 又引入了按目录来组织模块的方法，称为包（Package）。引入包就算有相同的模块名，也不会造成重复，因为包名不同，其实也就是路径不同。</p><p><strong>包是Python模块的一种组织形式，将多个模块组合在一起，形成一个大的Python工具库。包通常是一个拥有init.py文件的目录，它定义了包的属性和方法。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方式一</span><span class="token keyword">import</span> my_package<span class="token punctuation">.</span>my_math<span class="token comment"># 方式二</span><span class="token keyword">from</span> my_package <span class="token keyword">import</span> my_math<span class="token comment"># 方式三</span><span class="token keyword">from</span> my_package <span class="token keyword">import</span> <span class="token operator">*</span>result <span class="token operator">=</span> my_math<span class="token punctuation">.</span>total<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>my_card<span class="token punctuation">.</span>menu<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><p>如下图，引入了包名后， lname.py 其实变成了</p><p><code>com.Learn.module.nameattributes.lname</code></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407042300941.png" alt="image-20240704230052739"></p><p>每一个包目录下面都会有一个 <code>__init__.py</code> 的文件，为什么呢？</p><p>因为这个文件是必须的，否则，Python 就把这个目录当成普通目录，而不是一个包 。 <code>__init__.py</code> 可以是空文件，也可以有Python代码，因为 <code>__init__.py</code> 本身就是一个模块，而它对应的模块名就是它的包名。</p><h2 id="5、作用域"><a href="#5、作用域" class="headerlink" title="5、作用域"></a>5、作用域</h2><p>通过学习 Python 中的模块，其实和 Java 中的类相似，那么我们怎么实现在一个模块中，有的函数和变量给别人使用，有的函数和变量仅仅在模块内部使用呢？</p><p>在 Python 中，是通过 <code>_</code> 前缀来实现的。</p><p>正常的函数和变量名是公开的（public），可以被直接引用，比如：abc，ni12，PI等；类似<code>__xxx__</code>这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的 <code>__name__</code> 就是特殊变量，还有 <code>__author__</code> 也是特殊变量，用来标明作者。</p><p>注意，我们自己的变量一般不要用这种变量名；类似 <code>_xxx</code> 和 <code>__xxx</code> 这样的函数或变量就是非公开的（private），不应该被直接引用，比如 <code>_abc</code> ，<code>__abc</code> 等；</p><p><strong>这里是说不应该，而不是不能。因为 Python 种并没有一种方法可以完全限制访问 private 函数或变量，但是，从编程习惯上不应该引用 private 函数或变量。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_diamond_vip</span><span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'尊敬的钻石会员用户，您好'</span><span class="token punctuation">)</span>    vip_name <span class="token operator">=</span> <span class="token string">'DiamondVIP'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lv<span class="token punctuation">)</span>    <span class="token keyword">return</span> vip_name<span class="token keyword">def</span> <span class="token function">_gold_vip</span><span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'尊敬的黄金会员用户，您好'</span><span class="token punctuation">)</span>    vip_name <span class="token operator">=</span> <span class="token string">'GoldVIP'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lv<span class="token punctuation">)</span>    <span class="token keyword">return</span> vip_name<span class="token keyword">def</span> <span class="token function">vip_lv_name</span><span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> lv <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>_gold_vip<span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> lv <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>_diamond_vip<span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token punctuation">)</span>vip_lv_name<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""尊敬的钻石会员用户，您好DiamondVIP2"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个模块中，我们公开 <code>vip_lv_name</code> 方法函数，而其他内部的逻辑分别在 <code>_diamond_vip</code> 和 <code>_gold_vip</code> private 函数中实现，因为是内部实现逻辑，调用者根本不需要关心这个函数方法，它只需关心调用 <code>vip_lv_name</code> 的方法函数，所以用 private 是非常有用的代码封装和抽象的方法。</p><p>一般情况下，外部不需要引用的函数全部定义成 private，只有外部需要引用的函数才定义为 public。</p><h2 id="6、常见的标准库"><a href="#6、常见的标准库" class="headerlink" title="6、常见的标准库"></a>6、常见的标准库</h2><table><thead><tr><th>模块</th><th>用途</th></tr></thead><tbody><tr><td>os</td><td>os 模块提供了许多与操作系统交互的函数，例如创建、移动和删除文件和目录，以及访问环境变量等。</td></tr><tr><td>sys</td><td>sys 模块提供了与 Python 解释器和系统相关的功能，例如解释器的版本和路径，以及与 stdin、stdout 和 stderr 相关的信息。</td></tr><tr><td>time</td><td>time 模块提供了处理时间的函数，例如获取当前时间、格式化日期和时间、计时等。</td></tr><tr><td>datetime</td><td>datetime 模块提供了更高级的日期和时间处理函数，例如处理时区、计算时间差、计算日期差等。</td></tr><tr><td>random</td><td>random 模块提供了生成随机数的函数，例如生成随机整数、浮点数、序列等。</td></tr><tr><td>math</td><td>math 模块提供了数学函数，例如三角函数、对数函数、指数函数、常数等。</td></tr><tr><td>re</td><td>re 模块提供了正则表达式处理函数，可以用于文本搜索、替换、分割等。</td></tr><tr><td>json</td><td>json 模块提供了 JSON 编码和解码函数，可以将 Python 对象转换为 JSON 格式，并从 JSON 格式中解析出 Python 对象。</td></tr><tr><td>urllib</td><td>urllib 模块提供了访问网页和处理 URL 的功能，包括下载文件、发送 POST 请求、处理 cookies 等。</td></tr></tbody></table><h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><p>获取随机数，需要引入random库，<code>import random</code></p><table><thead><tr><th>函数名</th><th>函数说明</th></tr></thead><tbody><tr><td>randrange(start,stop,step)</td><td>start 指定范围的起始值 包含本身，默认是0；stop 指定范围的结束值 不包含本身； step 步长，默认步长是1。该函数返回一个整数</td></tr><tr><td>randint(start,end)</td><td>返回[start end]之间的一个随机整数，start必须小于end</td></tr><tr><td>random()</td><td>返回一个[0.0,1.0)之间的随机小数</td></tr><tr><td>choice(seq)</td><td>返回一个序列（列表、元组，字符串）中返回一个随机元素</td></tr><tr><td>shuffle(seq)</td><td>将序列元素随机排列（打乱顺序）</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token comment"># 生成随机小数</span>a <span class="token operator">=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment"># 生成随机整数</span>a <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment"># 获取列表中的随机元素</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token comment"># 随机整数</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 随机</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 打乱顺序</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""0.0076216726167549492422l[6, 4, 3, 5, 2, 1]"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="math"><a href="#math" class="headerlink" title="math"></a>math</h3><p>操作数字的运算，<code>import math</code></p><table><thead><tr><th>函数名</th><th>函数的说明</th><th>示例</th></tr></thead><tbody><tr><td>math.ceil()</td><td>向上取整</td><td>math.ceil(18.1) #19</td></tr><tr><td>math.floor()</td><td>向下取整</td><td>math.floor(18.1) #18</td></tr><tr><td>math.sqrt</td><td>求平方根</td><td>math.sqrt(100)</td></tr></tbody></table><h3 id="re"><a href="#re" class="headerlink" title="re"></a>re</h3><p>正则表达式处理，可以用于文本搜索、替换、分割等</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202407042351925.png" alt="image-20240704235144641"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment"># \d :数字</span><span class="token comment"># 检测字符串是否为纯数字的字符串</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r'\d+'</span><span class="token punctuation">,</span><span class="token string">'1234234234'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># \w:数字字母下划线</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r'\w+'</span><span class="token punctuation">,</span><span class="token string">'a*8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># \s:空白字符  \S 非空</span>result<span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r'^\s+$'</span><span class="token punctuation">,</span><span class="token string">'    '</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># . 任意字符</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r'^code\d-\d-.+$'</span><span class="token punctuation">,</span><span class="token string">'code5-2-random'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># []区间，可选列表</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r'^abc&#123;2,5&#125;$'</span><span class="token punctuation">,</span><span class="token string">'abcccccc'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># | 或者</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r'^a|b|c$'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""&lt;re.Match object; span=(0, 10), match='1234234234'>&lt;re.Match object; span=(0, 1), match='a'>&lt;re.Match object; span=(0, 4), match='    '>&lt;re.Match object; span=(0, 14), match='code5-2-random'>NoneNone"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="turtle"><a href="#turtle" class="headerlink" title="turtle"></a>turtle</h3><p>1969年诞生，Python语言的标准库之一，入门级的图形绘制函数库，它提供了一个海龟，你可以把它理解为一个机器人，只听得懂有限的指令，海龟走过的轨迹绘制成了图形。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>forward(d)&#x2F;fd(d)</td><td>向当前画笔方向移动d像素长度</td></tr><tr><td>backward(d)&#x2F;back(d)&#x2F;bk(d)</td><td>向当前画笔相反方向移动d像素长度</td></tr><tr><td>goto(x,y)&#x2F;setpos(x,y)&#x2F;setposition(x,y)</td><td>将画笔移动到坐标为x,y的位置</td></tr><tr><td>setx(x)</td><td>设置海龟的横坐标为 x，纵坐标保持不变</td></tr><tr><td>sety(y)</td><td>设置海龟的纵坐标为 y，横坐标保持不变</td></tr><tr><td>penup()&#x2F;up()</td><td>提起笔移动，不绘制图形，用于另起一个地方绘制</td></tr><tr><td>pendown()&#x2F;down()</td><td>放下笔，移动时绘制图形，缺省时也为绘制</td></tr><tr><td>right(degree)&#x2F;rt(degree)</td><td>顺时针移动degree°</td></tr><tr><td>left(degree)&#x2F;lt(degree)</td><td>逆时针移动degree°</td></tr><tr><td>setheading(angle)&#x2F;seth(angle)</td><td>设置海龟的朝向为 angle</td></tr><tr><td>circle(radius, extent&#x3D;None, steps&#x3D;None)</td><td>绘制圆弧</td></tr><tr><td>dot(radius,colorstr)</td><td>绘制一个指定直径和颜色的圆点</td></tr><tr><td>home()</td><td>设置当前画笔位置为原点，朝向东</td></tr></tbody></table><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p>time 模块提供了处理时间的函数，例如获取当前时间、格式化日期和时间、计时等。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timet <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 时间戳：1970年</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>t <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 结构化的时间</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>tm_year<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>tm_year<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 获取</span>s <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""1720108629.4128764time.struct_time(tm_year=2024, tm_mon=7, tm_mday=4, tm_hour=23, tm_min=57, tm_sec=9, tm_wday=3, tm_yday=186, tm_isdst=0)2024 &lt;class 'int'>2024-07-04 23:57:09"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、Maven初入门</title>
      <link href="/2024/07/04/maven/%E4%B8%89%E3%80%81Maven%E5%88%9D%E5%85%A5%E9%97%A8/"/>
      <url>/2024/07/04/maven/%E4%B8%89%E3%80%81Maven%E5%88%9D%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="三、Maven初入门"><a href="#三、Maven初入门" class="headerlink" title="三、Maven初入门"></a>三、Maven初入门</h1><h2 id="1、约定目录"><a href="#1、约定目录" class="headerlink" title="1、约定目录"></a>1、约定目录</h2><p>使用 Maven 创建的工程我们称它为 Maven 工程，Maven 工程具有一定的目录规范，如下：</p><ul><li><p>src&#x2F;main&#x2F;Java —— 存放项目的.Java文件</p><p>src&#x2F;main&#x2F;resources  —— 存放项目资源文件，如spring, hibernate配置文件</p><p>src&#x2F;test&#x2F;Java —— 存放所有单元测试.Java文件，如JUnit测试类</p><p>src&#x2F;test&#x2F;resources  —— 测试资源文件</p></li><li><p>pom.xml                     ——Maven项目核心配置文件Project</p></li></ul><h2 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h2><ul><li>命令行创建普通 Java 项目</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn archetype:generate <span class="token parameter variable">-DgroupId</span><span class="token operator">=</span>net.wanho <span class="token parameter variable">-DartifactId</span><span class="token operator">=</span>Javademo <span class="token parameter variable">-DarchetypeArtifactId</span><span class="token operator">=</span>Maven-archetype-quickstart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>命令行创建 JavaWeb 项目</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn archetype:generate <span class="token parameter variable">-DgroupId</span><span class="token operator">=</span>net.wanho <span class="token parameter variable">-DartifactId</span><span class="token operator">=</span>Javawebdemo <span class="token parameter variable">-DarchetypeArtifactId</span><span class="token operator">=</span>Maven-archetype-webapp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3、常用-Maven-命令"><a href="#3、常用-Maven-命令" class="headerlink" title="3、常用 Maven 命令"></a>3、常用 Maven 命令</h2><p>在 cmd 的状态下测试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn <span class="token parameter variable">-v</span> 查看 Maven 版本<span class="token parameter variable">-compile</span>编译<span class="token parameter variable">-test</span>测试<span class="token parameter variable">-package</span>打包<span class="token parameter variable">-clean</span>删除 target<span class="token parameter variable">-install</span>安装 Jar 包到本地仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-compile"><a href="#3-1-compile" class="headerlink" title="3.1 compile"></a>3.1 compile</h3><p><strong>compile 是 Maven 工程的编译命令，作用是将 src&#x2F;main&#x2F;Java 下的文件编译为 class 文件输出到 target 目录下。</strong></p><p>cmd 进入命令状态，执行 mvn compile，如下图提示成功：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407040008558.png" alt="14"></p><p>查看 target目录，class文件已生成，编译完成。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407040008409.jpg" alt="15"></p><h3 id="3-2-test"><a href="#3-2-test" class="headerlink" title="3.2 test"></a>3.2 test</h3><p>test 是 Maven 工程的测试命令，会执行 src&#x2F;test&#x2F;Java 下的单元测试类。</p><p>cmd 执行 mvn test 执行 src&#x2F;test&#x2F;Java 下单元测试类，下图为测试结果，运行1个测试用例，全部成功。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407040008893.png" alt="16"></p><h3 id="3-3-clean"><a href="#3-3-clean" class="headerlink" title="3.3 clean"></a>3.3 clean</h3><p>clean 是 Maven 工程的清理命令，执行 clean 会删除 target 目录的内容。</p><h3 id="3-4-package"><a href="#3-4-package" class="headerlink" title="3.4 package"></a>3.4 package</h3><p><strong>package 是 Maven 工程的打包命令，对于 Java 工程执行 package 打成 Jar 包，对于 web 工程打成 war 包。</strong></p><h3 id="3-5-install"><a href="#3-5-install" class="headerlink" title="3.5 install"></a>3.5 install</h3><p><strong>install 是 Maven 工程的安装命令，执行 install 将 Maven 打成 Jar 包或 war 包发布到本地仓库。</strong></p><h2 id="4、生命周期-了解"><a href="#4、生命周期-了解" class="headerlink" title="4、生命周期(了解)"></a>4、生命周期(了解)</h2><h3 id="4-1-三套生命周期"><a href="#4-1-三套生命周期" class="headerlink" title="4.1 三套生命周期"></a>4.1 三套生命周期</h3><p>Maven 对项目构建过程分为三套相互独立的生命周期，请注意这里说的是“三套”，而且“相互独立”，这三套生命周期分别是：</p><ul><li>Clean Lifecycle 在进行真正的构建之前进行一些清理工作。</li><li>Default Lifecycle 构建的核心部分，编译，测试，打包，部署等等。</li><li>Site Lifecycle 生成项目报告，站点，发布站点。</li></ul><p>完整的项目构建过程包括： 清理、编译、测试、打包、集成测试、验证、部署</p><h3 id="4-2-Maven三套独立的生命周期"><a href="#4-2-Maven三套独立的生命周期" class="headerlink" title="4.2 Maven三套独立的生命周期"></a>4.2 Maven三套独立的生命周期</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clean 清理项目    <span class="token number">1</span>.pre-clean执行清理前的工作    <span class="token number">2</span>.clean清理上一次构建生成的所有文件    <span class="token number">3</span>.post-clean 执行清理后的文件default 构建项目（最核心）    compile <span class="token builtin class-name">test</span> package <span class="token function">install</span>site 生成项目站点    <span class="token number">1</span>. pre-site 在生成项目站点前要完成的工作    <span class="token number">2</span>. site 生成项目的站点文档    <span class="token number">3</span>. post-site在生成项目站点后要完成的工作    <span class="token number">4</span>. site-deploy发布生成的站点到服务器上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-命令与生命周期的阶段"><a href="#4-3-命令与生命周期的阶段" class="headerlink" title="4.3 命令与生命周期的阶段"></a>4.3 命令与生命周期的阶段</h3><p>每个 Maven 命令对应生命周期的某个阶段，例如：mvn clean 命令对应clean生命周期的clean阶段， mvn test 命令对应default 生命周期的 test 阶段。</p><p>执行命令会将该命令在的在生命周期当中之前的阶段自动执行，比如：执行 mvn clean 命令会自动执行 pre-clean 和clean 两个阶段，mvn test 命令会自动执行 validate、compile、test 等阶段。</p><p>注意：执行某个生命周期的某个阶段不会影响其它的生命周期！</p><p>如果要同时执行多个生命周期的阶段可在命令行输入多个命令，中间以空格隔开，例如：</p><p>clean package 该命令执行 clean 生命周期的 clean 阶段和 default 生命周期的 package 阶段。</p><h2 id="5、Maven-的概念模型-了解"><a href="#5、Maven-的概念模型-了解" class="headerlink" title="5、Maven 的概念模型(了解)"></a>5、Maven 的概念模型(了解)</h2><p>Maven 包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个项目生命周期(Project Lifecycle)， 一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin) 目标(goal)的逻辑。</p><p>下图是Maven的概念模型图：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407040014277.jpg"></p><h3 id="项目对象模型-Project-Object-Model"><a href="#项目对象模型-Project-Object-Model" class="headerlink" title="项目对象模型 (Project Object Model)"></a>项目对象模型 (Project Object Model)</h3><p>一个Maven工程都有一个pom.xml文件，通过pom.xml文件定义项目的坐标、项目依赖、项目信息、插件目标 等。</p><h3 id="依赖管理系统-Dependency-Management-System"><a href="#依赖管理系统-Dependency-Management-System" class="headerlink" title="依赖管理系统(Dependency Management System)"></a>依赖管理系统(Dependency Management System)</h3><p>通过Maven的依赖管理对项目所依赖的Jar 包进行统一管理。</p><p>比如：项目依赖junit4.9，通过在pom.xml中定义junit4.9的依赖即使用junit4.9，如下所示是junit4.9的依赖定义：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐</span> <span class="token attr-name">依赖关系</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐</span> <span class="token attr-name">此项目运行使用junit，所以此项目依赖junit</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐</span> <span class="token attr-name">junit的组织名称</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐</span> <span class="token attr-name">junit的模块名称</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐</span> <span class="token attr-name">junit版本</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐</span> <span class="token attr-name">依赖范围：单元测试时使用junit</span> <span class="token attr-name">‐‐</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一个项目生命周期-Project-Lifecycle"><a href="#一个项目生命周期-Project-Lifecycle" class="headerlink" title="一个项目生命周期(Project Lifecycle)"></a>一个项目生命周期(Project Lifecycle)</h3><p>使用Maven完成项目的构建，项目构建包括：清理、编译、测试、部署等过程，Maven 将这些过程规范为一个生命周期，如下所示是生命周期的各个阶段：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407040015482.png"></p><p>Maven 通过执行一些简单命令即可实现上边生命周期的各个过程，比如执行 mvn compile 执行编译、执行mvn clean执行清理。</p><h3 id="一组标准集合"><a href="#一组标准集合" class="headerlink" title="一组标准集合"></a>一组标准集合</h3><p>Maven 将整个项目管理过程定义一组标准，比如：通过 Maven 构建工程有标准的目录结构，有标准的生命周期阶段、依赖管理有标准的坐标定义等。</p><h3 id="插件-plugin-目标-goal"><a href="#插件-plugin-目标-goal" class="headerlink" title="插件(plugin)目标(goal)"></a>插件(plugin)目标(goal)</h3><p>Maven 管理项目生命周期过程都是基于插件完成的。</p>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十六、Python装饰器</title>
      <link href="/2024/07/03/python/%E5%8D%81%E5%85%AD%E3%80%81Python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2024/07/03/python/%E5%8D%81%E5%85%AD%E3%80%81Python%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="十六、Python装饰器"><a href="#十六、Python装饰器" class="headerlink" title="十六、Python装饰器"></a>十六、Python装饰器</h1><h2 id="装饰器概念"><a href="#装饰器概念" class="headerlink" title="装饰器概念"></a>装饰器概念</h2><p>Python 语言中，装饰器是“<strong>用一个函数装饰另外一个函数并为其提供额外的能力</strong>”的语法现象。</p><p>装饰器本身是一个函数，它的参数是被装饰的函数，它的返回值是一个带有装饰功能的函数。</p><p>装饰器是一个高阶函数，它的参数和返回值都是函数。</p><h2 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>假设有名为<code>downlaod</code>和<code>upload</code>的两个函数，分别用于文件的上传和下载，如下所示：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import randomimport timedef download(filename):    &quot;&quot;&quot;下载文件&quot;&quot;&quot;    print(f&#39;开始下载&#123;filename&#125;.&#39;)    time.sleep(random.random() * 6)    print(f&#39;&#123;filename&#125;下载完成.&#39;)    def upload(filename):    &quot;&quot;&quot;上传文件&quot;&quot;&quot;    print(f&#39;开始上传&#123;filename&#125;.&#39;)    time.sleep(random.random() * 8)    print(f&#39;&#123;filename&#125;上传完成.&#39;)    download(&#39;MySQL从删库到跑路.avi&#39;)upload(&#39;Python从入门到住院.pdf&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>现在有一个新的需求，我们希望知道调用<code>download</code>和<code>upload</code>函数上传下载文件到底用了多少时间，这应该如何实现呢？</p><h3 id="实现一"><a href="#实现一" class="headerlink" title="实现一"></a>实现一</h3><p>相信很多小伙伴已经想到了，我们可以在函数开始执行的时候记录一个时间，在函数调用结束后记录一个时间，两个时间相减就可以计算出下载或上传的时间，代码如下所示：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">start &#x3D; time.time()download(&#39;MySQL从删库到跑路.avi&#39;)end &#x3D; time.time()print(f&#39;花费时间: &#123;end - start:.2f&#125;秒&#39;)start &#x3D; time.time()upload(&#39;Python从入门到住院.pdf&#39;)end &#x3D; time.time()print(f&#39;花费时间: &#123;end - start:.2f&#125;秒&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面记录时间、计算和显示执行时间的代码都是重复代码。<strong>重复的代码是万恶之源</strong>，那么有没有办法在不写重复代码的前提下，用一种简单优雅的方式记录下函数的执行时间呢？</p><h3 id="实现二"><a href="#实现二" class="headerlink" title="实现二"></a>实现二</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>在 Python 语言中，装饰器就是解决这类问题的最佳选择。</p><p>通过装饰器语法，我们可以把跟原来的业务（上传和下载）没有关系计时功能的代码封装到一个函数中，如果<code>upload</code>和<code>download</code>函数需要记录时间，我们直接把装饰器作用到这两个函数上即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">record_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>              result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>                <span class="token keyword">return</span> result          <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>record_time</code>函数的参数<code>func</code>代表了一个被装饰的函数</li><li>函数里面定义的<code>wrapper</code>函数是带有装饰功能的函数，它会执行被装饰的函数<code>func</code>，它还需要返回在最后产生函数执行的返回值。</li><li>上面的代码我在第4行和第6行留下了两个空行，这意味着我们可以这些地方添加代码来实现额外的功能。</li><li><code>record_time</code>函数最终会返回这个带有装饰功能的函数<code>wrapper</code>并通过它替代原函数<code>func</code>，当原函数<code>func</code>被<code>record_time</code>函数装饰后，我们调用它时其实调用的是<code>wrapper</code>函数，所以才获得了额外的能力。</li><li>由于我们要用<code>wrapper</code>替代原函数<code>func</code>，但是我们又不清楚原函数<code>func</code>会接受哪些参数，所以我们就通过可变参数和关键字参数照单全收，然后在调用<code>func</code>的时候，原封不动的全部给它。</li><li>强调一下：Python 语言支持函数的嵌套定义，我们可以在<code>record_time</code>函数中定义<code>wrapper</code>函数，这个操作在很多编程语言中并不被支持。</li></ul><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>看懂这个结构后，我们就可以把记录时间的功能写到这个装饰器中，代码如下所示。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import timedef record_time(func):    def wrapper(*args, **kwargs):        # 在执行被装饰的函数之前记录开始时间        start &#x3D; time.time()        # 执行被装饰的函数并获取返回值        result &#x3D; func(*args, **kwargs)        # 在执行被装饰的函数之后记录结束时间        end &#x3D; time.time()        # 计算和显示被装饰函数的执行时间        print(f&#39;&#123;func.__name__&#125;执行时间: &#123;end - start:.2f&#125;秒&#39;)        # 返回被装饰函数的返回值        return result        return wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>使用上面的装饰器函数有两种方式，第一种方式就是直接调用装饰器函数，传入被装饰的函数并获得返回值。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># 第一步download &#x3D; record_time(download)upload &#x3D; record_time(upload)# 第二步download(&#39;MySQL从删库到跑路.avi&#39;)upload(&#39;Python从入门到住院.pdf&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>在 Python 中，使用装饰器很有更为便捷的<strong>语法糖</strong>，可以用 <code>@装饰器函数</code> 将装饰器函数直接放在被装饰的函数上，效果跟上面的代码相同。</p><p>我们把完整的代码为大家罗列出来，大家可以再看看我们是如何定义和使用装饰器的。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import randomimport timedef record_time(func):    def wrapper(*args, **kwargs):        start &#x3D; time.time()        result &#x3D; func(*args, **kwargs)        end &#x3D; time.time()        print(f&#39;&#123;func.__name__&#125;执行时间: &#123;end - start:.2f&#125;秒&#39;)        return result    return wrapper@record_timedef download(filename):    print(f&#39;开始下载&#123;filename&#125;.&#39;)    time.sleep(random.random() * 6)    print(f&#39;&#123;filename&#125;下载完成.&#39;)@record_timedef upload(filename):    print(f&#39;开始上传&#123;filename&#125;.&#39;)    time.sleep(random.random() * 8)    print(f&#39;&#123;filename&#125;上传完成.&#39;)download(&#39;MySQL从删库到跑路.avi&#39;)upload(&#39;Python从入门到住院.pdf&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码，我们通过装饰器语法糖为<code>download</code>和<code>upload</code>函数添加了装饰器，被装饰后的<code>download</code>和<code>upload</code>函数其实就是我们在装饰器中返回的<code>wrapper</code>函数，调用它们其实就是在调用<code>wrapper</code>函数，所以才有了记录函数执行时间的功能。</p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>如果在代码的某些地方，我们想去掉装饰器的作用执行原函数，那么在定义装饰器函数的时候，需要做一点点额外的工作。</p><p>Python 标准库<code>functools</code>模块的<code>wraps</code>函数也是一个装饰器，我们将它放在<code>wrapper</code>函数上，这个装饰器可以帮我们保留被装饰之前的函数，这样在需要取消装饰器时，可以通过被装饰函数的<code>__wrapped__</code>属性获得被装饰之前的函数。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import randomimport timefrom functools import wrapsdef record_time(func):      @wraps(func)    def wrapper(*args, **kwargs):        start &#x3D; time.time()        result &#x3D; func(*args, **kwargs)        end &#x3D; time.time()        print(f&#39;&#123;func.__name__&#125;执行时间: &#123;end - start:.2f&#125;秒&#39;)        return result    return wrapper@record_timedef download(filename):    print(f&#39;开始下载&#123;filename&#125;.&#39;)    time.sleep(random.random() * 6)    print(f&#39;&#123;filename&#125;下载完成.&#39;)@record_timedef upload(filename):    print(f&#39;开始上传&#123;filename&#125;.&#39;)    time.sleep(random.random() * 8)    print(f&#39;&#123;filename&#125;上传完成.&#39;)# 调用装饰后的函数会记录执行时间download(&#39;MySQL从删库到跑路.avi&#39;)upload(&#39;Python从入门到住院.pdf&#39;)# 取消装饰器的作用不记录执行时间download.__wrapped__(&#39;MySQL必知必会.pdf&#39;)upload.__wrapped__(&#39;Python从新手到大师.pdf&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>装饰器函数本身也可以参数化</strong>，简单的说就是装饰器也是可以通过调用者传入的参数来进行定制的，这个知识点我们在后面用到的时候再为大家讲解。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十五、Python函数应用</title>
      <link href="/2024/07/03/python/%E5%8D%81%E4%BA%94%E3%80%81Python%E5%87%BD%E6%95%B0%E5%BA%94%E7%94%A8/"/>
      <url>/2024/07/03/python/%E5%8D%81%E4%BA%94%E3%80%81Python%E5%87%BD%E6%95%B0%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="十五、Python函数应用"><a href="#十五、Python函数应用" class="headerlink" title="十五、Python函数应用"></a>十五、Python函数应用</h1><h2 id="1、随机验证码"><a href="#1、随机验证码" class="headerlink" title="1、随机验证码"></a>1、随机验证码</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>设计一个生成随机验证码的函数，验证码由数字和英文大小写字母构成，长度可以通过参数设置。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> stringALL_CHARS <span class="token operator">=</span> string<span class="token punctuation">.</span>digits <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_letters<span class="token triple-quoted-string string">"""生成指定长度的验证码:param code_len: 验证码的长度(默认4个字符)"""</span><span class="token keyword">def</span> <span class="token function">generate_code</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> code_len<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 由大小写英文字母和数字构成的随机验证码字符串</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choices<span class="token punctuation">(</span>ALL_CHARS<span class="token punctuation">,</span> k<span class="token operator">=</span>code_len<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong>说明1</strong>：<code>string</code>模块的<code>digits</code>代表0到9的数字构成的字符串<code>&#39;0123456789&#39;</code>，<code>string</code>模块的<code>ascii_letters</code>代表大小写英文字母构成的字符串：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>说明2</strong>：<code>random</code>模块的<code>sample</code>和<code>choices</code>函数都可以实现随机抽样，</p><ul><li><code>sample</code>实现无放回抽样，这意味着抽样取出的元素是不重复的；</li><li><code>choices</code>实现有放回抽样，这意味着可能会重复选中某些元素。</li></ul><p>这两个函数的第一个参数代表抽样的总体，而参数<code>k</code>代表样本容量，需要说明的是<code>choices</code>函数的参数<code>k</code>是一个命名关键字参数，在传参时必须指定参数名。</p><p><strong>说明3</strong>：</p><p>可以用下面的代码生成5组随机验证码来测试上面的函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>generate_code<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token triple-quoted-string string">"""59tZQKU5izq8IBBbjIfX"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>generate_code<span class="token punctuation">(</span>code_len<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""FxJucwHS4H9G0yyXfzx7fohfReO22w"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明</strong>：我们设计的<code>generate_code</code>函数的参数是命名关键字参数，由于它有默认值，可以不给它传值，使用默认值4。如果需要给函数传入参数，必须指定参数名<code>code_len</code>。</p><h2 id="2、质数判断"><a href="#2、质数判断" class="headerlink" title="2、质数判断"></a>2、质数判断</h2><h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><p>设计一个判断给定的大于1的正整数是不是质数的函数。质数是只能被1和自身整除的正整数（大于1），如果一个大于1的正整数$N$是质数，那就意味着在2到$N-1$之间都没有它的因子。</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""    判断一个正整数是不是质数    :param num: 大于1的正整数    :return: 如果num是质数返回True，否则返回False"""</span><span class="token keyword">def</span> <span class="token function">is_prime</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p><strong>说明1</strong>：</p><ul><li><code>is_prime</code>函数的参数<code>num</code>后面的<code>: int</code>用来标注参数的类型，虽然它对代码的执行结果不产生任何影响，但是很好的增强了代码的可读性。</li><li>参数列表后面的<code>-&gt; bool</code>用来标注函数返回值的类型，它也不会对代码的执行结果产生影响，但是却让我们清楚的知道，调用函数会得到一个布尔值，要么是<code>True</code>，要么是<code>False</code>。</li></ul><p><strong>说明2</strong>：上面的循环并不需要从2循环到$\small{N-1}$，因为如果循环进行到$\small{\sqrt{N}}$时，还没有找到$\small{N}$的因子，那么$\small{\sqrt{N}}$之后也不会出现$\small{N}$的因子，大家可以自己想一想这是为什么。</p><h2 id="3、最大公约数和最小公倍数"><a href="#3、最大公约数和最小公倍数" class="headerlink" title="3、最大公约数和最小公倍数"></a>3、最大公约数和最小公倍数</h2><h3 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h3><p>设计计算两个正整数最大公约数和最小公倍数的函数。$x$和$y$的最大公约数是能够同时整除$x$和$y$的最大整数，如果$x$和$y$互质，那么它们的最大公约数为1；$x$和$y$的最小公倍数是能够同时被$x$和$y$整除的最小正整数，如果$x$和$y$互质，那么它们的最小公倍数为$x \times y$。</p><p>需要提醒大家注意的是，计算最大公约数和最小公倍数是两个不同的功能，应该设计成两个函数，而不是把两个功能放到同一个函数中。</p><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""求最小公倍数"""</span><span class="token keyword">def</span> <span class="token function">lcm</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> y <span class="token operator">//</span> gcd<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""求最大公约数"""</span><span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> y <span class="token operator">%</span> x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> y <span class="token operator">%</span> x<span class="token punctuation">,</span> x    <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p><strong>说明1</strong>：函数之间可以相互调用，上面求最小公倍数的<code>lcm</code>函数就调用了求最大公约数的<code>gcd</code>函数，通过$\frac{x \times y}{ gcd(x, y)}$来计算最小公倍数。</p><p><strong>说明2</strong>：上面的<code>gcd</code>函数使用了欧几里得算法计算最大公约数，欧几里得算法也称为辗转相除法，这个算法通常有更好的执行效率，不了解的小伙伴可以自行科普。</p><h2 id="4、计算样本数据统计信息"><a href="#4、计算样本数据统计信息" class="headerlink" title="4、计算样本数据统计信息"></a>4、计算样本数据统计信息</h2><h3 id="需求-3"><a href="#需求-3" class="headerlink" title="需求"></a>需求</h3><p>假设样本数据保存一个列表中，设计计算样本数据描述性统计信息的函数。描述性统计信息通常包括：算术平均值、中位数、极差（最大值和最小值的差）、方差、标准差、变异系数等，计算公式如下所示：</p><p>样本均值（sample mean）：<br>$$<br>\bar{x} &#x3D; \frac{\sum_{i&#x3D;1}^{n}x_{i}}{n} &#x3D; \frac{x_{1}+x_{2}+\cdots +x_{n}}{n}<br>$$<br>样本方差（sample variance）：<br>$$<br>s^2 &#x3D; \frac {\sum_{i&#x3D;1}^{n}(x_i - \bar{x})^2} {n-1}<br>$$<br>样本标准差（sample standard deviation）：<br>$$<br>s &#x3D; \sqrt{\frac{\sum_{i&#x3D;1}^{n}(x_i - \bar{x})^2}{n-1}}<br>$$<br>变异系数（coefficient of sample variation）：<br>$$<br>CV &#x3D; \frac{s}{\bar{x}}<br>$$</p><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">ptp</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""极差（全距）"""</span>    <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">min</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">mean</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""算术平均"""</span>    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">median</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""中位数"""</span>    temp<span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">if</span> size <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> temp<span class="token punctuation">[</span>size <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> mean<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>size <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>size <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">var</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> ddof<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""方差"""</span>    x_bar <span class="token operator">=</span> mean<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>num <span class="token operator">-</span> x_bar<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> data<span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">-</span> ddof<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">std</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> ddof<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""标准差"""</span>    <span class="token keyword">return</span> var<span class="token punctuation">(</span>data<span class="token punctuation">,</span> ddof<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span><span class="token keyword">def</span> <span class="token function">cv</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> ddof<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""变异系数"""</span>    <span class="token keyword">return</span> std<span class="token punctuation">(</span>data<span class="token punctuation">,</span> ddof<span class="token punctuation">)</span> <span class="token operator">/</span> mean<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">describe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""输出描述性统计信息"""</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'均值: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>mean<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'中位数: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>median<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'极差: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>ptp<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'方差: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>var<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'标准差: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>std<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'变异系数: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>cv<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p><strong>说明1</strong>：中位数是将数据按照升序或降序排列后位于中间的数，它描述了数据的中等水平。中位数的计算分两种情况：当数据体量$n$为奇数时，中位数是位于$\frac{n + 1}{2}$位置的元素；当数据体量$n$为偶数时，中位数是位于$\frac{n}{2}$和$\frac{n}{2} + 1$两个位置元素的均值。</p><p><strong>说明2</strong>：计算方差和标准差的函数中有一个名为<code>ddof</code>的参数，它代表了可以调整的自由度，默认值为1。在计算样本方差和样本标准差时，需要进行自由度校正；如果要计算总体方差和总体标准差，可以将<code>ddof</code>参数赋值为0，即不需要进行自由度校正。</p><p><strong>说明3</strong>：<code>describe</code>函数将上面封装好的统计函数组装到一起，用于输出数据的描述性统计信息。事实上，Python 标准库中有一个名为<code>statistics</code>的模块，它已经把获取描述性统计信息的函数封装好了，有兴趣的读者可以自行了解。</p><h2 id="5、双色球"><a href="#5、双色球" class="headerlink" title="5、双色球"></a>5、双色球</h2><p>我们用函数重构之前讲过的双色球随机选号的例子（《第09课：常用数据结构之列表-2》），将生成随机号码和输出一组号码的功能分别封装到两个函数中，然后通过调用函数实现机选<code>N</code>注号码的功能。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""双色球随机选号程序Author: 骆昊Version: 1.3"""</span><span class="token keyword">import</span> randomRED_BALLS <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">]</span>BLUE_BALLS <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    生成一组随机号码    :return: 保存随机号码的列表    """</span>    selected_balls <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>RED_BALLS<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>    selected_balls<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    selected_balls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>BLUE_BALLS<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> selected_balls<span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>balls<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    格式输出一组号码    :param balls: 保存随机号码的列表    """</span>    <span class="token keyword">for</span> ball <span class="token keyword">in</span> balls<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'\033[031m</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ball<span class="token punctuation">:</span><span class="token format-spec">0>2d</span><span class="token punctuation">&#125;</span></span><span class="token string">\033[0m'</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'\033[034m</span><span class="token interpolation"><span class="token punctuation">&#123;</span>balls<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token format-spec">0>2d</span><span class="token punctuation">&#125;</span></span><span class="token string">\033[0m'</span></span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'生成几注号码: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    display<span class="token punctuation">(</span>choose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明</strong>：大家看看<code>display(choose())</code>这行代码，这里我们先通过<code>choose</code>函数获得一组随机号码，然后把<code>choose</code>函数的返回值作为<code>display</code>函数的参数，通过<code>display</code>函数将选中的随机号码显示出来。重构之后的代码逻辑非常清晰，代码的可读性更强了。如果有人为你封装了这两个函数，你仅仅是函数的调用者，其实你根本不用关心<code>choose</code>函数和<code>display</code>函数的内部实现，你只需要知道调用<code>choose</code>函数可以生成一组随机号码，而调用<code>display</code>函数传入一个列表，就可以输出这组号码。将来我们使用各种各样的 Python 三方库时，我们也根本不关注它们的底层实现，我们需要知道的仅仅是调用哪个函数可以解决问题。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、Maven安装</title>
      <link href="/2024/07/02/maven/%E4%BA%8C%E3%80%81Maven%E5%AE%89%E8%A3%85/"/>
      <url>/2024/07/02/maven/%E4%BA%8C%E3%80%81Maven%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="二、Maven-安装"><a href="#二、Maven-安装" class="headerlink" title="二、Maven 安装"></a>二、Maven 安装</h1><h2 id="1、下载安装"><a href="#1、下载安装" class="headerlink" title="1、下载安装"></a>1、下载安装</h2><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://maven.apache.org/">【Maven官网地址】</a></p><p><a href="https://maven.apache.org/download.cgi">【Maven下载地址】</a></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061857906.png"></p><h3 id="解压Maven核心程序"><a href="#解压Maven核心程序" class="headerlink" title="解压Maven核心程序"></a>解压Maven核心程序</h3><p>将 Maven 解压到一个不含有中文和空格的目录中。</p><ul><li>bin 目录：mvn.bat （以run方式运行项目）、 mvnDebug.bat（以debug方式运行项目 ）</li><li>boot 目录：Maven 运行需要类加载器</li><li>conf 目录：settings.xml 整个 Maven 工具核心配置文件</li><li>lib 目录：Maven 运行依赖 Jar 包</li></ul><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061858278.png"></p><p>在解压目录中，我们需要着重关注 Maven 的核心配置文件：<code>conf/settings.xml</code></p><p>Maven 无需安装，将下载的压缩包解压后，即可直接使用</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061859686.png"></p><h3 id="指定Maven的本地仓库"><a href="#指定Maven的本地仓库" class="headerlink" title="指定Maven的本地仓库"></a>指定Maven的本地仓库</h3><p>Maven本地仓库默认值：用户家目录<code>/.m2/repository</code>。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061900486.png"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061901915.png"></p><p>由于本地仓库的默认位置是在用户的家目录下，而目录往往是在 C 盘，也就是系统盘。将来 Maven 仓库中 jar 包越来越多，仓库体积越来越大，可能会拖慢 C 盘运行速度，影响系统性能。所以建议将 Maven 的本地仓库放在其他盘符下。配置方式如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- localRepository| The path to the local repository maven will use to store artifacts.|| Default: $&#123;user.home&#125;/.m2/repository&lt;localRepository>/path/to/local/repo&lt;/localRepository>--></span><span class="token comment">&lt;!-- 需要将标签从注释中取出进行配置 没有配置，仓库的地址为默认这个存放jar包的目录可以等执行构建命令时由Maven创建--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>E:\Maven\maven-repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记住：一定要把 localRepository 标签从注释中拿出来。</p><blockquote><p>注意：本地仓库本身也需要使用一个非中文、没有空格的目录。</p></blockquote><h3 id="加入我们的配置"><a href="#加入我们的配置" class="headerlink" title="加入我们的配置"></a>加入我们的配置</h3><p>将下面 mirror 标签整体复制到 settings.xml 文件的 mirrors 标签的内部。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 表示是中央仓库的镜像 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 仓库名 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 仓库地址 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置-Maven-工程的基础-JDK-版本"><a href="#配置-Maven-工程的基础-JDK-版本" class="headerlink" title="配置 Maven 工程的基础 JDK 版本"></a>配置 Maven 工程的基础 JDK 版本</h3><p>如果按照默认配置运行，Java 工程使用的默认 JDK 版本是 1.5，而我们熟悉和常用的是 JDK 1.8 版本。修改配置的方式是：将 profile 标签整个复制到 settings.xml 文件的 profiles 标签内，指定使用的JDK版本为1.8。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061904237.png"></p><h2 id="2、环境变量配置"><a href="#2、环境变量配置" class="headerlink" title="2、环境变量配置"></a>2、环境变量配置</h2><ul><li><p>Maven 环境配置，增加一个环境变量 <code>M2_HOME</code>, 值是 Maven 的安装路径:<code>C:\Program Files\apache-Maven-3.5.0-bin\apache-Maven-3.5.0</code> </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020032052.png" alt="6"></p></li><li><p>修改 path 则是在 path 最后面添加： <code>;%M2_HOME%\bin</code>。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020032729.png" alt="7"></p></li><li><p>通过 mvn -v 命令检查 Maven 是否安装成功，看到 Maven 的版本为3.3.9及Java版本为1.8即为安装成功。</p></li></ul><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020032731.png" alt="8"></p><h2 id="3、Maven仓库"><a href="#3、Maven仓库" class="headerlink" title="3、Maven仓库"></a>3、Maven仓库</h2><h3 id="3-1-仓库有三种"><a href="#3-1-仓库有三种" class="headerlink" title="3.1 仓库有三种"></a>3.1 仓库有三种</h3><h4 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h4><ul><li><p>本地仓库的默认路径为用户 .m2\repository</p></li><li><p>我们可以在 <code>setting.xml</code> 中修改本地仓库的路径</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>D:\repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><ul><li>如果项目依赖的库在本地仓库中没有找到，Maven 就会去远程仓库找，Maven 有默认的远程仓库，就是他的中央仓库</li><li>中央仓库：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></li></ul><h4 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h4><ul><li><p>一般默认的远程仓库在国内可能连接不上，所以我们可以修改远程仓库的地址为国内的镜像仓库上</p></li><li><p>修改 Maven 根目录下的 conf 文件夹中的 setting.xml 文件，内容如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyunMaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://Maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-2-Maven-仓库的作用"><a href="#3-2-Maven-仓库的作用" class="headerlink" title="3.2 Maven 仓库的作用"></a>3.2 Maven 仓库的作用</h3><p>Maven 的工作需要从仓库下载一些 Jar 包，如下图所示，本地的项目 A、项目 B 等都会通过 Maven 软件从远程仓库（可以理解为互联网上的仓库）下载 Jar 包并存在本地仓库，本地仓库就是本地文件夹，当第二次需要此 Jar 包时则不再从远程仓库下载，因为本地仓库已经存在了，可以将本地仓库理解为缓存，有了本地仓库就不用每次从远程仓 库下载了。</p><p>下图描述了 Maven 中仓库的类型：.</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020033051.jpg" alt="9"></p><p><strong>本地仓库</strong> ：用来存储从远程仓库或中央仓库下载的插件和 Jar 包，项目使用一些插件或 Jar 包，优先从本地仓库查找。默认本地仓库位置在 Maven 根目录下 conf&#x2F;settings.xml 中，可看出： ${user.dir}&#x2F;.m2&#x2F;repository，${user.dir} 表示 windows 用户目录。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020033548.png" alt="10"></p><p><strong>远程仓库</strong>：如果本地需要插件或者 Jar 包，本地仓库没有，默认去远程仓库下载。远程仓库可以在互联网内也可以在局域网内。</p><p><strong>中央仓库</strong>：在 Maven 软件中内置一个远程仓库地址 <a href="http://repo1.maven.org/Maven2">http://repo1.Maven.org/Maven2</a>，它是中央仓库，服务于整个互联网，它是由 Maven 团队自己维护，里面存储了非常全的 Jar 包，它包含了世界上大部分流行的开源项目构件。</p><p><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><h3 id="3-3-配置本地仓库"><a href="#3-3-配置本地仓库" class="headerlink" title="3.3 配置本地仓库"></a>3.3 配置本地仓库</h3><p>本课程是在无网的状态下学习，需要配置老师提供的本地仓库，将 “repository.rar”解压至自己的电脑上，本教程解压在D:\repository</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020032785.jpg" alt="11"></p><p>在 MAVE_HOME&#x2F;conf&#x2F;settings.xml 文件中配置本地仓库位置：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020032684.jpg" alt="12"></p><h3 id="3-4-全局-Setting-与用户-Setting"><a href="#3-4-全局-Setting-与用户-Setting" class="headerlink" title="3.4 全局 Setting 与用户 Setting"></a>3.4 全局 Setting 与用户 Setting</h3><ul><li>Maven 仓库地址、私服等配置信息需要在 setting.xml 文件中配置，分为全局配置和用户配置。</li><li><strong>全局配置</strong>：在 Maven 安装目录下的有 conf&#x2F;setting.xml 文件，此 setting.xml 文件用于 Maven 的所有 project 项目，它作为 Maven 的全局配置。</li><li>**用户配置(First)**：如需要个性配置则需要在用户配置中设置，用户配置的 setting.xml 文件默认的位置在：${user.dir}&#x2F;.m2&#x2F;settings.xml目录中,${user.dir} 指 windows 中的用户目录。</li><li><strong>Maven 会先找用户配置，如果找到则以用户配置文件为准，否则使用全局配置文件。</strong></li></ul><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020032728.png" alt="222"></p>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、Maven 介绍</title>
      <link href="/2024/07/01/maven/%E4%B8%80%E3%80%81Maven%E4%BB%8B%E7%BB%8D/"/>
      <url>/2024/07/01/maven/%E4%B8%80%E3%80%81Maven%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Maven-概述"><a href="#一、Maven-概述" class="headerlink" title="一、Maven 概述"></a>一、Maven 概述</h1><h2 id="1、Maven-简介"><a href="#1、Maven-简介" class="headerlink" title="1、Maven 简介"></a>1、Maven 简介</h2><ul><li>Maven 翻译为“专家”，“内行”。</li><li>Maven 是 Apache 下的一个纯 Java 开发的开源项目，它是一个项目<strong>管理工具</strong>，使用 Maven 对 Java 项目进行构建、依赖管理。当前使用 Maven 的项目在持续增长。</li></ul><h2 id="2、Maven的功能"><a href="#2、Maven的功能" class="headerlink" title="2、Maven的功能"></a>2、Maven的功能</h2><h3 id="Maven-作为依赖管理工具"><a href="#Maven-作为依赖管理工具" class="headerlink" title="Maven 作为依赖管理工具"></a>Maven 作为依赖管理工具</h3><p>随着我们使用越来越多的框架，或者框架封装程度越来越高，项目中使用的jar包也越来越多。项目中，一个模块里面用到上百个jar包是非常正常的。jar包所属技术的官网通常是英文界面，网站的结构又不尽相同，甚至找到下载链接还发现需要通过特殊的工具下载。框架中使用的 jar 包，不仅数量庞大，而且彼此之间存在错综复杂的依赖关系。jar 包之间有可能产生冲突。进一步增加了我们在 jar 包使用过程中的难度。</p><p>使用 Maven 后，依赖对应的 jar 包能够自动下载，方便、快捷又规范。使用 Maven 则几乎不需要管理 jar 包彼此之间存在错综复杂的依赖关系，极个别的地方调整一下即可，极大的减轻了我们的工作量。</p><h3 id="Maven-作为构建管理工具"><a href="#Maven-作为构建管理工具" class="headerlink" title="Maven 作为构建管理工具"></a>Maven 作为构建管理工具</h3><p>脱离 IDE 环境仍需构建</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061846474.png"></p><h2 id="3、Maven构建"><a href="#3、Maven构建" class="headerlink" title="3、Maven构建"></a>3、Maven构建</h2><h3 id="3-1-传统项目构建"><a href="#3-1-传统项目构建" class="headerlink" title="3.1 传统项目构建"></a>3.1 传统项目构建</h3><p>传统的使用 Eclipse 构建项目的过程如下：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020036855.png" alt="2"></p><h3 id="3-2-Maven-项目构建"><a href="#3-2-Maven-项目构建" class="headerlink" title="3.2 Maven 项目构建"></a>3.2 Maven 项目构建</h3><p>构建过程包含的主要的环节：</p><ul><li>清理：删除上一次构建的结果，为下一次构建做好准备</li><li>编译：Java 源程序编译成 *.class 字节码文件</li><li>测试：运行提前准备好的测试程序</li><li>报告：针对刚才测试的结果生成一个全面的信息</li><li>打包<ul><li>Java工程：jar包</li><li>Web工程：war包</li></ul></li><li>安装：把一个 Maven 工程经过打包操作生成的 jar 包或 war 包存入Maven的本地仓库</li><li>部署<ul><li>部署 jar 包：把一个 jar 包部署到 Nexus 私服服务器上</li><li>部署 war 包：借助相关 Maven 插件（例如 cargo），将 war 包部署到 Tomcat 服务器上</li></ul></li></ul><h3 id="3-3-Maven依赖"><a href="#3-3-Maven依赖" class="headerlink" title="3.3 Maven依赖"></a>3.3 Maven依赖</h3><p>如果 A 工程里面用到了 B 工程的类、接口、配置文件等等这样的资源，那么我们就可以说 A 依赖 B。</p><ul><li>依赖管理中要解决的具体问题：<ul><li>jar 包的下载：使用 Maven 之后，jar 包会从规范的远程仓库下载到本地</li><li>jar 包之间的依赖：通过依赖的传递性自动完成</li><li>jar 包之间的冲突：通过对依赖的配置进行调整，让某些jar包不会被导入</li></ul></li></ul><h2 id="4、Maven-的工作机制"><a href="#4、Maven-的工作机制" class="headerlink" title="4、Maven 的工作机制"></a>4、Maven 的工作机制</h2><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407061852211.png"></p><h2 id="5、Jar-依赖管理"><a href="#5、Jar-依赖管理" class="headerlink" title="5、Jar 依赖管理"></a>5、Jar 依赖管理</h2><h3 id="4-1-传统项目的依赖管理"><a href="#4-1-传统项目的依赖管理" class="headerlink" title="4.1 传统项目的依赖管理"></a>4.1 传统项目的依赖管理</h3><p>传统的项目工程要管理所依赖的 Jar 包完全靠人工进行，程序员从网上下载 Jar 包添加到项目工程中，如下图：程序员手工将 Spring、SpringMVC、Mybatis 的 Jar 添加到工程中的 WEB-INF&#x2F;lib 目录下。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020036867.png" alt="4"></p><p>手工拷贝 Jar 包添加到工程中的问题是：</p><ol><li>没有对 Jar 包的版本统一管理，容易导致版本冲突。</li><li>从网上找 Jar 包非常不方便，有些 Jar 找不到。</li><li>Jar 包添加到工程中导致工程过大。</li></ol><h3 id="4-2-Maven-项目的依赖管理"><a href="#4-2-Maven-项目的依赖管理" class="headerlink" title="4.2 Maven 项目的依赖管理"></a>4.2 Maven 项目的依赖管理</h3><ul><li><p>Maven 项目管理所依赖的 Jar 包不需要手动向工程添加 Jar 包，只需要在 pom.xml（Maven工程的配置文件）添加 Jar</p></li><li><p>包的坐标，自动从 Maven 仓库中下载 Jar 包、运行，如下图：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407020037479.jpg" alt="5"></p><p>使用 Maven 依赖管理添加 Jar 的好处：</p></li></ul><ol><li>通过 pom.xml 文件对 Jar 包的版本进行统一管理，可避免版本冲突。</li><li>Maven 团队维护了一个非常全的 Maven 仓库，里边包括了当前使用的 Jar 包，Maven 工程可以自动从 Maven 仓库下载 Jar 包，非常方便。</li></ol><h2 id="6、使用-Maven-的好处"><a href="#6、使用-Maven-的好处" class="headerlink" title="6、使用 Maven 的好处"></a>6、使用 Maven 的好处</h2><p>通过上边介绍传统项目和 Maven 项目在项目构建及依赖管理方面的区域，Maven 有如下的好处：</p><ul><li>一步构建：Maven 对项目构建的过程进行标准化，通过一个命令即可完成构建过程。</li><li>依赖管理：Maven 工程不用手动导 Jar 包，通过在 pom.xml 中定义坐标从 Maven 仓库自动下载，方便且不易出错。</li><li>Maven 的跨平台，可在 Window、Linux 上使用。</li><li>Maven 遵循规范开发有利于提高大型团队的开发效率，降低项目的维护成本，大公司都会考虑使用 Maven 来构建项目。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十四、Python函数</title>
      <link href="/2024/06/30/python/%E5%8D%81%E5%9B%9B%E3%80%81Python%E5%87%BD%E6%95%B0/"/>
      <url>/2024/06/30/python/%E5%8D%81%E5%9B%9B%E3%80%81Python%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="十四、Python函数"><a href="#十四、Python函数" class="headerlink" title="十四、Python函数"></a>十四、Python函数</h1><h2 id="1、函数介绍"><a href="#1、函数介绍" class="headerlink" title="1、函数介绍"></a>1、函数介绍</h2><p>世界级的编程大师<em>Martin Fowler</em>曾经说过：“<strong>代码有很多种坏味道，重复是最坏的一种！</strong>”。要写出高质量的代码，首先就要解决重复代码的问题。</p><p>数学上的函数通常形如$y &#x3D; f(x)$或者$z &#x3D; g(x, y)$这样的形式，在$y &#x3D; f(x)$中，$f$是函数的名字，$x$是函数的自变量，$y$是函数的因变量；而在$z &#x3D; g(x, y)$中，$g$是函数名，$x$和$y$是函数的自变量，$z$是函数的因变量。Python 中的函数跟这个结构是一致的，每个函数都有自己的名字、自变量和因变量。我们通常把 Python 函数的自变量称为函数的参数，而因变量称为函数的返回值。</p><h2 id="2、定义函数"><a href="#2、定义函数" class="headerlink" title="2、定义函数"></a>2、定义函数</h2><p>Python 中可以使用<code>def</code>关键字来定义函数，函数名命名规则跟变量的命名规则是一样的，我们会通过<code>return</code>关键字来返回函数的执行结果。如果函数中没有<code>return</code>语句，那么函数会返回代表空值的<code>None</code>。</p><p>函数可以没有自变量（参数），但是函数名后面的圆括号是必须有的，如下图所示。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407022212775.png" alt="function_definition"></p><h2 id="3、调用函数"><a href="#3、调用函数" class="headerlink" title="3、调用函数"></a>3、调用函数</h2><ul><li><strong>调用函数的语法是在函数名后面跟上圆括号并传入参数</strong></li><li>定义好函数之后，只表示这个函数封装了一段代码而已</li><li>如果不主动调用函数，函数是不会主动执行的</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 自变量（参数）num是一个非负整数</span><span class="token comment"># 因变量（返回值）是num的阶乘</span><span class="token keyword">def</span> <span class="token function">fac</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">*=</span> n    <span class="token keyword">return</span> resultm <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'m = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'n = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fac<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">//</span> fac<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">//</span> fac<span class="token punctuation">(</span>m <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、函数的返回值"><a href="#4、函数的返回值" class="headerlink" title="4、函数的返回值"></a>4、函数的返回值</h2><ul><li>返回值 是函数 完成工作后，最后 给调用者的 一个结果</li><li>在函数中使用 return 关键字可以返回结果</li><li>调用函数一方，可以 使用变量来 接收 函数的返回结果</li></ul><h2 id="5、函数的参数"><a href="#5、函数的参数" class="headerlink" title="5、函数的参数"></a>5、函数的参数</h2><h3 id="形参-实参"><a href="#形参-实参" class="headerlink" title="形参&amp;&amp;实参"></a>形参&amp;&amp;实参</h3><ul><li>形参：就是函数定义时小括号里的参数，是用来接收参数用的，在函数内部作为变量使用。</li><li>实参：函数调用的时候，小括号里的参数，是用来把数据传递到 函数内部 用的。</li><li>函数可以没有形参和实参。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 形式参数</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>bresult <span class="token operator">=</span> sum2<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 实际参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数的参数类型"><a href="#函数的参数类型" class="headerlink" title="函数的参数类型"></a>函数的参数类型</h3><h4 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h4><ul><li>要求实参顺序必须和形参顺序完全一致，由形参顺序决定实参顺序。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_judgement</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""判断三条边的长度能否构成三角形"""</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">></span> c <span class="token keyword">and</span> b <span class="token operator">+</span> c <span class="token operator">></span> a <span class="token keyword">and</span> a <span class="token operator">+</span> c <span class="token operator">></span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面<code>make_judgement</code>函数有三个参数，这种参数叫做位置参数，在调用函数时通常按照从左到右的顺序依次传入，而且传入参数的数量必须和定义函数时参数的数量相同，如下所示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>make_judgement<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>make_judgement<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><p>如果不想按照从左到右的顺序依次给出<code>a</code>、<code>b</code>、<code>c</code> 三个参数的值，也可以使用关键字参数，通过“参数名&#x3D;参数值”的形式为函数传入参数，如下所示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">make_judgement<span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>make_judgement<span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="强制位置参数"><a href="#强制位置参数" class="headerlink" title="强制位置参数"></a>强制位置参数</h4><p>在定义函数时，我们可以在参数列表中用<code>/</code>设置<strong>强制位置参数</strong>（<em>positional-only arguments</em>）。所谓强制位置参数，就是调用函数时只能按照参数位置来接收参数值的参数；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># /前面的参数是强制位置参数</span><span class="token keyword">def</span> <span class="token function">make_judgement</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""判断三条边的长度能否构成三角形"""</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">></span> c <span class="token keyword">and</span> b <span class="token operator">+</span> c <span class="token operator">></span> a <span class="token keyword">and</span> a <span class="token operator">+</span> c <span class="token operator">></span> b<span class="token keyword">print</span><span class="token punctuation">(</span>make_judgement<span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># TypeError: make_judgement() got some positional-only arguments passed as keyword arguments “强制位置参数是不允许给出参数名的”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明</strong>：强制位置参数是 Python 3.8 引入的新特性，在使用低版本的 Python 解释器时需要注意。</p></blockquote><h4 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h4><p>在定义函数时，我们可以在参数列表中用<code>*</code>设置<strong>命名关键字参数</strong>。而命名关键字参数只能通过<strong>“参数名&#x3D;参数值”</strong>的方式来传递和接收参数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># *后面的参数是命名关键字参数</span><span class="token keyword">def</span> <span class="token function">make_judgement</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""判断三条边的长度能否构成三角形"""</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">></span> c <span class="token keyword">and</span> b <span class="token operator">+</span> c <span class="token operator">></span> a <span class="token keyword">and</span> a <span class="token operator">+</span> c <span class="token operator">></span> b<span class="token keyword">print</span><span class="token punctuation">(</span>make_judgement<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># TypeError: make_judgement() takes 0 positional arguments but 3 were given “函数没有位置参数但却给了3个位置参数”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h4><p>定义函数时，可以给 某个参数 指定一个默认值，具有默认值的参数就叫做 缺省参数。</p><h5 id="Case-1"><a href="#Case-1" class="headerlink" title="Case-1"></a>Case-1</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> randrange<span class="token comment"># 定义摇色子的函数</span><span class="token comment"># 函数的自变量（参数）n表示色子的个数，默认值为2</span><span class="token comment"># 函数的因变量（返回值）表示摇n颗色子得到的点数</span><span class="token keyword">def</span> <span class="token function">roll_dice</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    total <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        total <span class="token operator">+=</span> randrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> total<span class="token comment"># 如果没有指定参数，那么n使用默认值2，表示摇两颗色子</span><span class="token keyword">print</span><span class="token punctuation">(</span>roll_dice<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 传入参数3，变量n被赋值为3，表示摇三颗色子获得点数</span><span class="token keyword">print</span><span class="token punctuation">(</span>roll_dice<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Case-2"><a href="#Case-2" class="headerlink" title="Case-2"></a>Case-2</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""三个数相加求和"""</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token comment"># 调用add函数，没有传入参数，那么a、b、c都使用默认值0</span><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># 0</span><span class="token comment"># 调用add函数，传入一个参数，该参数赋值给变量a, 变量b和c使用默认值0</span><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 1</span><span class="token comment"># 调用add函数，传入两个参数，分别赋值给变量a和b，变量c使用默认值0</span><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 3</span><span class="token comment"># 调用add函数，传入三个参数，分别赋值给a、b、c三个变量</span><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>需要注意的是，<strong>带默认值的参数必须放在不带默认值的参数之后</strong>，否则将产生<code>SyntaxError</code>错误，错误消息是：non-default argument follows default argument，即“没有默认值的参数放在了带默认值的参数后面”。</p></blockquote><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>Python 语言中可以通过<strong>星号表达式</strong>语法让函数支持可变参数。所谓可变参数指的是在调用函数时，可以向函数传入<code>0</code>个或任意多个参数。</p><h5 id="args"><a href="#args" class="headerlink" title="*args"></a>*args</h5><ul><li>用星号表达式来表示 args 可以接收0个或任意多个参数</li><li>调用函数时传入的 n 个参数会组装成一个 n 元组赋给 args</li><li>如果一个参数都没有传入，那么 args 会是一个空元组</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">total</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 可变参数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> args<span class="token punctuation">:</span>        result <span class="token operator">+=</span> i<span class="token operator">*</span>i    <span class="token keyword">return</span> result<span class="token comment"># 调用方式一</span>result <span class="token operator">=</span> total<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 调用方式二</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>result <span class="token operator">=</span> total<span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="kwargs"><a href="#kwargs" class="headerlink" title="**kwargs"></a>**kwargs</h5><ul><li>参数列表中的**kwargs可以接收0个或任意多个关键字参数</li><li>调用函数时传入的关键字参数会组装成一个字典（参数名是字典中的键，参数值是字典中的值）</li><li>如果一个关键字参数都没有传入，那么kwargs会是一个空字典</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 可变参数，接收字典</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span>        d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'xiaoming'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span>f<span class="token punctuation">(</span><span class="token operator">**</span>d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在Python函数调用中，当函数的参数按照位置和关键字混合传递时出现。<strong>Python规定，所有位置参数必须在所有关键字参数之前传递。</strong>也就是说，如果你使用了关键字参数，那么它之后的所有参数都必须使用关键字参数形式传递。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'骆昊'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">43</span><span class="token punctuation">,</span> gpa<span class="token operator">=</span><span class="token number">4.95</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""(3, 2.1, True)&#123;'name': '骆昊', 'age': 43, 'gpa': 4.95&#125;"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、变量的作用域"><a href="#6、变量的作用域" class="headerlink" title="6、变量的作用域"></a>6、变量的作用域</h2><h3 id="全局变量-局部变量"><a href="#全局变量-局部变量" class="headerlink" title="全局变量&amp;&amp;局部变量"></a>全局变量&amp;&amp;局部变量</h3><p>全局变量：是在 函数外部定义 的变量，所有函数 内部 都可以使用这个变量。</p><p>局部变量：是在 函数内部 定义的变量，只能在函数内部使用。</p><h3 id="global-关键字"><a href="#global-关键字" class="headerlink" title="global 关键字"></a>global 关键字</h3><p>更改函数内部全局变量值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 全局变量</span>num1 <span class="token operator">=</span> <span class="token number">10</span>  <span class="token comment"># 不可变数据类型</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>   <span class="token comment"># 可变数据类型</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> num1  <span class="token comment"># 声明在f中使用的num1是全局变量num1</span>    num2 <span class="token operator">=</span> <span class="token number">20</span>  <span class="token comment"># 局部变量</span>    num1 <span class="token operator">=</span> <span class="token number">20</span>    list1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在函数f中打印num1的值'</span><span class="token punctuation">,</span>num1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在函数f中打印list1的值'</span><span class="token punctuation">,</span>list1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'num2的值'</span><span class="token punctuation">,</span>num2<span class="token punctuation">)</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在函数f执行后打印num1的值'</span><span class="token punctuation">,</span>num1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在函数f执行后打印list1的值'</span><span class="token punctuation">,</span>list1<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""在函数f中打印num1的值 20在函数f中打印list1的值 [1, 2, 8, 4, 5]num2的值 20在函数f执行后打印num1的值 20在函数f执行后打印list1的值 [1, 2, 8, 4, 5]"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>局部变量不能在函数外使用</li></ul><h2 id="7、用模块管理函数"><a href="#7、用模块管理函数" class="headerlink" title="7、用模块管理函数"></a>7、用模块管理函数</h2><p>不管用什么样的编程语言来写代码，给变量、函数起名字都是一个让人头疼的问题，因为我们会遇到<strong>命名冲突</strong>这种尴尬的情况。最简单的场景就是在同一个<code>.py</code>文件中定义了两个同名的函数，如下所示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello, world!'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'goodbye, world!'</span><span class="token punctuation">)</span>    foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 大家猜猜调用foo函数会输出什么</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然上面的这种情况我们很容易就能避免，但是如果项目是团队协作多人开发的时候，团队中可能有多个程序员都定义了名为<code>foo</code>的函数，这种情况下怎么解决命名冲突呢？答案其实很简单，Python 中每个文件就代表了一个模块（module），我们在不同的模块中可以有同名的函数，在使用函数的时候，我们通过<code>import</code>关键字导入指定的模块再使用<strong>完全限定名</strong>（<code>模块名.函数名</code>）的调用方式，就可以区分到底要使用的是哪个模块中的<code>foo</code>函数，代码如下所示。</p><p><code>module1.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello, world!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>module2.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'goodbye, world!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>test.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> module1<span class="token keyword">import</span> module2<span class="token comment"># 用“模块名.函数名”的方式（完全限定名）调用函数，</span>module1<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># hello, world!</span>module2<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># goodbye, world!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在导入模块时，还可以使用<code>as</code>关键字对模块进行别名，这样我们可以使用更为简短的完全限定名。</p><p><code>test.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> module1 <span class="token keyword">as</span> m1<span class="token keyword">import</span> module2 <span class="token keyword">as</span> m2m1<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># hello, world!</span>m2<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># goodbye, world!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面两段代码，我们导入的是定义函数的模块，我们也可以使用<code>from...import...</code>语法从模块中直接导入需要使用的函数，代码如下所示。</p><p><code>test.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> module1 <span class="token keyword">import</span> foofoo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># hello, world!</span><span class="token keyword">from</span> module2 <span class="token keyword">import</span> foofoo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># goodbye, world!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，如果我们如果从两个不同的模块中导入了同名的函数，后面导入的函数会替换掉之前的导入，就像下面的代码，调用<code>foo</code>会输出<code>goodbye, world!</code>，因为我们先导入了<code>module1</code>的<code>foo</code>，后导入了<code>module2</code>的<code>foo</code> 。如果两个<code>from...import...</code>反过来写，那就是另外一番光景了。</p><p><code>test.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> module1 <span class="token keyword">import</span> foo<span class="token keyword">from</span> module2 <span class="token keyword">import</span> foofoo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># goodbye, world!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果想在上面的代码中同时使用来自两个模块的<code>foo</code>函数还是有办法的，大家可能已经猜到了，还是用<code>as</code>关键字对导入的函数进行别名，代码如下所示。</p><p><code>test.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> module1 <span class="token keyword">import</span> foo <span class="token keyword">as</span> f1<span class="token keyword">from</span> module2 <span class="token keyword">import</span> foo <span class="token keyword">as</span> f2f1<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># hello, world!</span>f2<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># goodbye, world!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、高阶函数"><a href="#8、高阶函数" class="headerlink" title="8、高阶函数"></a>8、高阶函数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>我们能不能用函数作为函数的参数，用函数作为函数的返回值？</p><p>这里我们先说结论：<strong>Python 中的函数是“一等函数”</strong>，所谓“一等函数”指的就是函数可以赋值给变量，函数可以作为函数的参数，函数也可以作为函数的返回值。把一个函数作为其他函数的参数或返回值的用法，我们通常称之为“高阶函数”。</p><h3 id="解除耦合"><a href="#解除耦合" class="headerlink" title="解除耦合"></a>解除耦合</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def calc(*args, **kwargs):    items &#x3D; list(args) + list(kwargs.values())    result &#x3D; 0    for item in items:        if type(item) in (int, float):            result +&#x3D; item    return result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们希望上面的<code>calc</code>函数不仅仅可以做多个参数的求和，还可以实现更多的甚至是自定义的二元运算，我们该怎么做呢？</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>上面的代码只能求和是因为函数中使用了<code>+=</code>运算符，这使得函数跟加法运算形成了耦合关系，如果能解除这种耦合关系，函数的通用性和灵活性就会更好。代码如下所示：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def calc(init_value, op_func, *args, **kwargs):    items &#x3D; list(args) + list(kwargs.values())    result &#x3D; init_value    for item in items:        if type(item) in (int, float):            result &#x3D; op_func(result, item)    return result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上面的函数增加了两个参数，其中<code>init_value</code>代表运算的初始值，<code>op_func</code>代表二元运算函数</li><li>为了调用修改后的函数，我们先定义做加法和乘法运算的函数，代码如下所示。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token keyword">def</span> <span class="token function">mul</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要做求和或求乘积的运算，我们可以按照下面的方式调用<code>calc</code>函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>calc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> add<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 15</span><span class="token keyword">print</span><span class="token punctuation">(</span>calc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> mul<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>上面的<code>calc</code>函数通过将运算符变成函数的参数，实现了跟加法运算耦合，这是一种非常高明和实用的编程技巧，建议大家细品一下。</p><blockquote><p>需要注意：上面的代码中，将函数作为参数传入其他函数&amp;&amp;直接调用函数是有显著的区别的：<strong>调用函数需要在函数名后面跟上圆括号，而把函数作为参数时只需要函数名即可</strong>。</p></blockquote><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>如果我们没有提前定义好<code>add</code>和<code>mul</code>函数，也可以使用 Python 标准库中的<code>operator</code>模块提供的<code>add</code>和<code>mul</code>函数，它们分别代表了做加法和做乘法的二元运算，我们拿过来直接使用即可，代码如下所示。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import operatorprint(calc(0, operator.add, 1, 2, 3, 4, 5))  # 15print(calc(1, operator.mul, 1, 2, 3, 4, 5))  # 120<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="filter-map函数"><a href="#filter-map函数" class="headerlink" title="filter&amp;&amp;map函数"></a>filter&amp;&amp;map函数</h3><p>Python 内置函数中有不少高阶函数，我们前面提到过的<code>filter</code>和<code>map</code>函数就是高阶函数。</p><ul><li>filter：可以实现对序列中元素的过滤</li><li>map：可以实现对序列中元素的映射</li></ul><p>例如我们要去掉一个整数列表中的奇数，并对所有的偶数求平方得到一个新的列表，就可以直接使用这两个函数来做到，具体的做法是如下所示。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def is_even(num):    &quot;&quot;&quot;判断num是不是偶数&quot;&quot;&quot;    return num % 2 &#x3D;&#x3D; 0def square(num):    &quot;&quot;&quot;求平方&quot;&quot;&quot;    return num ** 2old_nums &#x3D; [35, 12, 8, 99, 60, 52]new_nums &#x3D; list(map(square, filter(is_even, old_nums)))print(new_nums)  # [144, 64, 3600, 2704]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="列表生成式实现"><a href="#列表生成式实现" class="headerlink" title="列表生成式实现"></a>列表生成式实现</h4><p>当然，要完成上面代码的功能，也可以使用列表生成式，列表生成式的做法更为简单优雅。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">old_nums &#x3D; [35, 12, 8, 99, 60, 52]new_nums &#x3D; [num ** 2 for num in old_nums if num % 2 &#x3D;&#x3D; 0]print(new_nums)  # [144, 64, 3600, 2704]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="sorted函数"><a href="#sorted函数" class="headerlink" title="sorted函数"></a>sorted函数</h3><p>内置函数<code>sorted</code>，它可以实现对容器型数据类型（如：列表、字典等）元素的排序。</p><h4 id="sorted函数-sort方法"><a href="#sorted函数-sort方法" class="headerlink" title="sorted函数&amp;&amp;sort方法"></a><code>sorted函数</code>&amp;&amp;<code>sort方法</code></h4><h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><p><code>list</code>类型的<code>sort</code>方法，它实现了对列表元素的排序，<code>sorted</code>函数从功能上来讲跟列表的<code>sort</code>方法没有区别，但它会返回排序后的列表对象，而不是直接修改原来的列表，这一点我们称为<strong>函数的无副作用设计</strong>。也就是说调用函数除了产生返回值以外，不会对程序的状态或外部环境产生任何其他的影响。</p><p>使用<code>sorted</code>函数排序时，可以通过高阶函数的形式自定义排序的规则，我们通过下面的例子加以说明：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">old_strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'in'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'zoo'</span><span class="token punctuation">,</span> <span class="token string">'waxberry'</span><span class="token punctuation">,</span> <span class="token string">'pear'</span><span class="token punctuation">]</span>new_strings <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>old_strings<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_strings<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""['apple', 'in', 'pear', waxberry', 'zoo']"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h5><p>如果希望根据字符串的长度而不是字母表顺序对列表元素排序，我们可以向<code>sorted</code>函数传入一个名为<code>key</code>的参数，将<code>key</code>参数赋值为获取字符串长度的函数<code>len</code>，代码如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">old_strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'in'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'zoo'</span><span class="token punctuation">,</span> <span class="token string">'waxberry'</span><span class="token punctuation">,</span> <span class="token string">'pear'</span><span class="token punctuation">]</span>new_strings <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>old_strings<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_strings<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""['in', 'zoo', 'pear', 'apple', 'waxberry']"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明</strong>：列表类型的<code>sort</code>方法也有同样的<code>key</code>参数，有兴趣的读者可以自行尝试。</p></blockquote><h2 id="9、Lambda函数"><a href="#9、Lambda函数" class="headerlink" title="9、Lambda函数"></a>9、Lambda函数</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Lambda 函数是一种快速定义单行的最小函数，可以用在任何需要函数的地方。</p><p>Python 中的 Lambda 函数是没有的名字函数，所以很多人也把它叫做<strong>匿名函数</strong>，Lambda 函数只能有一行代码，代码中的表达式产生的运算结果就是这个匿名函数的返回值。</p><p>优点：让代码更加精简，不需要考虑命名的问题</p><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul><li>定义 Lambda 函数的关键字是<code>lambda</code>，后面跟函数的参数，如果有多个参数用逗号进行分隔</li><li>冒号后面的部分就是函数的执行体，通常是一个表达式</li><li>表达式的运算结果就是 lambda 函数的返回值，不需要写<code>return</code> 关键字</li></ul><h3 id="Case-1-1"><a href="#Case-1-1" class="headerlink" title="Case-1"></a>Case-1</h3><p>之前的代码中，我们写的<code>is_even</code>和<code>square</code>函数都只有一行代码，我们可以考虑用 lambda 函数来替换掉它们，代码如下所示。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def is_even(num):    &quot;&quot;&quot;判断num是不是偶数&quot;&quot;&quot;    return num % 2 &#x3D;&#x3D; 0def square(num):    &quot;&quot;&quot;求平方&quot;&quot;&quot;    return num ** 2old_nums &#x3D; [35, 12, 8, 99, 60, 52]new_nums &#x3D; list(map(lambda x: x ** 2, filter(lambda x: x % 2 &#x3D;&#x3D; 0, old_nums)))print(new_nums)&quot;&quot;&quot;[144, 64, 3600, 2704]&quot;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Case-2-1"><a href="#Case-2-1" class="headerlink" title="Case-2"></a>Case-2</h3><p>前面我们说过，Python 中的函数是“一等函数”，函数是可以直接赋值给变量的。在学习了 lambda 函数之后，前面我们写过的一些函数就可以用一行代码来实现它们了，大家可以看看能否理解下面的求阶乘和判断素数的函数。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import functoolsimport operator# 用一行代码实现计算阶乘的函数fac &#x3D; lambda n: functools.reduce(operator.mul, range(2, n + 1), 1)# 用一行代码实现判断素数的函数is_prime &#x3D; lambda x: all(map(lambda f: x % f, range(2, int(x ** 0.5) + 1)))# 调用Lambda函数print(fac(6))        # 720print(is_prime(37))  # True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>提示1</strong>：上面使用的<code>reduce</code>函数是 Python 标准库<code>functools</code>模块中的函数，它可以实现对一组数据的归约操作，类似于我们之前定义的<code>calc</code>函数，第一个参数是代表运算的函数，第二个参数是运算的数据，第三个参数是运算的初始值。很显然，<code>reduce</code>函数也是高阶函数，它和<code>filter</code>函数、<code>map</code>函数一起构成了处理数据中非常关键的三个动作：<strong>过滤</strong>、<strong>映射</strong>和<strong>归约</strong>。</p><p><strong>提示2</strong>：上面判断素数的 lambda 函数通过<code>range</code>函数构造了从$\small{2}$到$\small{\sqrt{x}}$的范围，检查这个范围有没有<code>x</code>的因子。<code>all</code>函数也是 Python 内置函数，如果传入的序列中所有的布尔值都是<code>True</code>，<code>all</code>函数返回<code>True</code>，否则<code>all</code>函数返回<code>False</code>。</p></blockquote><h2 id="10、偏函数"><a href="#10、偏函数" class="headerlink" title="10、偏函数"></a>10、偏函数</h2><p>偏函数是指固定函数的某些参数，生成一个新的函数，这样就无需在每次调用函数时都传递相同的参数。在 Python 语言中，我们可以使用<code>functools</code>模块的<code>partial</code>函数来创建偏函数。例如，<code>int</code>函数在默认情况下可以将字符串视为十进制整数进行类型转换，如果我们修修改它的<code>base</code>参数，就可以定义出三个新函数，分别用于将二进制、八进制、十六进制字符串转换为整数，代码如下所示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> functoolsint2 <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>int8 <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>int16 <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'1001'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 1001</span><span class="token keyword">print</span><span class="token punctuation">(</span>int2<span class="token punctuation">(</span><span class="token string">'1001'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 9</span><span class="token keyword">print</span><span class="token punctuation">(</span>int8<span class="token punctuation">(</span><span class="token string">'1001'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 513</span><span class="token keyword">print</span><span class="token punctuation">(</span>int16<span class="token punctuation">(</span><span class="token string">'1001'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 4097</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不知大家是否注意到，<code>partial</code>函数的第一个参数和返回值都是函数，它将传入的函数处理成一个新的函数返回。通过构造偏函数，我们可以结合实际的使用场景将原函数变成使用起来更为便捷的新函数，不知道大家有没有觉得这波操作很有意思。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Python 中的函数是一等函数，可以赋值给变量，也可以作为函数的参数和返回值，这也就意味着我们可以在 Python 中使用高阶函数。高阶函数的概念对新手并不友好，但它却带来了函数设计上的灵活性。如果我们要定义的函数非常简单，只有一行代码，而且不需要函数名来复用它，我们可以使用 lambda 函数。</p><h2 id="11、内置函数"><a href="#11、内置函数" class="headerlink" title="11、内置函数"></a>11、内置函数</h2><p>Python 标准库中有一类函数是不需要<code>import</code>就能够直接使用的，我们将其称之为<strong>内置函数</strong>，这些内置函数不仅有用而且还很常用，下面的表格列出了一部分的内置函数。</p><p>推荐博客：<a href="https://web.suda.edu.cn/hejun/chapter2/python_2_5.html">https://web.suda.edu.cn/hejun/chapter2/python_2_5.html</a></p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>abs</code></td><td>返回一个数的绝对值，例如：<code>abs(-1.3)</code>会返回<code>1.3</code>。</td></tr><tr><td><code>bin</code></td><td>把一个整数转换成以<code>&#39;0b&#39;</code>开头的二进制字符串，例如：<code>bin(123)</code>会返回<code>&#39;0b1111011&#39;</code>。</td></tr><tr><td><code>chr</code></td><td>将Unicode编码转换成对应的字符，例如：<code>chr(8364)</code>会返回<code>&#39;€&#39;</code>。</td></tr><tr><td><code>hex</code></td><td>将一个整数转换成以<code>&#39;0x&#39;</code>开头的十六进制字符串，例如：<code>hex(123)</code>会返回<code>&#39;0x7b&#39;</code>。</td></tr><tr><td><code>input</code></td><td>从输入中读取一行，返回读到的字符串。</td></tr><tr><td><code>len</code></td><td>获取字符串、列表等的长度。</td></tr><tr><td><code>max</code></td><td>返回多个参数或一个可迭代对象中的最大值，例如：<code>max(12, 95, 37)</code>会返回<code>95</code>。</td></tr><tr><td><code>min</code></td><td>返回多个参数或一个可迭代对象中的最小值，例如：<code>min(12, 95, 37)</code>会返回<code>12</code>。</td></tr><tr><td><code>oct</code></td><td>把一个整数转换成以<code>&#39;0o&#39;</code>开头的八进制字符串，例如：<code>oct(123)</code>会返回<code>&#39;0o173&#39;</code>。</td></tr><tr><td><code>open</code></td><td>打开一个文件并返回文件对象。</td></tr><tr><td><code>ord</code></td><td>将字符转换成对应的Unicode编码，例如：<code>ord(&#39;€&#39;)</code>会返回<code>8364</code>。</td></tr><tr><td><code>pow</code></td><td>求幂运算，例如：<code>pow(2, 3)</code>会返回<code>8</code>；<code>pow(2, 0.5)</code>会返回<code>1.4142135623730951</code>。</td></tr><tr><td><code>print</code></td><td>打印输出。</td></tr><tr><td><code>range</code></td><td>构造一个范围序列，例如：<code>range(100)</code>会产生<code>0</code>到<code>99</code>的整数序列。</td></tr><tr><td><code>round</code></td><td>按照指定的精度对数值进行四舍五入，例如：<code>round(1.23456, 4)</code>会返回<code>1.2346</code>。</td></tr><tr><td><code>sum</code></td><td>对一个序列中的项从左到右进行求和运算，例如：<code>sum(range(1, 101))</code>会返回<code>5050</code>。</td></tr><tr><td><code>type</code></td><td>返回对象的类型，例如：<code>type(10)</code>会返回<code>int</code>；而<code> type(&#39;hello&#39;)</code>会返回<code>str</code>。</td></tr></tbody></table><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407030027927.png" alt="image-20240703002732256"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407030028145.png" alt="image-20240703002828629"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407030029614.png" alt="image-20240703002904131"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/maven-base/202407030029243.png" alt="image-20240703002937803"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><strong>函数是对功能相对独立且会重复使用的代码的封装</strong>。学会使用定义和使用函数，就能够写出更为优质的代码。当然，Python 语言的标准库中已经为我们提供了大量的模块和常用的函数，用好这些模块和函数就能够用更少的代码做更多的事情；如果这些模块和函数不能满足我们的要求，可能就需要自定义函数，然后再通过模块的概念来管理这些自定义函数。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十三、Python异常</title>
      <link href="/2024/06/30/python/%E5%8D%81%E4%B8%89%E3%80%81Python%E5%BC%82%E5%B8%B8/"/>
      <url>/2024/06/30/python/%E5%8D%81%E4%B8%89%E3%80%81Python%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="十三、Python异常"><a href="#十三、Python异常" class="headerlink" title="十三、Python异常"></a>十三、Python异常</h1><h2 id="1、常见的异常类型"><a href="#1、常见的异常类型" class="headerlink" title="1、常见的异常类型"></a>1、常见的异常类型</h2><p>在 Python 中，把程序运行时产生错误的情况叫做异常。出现异常情况有很多，常见的异常有以下几种：</p><table><thead><tr><th>报错类型</th><th>描述</th></tr></thead><tbody><tr><td>AssertionError</td><td>当assert断言条件为假的时候抛出的异常。</td></tr><tr><td>AttributeError</td><td>当访问的对象属性不存在的时候抛出的异常</td></tr><tr><td>IndexError</td><td>超出对象索引的范围时抛出的异常。</td></tr><tr><td>KeyError</td><td>在字典中查找一个不存在的key抛出的异常</td></tr><tr><td>NameError</td><td>访问一个不存在的变量时抛出的异常。</td></tr><tr><td>OSError</td><td>操作系统产生的异常。</td></tr><tr><td>SyntaxError</td><td>语法错误时会抛出此异常。</td></tr><tr><td>TypeError</td><td>类型错误，通常是不同类型之间的操作会出现此异常。</td></tr><tr><td>ZeroDivisionError</td><td>进行数学运算时除数为0时会出现此异常。</td></tr><tr><td>ImportError</td><td>无法导入模块或者对象，主要是路径有误或名称错误</td></tr><tr><td>IndentationError</td><td>代码没有正确对齐，主要是缩进错误</td></tr><tr><td>IOError</td><td>输入&#x2F;输出异常，主要是无法打开文件</td></tr><tr><td>OverflowError</td><td>数值运算超出最大限制</td></tr><tr><td>TabError</td><td>Tab和空格混用</td></tr><tr><td>ValueError</td><td>传入无效的值，即使值的类型是正确的</td></tr></tbody></table><p>一旦程序发生异常，表明该程序在执行时出现了非正常的情况，无法再执行下去。默认情况下，程序会终止退出。</p><h2 id="2、异常处理"><a href="#2、异常处理" class="headerlink" title="2、异常处理"></a>2、异常处理</h2><h3 id="try…except…else…finally…"><a href="#try…except…else…finally…" class="headerlink" title="try…except…else…finally…"></a>try…except…else…finally…</h3><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment"># 可能产生异常的代码块</span><span class="token keyword">except</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>Error1<span class="token punctuation">,</span> Error2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">[</span> <span class="token keyword">as</span> e<span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment"># 处理异常的代码块2</span><span class="token keyword">except</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>Error3<span class="token punctuation">,</span> Error4<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">[</span> <span class="token keyword">as</span> e<span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment"># 处理异常的代码块3</span><span class="token keyword">except</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">as</span> e<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment"># 处理其它异常的代码块n</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment"># 代码块1无异常时执行的代码块</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token comment"># 无论try中代码块是否发生异常都会执行该代码块</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>1、首先执行try中代码块，如果出现异常，立即终止代码执行，转而到except块中进行异常处理<br>2、异常处理except模块可以多个，从上往下匹配，如果能够匹配成功，立即执行相应的异常处理代码块，执行完毕后，不在往下匹配，转到3执行<br>3、执行异常处理完毕后，如果有finally字句则执行finally字句，如果没有则执行后续语句<br>4、如果匹配不到异常，有finally则执行finally，然后则抛出错误，终止程序执行。<br>5、如果没有异常，如果有else字句则执行else字句，执行完else后，有finally字句则执行，没有则执行后续语句</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token string">'10'</span>      <span class="token comment"># 变量a的类型错误</span>    b <span class="token operator">=</span> <span class="token number">0</span>         <span class="token comment"># 变量b作为被除数不能为0</span>    c <span class="token operator">=</span> a <span class="token operator">/</span> b    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"result："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token keyword">except</span> <span class="token punctuation">(</span>ValueError<span class="token punctuation">,</span> TypeError<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ValueError or TypeError:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">except</span> <span class="token punctuation">(</span>ZeroDivisionError<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ZeroDivisionError:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"other exceptions:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"continue..."</span><span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>1、try 代码块有且仅有一个，但 except 代码块可以有多个，且每个 except 代码块都可以同时处理多种异常。</p><p>2、前面的except已经捕获并处理了异常，后面的except将不会进行检查异常了，而是直接跳过。</p><p>3、as e 是可选参数，但是为了后续操作方便（如 打印异常信息），一般会给每一个进入到 except 的异常类型起一个别名 e。</p><p>4、Exception 是可选参数，它代表所有的异常情况，一般用在最后一个except 代码块中。</p><p>5、else 的代码块，只有当 try 的代码块没有出现异常时才会显现出来，否则 else 中的代码块不会执行。</p><p>6、try 中是否出现异常，finally 中的代码都会执行。</p><p>7、finally 中一般不使用 return 语句，如果 finally 中含有 return 语句，在 try代码块 return 之前，会执行 finally 中的语句，导致 try 中的 return 被忽略了，最终返回的值是 finally 中 return 的值。</p><h2 id="3、raise-关键字"><a href="#3、raise-关键字" class="headerlink" title="3、raise 关键字"></a>3、raise 关键字</h2><p>如果需要在程序中自行引发异常，则应使用 raise 语句。raise 语句有如下三种常用的用法：</p><ol><li>raise：单独一个 raise。该语句引发当前上下文中捕获的异常（比如在 except 块中），或默认引发 RuntimeError 异常。</li><li>raise 异常类：raise 后带一个异常类。该语句引发指定异常类的默认实例。</li><li>raise 异常对象：引发指定的异常对象。</li></ol><p>raise 语句每次只能引发一个异常实例。</p><p>Todo…..</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十二、Python集合(set)</title>
      <link href="/2024/06/30/python/%E5%8D%81%E4%BA%8C%E3%80%81%E9%9B%86%E5%90%88/"/>
      <url>/2024/06/30/python/%E5%8D%81%E4%BA%8C%E3%80%81%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="十二、Python集合-set"><a href="#十二、Python集合-set" class="headerlink" title="十二、Python集合(set)"></a>十二、Python集合(set)</h1><h2 id="1、集合的特点"><a href="#1、集合的特点" class="headerlink" title="1、集合的特点"></a>1、集合的特点</h2><ol><li>集合内的数据对象都是唯一的，不允许有重复元素，如果添加重复元素，则会自动过滤</li><li>集合是一种无序且无重复元素的数据结构</li><li>集合是可迭代对象</li><li>集合的底层是字典结构</li><li>可以进行交集、并集的运算。</li><li>与dict类似，是一组key的集合(不存储value)</li></ol><h2 id="2、定义"><a href="#2、定义" class="headerlink" title="2、定义"></a>2、定义</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>集合（set）是一个<strong>无序的不重复元素</strong>序列，可以使用大括号 <strong><code>&#123; &#125;</code></strong> 或者 <strong><code>set()</code></strong> 函数创建集合。</p><blockquote><p><strong>注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</strong></p></blockquote><h4 id="空集合"><a href="#空集合" class="headerlink" title="空集合"></a>空集合</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""set() &lt;class 'set'>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有元素的集合"><a href="#有元素的集合" class="headerlink" title="有元素的集合"></a>有元素的集合</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""&#123;1, 2, 3, 4&#125; &lt;class 'set'>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># list-->set</span>s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment"># tuple-->set</span>s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment"># str-->set</span>s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment"># dict-->set</span>s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""&#123;1, 2, 3&#125;&#123;1, 2, 3&#125;&#123;'3', '2', '1'&#125;&#123;1, 'a'&#125;"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>名称</th><th>符号</th><th>空元素</th><th>数据类型</th><th>是否可改(增加、删除、修改)</th><th>是否允许重复</th><th>是否支持索引</th><th>符号支持</th></tr></thead><tbody><tr><td>列表</td><td>[ ]方括号</td><td>list1&#x3D;[]</td><td>&lt;class ‘list’&gt;</td><td>可以</td><td>允许</td><td>支持</td><td>+ * in</td></tr><tr><td>元组</td><td>()小括号</td><td>tuple1&#x3D;()</td><td>&lt;class ‘tuple’&gt;</td><td>不可以</td><td>允许</td><td>支持</td><td>+ * in</td></tr><tr><td>集合</td><td><code>&#123;&#125;大括号</code></td><td>set1&#x3D;set()</td><td><code>&lt;class &#39;set&#39;&gt;</code></td><td><code>可以</code></td><td><code>不允许</code></td><td>不支持</td><td>&amp;|-^in</td></tr></tbody></table><h2 id="3、集合使用"><a href="#3、集合使用" class="headerlink" title="3、集合使用"></a>3、集合使用</h2><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><h4 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h4><p>add()：向集合内增加元素，如果添加的元素已经存在的话，则不执行任何操作</p><h4 id="update-x"><a href="#update-x" class="headerlink" title="update(x)"></a>update(x)</h4><p>update(x)：可以添加元素，且参数可以是列表，元组，字典等</p><p>语法格式如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token punctuation">.</span>update<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>x  可以有多个，用逗号分开。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">thisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>thisset<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token comment"># &#123;1, 3, 'Google', 'Taobao', 'Runoob'&#125;</span>thisset<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token comment"># &#123;1, 3, 4, 5, 6, 'Google', 'Taobao', 'Runoob'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h4><ul><li><code>pop()</code>：pop会从集合中随机删除一个数</li><li><code>remove(x)</code>：删除指定元素，如果是不存在的元素会报错。</li><li><code>discard(x)</code>：与remove(x)类似，如果是不存在的元素不会报错。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">thisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>thisset<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token comment"># &#123;'Google', 'Runoob'&#125;</span>thisset<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"Facebook"</span><span class="token punctuation">)</span>   <span class="token comment"># 不存在会发生错误</span><span class="token comment"># Traceback (most recent call last):</span><span class="token comment">#   File "&lt;stdin>", line 1, in &lt;module></span><span class="token comment"># KeyError: 'Facebook'</span>  thisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>thisset<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token string">"Facebook"</span><span class="token punctuation">)</span>  <span class="token comment"># 不存在不会发生错误</span><span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token comment"># &#123;'Taobao', 'Google', 'Runoob'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运算操作"><a href="#运算操作" class="headerlink" title="运算操作"></a>运算操作</h3><table><thead><tr><th>符号</th><th>名称</th><th>函数</th></tr></thead><tbody><tr><td>&amp;</td><td>交集</td><td>set1.intersection(set2)：求set1和set2的交集</td></tr><tr><td>|</td><td>并集</td><td>set1.union(set2)：求set1和set2的并集</td></tr><tr><td>-</td><td>差集</td><td>set1.difference(set2)：求set1和set2的差集</td></tr><tr><td>^</td><td>交叉补集</td><td>set1.symmetric_difference(set2)：求set1和set2的交叉补集</td></tr></tbody></table><p><strong>交集</strong>: 交集可以使用符号：【&amp;】完成。跟数学中的交集是一样的，就是求两个集合中共同都有的元素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sports1 <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'足球'</span><span class="token punctuation">,</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'网球'</span><span class="token punctuation">,</span><span class="token string">'乒乓球'</span><span class="token punctuation">&#125;</span>sports2<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'乒乓球'</span><span class="token punctuation">,</span><span class="token string">'排球'</span><span class="token punctuation">,</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'网球'</span><span class="token punctuation">,</span><span class="token string">'冰球'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports1<span class="token operator">&amp;</span>sports2<span class="token punctuation">)</span><span class="token comment"># &#123;'篮球', '乒乓球', '网球'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>并集</strong>：并集可以使用符号：【|】完成，就是将两个集合并在一起。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sports1 <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'足球'</span><span class="token punctuation">,</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'网球'</span><span class="token punctuation">,</span><span class="token string">'乒乓球'</span><span class="token punctuation">&#125;</span>sports2<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'乒乓球'</span><span class="token punctuation">,</span><span class="token string">'排球'</span><span class="token punctuation">,</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'网球'</span><span class="token punctuation">,</span><span class="token string">'冰球'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports1<span class="token operator">|</span>sports2<span class="token punctuation">)</span><span class="token comment"># &#123;'冰球', '篮球', '网球', '足球', '排球', '乒乓球'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>差集</strong>：差集使用符号：【-】完成，就是求当前与另一个集合不同的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sports1 <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'足球'</span><span class="token punctuation">,</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'网球'</span><span class="token punctuation">,</span><span class="token string">'乒乓球'</span><span class="token punctuation">&#125;</span>sports2<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'乒乓球'</span><span class="token punctuation">,</span><span class="token string">'排球'</span><span class="token punctuation">,</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'网球'</span><span class="token punctuation">,</span><span class="token string">'冰球'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports1<span class="token operator">-</span>sports2<span class="token punctuation">)</span>  <span class="token comment"># 就是求sports1与sports2不同的是</span><span class="token comment"># &#123;'足球'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>交叉补集</strong>:</p><p>理解下<strong>交叉补集</strong>：集合A 是{1、2、3 }，集合B 是 {2、3、4 } . 交叉补集就只保留 1 和 4 。因为 1 是 A 独有的， 4 是B 独有的。交叉补集会去掉共有的部分，只保留双方独有的部分。</p><p>现在我们求sports1和sports2的交叉补集,使用符号是:【^】完成。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sports1 <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'足球'</span><span class="token punctuation">,</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'网球'</span><span class="token punctuation">,</span><span class="token string">'乒乓球'</span><span class="token punctuation">&#125;</span>sports2<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'乒乓球'</span><span class="token punctuation">,</span><span class="token string">'排球'</span><span class="token punctuation">,</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'网球'</span><span class="token punctuation">,</span><span class="token string">'冰球'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports1<span class="token operator">^</span>sports2<span class="token punctuation">)</span>  <span class="token comment"># &#123;'冰球', '足球', '排球'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>add()</td><td>为集合添加元素</td></tr><tr><td><code>clear()</code></td><td>移除集合中的所有元素</td></tr><tr><td>copy()</td><td>拷贝一个集合</td></tr><tr><td>pop()</td><td>随机移除元素</td></tr><tr><td>remove()</td><td>移除指定元素</td></tr><tr><td>union</td><td>返回两个集合的并集</td></tr><tr><td>update()</td><td>给集合添加元素</td></tr><tr><td>difference()</td><td>返回多个集合的差集</td></tr><tr><td>difference_update()</td><td>移除集合中的元素，该元素在指定的集合也存在。</td></tr><tr><td>discard()</td><td>删除集合中指定的元素</td></tr><tr><td>intersection()</td><td>返回集合的交集</td></tr><tr><td>intersection_update()</td><td>删除集合中的元素，该元素在指定的集合中不存在。</td></tr><tr><td>isdisjoint()</td><td>判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。</td></tr><tr><td>issubset()</td><td>判断指定集合是否为该方法参数集合的子集。</td></tr><tr><td>issuperset()</td><td>判断该方法的参数集合是否为指定集合的子集</td></tr><tr><td>symmetric_difference()</td><td>返回两个集合中不重复的元素集合。</td></tr><tr><td>symmetric_difference_update()</td><td>移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</td></tr></tbody></table><h3 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h3><p>有一个无序且元素数据重复的列表 nums, <code>nums=[5,8,7,6,4,1,3,5,1,8,4]</code>,要求对这个列表里的元素去重，并进行降序排序。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方法一：调用列表的sort方法</span>nums2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>nums2<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token comment"># 方法二：使用sorted内置函数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、可变类型-不可变类型"><a href="#4、可变类型-不可变类型" class="headerlink" title="4、可变类型 &amp; 不可变类型"></a>4、可变类型 &amp; 不可变类型</h2><p>不可变数据类型在创建后，其值就不能被改变。Python中的以下数据类型是不可变的：</p><ol><li>数字（例如：int, float, complex）</li><li>字符串（例如：str）</li><li>元组（例如：tuple）</li><li>布尔类型（例如：bool）</li></ol><p>可变数据类型的值可以在创建后被改变。Python中的以下数据类型是可变的：</p><ol><li>列表（例如：list）</li><li>字典（例如：dict）</li><li>集合（例如：set）</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十一、Python字典</title>
      <link href="/2024/06/30/python/%E5%8D%81%E4%B8%80%E3%80%81%E5%AD%97%E5%85%B8/"/>
      <url>/2024/06/30/python/%E5%8D%81%E4%B8%80%E3%80%81%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="十一、Python字典-dict"><a href="#十一、Python字典-dict" class="headerlink" title="十一、Python字典(dict)"></a>十一、Python字典(dict)</h1><h2 id="1、字典（dict）"><a href="#1、字典（dict）" class="headerlink" title="1、字典（dict）"></a>1、字典（dict）</h2><p>Python 提供了字典，可以保存具有映射关系的数据，所以字典相当于保存了两组数据。其中一组数据是关键数据，被称为 key，里面的数据是不能重复的；另一组数据可通过 key 来访问，被称为 value，value是允许重复的。</p><p><strong>由于字典中的 key 是非常关键的数据，而且程序需要通过 key 来访问 value，因此字典中的 key 不允许重复。</strong></p><p>字典&amp;&amp;列表的区别：</p><ol><li>列表 是 有序 的对象集合</li><li>字典 是 无序 的对象集合</li></ol><h2 id="2、字典定义"><a href="#2、字典定义" class="headerlink" title="2、字典定义"></a>2、字典定义</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ol><li>字典用花括号&#x2F;大括号 <code>&#123;&#125;</code> 定义</li><li>字典使用 键值对 存储数据，键值对之间使用 , 分隔<ul><li>键 <code>key</code> 是索引</li><li>值 <code>value</code> 是数据</li><li>键 和 值 之间使用 <code>:</code> 分隔</li><li>键必须是唯一的</li><li>值 可以取任何数据类型，但 键 只能使用 字符串、数字或 元组</li></ul></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  key1<span class="token punctuation">:</span> value1<span class="token punctuation">,</span>   key2<span class="token punctuation">:</span> value2<span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>   keyn<span class="token punctuation">:</span> valuen<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>字典中的键 key 是不允许重复的，如果里面有重复的，后面的默认覆盖前面的。</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">'小宝'</span><span class="token punctuation">:</span><span class="token string">'13850501856'</span><span class="token punctuation">,</span>  <span class="token string">'小鹏'</span><span class="token punctuation">:</span><span class="token string">'13900881234'</span><span class="token punctuation">,</span>  <span class="token string">'小宝'</span><span class="token punctuation">:</span><span class="token string">'13850508000'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span class="token comment"># &#123;'小宝': '13850508000', '小鹏': '13900881234'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="空字典"><a href="#空字典" class="headerlink" title="空字典"></a>空字典</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方式一</span>d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 方式二</span>d <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""&#123;&#125; &lt;class 'dict'>&#123;&#125; &lt;class 'dict'>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、字典的使用"><a href="#3、字典的使用" class="headerlink" title="3、字典的使用"></a>3、字典的使用</h2><h3 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h3><ul><li>字典和列表一样，也能够存储多个数据</li><li>列表中找某个元素时，是根据下标进行的；字典中找某个元素时，是根据’名字’（就是冒号:前面的那个值）</li><li>字典的每个元素由 2 部分组成，键:值</li><li><strong>键可以使用数字、布尔值、布尔值、元组等不可变数据类型，但是一般习惯使用字符串</strong></li><li><strong>每个字典里的 <code>key</code> 都是唯一的，如果出现了多个 key,后面的 value 会覆盖前一个 key 对应的 value.</strong></li></ul><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><p>字典中不存在索引，那如何获取里面的数据呢？两种方式：</p><ol><li>**字典名[key]**：没有找到对应的 key，会报错。</li><li>**字典名.get(key, defaultvalue)**：第一个参数是 key，第二个参数是默认值，即没有找到对应的 key，显示的内容。</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 字典</span>dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">'小宝'</span><span class="token punctuation">:</span><span class="token string">'13850501856'</span><span class="token punctuation">,</span>  <span class="token string">'小鹏'</span><span class="token punctuation">:</span><span class="token string">'13900881234'</span><span class="token punctuation">,</span>  <span class="token string">'小亮'</span><span class="token punctuation">:</span><span class="token string">'13899006745'</span><span class="token punctuation">,</span>  <span class="token string">'小音'</span><span class="token punctuation">:</span><span class="token string">'15900671234'</span><span class="token punctuation">,</span>  <span class="token string">'小伦'</span><span class="token punctuation">:</span><span class="token string">'15899996789'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">[</span><span class="token string">'小亮'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'小伦'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&#x3D;&#x3D;区别&#x3D;&#x3D;：<strong>如果 key 在字典中不存在的情况下。第一种方式报错，第二种方式不报错，而且还可以设置默认值。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">[</span><span class="token string">'小飞'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 报错的</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'小飞'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'小飞'</span><span class="token punctuation">,</span><span class="token string">'不存在此数据'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="添加与修改元素"><a href="#添加与修改元素" class="headerlink" title="添加与修改元素"></a>添加与修改元素</h3><p>1）**<code>字典名[key] = 新值</code>**</p><ul><li>添加一个键值对</li><li>修改里面的一个键值对的值</li></ul><p>2）**<code>setdefault(key, value)</code>**：该方法总能返回指定 key 对应的 value；但是如果该 key-value 对不存在，则先为该 key 设置默认的 value，然后再返回该 key 对应的 value，存在则直接返回 key 对应的 value 值</p><p>3）**<code>update(dict参数)</code>**：可使用一个字典所包含的 key-value 对来更新己有的字典。在执行 update() 方法时，如果己包含，那么原 value 会被覆盖；如果不包含，则添加进去。没有返回值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">'小宝'</span><span class="token punctuation">:</span><span class="token string">'13850501856'</span><span class="token punctuation">,</span>  <span class="token string">'小鹏'</span><span class="token punctuation">:</span><span class="token string">'13900881234'</span><span class="token punctuation">,</span>  <span class="token string">'小亮'</span><span class="token punctuation">:</span><span class="token string">'13899006745'</span><span class="token punctuation">&#125;</span>dict1<span class="token punctuation">[</span><span class="token string">'小鹏'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'18912346666'</span>result1 <span class="token operator">=</span> dict1<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'小飞'</span><span class="token punctuation">,</span><span class="token string">'18912346666'</span><span class="token punctuation">)</span>result2 <span class="token operator">=</span> dict1<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'小战'</span><span class="token punctuation">:</span><span class="token string">'18912346666'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""18912346666None"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>setdefault和update了解即可</p></blockquote><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>元素删除方法也有多种，比如使用del、pop()、popitem()</p><ol><li><strong><code>del 字典名[key]</code></strong> : 删除指定 key 的键值对</li><li><strong><code>字典对象.pop(key)</code></strong> : 用于获取指定 key 对应的 value，并删除这个 key-value 对</li><li><strong><code>字典对象.popitem()</code></strong> : popitem() 方法用于<strong>随机</strong>弹出字典中的一个 key-value 对</li><li>**<code>字典对象.clear()</code>**：如果全部都不想要可以使用clear()</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">'小鹏'</span><span class="token punctuation">:</span> <span class="token string">'13900881234'</span><span class="token punctuation">,</span>   <span class="token string">'小亮'</span><span class="token punctuation">:</span> <span class="token string">'13899006745'</span><span class="token punctuation">,</span>   <span class="token string">'小飞'</span><span class="token punctuation">:</span> <span class="token string">'18912346666'</span><span class="token punctuation">,</span>   <span class="token string">'小战'</span><span class="token punctuation">:</span> <span class="token string">'18912346666'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 打印长度为4</span><span class="token keyword">del</span> dict1<span class="token punctuation">[</span><span class="token string">'小战'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 打印长度为3</span>dict1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'小飞'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 打印长度为2</span>dict1<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 打印长度为1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><ul><li>**<code>items()</code>**：表示获取字典中的所有键值对</li><li>**<code>keys()</code>**：表示获取字典中的所有键</li><li>**<code>values()</code>**：表示获取字典中的所有值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">'小宝'</span><span class="token punctuation">:</span><span class="token string">'13850501856'</span><span class="token punctuation">,</span>  <span class="token string">'小鹏'</span><span class="token punctuation">:</span><span class="token string">'13900881234'</span><span class="token punctuation">,</span>  <span class="token string">'小亮'</span><span class="token punctuation">:</span><span class="token string">'13899006745'</span><span class="token punctuation">,</span>  <span class="token string">'小音'</span><span class="token punctuation">:</span><span class="token string">'15900671234'</span><span class="token punctuation">,</span>  <span class="token string">'小伦'</span><span class="token punctuation">:</span><span class="token string">'15899996789'</span><span class="token punctuation">&#125;</span>  <span class="token comment"># 遍历打印所有的键值对</span><span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span>  <span class="token comment"># 遍历打印所有的key</span><span class="token keyword">for</span> key <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment"># 遍历打印所有的value</span><span class="token keyword">for</span> value <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十、Python元组</title>
      <link href="/2024/06/27/python/%E5%8D%81%E3%80%81%E5%85%83%E7%BB%84/"/>
      <url>/2024/06/27/python/%E5%8D%81%E3%80%81%E5%85%83%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="十、Python元组"><a href="#十、Python元组" class="headerlink" title="十、Python元组"></a>十、Python元组</h1><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><ul><li>Tuple（元组）与列表类似，不同之处在于元组的 元素不能修改</li><li>元组 表示多个元素组成的序列</li><li>用于存储 一串 信息，数据之间使用 <code>,</code> 分隔</li></ul><ul><li>元组的声明使用的符号是: <code>小括号</code></li></ul><h2 id="2、元组VS列表"><a href="#2、元组VS列表" class="headerlink" title="2、元组VS列表"></a>2、元组VS列表</h2><p>Python的元组与列表类似，不同之处在于<strong>元组的元素不能修改</strong>。元组使用小括号，列表使用方括号。</p><table><thead><tr><th>声明方式</th><th>声明方式</th><th>空元素</th><th>数据类型</th><th>是否可改(增加、删除、修改)</th><th>允许重复元素否</th><th>是否支持索引切片</th></tr></thead><tbody><tr><td>元组</td><td><code>使用小括号()</code></td><td>tuple1&#x3D;()</td><td><code>&lt;class &#39;tuple&#39;&gt;</code></td><td><code>不允许</code></td><td>允许</td><td>支持</td></tr><tr><td>列表</td><td>使用方括号[]</td><td>list1&#x3D;[ ]</td><td>&lt;class ‘list’&gt;</td><td>允许</td><td>允许</td><td>支持</td></tr></tbody></table><h2 id="3、元组的创建"><a href="#3、元组的创建" class="headerlink" title="3、元组的创建"></a>3、元组的创建</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方式一</span>tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>tuple1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 方式一</span>tuple2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>   <span class="token comment"># 元组里只有一个元素时，加一个逗号</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 方式三</span>tuple3 <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># tuple():类型转换</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>tuple3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 方式四</span>tuple4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple4<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>tuple4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""(1, 2, 3, True, 'hello')&lt;class 'tuple'>(1,)&lt;class 'tuple'>()&lt;class 'tuple'>()&lt;class 'tuple'>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1）定义只有一个元素的元组，需要<strong>在唯一的元素后写一个逗号</strong></p><p>2）元组的操作只是支持：index 和 count，不支持增加、删除和修改元素，所以跟索引相关的方法都没有了。查看数组的长度是仍然使用：len() 函数</p><p>3）当然也可以通过索引和切片获取里面的元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'足球'</span><span class="token punctuation">,</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'网球'</span><span class="token punctuation">,</span><span class="token string">'乒乓球'</span><span class="token punctuation">,</span><span class="token string">'排球'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sports<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''结果如下：篮球排球乒乓球('网球', '乒乓球', '排球')('足球', '篮球', '网球')('足球', '网球', '排球')('排球', '乒乓球', '网球', '篮球', '足球')('乒乓球', '网球', '篮球', '足球')'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）元组遍历的方式也跟列表的方式是一样的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 元组的遍历</span><span class="token keyword">for</span> sport <span class="token keyword">in</span> sports<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sport<span class="token punctuation">)</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> sport <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>sports<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> sport<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sports<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> sports<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）总之，tuple 放弃了对元素的增删（内存结构设计上变的更精简），换取的是性能上的提升：创建 tuple 比 list 要快，存储空间比 list 占用更小。所以就出现了“能用 tuple 的地方就不用 list”的说法。</p><h2 id="4、支持的运算符"><a href="#4、支持的运算符" class="headerlink" title="4、支持的运算符"></a>4、支持的运算符</h2><table><thead><tr><th>运算符</th><th>含义</th><th>表达式</th><th>结果</th></tr></thead><tbody><tr><td><code>+</code></td><td>列表合并在一起</td><td><code>(1, 2, 3)+(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</code></td><td><code>(1, 2, 3, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</code></td></tr><tr><td><code>*</code></td><td>列表重复</td><td><code>(&#39;a&#39;,) * 3</code></td><td><code>(&#39;a&#39;, &#39;a&#39;, &#39;a&#39;)</code></td></tr><tr><td><code>in</code></td><td>是否为列表元素</td><td><code>&#39;a&#39; in (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</code></td><td><code>True</code></td></tr></tbody></table><h2 id="5、range-函数"><a href="#5、range-函数" class="headerlink" title="5、range() 函数"></a>5、range() 函数</h2><p>1）系统提供的内建函数</p><p>2）原型：range([start, ] end [, step&#x3D;1]) ，生成一个等差序列[start, end)</p><ul><li>start：表示列表起始值，包含， 默认为0 </li><li>stop：表示列表结束值，但是不包含 </li><li>step：步长， 默认为1</li></ul><p>3）range一般用于for-in循环遍历</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""range(0, 10)&lt;class 'range'>--------------------[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;class 'list'>--------------------(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)&lt;class 'tuple'>--------------------&lt;enumerate object at 0x000001497E2779A8>&lt;class 'enumerate'>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h2><p>如果不会涉及到对元素的操作可以使用元组的，这样访问速度会更快。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九、Python列表</title>
      <link href="/2024/06/27/python/%E4%B9%9D%E3%80%81Python%E5%88%97%E8%A1%A8/"/>
      <url>/2024/06/27/python/%E4%B9%9D%E3%80%81Python%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="九、列表"><a href="#九、列表" class="headerlink" title="九、列表"></a>九、列表</h1><h2 id="0、序列"><a href="#0、序列" class="headerlink" title="0、序列"></a>0、序列</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在python中，有这样一些类型，它们的成员是有序排列的，并且可以通过下标访问成员，这些类型称之为序列。eg：列表、range、元组和字符串；</p><h3 id="序列的通用操作"><a href="#序列的通用操作" class="headerlink" title="序列的通用操作"></a>序列的通用操作</h3><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><table><thead><tr><th><strong>函数</strong></th><th><strong>描述</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>len(item)</td><td>计算容器中元素个数</td><td></td></tr><tr><td>del(item)</td><td>删除变量</td><td>del 有两种方式</td></tr><tr><td>max(item)</td><td>返回容器中元素最大值</td><td>如果是字典，只针对 key 比较</td></tr><tr><td>min(item)</td><td>返回容器中元素最小值</td><td>如果是字典，只针对 key 比较</td></tr></tbody></table><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><table><thead><tr><th><strong>描述</strong></th><th><strong>Python</strong> <strong>表达式</strong></th><th><strong>结果</strong></th><th><strong>支持的数据类型</strong></th></tr></thead><tbody><tr><td>切片</td><td>“0123456789”[::-2]</td><td>“97531”</td><td>字符串、列表、元组</td></tr></tbody></table><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><table><thead><tr><th><strong>运算符</strong></th><th><strong>Python</strong> <strong>表达式</strong></th><th><strong>结果</strong></th><th><strong>描述</strong></th><th><strong>支持的数据类型</strong></th></tr></thead><tbody><tr><td>+</td><td>[1, 2] + [3, 4]</td><td>[1, 2, 3, 4]</td><td>合并</td><td>字符串、列表、元组</td></tr><tr><td>*</td><td>[“Hi!”] * 4</td><td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td>重复</td><td>字符串、列表、元组</td></tr><tr><td>in</td><td>3 in (1, 2, 3)</td><td>True</td><td>元素是否存在</td><td>字符串、列表、元组、字典</td></tr><tr><td>not in</td><td>4 not in (1, 2, 3)</td><td>True</td><td>元素是否不存在</td><td>字符串、列表、元组、字典</td></tr><tr><td>&gt; &gt;&#x3D; &#x3D;&#x3D; &lt; &lt;&#x3D;</td><td>(1, 2, 3) &lt; (2, 2, 3)</td><td>True</td><td>元素比较</td><td>字符串、列表、元组</td></tr></tbody></table><h2 id="1、列表介绍"><a href="#1、列表介绍" class="headerlink" title="1、列表介绍"></a>1、列表介绍</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul><li>List（列表） 是 Python 中使用 最频繁 的数据类型，在其他语言中通常叫做 数组</li><li>数据可以是任意类型的，里面的数据也可以重复</li><li>格式：<code>[元素1, 元素2, 元素3, ..., 元素n]</code></li><li>列表的 索引 从 0 开始</li><li>索引 就是数据在 列表 中的位置编号，索引 又可以被称为 下标</li></ul><blockquote><p>注意：从列表中取值时，如果 超出索引范围，程序会报错</p></blockquote><h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><p>语法：<strong>列表名 &#x3D; [ 元素1，元素2，元素3…..]</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 列表的创建</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 空列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>list3 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 类型转换：把参数转换为列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span>list3 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'12345678'</span><span class="token punctuation">)</span> <span class="token comment"># 类型转换：str-->list</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[]&lt;class 'list'>[1, 2, 3, True, False, 'hello'][]['1', '2', '3', '4', '5', '6', '7', '8']"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、列表的索引与切片"><a href="#2、列表的索引与切片" class="headerlink" title="2、列表的索引与切片"></a>2、列表的索引与切片</h2><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>列表跟字符串一样，里面的元素就像一个个士兵站好的队伍一样，站队的时候他们都会报数。从头到尾每个士兵都会报一个递增的数字，在我们列表这里也是如此的，报数的数字就是对应元素的索引（index），但是与我们生活中不同的是，**列表第一元素的索引是<code>0</code>**。</p><p>字符串中是支持负数下标的，列表是否支持？同样也是 -1 开始，并且是从右向左的。</p><p>可以使用 heros[-1] 打印一下。</p><p>事实上结果是完全没有问题的，索引的使用和字符串是一模一样的。即：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">></span> 列表<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token string">'探险家'</span><span class="token punctuation">,</span><span class="token string">'河流之王'</span><span class="token punctuation">,</span><span class="token string">'荒漠屠夫'</span><span class="token punctuation">,</span><span class="token string">'齐天大圣'</span><span class="token punctuation">,</span><span class="token string">'冰晶凤凰'</span><span class="token punctuation">,</span><span class="token string">'赛恩'</span><span class="token punctuation">]</span><span class="token operator">></span>       <span class="token operator">|</span>       <span class="token operator">|</span>          <span class="token operator">|</span>        <span class="token operator">|</span>          <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">></span> 正索引<span class="token punctuation">:</span>   <span class="token number">0</span>       <span class="token number">1</span>          <span class="token number">2</span>        <span class="token number">3</span>          <span class="token number">4</span>       <span class="token number">5</span><span class="token operator">></span> 负索引<span class="token punctuation">:</span>   <span class="token operator">-</span><span class="token number">6</span>      <span class="token operator">-</span><span class="token number">5</span>        <span class="token operator">-</span><span class="token number">4</span>       <span class="token operator">-</span><span class="token number">3</span>          <span class="token operator">-</span><span class="token number">2</span>      <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="切片-1"><a href="#切片-1" class="headerlink" title="切片"></a>切片</h3><p>通过索引，我们可以访问list(列表)的单个元素。但有时候我们要取列表的一个片段，这就是“切片”操作。切片返回的是一个列表，可以理解为“子列表”。</p><p>切片是通过索引来实现的，比如： <code>heros[1:3]</code>，这里索引变成两个用冒号<code>:</code>分隔，分别是切片的开始索引和结束索引，<code>[1:3]</code>代表的是一个左闭右开的区间，即包含左边索引的元素，到右边索引为止但不包括该元素。</p><p>切片还有更加高级的用法就是控制步长和方向。格式：<code>列表名[start：end：step]</code></p><ul><li>start和end是左闭右开的区间</li><li>step表示的是步长，并且步长可以是正向（从左向右）也可以是逆向（从右向左）取元素。</li><li>step如果是负数表示的是逆向，如果是正数表示的是正向</li><li>如果end省略则表示到列表最后一个元素，如果start省略表示从第一个元素开始</li></ul><h2 id="3、列表的数据操作"><a href="#3、列表的数据操作" class="headerlink" title="3、列表的数据操作"></a>3、列表的数据操作</h2><h3 id="运算符操作"><a href="#运算符操作" class="headerlink" title="运算符操作"></a>运算符操作</h3><p>列表作为Python的一种“内置类型”，它也像基本类型数字、字符串那样可以进行一些运算符的运算，如下表所示：</p><table><thead><tr><th>运算符</th><th>含义</th><th>表达式</th><th>结果</th></tr></thead><tbody><tr><td><code>+</code></td><td>列表合并在一起</td><td><code>[1, 2, 3]+[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></td><td><code>[1, 2, 3, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></td></tr><tr><td><code>*</code></td><td>列表重复</td><td><code>[&#39;a&#39;] * 3</code></td><td><code>[&#39;a&#39;, &#39;a&#39;, &#39;a&#39;]</code></td></tr><tr><td><code>in</code></td><td>是否为列表元素</td><td><code>&#39;a&#39; in [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></td><td><code>True</code></td></tr></tbody></table><p>我们对于可变数据（例如，列表，数据库等）的操作，一般包含增、删、改、查四个方面。</p><h4 id="列表的加法-乘法"><a href="#列表的加法-乘法" class="headerlink" title="列表的加法&amp;乘法"></a>列表的加法&amp;乘法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 列表的加法和乘法</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span>list3 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'12345678'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3 <span class="token operator">+</span> list2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3 <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""['1', '2', '3', '4', '5', '6', '7', '8', 1, 2, 3, True, False, 'hello']['1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8']"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="成员判断"><a href="#成员判断" class="headerlink" title="成员判断"></a>成员判断</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 列表的成员运算</span>list3 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'12345678'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> list3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""FalseFalseFalse"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表的常用方法"><a href="#列表的常用方法" class="headerlink" title="列表的常用方法"></a>列表的常用方法</h3><table><thead><tr><th><strong>分类</strong></th><th><strong>关键字</strong> <strong>&#x2F;</strong> <strong>函数</strong> <strong>&#x2F;</strong> <strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>增加</td><td>列表.insert(索引, 数据)</td><td>在指定位置插入数据</td></tr><tr><td></td><td>列表.append(数据)</td><td>在末尾追加数据</td></tr><tr><td></td><td>列表.extend(列表2)</td><td>将列表2 的数据追加到列表</td></tr><tr><td>修改</td><td>列表[索引] &#x3D; 数据</td><td>修改指定索引的数据</td></tr><tr><td>删除</td><td>del 列表[索引]</td><td>删除指定索引的数据</td></tr><tr><td></td><td>列表.remove[数据]</td><td>删除第一个出现的指定数据</td></tr><tr><td></td><td>列表.pop</td><td>删除末尾数据</td></tr><tr><td></td><td>列表.pop(索引)</td><td>删除指定索引数据</td></tr><tr><td></td><td>列表.clear</td><td>清空列表</td></tr><tr><td>统计</td><td>len(列表)</td><td>列表长度</td></tr><tr><td></td><td>列表.count(数据)</td><td>数据在列表中出现的次数</td></tr><tr><td>排序</td><td>列表.sort()</td><td>升序排序</td></tr><tr><td></td><td>列表.sort(reverse&#x3D;True)</td><td>降序排序</td></tr><tr><td></td><td>列表.reverse()</td><td>逆序、反转</td></tr></tbody></table><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>添加元素有一下几个方法:</p><ul><li>append 在末尾添加元素</li><li>insert 在指定位置插入元素</li><li>extend 合并两个列表</li></ul><h5 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h5><p>append 会把新元素添加到列表末尾</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 添加元素</span>list3 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'12345'</span><span class="token punctuation">)</span>list3<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'666'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token comment"># 添加列表</span>list3<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token comment"># 插入元素</span>list3<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""['1', '2', '3', '4', '5', '666']['1', '2', '3', '4', '5', '666', 1, 2, 3]['1', '2', 'hello', '3', '4', '5', '666', 1, 2, 3]"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h5><p>insert(index, object) 在指定位置 index 前插入元素 object</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">strs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">]</span>strs<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span>  <span class="token comment"># ['a', 'b', 'm', 'h', 's']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="extend"><a href="#extend" class="headerlink" title="extend()"></a>extend()</h5><p>通过 extend 可以将另一个集合中的元素逐一添加到列表中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">]</span>a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""['a', 'b', 'c', 'd', 'e', 'f']['d','e','f']"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h4><p>我们是通过指定下标来访问列表元素，因此修改元素的时候，为指定的列表下标赋值即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义变量A，默认有3个元素</span>A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'xiaoWang'</span><span class="token punctuation">,</span><span class="token string">'xiaoZhang'</span><span class="token punctuation">,</span><span class="token string">'xiaoHua'</span><span class="token punctuation">]</span><span class="token comment"># 修改元素</span>A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'xiaoLu'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----修改之后，列表A的数据-----A=%s"</span> <span class="token operator">%</span> A<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h4><p>所谓的查找，就是看看指定的元素是否存在，以及查看元素所在的位置，主要包含一下几个方法：</p><ul><li>in 和 not in</li><li>index 和 count</li></ul><h5 id="in-not-in"><a href="#in-not-in" class="headerlink" title="in, not in"></a>in, not in</h5><p>python 中查找的常用方法为：</p><ul><li>in（存在）,如果存在那么结果为true，否则为false</li><li>not in（不存在），如果不存在那么结果为true，否则false</li></ul><h5 id="index-count"><a href="#index-count" class="headerlink" title="index, count"></a>index, count</h5><ul><li>index 用来查找元素所在的位置，如果未找到则会报错；</li><li>count 用来计算某个元素出现的次数。它们的使用和字符串里的使用效果一致。</li></ul><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><p>列表元素的常用删除方法有：</p><ul><li>del：根据下标进行删除</li><li>pop：删除最后一个元素</li><li>remove：根据元素的值进行删除</li></ul><h5 id="del"><a href="#del" class="headerlink" title="del()"></a>del()</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">movieName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'加勒比海盗'</span><span class="token punctuation">,</span><span class="token string">'骇客帝国'</span><span class="token punctuation">,</span><span class="token string">'速度与激情'</span><span class="token punctuation">]</span><span class="token keyword">del</span> movieName<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>movieName<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">movieName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'加勒比海盗'</span><span class="token punctuation">,</span><span class="token string">'第一滴血'</span><span class="token punctuation">,</span><span class="token string">'速度与激情'</span><span class="token punctuation">]</span>movieName<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>movieName<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">movieName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'加勒比海盗'</span><span class="token punctuation">,</span><span class="token string">'霍比特人'</span><span class="token punctuation">,</span><span class="token string">'速度与激情'</span><span class="token punctuation">]</span>movieName<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'指环王'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>movieName<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="排序-sort-reverse"><a href="#排序-sort-reverse" class="headerlink" title="排序(sort, reverse)"></a>排序(sort, reverse)</h4><ul><li>sort 方法是将 list 按特定顺序重新排列，默认为由小到大，参数 reverse&#x3D;True 可改为倒序，由大到小。</li><li>reverse 方法是将 list 逆置。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 逆置，不排序</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 默认从小到大排序</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 从大到小排序</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、列表的遍历"><a href="#4、列表的遍历" class="headerlink" title="4、列表的遍历"></a>4、列表的遍历</h2><p>遍历就是 从头到尾 依次从列表中获取数据。在循环体内部针对 每一个元素，执行相同的操作。</p><h3 id="使用-for-循环"><a href="#使用-for-循环" class="headerlink" title="使用 for 循环"></a>使用 for 循环</h3><p>while 循环是一种基本的遍历列表数据的方式，但是最常用也是最简单的方式是使用 for 循环</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 列表的遍历</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> list2<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> item <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 枚举</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> list2<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><pre class="line-numbers language-none"><code class="language-none">123TrueFalsehello------------------------------0 11 22 33 True4 False5 hello------------------------------0 11 22 33 True4 False5 hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-while-循环"><a href="#使用-while-循环" class="headerlink" title="使用 while 循环"></a>使用 while 循环</h3><p>为了更有效率的输出列表的每个数据，可以使用循环来完成</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">namesList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'xiaoWang'</span><span class="token punctuation">,</span><span class="token string">'xiaoZhang'</span><span class="token punctuation">,</span><span class="token string">'xiaoHua'</span><span class="token punctuation">]</span>length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>namesList<span class="token punctuation">)</span>  <span class="token comment"># 获取列表长度</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>namesList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    i<span class="token operator">+=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><pre class="line-numbers language-none"><code class="language-none">xiaoWangxiaoZhangxiaoHua<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5、列表嵌套"><a href="#5、列表嵌套" class="headerlink" title="5、列表嵌套"></a>5、列表嵌套</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>​类似 while 循环的嵌套，列表也是支持嵌套的。一个列表中的元素又是一个列表，那么这就是列表的嵌套。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> schoolNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">,</span> <span class="token number">333</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> schoolNames<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment"># 获取数字 33</span><span class="token number">33</span><span class="token operator">>></span><span class="token operator">></span> schoolNames<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'abc'</span>  <span class="token comment"># 把 33 修改为 'abc'</span><span class="token operator">>></span><span class="token operator">></span> schoolNames<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">,</span> <span class="token number">333</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> schoolNames<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment"># 获取 'abc' 里的字符c</span><span class="token string">'c'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说，<strong>操作嵌套列表，只要把要操作元素的下标当作变量名来使用即可。</strong></p><h3 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h3><p>一个学校，有3个办公室，现在有8位老师等待工位的分配，请编写程序，完成随机的分配</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token comment"># 定义一个列表用来保存3个办公室</span>offices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 定义一个列表用来存储8位老师的名字</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">,</span><span class="token string">'H'</span><span class="token punctuation">]</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>    index <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>        offices<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> tempNames <span class="token keyword">in</span> offices<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'办公室%d的人数为:%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>tempNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    i<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> tempNames<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token operator">%</span>name<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下:</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252159146.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八、Python字符串</title>
      <link href="/2024/06/25/python/%E5%85%AB%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2024/06/25/python/%E5%85%AB%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="八、Python字符串"><a href="#八、Python字符串" class="headerlink" title="八、Python字符串"></a>八、Python字符串</h1><h2 id="1、字符串介绍"><a href="#1、字符串介绍" class="headerlink" title="1、字符串介绍"></a>1、字符串介绍</h2><p>字符串就是 一串字符，是编程语言中表示文本的数据类型。</p><p>在 Python 中可以使用 一对双引号 “ 或者 一对单引号 ‘ 定义一个字符串。</p><h3 id="字符串表示方式"><a href="#字符串表示方式" class="headerlink" title="字符串表示方式"></a>字符串表示方式</h3><p>字符串是以单引号或者双引号括起来的任意文本，也可以是以三引号’’’或者”””引起来的任意文本。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">"I'm Tom"</span>  <span class="token comment"># 一对双引号 </span>b <span class="token operator">=</span> <span class="token string">'Tom said:"I am Tom"'</span>  <span class="token comment"># 一对单引号</span>c <span class="token operator">=</span> <span class="token string">'Tom said:"I\'m Tom"'</span>  <span class="token comment"># 转义字符</span>d <span class="token operator">=</span> <span class="token triple-quoted-string string">'''Tom said:"I'm Tom"'''</span>  <span class="token comment"># 三个单引号</span>e <span class="token operator">=</span> <span class="token triple-quoted-string string">"""Tom said:"I'm Tom" """</span>  <span class="token comment"># 三个双引号</span>f <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 空串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong>：</p><ul><li>双引号或者单引号中的数据，就是字符串</li><li>如果使用一对引号来定义字符串，当出现符号冲突时可以使用转义字符</li><li>使用三个单引号、双引号定义的字符串可以包裹任意文本</li></ul><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>转义字符是很多程序语言、数据格式和通信协议的形式文法的一部分，使用<code>\</code>来表示一个转义字符。常见的转义字符以及它所代表的含义如下表:</p><table><thead><tr><th align="center">转义字符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">\r</td><td align="center">将当前位置移到本行开头</td></tr><tr><td align="center">\n</td><td align="center">将当前位置移到下一行开头</td></tr><tr><td align="center">\t</td><td align="center">用来表示一个制表符</td></tr><tr><td align="center"><code>\\</code></td><td align="center">代表一个反斜线字符<code>\</code></td></tr><tr><td align="center">&#39;</td><td align="center">用来显示一个单引号</td></tr><tr><td align="center">&quot;</td><td align="center">用来显示一个双引号</td></tr></tbody></table><h2 id="2、索引和切片"><a href="#2、索引和切片" class="headerlink" title="2、索引和切片"></a>2、索引和切片</h2><h3 id="下标-索引"><a href="#下标-索引" class="headerlink" title="下标&#x2F;索引"></a>下标&#x2F;索引</h3><p>所谓<code>“下标”</code>又叫<code>“索引”</code>，就是编号，就好比超市中的存储柜的编号，通过这个编号就能找到相应的存储空间。</p><p>可以使用 索引 获取一个字符串中 指定位置的字符，索引计数从 0 开始。</p><p>如果有字符串:<code>name = &#39;abcdef&#39;</code>，在内存中的实际存储如下:</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252158232.png" alt="img"></p><p>如果想取出部分字符，那么可以通过<code>下标</code>的方法，（注意在计算机中，下标从 0 开始）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'abcdef'</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""abc"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>所谓遍历，可以理解为按照一定的规则(一般情况下就是数据的下标)，访问每一个数据。</p><p>字符串是可迭代对象，能够进行遍历。可以使用 while 和 for 语句，对字符串里的元素进行遍历。</p><p>while 语句遍历:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">msg <span class="token operator">=</span> <span class="token string">'hello world'</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>for 语句遍历:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token comment"># 字符串的遍历</span><span class="token keyword">for</span> i <span class="token keyword">in</span> s1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> index<span class="token punctuation">,</span>value <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""hello world********************0 h1 e2 l3 l4 o5  6 w7 o8 r9 l10 d********************0 h1 e2 l3 l4 o5  6 w7 o8 r9 l10 d"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>切片是指对操作的对象截取其中一部分的操作。<strong>字符串、列表、元组</strong>都支持切片操作。</p><p><strong>切片的语法：<code>[起始:结束:步长]</code>，也可以简化使用 <code>[起始:结束]</code></strong></p><blockquote><p><strong>注意：选取的区间从”起始”位开始，到”结束”位的前一位结束（不包含结束位本身)，步长表示选取间隔。</strong></p></blockquote><p>索引是通过下标取某一个元素，切片是通过下标去某一段元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'Hello World!'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># o</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># lo W 包含下标 3，不含下标 7</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Hello World! 取出所有元素（没有起始位和结束位之分），默认步长为1</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># ello World! 从下标为1开始，取出 后面所有的元素（没有结束位）</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># Hell 从起始位置开始，取到 下标为4的前一个元素（不包括结束位本身）</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Hello World 从起始位置开始，取到 倒数第一个元素（不包括结束位本身）</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># rld 从倒数第4个元素开始，取到 倒数第1个元素（不包括结束位本身）</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># el 从下标为1开始，取到下标为5的前一个元素，步长为2（不包括结束位本身）</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># oW ol 从下标为7的元素开始(包含下标为7的元素)，倒着取到下标为2的元素(不包括下标为2的元素) </span><span class="token comment"># python 字符串快速逆置</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># !dlroW olleH 从后向前，按步长为1进行取值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 类型转换</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># int-->str</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#list-->str</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#tuple-->str</span><span class="token triple-quoted-string string">"""12 &lt;class 'str'>[1, 2, 3, 4] &lt;class 'str'>(1,) &lt;class 'str'>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、字符串通用操作"><a href="#3、字符串通用操作" class="headerlink" title="3、字符串通用操作"></a>3、字符串通用操作</h2><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><p>字符串和字符串之间能够使用加法运算符，作用是将两个字符串拼接成为一个字符串。例如:<code>&#39;hello&#39; + &#39;world&#39;</code>的结果是 <code>&#39;helloworld&#39;</code></p><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p>字符串和数字之间可以做乘法运算，结果是将指定的字符串重复多次。例如:<code>&#39;hello&#39;*2</code>的结果是<code>hellohello</code></p><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>字符串和字符串之间，如果使用比较运算符进行计算，会获取字符对应的编码，然后进行比较。</p><h3 id="成员运算"><a href="#成员运算" class="headerlink" title="成员运算"></a>成员运算</h3><p>成员运算符 (in 和 not in) 可以用来快速的判断元素是否在指定的可迭代对象里，语法格式 <code>要判断的元素 in 可迭代对象</code>。</p><h4 id="in-运算符"><a href="#in-运算符" class="headerlink" title="in 运算符"></a>in 运算符</h4><p>思考：怎样判断一个字符是否在指定的字符串里？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">msg <span class="token operator">=</span> <span class="token string">'hello'</span>char <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个字符:'</span><span class="token punctuation">)</span><span class="token comment"># 使用字符串的 find 方法可以判断字符是否存在</span><span class="token keyword">if</span> msg<span class="token punctuation">.</span>find<span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您输入的字符存在'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您输入的字符不存在'</span><span class="token punctuation">)</span><span class="token comment"># 使用 in 运算符可以更加方便的查看字符是否存在</span><span class="token keyword">if</span> char <span class="token keyword">in</span> msg<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您输入的字符存在'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您输入的字符不存在'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="not-in-运算符"><a href="#not-in-运算符" class="headerlink" title="not in 运算符"></a>not in 运算符</h4><p>和 in 运算符的使用方式一致，只不过 not in 用来判断元素是否 不在 指定的字符串里。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>不是所有的数据都能使用身份运算符，身份运算符后面只能是一个可迭代对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'h'</span> <span class="token keyword">in</span> <span class="token string">'hello'</span>  <span class="token string">'zhangsan'</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'henry'</span><span class="token punctuation">,</span><span class="token string">'merry'</span><span class="token punctuation">,</span><span class="token string">'jack'</span><span class="token punctuation">]</span><span class="token number">1</span> <span class="token keyword">in</span> <span class="token number">123</span> <span class="token comment"># 报错，数字 123 不是一个可迭代对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>除上述几种运算符以外，字符串默认不支持其他运算符。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 序列的通用操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token operator">+</span><span class="token string">' mia'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">min</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""11w  FalseTrue"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、字符串常用方法"><a href="#4、字符串常用方法" class="headerlink" title="4、字符串常用方法"></a>4、字符串常用方法</h2><p>字符串的常见操作包括：</p><ul><li><a href="#tag01">获取长度</a>:len</li><li><a href="#tag02">查找内容</a>:find,index,rfind,rindex</li><li><a href="#tag03">判断</a>:startswith,endswith,isalpha,isdigit,isalnum,isspace</li><li><a href="#tag04">计算出现次数</a>:count</li><li><a href="#tag05">替换内容</a>:replace</li><li><a href="#tag06">切割字符串</a>:split,rsplit,splitlines,partition,rpartition</li><li><a href="#tag07">修改大小写</a>:capitalize,title,upper,lower</li><li><a href="#tag08">空格处理</a>:ljust,rjust,center,lstrip,rstrip,strip</li><li><a href="#tag09">字符串拼接</a>:join</li></ul><blockquote><p><strong>在 Python 中，字符串是不可变的！所有的字符串相关方法，都不会改变原有的字符串，都是返回一个结果，在这个新的返回值里，保留了执行后的结果！</strong></p></blockquote><h3 id="3-1、-获取长度"><a href="#3-1、-获取长度" class="headerlink" title="3.1、 获取长度"></a>3.1、 获取长度</h3><h4 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h4><p>len() 函数可以获取字符串的长度。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>mystr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 17 获取字符串的长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-2、-查找内容"><a href="#3-2、-查找内容" class="headerlink" title="3.2、 查找内容"></a>3.2、 查找内容</h3><p>查找相关的方法，使用方式大致相同，但是略有区别。</p><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p><strong>查找指定内容在字符串中是否存在，如果存在就返回该内容在字符串中第一次出现的开始位置索引值，如果不存在，则返回-1.</strong></p><h5 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">S<span class="token punctuation">.</span>find<span class="token punctuation">(</span>sub <span class="token punctuation">[</span><span class="token punctuation">,</span> start<span class="token punctuation">[</span><span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'好风光'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 10 '好风光'第一次出现时，'好'所在的位置</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># -1  '你好'不存在，返回 -1</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'风'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 15 从下标12开始查找'风',找到风所在的位置 15</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'风光'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># -1 从下标1开始到12查找"风光",未找到，返回 -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="rfind"><a href="#rfind" class="headerlink" title="rfind()"></a>rfind()</h4><p><strong>类似于 find()函数，不过是从右边开始查找。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h4><p><strong>跟 find() 方法一样，只不过，find() 方法未找到时，返回-1，而 str 未找到时，会报一个异常。</strong></p><p>语法格式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">S<span class="token punctuation">.</span>index<span class="token punctuation">(</span>sub<span class="token punctuation">[</span><span class="token punctuation">,</span> start<span class="token punctuation">[</span><span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="rindex"><a href="#rindex" class="headerlink" title="rindex()"></a>rindex()</h4><p>类似于 index()，不过是从右边开始。</p><h3 id="3-3、判断"><a href="#3-3、判断" class="headerlink" title="3.3、判断"></a>3.3、判断</h3><p>python 提供了非常丰富的方法，可以用来对一个字符串进行判断。</p><h4 id="startswith"><a href="#startswith" class="headerlink" title="startswith()"></a>startswith()</h4><p>判断字符串是否以指定内容开始。 语法格式:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">S<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>prefix<span class="token punctuation">[</span><span class="token punctuation">,</span> start<span class="token punctuation">[</span><span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'今'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'今日'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="endswith"><a href="#endswith" class="headerlink" title="endswith()"></a>endswith()</h4><p>判断字符串是否以指定内容结束。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'好风光'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#True</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'好日子'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="isalpha"><a href="#isalpha" class="headerlink" title="isalpha()"></a>isalpha()</h4><p>判断字符串是否是纯字母。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>mystr <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># False 因为中间有空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="isdigit"><a href="#isdigit" class="headerlink" title="isdigit()"></a>isdigit()</h4><p>判断一个字符串是否是纯数字，只要出现非0~9的数字，结果就是False.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'1234'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># True</span>mystr <span class="token operator">=</span> <span class="token string">'123.4'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># False</span>mystr <span class="token operator">=</span> <span class="token string">'-1234'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="isalnum"><a href="#isalnum" class="headerlink" title="isalnum()"></a>isalnum()</h4><p>判断是否由数字和字母组成。只要出现了非数字和字母，就返回False.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'abcd'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>mystr <span class="token operator">=</span> <span class="token string">'1234'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>mystr <span class="token operator">=</span> <span class="token string">'abcd1234'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>mystr <span class="token operator">=</span> <span class="token string">'abcd1234_'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="isspace"><a href="#isspace" class="headerlink" title="isspace()"></a>isspace()</h4><p>如果 mystr 中只包含空格，则返回 True，否则返回 False.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># False mystr是一个空字符串</span>mystr <span class="token operator">=</span> <span class="token string">'  '</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># True 只有空格</span>mystr <span class="token operator">=</span> <span class="token string">' d'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># False 除了空格外还有其他内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4、计算出现次数"><a href="#3-4、计算出现次数" class="headerlink" title="3.4、计算出现次数"></a>3.4、计算出现次数</h3><h4 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h4><p>返回 str 在 start 和 end 之间 在 mystr 里面出现的次数。</p><p>语法格式:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">S<span class="token punctuation">.</span>count<span class="token punctuation">(</span>sub<span class="token punctuation">[</span><span class="token punctuation">,</span> start<span class="token punctuation">[</span><span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 3. '好'字出现三次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-5、替换"><a href="#3-5、替换" class="headerlink" title="3.5、替换"></a>3.5、替换</h3><h4 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h4><p>替换字符串中指定的内容，如果指定次数 count，则替换不会超过 count 次。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span>newstr <span class="token operator">=</span> mystr<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'坏'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">)</span>  <span class="token comment"># 今天天气好晴朗，处处好风光呀好风光  原字符串未改变！</span><span class="token keyword">print</span><span class="token punctuation">(</span>newstr<span class="token punctuation">)</span>  <span class="token comment"># 今天天气坏晴朗，处处坏风光呀坏风光 得到的新字符串里，'好'被修改成了'坏'</span>newstr <span class="token operator">=</span> mystr<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">,</span><span class="token string">'坏'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 指定了替换的次数</span><span class="token keyword">print</span><span class="token punctuation">(</span>newstr<span class="token punctuation">)</span> <span class="token comment"># 今天天气坏晴朗，处处坏风光呀好风光 只有两处的'好'被替换成了'坏'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-6、内容分隔"><a href="#3-6、内容分隔" class="headerlink" title="3.6、内容分隔"></a>3.6、内容分隔</h3><p>内容分隔主要涉及到 split,splitlines,partition 和 rpartition 四个方法。</p><h4 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h4><p>以指定字符串为分隔符切片，如果 maxsplit 有指定值，则仅分隔 <code>maxsplit + 1</code> 个子字符串。<strong>返回的结果是一个列表。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span>result <span class="token operator">=</span> mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 没有指定分隔符，默认使用空格，换行等空白字符进行分隔</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment"># ['今天天气好晴朗，处处好风光呀好风光'] 没有空白字符，所以，字符串未被分隔</span>result <span class="token operator">=</span> mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">)</span>  <span class="token comment"># 以 '好' 为分隔符</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment"># ['今天天气', '晴朗，处处','风光呀,'风光']</span>result <span class="token operator">=</span> mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"好"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 以 '好' 为分隔符，最多切割成3份</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment"># ['今天天气', '晴朗，处处', '风光呀好风光']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="rsplit"><a href="#rsplit" class="headerlink" title="rsplit()"></a>rsplit()</h4><p>用法和 split 基本一致，只不过是从右往左分隔。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#['今天天气好晴朗，处处好风光呀', '风光']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="splitlines"><a href="#splitlines" class="headerlink" title="splitlines()"></a>splitlines()</h4><p>按照行分隔，返回一个包含各行作为元素的列表。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'hello \nworld'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="partition"><a href="#partition" class="headerlink" title="partition()"></a>partition()</h4><p>把 mystr 以 str 分割成三部分，str 前，str 和 str 后，三部分组成一个元组</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""('今天天气', '好', '晴朗，处处好风光呀好风光')"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="rpartition"><a href="#rpartition" class="headerlink" title="rpartition"></a>rpartition</h4><p>类似于 partition()函数,不过是从右边开始.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'今天天气好晴朗，处处好风光呀好风光'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>rpartition<span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""('今天天气好晴朗，处处好风光呀', '好', '风光')"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-7、修改大小写"><a href="#3-7、修改大小写" class="headerlink" title="3.7、修改大小写"></a>3.7、修改大小写</h3><p>修改大小写的功能只对英文有效，主要包括，首字母大写 capitalize,每个单词的首字母大写 title,全小写 lower,全大写 upper.</p><h4 id="capitalize"><a href="#capitalize" class="headerlink" title="capitalize()"></a>capitalize()</h4><p>第一个单词的首字母大写。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># Hello world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="title"><a href="#title" class="headerlink" title="title()"></a>title()</h4><p>每个单词的首字母大写。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># Hello World</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="lower"><a href="#lower" class="headerlink" title="lower()"></a>lower()</h4><p>所有都变成小写。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'hElLo WorLD'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># hello world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="upper"><a href="#upper" class="headerlink" title="upper()"></a>upper()</h4><p>所有都变成大写。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#HELLO WORLD</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-8、空格处理"><a href="#3-8、空格处理" class="headerlink" title="3.8、空格处理"></a>3.8、空格处理</h3><p>Python 为我们提供了各种操作字符串里表格的方法。</p><h4 id="1-ljust"><a href="#1-ljust" class="headerlink" title="1. ljust()"></a>1. ljust()</h4><p>返回指定长度的字符串，并在右侧使用空白字符补全(左对齐)。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># hello     在右边补了五个空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-rjust"><a href="#2-rjust" class="headerlink" title="2. rjust()"></a>2. rjust()</h4><p>返回指定长度的字符串，并在左侧使用空白字符补全(右对齐)。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#      hello在左边补了五个空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-center"><a href="#3-center" class="headerlink" title="3. center()"></a>3. center()</h4><p>返回指定长度的字符串，并在两端使用空白字符补全(居中对齐)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#  hello   两端加空格，让内容居中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-lstrip"><a href="#4-lstrip" class="headerlink" title="4. lstrip()"></a>4. lstrip()</h4><p>删除 mystr 左边的空白字符。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'    he   llo      '</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#he   llo      只去掉了左边的空格，中间和右边的空格被保留</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-rstrip"><a href="#5-rstrip" class="headerlink" title="5. rstrip()"></a>5. rstrip()</h4><p>删除 mystr 右边的空白字符。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'    he   llo      '</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#    he   llo右边的空格被删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6-strip"><a href="#6-strip" class="headerlink" title="6. strip()"></a>6. strip()</h4><p>删除两断的空白字符。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'    he   llo      '</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#he   llo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-9、字符串拼接"><a href="#3-9、字符串拼接" class="headerlink" title="3.9、字符串拼接"></a>3.9、字符串拼接</h3><p><strong>把参数进行遍历，取出参数里的每一项，然后再在后面加上 mystr。</strong></p><p><strong>语法格式</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">S<span class="token punctuation">.</span>join<span class="token punctuation">(</span>iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'a'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'hxmdq'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hi'</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'good'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""haxamadaqhiahelloagood"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>作用：可以把列表或者元组快速的转变成为字符串，并且以指定的字符分隔。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">txt <span class="token operator">=</span> <span class="token string">'_'</span><span class="token keyword">print</span><span class="token punctuation">(</span>txt<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hi'</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'good'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>txt<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'good'</span><span class="token punctuation">,</span><span class="token string">'hi'</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""hi_hello_goodgood_hi_hello"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、字符集"><a href="#5、字符集" class="headerlink" title="5、字符集"></a>5、字符集</h2><p>计算机只能处理数字(其实就是数字0和数字1)，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111&#x3D;十进制255），0 - 255被用来表示大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码。</p><p>ASCII码表使用7位二进制表示一个字符，它的区间范围时0~127，一共只能表示128个字符，仅能支持英语。随着计算机科学的发展，西欧语言、希腊语、泰语、阿拉伯语、希伯来语等语言的字符也被添加到码表中，形成了一个新的码表ISO8859-1(又被称为Latin1)码表。ISO8859-1使用8位二进制表示一个字符串，完全兼容ASCII码表。</p><p>Unicode（统一码、万国码、单一码）是计算机科学领域里的一项业界标准，包括字符集、编码方案等。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p><h3 id="字符和编码相互转换"><a href="#字符和编码相互转换" class="headerlink" title="字符和编码相互转换"></a>字符和编码相互转换</h3><p>使用 chr 和 ord 方法，可以实现字符和编码之间的相互转换。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 使用ord方法，可以获取一个字符对应的编码</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 使用chr方法，可以获取一个编码对应的字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="编码规则"><a href="#编码规则" class="headerlink" title="编码规则"></a>编码规则</h3><p>使用Unicode为每种语言的每个字符都设定了唯一的二进制编码，但是它还是存在一定的问题，不够完美。</p><p>例如，汉字 “你” 转换成为一个字符结果是<code>0x4f60</code>,转换成为二进制就是 <code>01001111 01100000</code>，此时就有两个问题:</p><ol><li><code>1001111 01100000</code> 到底是一个汉字 “你” ，还是两个 Latin1 字符？</li><li>如果Unicode进行了规定，每个字符都使用n个八位来表示，对于Latin1字符来说，又会浪费很多存储空间。</li></ol><p>为了解决这个问题，就出现了一些编码规则，按照一定的编码规则对Unicode数字进行计算，得出新的编码。在中国常用的字符编码有 <code>GBK</code>,<code>Big5</code>和<code>utf8</code>这三种编码规则。</p><p>使用字符串的encode方法，可以将字符串按照指定的编码格式转换称为二进制；使用decode 方法，可以将一个二进制数据按照指定的编码格式转换成为字符串。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">'你'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>  <span class="token comment"># 将字符 你 按照utf8格式编码称为二进制</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class 'bytes'></span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>  <span class="token comment"># b'\xe4\xbd\xa0'</span>s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span> <span class="token comment"># 将二进制按照utf8格式解码称为字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>s3 <span class="token operator">=</span> <span class="token string">'你'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span> <span class="token comment"># 将字符 你 按照gbk格式转换称为二进制</span><span class="token keyword">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span>  <span class="token comment"># b'\xc4\xe3'</span>s4 <span class="token operator">=</span> s3<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>  <span class="token comment"># 将二进制按照gbk格式解码称为字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、format-方法"><a href="#6、format-方法" class="headerlink" title="6、format 方法"></a>6、format 方法</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><code>str.format()</code> 方法通过字符串中的大括号<code>&#123;&#125;</code> 来识别替换字段 <code>replacement field</code>，从而完成字符串的格式化。</li><li><code>替换字段</code> 由字段名 <code>field name</code> 和转换字段 <code>conversion field</code> 以及格式说明符 <code>format specifier</code> 组成，即一般形式为 {字段名!转换字段:格式说明符}。</li><li>字段名分为简单字段名 <code>simple field name</code> 和复合字段名 <code>compound field name</code>。而转换字段和格式说明符都是可选的。</li></ul><h3 id="字段名"><a href="#字段名" class="headerlink" title="字段名"></a>字段名</h3><p>form 的完整格式是{字段名!转换字符:格式说明符}。其中字段名师必须的，而且可以分为简单字段名和复合字段名。</p><h3 id="简单字段名"><a href="#简单字段名" class="headerlink" title="简单字段名"></a>简单字段名</h3><p>简单字段名有三种写法:</p><ul><li>省略字段名:<code>&#123;&#125;</code></li><li>使用非负十进制整数<code>&#123;0&#125;</code></li><li>变量名{name}</li></ul><h4 id="省略字段名"><a href="#省略字段名" class="headerlink" title="省略字段名"></a>省略字段名</h4><p>大括号内省略字段名，传递<strong>位置参数</strong>。</p><ul><li>替换字段形式： <code>&#123;&#125;</code></li><li>注意：大括号个数可以少于位置参数的个数，反之不然。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 省略字段名传递位置参数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫&#123;&#125;，今年&#123;&#125;岁。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我叫小明，今年18岁。"""</span><span class="token comment"># 大括号个数可以少于位置参数的个数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我爱吃&#123;&#125;和&#123;&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'香蕉'</span><span class="token punctuation">,</span> <span class="token string">'苹果'</span><span class="token punctuation">,</span> <span class="token string">'大鸭梨'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我爱吃香蕉和苹果。"""</span><span class="token comment"># 大括号个数多于位置参数的个数则会报错</span><span class="token comment"># print('我还吃&#123;&#125;和&#123;&#125;。'.format('西红柿'))</span><span class="token triple-quoted-string string">"""IndexError: tuple index out of range"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数字字段名"><a href="#数字字段名" class="headerlink" title="数字字段名"></a>数字字段名</h4><p>可以通过数字形式的简单字段名传递位置参数。</p><ul><li>数字必须是大于等于 0 的整数。</li><li>带数字的替换字段可以重复使用。</li><li>数字形式的简单字段名相当于把 format 中的所有位置参数整体当作一个元组，通过字段名中的数字进行取值。即 {0} 等价于 tuple[0]，所以大括号内的数字不能越界。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 通过数字形式的简单字段名传递位置参数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'身高&#123;0&#125;，家住&#123;1&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">1.8</span><span class="token punctuation">,</span> <span class="token string">'铜锣湾'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""身高1.8，家住铜锣湾"""</span><span class="token comment"># 数字形式的简单字段名可以重复使用。</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我爱&#123;0&#125;。\n她今年&#123;1&#125;。\n我也爱&#123;0&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'阿香'</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我爱阿香。她今年17。我也爱阿香。"""</span><span class="token comment"># 体会把所有位置参数整体当成元组来取值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'阿香爱吃&#123;1&#125;、&#123;3&#125;和&#123;0&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    <span class="token string">'榴莲'</span><span class="token punctuation">,</span> <span class="token string">'臭豆腐'</span><span class="token punctuation">,</span> <span class="token string">'皮蛋'</span><span class="token punctuation">,</span> <span class="token string">'鲱鱼罐头'</span><span class="token punctuation">,</span> <span class="token string">'螺狮粉'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""阿香爱吃臭豆腐、鲱鱼罐头和榴莲。"""</span><span class="token comment"># 尝试一下越界错误</span><span class="token comment"># print('&#123;1&#125;'.format('错误用法'))</span><span class="token triple-quoted-string string">"""IndexError: tuple index out of range"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="变量字段名"><a href="#变量字段名" class="headerlink" title="变量字段名"></a>变量字段名</h4><p>使用<strong>变量名形式</strong>的简单字段名传递<strong>关键字参数</strong>。</p><ul><li>关键字参数的位置可以随意调换。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用变量名形式的简单字段名传递关键字参数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我大哥是&#123;name&#125;，今年&#123;age&#125;岁。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'阿飞'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我大哥是阿飞，今年20岁。"""</span><span class="token comment"># 关键字参数的顺序可以随意调换</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我大哥是&#123;name&#125;，今年&#123;age&#125;岁。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'阿飞'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我大哥是阿飞，今年20岁。"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="简单字段名的混合使用"><a href="#简单字段名的混合使用" class="headerlink" title="简单字段名的混合使用"></a>简单字段名的混合使用</h4><ul><li>混合使用数字形式和变量名形式的字段名，可以同时传递位置参数和关键字参数。</li><li>关键字参数必须位于位置参数之后。</li><li>混合使用时可以省略数字。</li><li>省略字段名 <code>&#123;&#125;</code> 不能和数字形式的字段名 <code>&#123;非负整数&#125;</code> 同时使用。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 混合使用数字形式和变量名形式的字段名</span><span class="token comment"># 可以同时传递位置参数和关键字参数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是一个关于&#123;0&#125;、&#123;1&#125;和&#123;girl&#125;的故事。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'阿飞'</span><span class="token punctuation">,</span> girl<span class="token operator">=</span><span class="token string">'阿香'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""这是一个关于小明、阿飞和阿香的故事。"""</span><span class="token comment"># 但是关键字参数必须位于位置参数之后</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是一个关于&#123;0&#125;、&#123;1&#125;和&#123;girl&#125;的故事。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>     <span class="token string">'小明'</span><span class="token punctuation">,</span> girl<span class="token operator">=</span><span class="token string">'阿香'</span> <span class="token punctuation">,</span> <span class="token string">'阿飞'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SyntaxError: positional argument follows keyword argument"""</span><span class="token comment"># 数字也可以省略</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是一个关于&#123;&#125;、&#123;&#125;和&#123;girl&#125;的故事。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'阿飞'</span><span class="token punctuation">,</span> girl<span class="token operator">=</span><span class="token string">'阿香'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 但是省略字段名不能和数字形式的字段名同时出现</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是一个关于&#123;&#125;、&#123;1&#125;和&#123;girl&#125;的故事。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'阿飞'</span><span class="token punctuation">,</span> girl<span class="token operator">=</span><span class="token string">'阿香'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""ValueError: cannot switch from automatic field numbering to manual field specification"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用元组和字典传参"><a href="#使用元组和字典传参" class="headerlink" title="使用元组和字典传参"></a>使用元组和字典传参</h4><p><code>str.format()</code> 方法还可以使用 <code>*元组</code> 和 <code>**字典</code> 的形式传参，两者可以混合使用。 位置参数、关键字参数、<code>*元组</code> 和 <code>**字典</code> 也可以同时使用，但是要注意，位置参数要在关键字参数前面，<code>*元组</code> 要在 <code>**字典</code> 前面。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用元组传参</span>infos <span class="token operator">=</span> <span class="token string">'钢铁侠'</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token string">'小辣椒'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是&#123;&#125;，身价&#123;&#125;亿。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">*</span>infos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我是钢铁侠，身家66亿。"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是&#123;2&#125;，身价&#123;1&#125;亿。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">*</span>infos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我是小辣椒，身家66亿。"""</span><span class="token comment"># 使用字典传参</span>venom <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'毒液'</span><span class="token punctuation">,</span> <span class="token string">'weakness'</span><span class="token punctuation">:</span> <span class="token string">'火'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是&#123;name&#125;，我怕&#123;weakness&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">**</span>venom<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我是毒液，我怕火。"""</span><span class="token comment"># 同时使用元组和字典传参</span>hulk <span class="token operator">=</span> <span class="token string">'绿巨人'</span><span class="token punctuation">,</span> <span class="token string">'拳头'</span>captain <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'美国队长'</span><span class="token punctuation">,</span> <span class="token string">'weapon'</span><span class="token punctuation">:</span> <span class="token string">'盾'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是&#123;&#125;, 我怕&#123;weapon&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">*</span>hulk<span class="token punctuation">,</span> <span class="token operator">**</span>captain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是&#123;name&#125;, 我怕&#123;1&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">*</span>hulk<span class="token punctuation">,</span> <span class="token operator">**</span>captain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我是绿巨人, 我怕盾。我是美国队长, 我怕拳头。"""</span><span class="token comment"># 同时使用位置参数、元组、关键字参数、字典传参</span><span class="token comment"># 注意：</span><span class="token comment"># 位置参数要在关键字参数前面</span><span class="token comment"># *元组要在**字典前面</span>tup <span class="token operator">=</span> <span class="token string">'鹰眼'</span><span class="token punctuation">,</span>dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'weapon'</span><span class="token punctuation">:</span> <span class="token string">'箭'</span><span class="token punctuation">&#125;</span>text <span class="token operator">=</span> <span class="token string">'我是&#123;1&#125;，我怕&#123;weakness&#125;。我是&#123;0&#125;，我用&#123;weapon&#125;。'</span>text <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    <span class="token operator">*</span>tup<span class="token punctuation">,</span> <span class="token string">'黑寡妇'</span><span class="token punctuation">,</span> weakness<span class="token operator">=</span><span class="token string">'男人'</span><span class="token punctuation">,</span> <span class="token operator">**</span>dic<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我是黑寡妇，我怕男人。我是鹰眼，我用箭。"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复合字段名"><a href="#复合字段名" class="headerlink" title="复合字段名"></a>复合字段名</h3><p>同时使用了数字和变量名两种形式的字段名就是<strong>复合字段名</strong>。</p><p>复合字段名</p><p>支持两种操作符：</p><ul><li><code>.</code> 点号</li><li><code>[]</code> 中括号</li></ul><h4 id="使用-点号"><a href="#使用-点号" class="headerlink" title="使用. 点号"></a>使用<code>.</code> 点号</h4><p><strong>传递位置参数</strong></p><ul><li>替换字段形式：<code>&#123;数字.属性名&#125;</code></li><li>只有一个替换字段的时候可以省略数字</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    self<span class="token punctuation">.</span>gender <span class="token operator">=</span> genderp <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'female'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'姓名是&#123;0.name&#125;,年龄是&#123;0.age&#125;,性别是&#123;0.gender&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'姓名是&#123;.name&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 只有一个替换字段时，可以省略数字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用-中括号"><a href="#使用-中括号" class="headerlink" title="使用[]中括号"></a>使用<code>[]</code>中括号</h4><ul><li>用列表传递位置参数</li><li>用元组传递位置参数</li><li>用字典传递位置参数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 中括号用法：用列表传递位置参数</span>infos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'阿星'</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">]</span>food <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'霸王花'</span><span class="token punctuation">,</span> <span class="token string">'爆米花'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫&#123;0[0]&#125;，警号&#123;0[1]&#125;，爱吃&#123;1[0]&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    infos<span class="token punctuation">,</span> food<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我叫阿星，警号9527，爱吃霸王花。"""</span><span class="token comment"># 中括号用法：用元组传递位置参数</span>food <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'僵尸'</span><span class="token punctuation">,</span> <span class="token string">'脑子'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫&#123;0[0]&#125;，年龄&#123;1&#125;，爱吃&#123;0[1]&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    food<span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我叫僵尸，年龄66，爱吃脑子。"""</span><span class="token comment"># 中括号用法：用字典传递位置参数</span>dic <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'阿星'</span><span class="token punctuation">,</span> pid<span class="token operator">=</span><span class="token number">9527</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是&#123;[name]&#125;！'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 多个替换字段，不能省略数字</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是&#123;0[name]&#125;，警号&#123;0[pid]&#125;。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""我是阿星！我是阿星，警号9527。"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转换字段"><a href="#转换字段" class="headerlink" title="转换字段"></a>转换字段</h3><p><strong>转换字段</strong> <code>conversion field</code> 的取值有三种，前面要加 <code>!</code>：</p><ul><li><code>s</code>：传递参数之前先对参数调用 <code>str()</code></li><li><code>r</code>：传递参数之前先对参数调用 <code>repr()</code></li><li><code>a</code>：传递参数之前先对参数调用 <code>ascii()</code></li></ul><blockquote><p><code>ascii()</code> 函数类似 <code>repr()</code> 函数，返回一个可以表示对象的字符串。 但是对于非 <code>ASCII</code> 字符，使用 <code>\x</code>，<code>\u</code> 或者 <code>\U</code> 转义。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 转换字段</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I am &#123;!s&#125;!'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'Bruce Lee 李小龙'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I am &#123;!r&#125;!'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'Bruce Lee 李小龙'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I am &#123;!a&#125;!'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'Bruce Lee 李小龙'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""I am Bruce Lee 李小龙!I am 'Bruce Lee 李小龙'!I am 'Bruce Lee \u674e\u5c0f\u9f99'!"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七、Python流程控制语句</title>
      <link href="/2024/06/25/python/%E4%B8%83%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
      <url>/2024/06/25/python/%E4%B8%83%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="七、Python流程控制语句"><a href="#七、Python流程控制语句" class="headerlink" title="七、Python流程控制语句"></a>七、Python流程控制语句</h1><h2 id="1、选择结构"><a href="#1、选择结构" class="headerlink" title="1、选择结构"></a>1、选择结构</h2><h3 id="单分支选择结构"><a href="#单分支选择结构" class="headerlink" title="单分支选择结构"></a>单分支选择结构</h3><h4 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h4><p>if 语句是用来进行判断的，其使用格式如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 要判断的条件<span class="token punctuation">:</span>    条件成立时要做的事情<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注意：代码的缩进为一个 tab 键，或者 4 个空格</p></blockquote><h3 id="双分支选择结构"><a href="#双分支选择结构" class="headerlink" title="双分支选择结构"></a>双分支选择结构</h3><h4 id="if-else-语句"><a href="#if-else-语句" class="headerlink" title="if-else 语句"></a>if-else 语句</h4><p>if 和 else 语句以及各自的缩进部分共同是一个 完整的代码块</p><h5 id="使用格式"><a href="#使用格式" class="headerlink" title="使用格式"></a>使用格式</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 条件<span class="token punctuation">:</span>  满足条件时的操作<span class="token keyword">else</span><span class="token punctuation">:</span>  不满足条件时的操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">weather <span class="token operator">=</span> <span class="token string">'晴天'</span><span class="token keyword">if</span> weather <span class="token operator">==</span> <span class="token string">'下雨'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'出门要带伞'</span><span class="token punctuation">)</span> <span class="token comment"># 缩进</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'戴个帽子'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多分支选择结构"><a href="#多分支选择结构" class="headerlink" title="多分支选择结构"></a>多分支选择结构</h3><h4 id="if-elif-else-语句"><a href="#if-elif-else-语句" class="headerlink" title="if-elif-else 语句"></a>if-elif-else 语句</h4><p>使用 if 可以 判断条件；使用 else 可以处理 条件不成立 的情况。</p><p>但是，如果希望 再增加一些条件，条件不同，需要执行的代码也不同 时，就可以使用 elif。</p><h5 id="使用格式-1"><a href="#使用格式-1" class="headerlink" title="使用格式"></a>使用格式</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> xxx1<span class="token punctuation">:</span>  事情<span class="token number">1</span><span class="token keyword">elif</span> xxx2<span class="token punctuation">:</span>  事情<span class="token number">2</span><span class="token keyword">elif</span> xxx3<span class="token punctuation">:</span>  事情<span class="token number">3</span><span class="token keyword">else</span><span class="token punctuation">:</span>  不满足条件时的操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># bmi计算 bmi =w/(h*h)</span>w <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入你的体重，单位kg：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入你的身高，单位米：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bmi <span class="token operator">=</span> w <span class="token operator">/</span> <span class="token punctuation">(</span>h <span class="token operator">*</span> h<span class="token punctuation">)</span><span class="token keyword">if</span> bmi <span class="token operator">&lt;</span> <span class="token number">18.5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'多吃一点才健康'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> bmi <span class="token operator">&lt;</span> <span class="token number">23.9</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你的体型非常的标准'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'适当的可以多运动一下'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="嵌套选择"><a href="#嵌套选择" class="headerlink" title="嵌套选择"></a>嵌套选择</h3><p>在开发中，使用 if 进行条件判断，如果希望 在条件成立的执行语句中 再 增加条件判断，就可以使用 if 的嵌套</p><p>if 的嵌套 的应用场景就是：在之前条件满足的前提下，再增加额外的判断</p><p>if 的嵌套 的语法格式，除了缩进之外 和之前的没有区别</p><h4 id="if-嵌套"><a href="#if-嵌套" class="headerlink" title="if 嵌套"></a>if 嵌套</h4><h5 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 条件<span class="token number">1</span><span class="token punctuation">:</span>    满足条件<span class="token number">1</span> 做的事情<span class="token number">1</span>    满足条件<span class="token number">1</span> 做的事情<span class="token number">2</span>    <span class="token keyword">if</span> 条件<span class="token number">2</span><span class="token punctuation">:</span>        满足条件<span class="token number">2</span> 做的事情<span class="token number">1</span>        满足条件<span class="token number">2</span> 做的事情<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>外层的 if 判断，也可以是 if-else</li><li>内层的 if 判断，也可以是 if-else</li><li>根据实际开发的情况，进行选择</li></ul><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="区间比较"><a href="#区间比较" class="headerlink" title="区间比较"></a>区间比较</h4><p>在Python中允许类似于 <code>5 &lt; a &lt; 10</code> 的写法，这种写法在很多编程语言里都是不允许的，需要使用逻辑与运算符进行连接。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span><span class="token number">1</span> <span class="token operator">&lt;</span> a <span class="token operator">&lt;</span> <span class="token number">20</span>  <span class="token comment"># True</span><span class="token number">11</span> <span class="token operator">&lt;</span> a <span class="token operator">&lt;</span> <span class="token number">20</span>  <span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><h5 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h5><ul><li><p><code>变量 = 值1 if 条件 else 值2</code></p></li><li><p>当条件成立时把 值1 赋值给变量，条件不成立时把 值2 赋值给变量，其实就是对 if…else 语句的一种简写。</p></li></ul><h5 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">30</span><span class="token keyword">if</span> a <span class="token operator">></span> b<span class="token punctuation">:</span>    c <span class="token operator">=</span> a<span class="token keyword">else</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> b<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a和b两个数的较大值是%d'</span><span class="token operator">%</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的 <code>if...else</code> 代码可以简写成以下格式:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">30</span>c <span class="token operator">=</span> a <span class="token keyword">if</span> a <span class="token operator">></span> b <span class="token keyword">else</span> b<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a和b两个数的较大值是%d'</span> <span class="token operator">%</span> c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h4><p>if 语句需要一个判断条件，这个判断条件的结果需要一个布尔值。如果此时输入的判断条件不是一个布尔值，在代码执行的过程中，会将这个值自动转换成为一个布尔值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1小于2'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"hello"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这段代码是否会输出呢？"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提示：在Python中，转换成为布尔值时，只有 <code>0,&quot;&quot;,&#39;&#39;,None,(),&#123;&#125;,[]</code> 会被转换成为False,其他都会被转换成为True</p><h2 id="2、循环语句"><a href="#2、循环语句" class="headerlink" title="2、循环语句"></a>2、循环语句</h2><p>循环的作用就是让 指定的代码 重复的执行。</p><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>while 循环最常用的应用场景就是 让执行的代码按照指定的次数 重复 执行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> 判断条件<span class="token punctuation">:</span>    代码块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="while-if-语句区别"><a href="#while-if-语句区别" class="headerlink" title="while &amp; if 语句区别"></a>while &amp; if 语句区别</h4><p>我们发现，while 循环的语法结构和 if 语句的结构很相像，那么这两个之间有什么区别呢？</p><ul><li>if 语句只会执行一次判断条件，条件成立以后，只会执行一次代码块；</li><li>while 语句，会先执行一次判断条件，如果条件成立，会执行一次代码块，代码块执行完成以后，会再次判断条件语句，如果还成立，将会再执行代码语句… 直到最后条件不成立。</li></ul><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252157191.jpg" alt="img"></p><p>输出十遍 hello world</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 一定要记得让 i += 1, 否则会造成死循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h4><p>概念：条件始终为真的循环称为死循环<br>在循环语句中，表达式永远为真，致循环持续执行，程序无法终止</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"放我出去"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>除了 while 循环以外，for 可以完成循环的功能。 </p><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><p>在 Python 中 for 循环可以遍历任何序列的项目，如一个列表或者一个字符串等。</p><h4 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> 临时变量 <span class="token keyword">in</span> 列表或者字符串等可迭代对象<span class="token punctuation">:</span>    循环满足条件时执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>注意: in 的后面必须要是一个可迭代对象!!!</li><li><strong>目前接触的可迭代对象: 字符串、列表、字典、元组、集合、range</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 遍历字符串</span><span class="token keyword">for</span> s <span class="token keyword">in</span> <span class="token string">"hello"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""hello"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打印数字</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""01234"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="range-函数"><a href="#range-函数" class="headerlink" title="range() 函数"></a>range() 函数</h4><p><code>range()</code>函数可以用来创建一个数字序列，常与for循环结合使用来重复执行代码块指定的次数。</p><p>range() 可以传递三个参数，分别表示 起始、结束和步长。</p><ul><li><code>range(101)</code>：可以用来产生0到100范围的整数，需要注意的是取不到101。</li><li><code>range(1, 101)</code>：可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间。</li><li><code>range(1, 101, 2)</code>：可以用来产生1到100的奇数，其中2是步长，即每次数值递增的值。</li><li><code>range(100, 0, -2)</code>：可以用来产生100到1的偶数，其中-2是步长，即每次数字递减的值。</li></ul><h3 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h3><p>break 和 continue 都用在循环语句里，用来控制循环。</p><h4 id="break-的使用"><a href="#break-的使用" class="headerlink" title="break 的使用"></a>break 的使用</h4><p><strong>作用：退出循环<br>注意：只能跳出距离最近的for或者while循环</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>    i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""123456"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在循环过程中，如果 某一个条件满足后，不 再希望 循环继续执行，可以使用 break 退出循环。</p><h4 id="continue-的使用"><a href="#continue-的使用" class="headerlink" title="continue 的使用"></a>continue 的使用</h4><p><strong>作用：跳过本次循环后面的剩余语句，然后继续下一次循环</strong><br><strong>注意：只能跳过距离最近的for或者while循环</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token triple-quoted-string string">"""1234568910"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="与else结合"><a href="#与else结合" class="headerlink" title="与else结合"></a>与else结合</h4><p><strong>没有通过 break 退出循环，循环结束后，会执行的代码</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token string">'不是质数'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token string">'是质数'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ol><li><strong>在 Python 中，break 和 continue 只能用于循环语句中。</strong></li><li><strong>break 和 continue 在嵌套循环中使用时，只对最内层循环有效。</strong></li></ol><h3 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h3><p>作用：当语句要求不希望任何命令或代码来执行时使用。</p><p>说明：pass 语句表示一个空操作，在执行时没有任何的响应，pass 的位置最终应该有代码来执行，只不过暂时写不出来。</p><p>可以使用在流程控制和循环语句中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h3><p>类似 if 的嵌套，while 嵌套就是：while 里面还有 while</p><h4 id="while-嵌套的格式"><a href="#while-嵌套的格式" class="headerlink" title="while 嵌套的格式"></a>while 嵌套的格式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> 条件<span class="token number">1</span><span class="token punctuation">:</span>      外循环代码块      <span class="token keyword">while</span> 条件<span class="token number">2</span><span class="token punctuation">:</span>            内循环代码块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>内循环一旦开始，则要执行到条件2不满足，才会继续执行外循环的代码。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 内外循环的控制变量不能一样</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    j <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 内循环的控制变量必须要在外循环里初始化</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'j= %d'</span> <span class="token operator">%</span> j<span class="token punctuation">)</span>        j <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i= %d'</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="else-语法"><a href="#else-语法" class="headerlink" title="else 语法"></a>else 语法</h3><p>在 Python 中，循环语句还可以和 else 语句联合使用。</p><h4 id="while…else…"><a href="#while…else…" class="headerlink" title="while…else…"></a>while…else…</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> 判断条件<span class="token punctuation">:</span>  条件成立时，循环体代码<span class="token keyword">else</span><span class="token punctuation">:</span>  条件不成立时，执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for…else…"><a href="#for…else…" class="headerlink" title="for…else…"></a>for…else…</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> 序列：   循环体代码 <span class="token keyword">else</span><span class="token punctuation">:</span>   循环完所有序列，执行的代码 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="else-作用"><a href="#else-作用" class="headerlink" title="else 作用"></a>else 作用</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"循环条件成立时执行的代码"</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环条件不成立时执行的代码'</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""循环条件成立时执行的代码循环条件成立时执行的代码循环条件成立时执行的代码循环条件成立时执行的代码循环条件成立时执行的代码循环条件不成立时执行的代码"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上述结构中，我们可以看出，在非死循环中，正常情况下 else 里的语句都是会被执行的。那这个else语句到底有什么作用呢？</p><p>一般情况下，循环语句和 else 共同出现时，在循环语句里都会配合 break 语句来使用。查看下面的代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环条件成立时执行的代码'</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环条件不成立时执行的代码'</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""循环条件成立时执行的代码循环条件成立时执行的代码循环条件成立时执行的代码循环条件成立时执行的代码循环条件成立时执行的代码"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行后发现 else 没有被执行，<strong>只要循环没有顺利完成，中间被 break 中断了则 else 里面的内容就不会执行。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、Python运算符</title>
      <link href="/2024/06/25/python/%E5%85%AD%E3%80%81Python%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2024/06/25/python/%E5%85%AD%E3%80%81Python%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="六、Python-运算符"><a href="#六、Python-运算符" class="headerlink" title="六、Python 运算符"></a>六、Python 运算符</h1><h2 id="1、算数运算符"><a href="#1、算数运算符" class="headerlink" title="1、算数运算符"></a>1、算数运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>两个对象相加</td></tr><tr><td>-</td><td>减</td><td>得到负数或是一个数减去另一个数</td></tr><tr><td>*</td><td>乘</td><td>两个数相乘或是返回一个被重复若干次的字符串</td></tr><tr><td>&#x2F;</td><td>除</td><td>b &#x2F; a 输出结果 2</td></tr><tr><td><code>//</code></td><td>取整除</td><td>返回商的整数部分</td></tr><tr><td><code>%</code></td><td>取余</td><td>返回除法的余数</td></tr><tr><td><code>**</code></td><td>指数</td><td>a**b 为10的20次方</td></tr><tr><td>()</td><td>小括号</td><td>提高运算优先级</td></tr></tbody></table><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>1、优先级顺序为： <code>**</code> &gt; <code>* / % //</code> &gt; <code>+ -</code> </p><p>2、为了避免歧义，建议使用 () 来处理运算符优先级。 </p><p>3、不同类型的数字在进行混合运算时，整数将会转换成浮点数进行运算。</p><h3 id="字符串中使用"><a href="#字符串中使用" class="headerlink" title="字符串中使用"></a>字符串中使用</h3><p>1）如果是两个字符串做加法运算，会直接把这两个字符串拼接成一个字符串。</p><p>2）如果是数字和字符串做加法运算，会直接报错。</p><p>3）如果是数字和字符串做乘法运算，会将这个字符串重复多次。</p><h2 id="2、赋值运算符"><a href="#2、赋值运算符" class="headerlink" title="2、赋值运算符"></a>2、赋值运算符</h2><h3 id="基本赋值运算符"><a href="#基本赋值运算符" class="headerlink" title="基本赋值运算符"></a>基本赋值运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td><code>=</code></td><td>赋值运算符</td><td>把  &#x3D;  号右边的结果 赋给 左边的变量</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 单个变量赋值</span>num <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 同时为多个变量赋值(使用等号连接)</span>a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token comment"># 多个变量赋值(使用逗号分隔)</span>num1<span class="token punctuation">,</span> f1<span class="token punctuation">,</span> str1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+&#x3D;</td><td>加法赋值运算符</td><td>c +&#x3D; a 等效于 c &#x3D; c + a</td></tr><tr><td>-&#x3D;</td><td>减法赋值运算符</td><td>c -&#x3D; a 等效于 c &#x3D; c - a</td></tr><tr><td>*&#x3D;</td><td>乘法赋值运算符</td><td>c *&#x3D; a 等效于 c &#x3D; c * a</td></tr><tr><td>&#x2F;&#x3D;</td><td>除法赋值运算符</td><td>c &#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F; a</td></tr><tr><td>&#x2F;&#x2F;&#x3D;</td><td>取整除赋值运算符</td><td>c &#x2F;&#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F;&#x2F; a</td></tr><tr><td>%&#x3D;</td><td>取模赋值运算符</td><td>c %&#x3D; a 等效于 c &#x3D; c % a</td></tr><tr><td>**&#x3D;</td><td>幂赋值运算符</td><td>c * *&#x3D; a 等效于 c &#x3D; c * * a</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：赋值运算符是从右往左运算，将等号右边的值赋值给等号左边，所以，<strong>等号的左边一定不能是常量或者表达式。</strong></p></blockquote><h2 id="3、比较运算符"><a href="#3、比较运算符" class="headerlink" title="3、比较运算符"></a>3、比较运算符</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>等于 - 比较对象是否相等</td></tr><tr><td>!&#x3D;</td><td>不等于 - 比较两个对象是否不相等</td></tr><tr><td>&lt;&gt;</td><td>不等于 - 比较两个对象是否不相等</td></tr><tr><td>&gt;</td><td>大于 - 返回x是否大于y</td></tr><tr><td>&lt;</td><td>小于 - 返回x是否小于y</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于 - 返回x是否大于等于y。</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于 - 返回x是否小于等于y。</td></tr></tbody></table><h3 id="字符串使用比较运算符"><a href="#字符串使用比较运算符" class="headerlink" title="字符串使用比较运算符"></a>字符串使用比较运算符</h3><p>1）数字和字符串做<code>==</code>运算结果是false,除了 <code>==</code> 以外的逻辑运算时，会直接报错。</p><p>2）如果是两个字符串进行比较，会将每个字符都转换成对应的编码，然后逐一进行对比。</p><h2 id="4、逻辑运算符"><a href="#4、逻辑运算符" class="headerlink" title="4、逻辑运算符"></a>4、逻辑运算符</h2><table><thead><tr><th align="center">运算符</th><th>逻辑表达式</th><th>描述</th></tr></thead><tbody><tr><td align="center">and</td><td>x and y</td><td>只要有一个运算数是False，结果就是False;<br/> 只有所有的运算数都为True时，结果才是True</td></tr><tr><td align="center">or</td><td>x or y</td><td>只要有一个运算数是True，结果就是True; <br/>只有所有的运算数都为False时，结果才是False</td></tr><tr><td align="center">not</td><td>not x</td><td>布尔”非” - <br/>如果 x 为 True，返回 False 。<br/>如果 x 为 False，它返回 True。</td></tr></tbody></table><blockquote><p>优先级：not &gt; and &gt; or</p></blockquote><h3 id="提高"><a href="#提高" class="headerlink" title="提高"></a>提高</h3><p>面试题：以下代码的输出结果是什么，为什么会有这样的输出？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">34</span>a <span class="token operator">></span> <span class="token number">10</span> <span class="token keyword">and</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span>a <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token keyword">and</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span>a <span class="token operator">></span> <span class="token number">10</span> <span class="token keyword">or</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你好世界'</span><span class="token punctuation">)</span>a <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token keyword">or</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你好世界'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252157211.png" alt="image-20230405233439331"></p><h2 id="5、位运算符"><a href="#5、位运算符" class="headerlink" title="5、位运算符"></a>5、位运算符</h2><table><thead><tr><th>位运算</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符：<br/>参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td></tr><tr><td>|</td><td>按位或运算符：<br/>只要对应的二个二进位有一个为1时，结果位就为1。</td></tr><tr><td>^</td><td>按位异或运算符：<br/>当两对应的二进位相异时，结果为1</td></tr><tr><td>~</td><td>按位取反运算符：<br/>对数据的每个二进制位取反,即把1变为0,把0变为1 。~x 类似于 -x-1</td></tr><tr><td>&lt;&lt;</td><td>左移动运算符：<br/>运算数的各二进位全部左移若干位，由 <strong>&lt;&lt;</strong> 右边的数字指定了移动的位数，高位丢弃，低位补0。</td></tr><tr><td>&gt;&gt;</td><td>右移动运算符：<br/>把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，**&gt;&gt;** 右边的数字指定了移动的位数</td></tr></tbody></table><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>变量 a 为 60，b 为 13，二进制格式如下：</p><pre class="line-numbers language-none"><code class="language-none">a &#x3D; 0011 1100  # 60的二进制b &#x3D; 0000 1101  # 13的二进制-----------------(a &amp; b) &#x3D; 0000 1100     12(a | b) &#x3D; 0011 1101     61(a ^ b) &#x3D; 0011 0001     49(~a) &#x3D; 1100 0011        -61(a &lt;&lt; 2) &#x3D; 1111 0000    240(a &gt;&gt; 2) &#x3D; 0000 1111    15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、成员运算符"><a href="#6、成员运算符" class="headerlink" title="6、成员运算符"></a>6、成员运算符</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回True，否则返回 False</td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'12'</span> <span class="token keyword">in</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hi'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""TrueTrue"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、身份运算符"><a href="#7、身份运算符" class="headerlink" title="7、身份运算符"></a>7、身份运算符</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>is</td><td>判断两个标识符是否引用同一个对象，是的话返回真，否则返回假</td></tr><tr><td>is not</td><td>判断两个标识符是否不是引用同一个对象是的话返回真，否则返回假</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> <span class="token keyword">not</span> b<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""FalseTrue"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、运算符优先级"><a href="#8、运算符优先级" class="headerlink" title="8、运算符优先级"></a>8、运算符优先级</h2><p>当多种运算符做混合运算时，就会涉及到先运算哪个，后运算哪个问题。以下表格列出了从最高到最低优先级的所有运算符：</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>指数 (最高优先级)</td></tr><tr><td>~ + -</td><td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td>* &#x2F; % &#x2F;&#x2F;</td><td>乘，除，取模和取整除</td></tr><tr><td>+ -</td><td>加法减法</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>右移，左移运算符</td></tr><tr><td>&amp;</td><td>位 ‘AND’</td></tr><tr><td>^ |</td><td>位运算符</td></tr><tr><td>&lt;&#x3D; &lt; &gt; &gt;&#x3D;</td><td>比较运算符</td></tr><tr><td>&lt;&gt; &#x3D;&#x3D; !&#x3D;</td><td>等于运算符</td></tr><tr><td>&#x3D; %&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; -&#x3D; +&#x3D; *&#x3D; **&#x3D;</td><td>赋值运算符</td></tr><tr><td>is is not</td><td>身份运算符</td></tr><tr><td>in not in</td><td>成员运算符</td></tr><tr><td>not&gt;and&gt;or</td><td>逻辑运算符</td></tr></tbody></table><h2 id="9、总结"><a href="#9、总结" class="headerlink" title="9、总结"></a>9、总结</h2><p>在以后的实际开发中，如果有多种运算符进行混合运算时，<strong>强烈建议使用小括号来手动的控制运算符的优先级！</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">b <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token keyword">or</span> <span class="token boolean">True</span> <span class="token keyword">and</span> <span class="token boolean">False</span>    <span class="token comment"># bad </span>c <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token keyword">and</span> <span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># good</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、Python数据类型</title>
      <link href="/2024/06/25/python/%E4%BA%94%E3%80%81Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2024/06/25/python/%E4%BA%94%E3%80%81Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="五、Python-数据类型"><a href="#五、Python-数据类型" class="headerlink" title="五、Python 数据类型"></a>五、Python 数据类型</h1><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252156406.png" alt="image-20240615172802531"></p><h2 id="1、整型（Integers）"><a href="#1、整型（Integers）" class="headerlink" title="1、整型（Integers）"></a>1、整型（Integers）</h2><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 整数的变量的定义</span>num <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment"># 负数</span>num2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token comment"># 查看变量的数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""10-10&lt;class 'int'>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、浮点型（Floating-point-numbers）"><a href="#2、浮点型（Floating-point-numbers）" class="headerlink" title="2、浮点型（Floating point numbers）"></a>2、浮点型（Floating point numbers）</h2><p>浮点型由整数部分和小数部分组成。</p><blockquote><p>注意：运算可能有四舍五入的误差。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math<span class="token comment"># 浮点数的计算</span>n1 <span class="token operator">=</span> <span class="token number">2.1</span>n2 <span class="token operator">=</span> <span class="token number">15.256</span><span class="token comment"># 四舍五入round</span>n3 <span class="token operator">=</span><span class="token builtin">round</span><span class="token punctuation">(</span>n1<span class="token operator">+</span>n2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>n3<span class="token punctuation">)</span><span class="token comment"># 向上取整 ceil</span>n4 <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>n1<span class="token operator">+</span>n2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"向上取整的结果是"</span><span class="token punctuation">,</span> n4<span class="token punctuation">)</span><span class="token comment"># 向下取整 floor</span>n5 <span class="token operator">=</span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>n1<span class="token operator">+</span>n2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"向下取整的结果是"</span><span class="token punctuation">,</span> n5<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""17.36向上取整的结果是 18向下取整的结果是 17"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、布尔型（Boolean）"><a href="#3、布尔型（Boolean）" class="headerlink" title="3、布尔型（Boolean）"></a>3、布尔型（Boolean）</h2><p>1、布尔类型的变量只有 <strong>True、False</strong> 两种值。</p><p>2、作用：作为真假的判断。</p><p>3、在Python中，能够解释为假的值有：<strong>None、0、0.0、False、所有的空容器（空列表、空元组、空字典、空集合、空字符串）</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token boolean">True</span>b<span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>）<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>）<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>）      <span class="token triple-quoted-string string">"""True FalseFalseFalseFalseFalseFalseFalseFalse"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、字符串（String）"><a href="#4、字符串（String）" class="headerlink" title="4、字符串（String）"></a>4、字符串（String）</h2><h3 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h3><p>1、字符串就是 一串字符，是编程语言中表示文本的数据类型。<br>2、在 Python 中可以使用 <code>一对双引号 &quot;</code> 或者 <code>一对单引号 &#39;</code> 定义一个字符串。<br>3、字符串是以单引号或者双引号括起来的任意文本，也可以是以<code>三引号&#39;&#39;&#39;</code>或者<code>&quot;&quot;&quot;</code>引起来的任意文本。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建字符串</span>s1 <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>s2 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>s3 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''2024helloworld'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span>s4 <span class="token operator">=</span> <span class="token string">"It's a hat"</span><span class="token keyword">print</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span>s5 <span class="token operator">=</span> <span class="token string">'1234\'\"6666'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""hellohello2024helloworldIt's a hat1234'"6666"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-运算"><a href="#4-2-运算" class="headerlink" title="4.2 运算"></a>4.2 运算</h3><h4 id="加法运算"><a href="#加法运算" class="headerlink" title="加法运算"></a>加法运算</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 字符串拼接</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------字符串拼接-------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">+</span> s4 <span class="token operator">+</span> s5<span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">5</span><span class="token triple-quoted-string string">"""-------字符串拼接-------helloIt's a hat1234'"6666"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：字符串与数字不能相加，print(s1 + 12) 报错</p></blockquote><h4 id="乘法运算"><a href="#乘法运算" class="headerlink" title="乘法运算"></a>乘法运算</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 字符串乘法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----字符串乘法-------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'@'</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token string">'happy'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""-----字符串乘法-------hellohello@@@@@@@@@@@@@@@@@@@@happyhappyhappy"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-索引"><a href="#4-3-索引" class="headerlink" title="4.3 索引"></a>4.3 索引</h3><p>可以使用 索引 获取一个字符串中 指定位置的字符，索引计数从 0 开始。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252157263.png" alt="image-20240615175041198"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建字符串</span>s <span class="token operator">=</span> <span class="token string">'hello,world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""hod"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-切片"><a href="#4-4-切片" class="headerlink" title="4.4 切片"></a>4.4 切片</h3><p>切片格式：变量名[起始索引:结束索引+1:步数]</p><ul><li>步数默认为1，可省略不写</li><li>起始索引默认为0，可省略不写</li><li>结束索引默认为-1,可省略不写</li><li>包头不包尾</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'hello,world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> <span class="token string">'123456789'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""hellwor13579147"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-字符串反转"><a href="#4-5-字符串反转" class="headerlink" title="4.5 字符串反转"></a>4.5 字符串反转</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 字符串反转</span>s2 <span class="token operator">=</span> <span class="token string">'123456789'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""987654321987654321"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、数据类型转换"><a href="#5、数据类型转换" class="headerlink" title="5、数据类型转换"></a>5、数据类型转换</h2><table><thead><tr><th>函数名</th><th>函数值</th></tr></thead><tbody><tr><td>int(x [,base ])</td><td>将数字或字符串转换为整数，如果x为浮点数，则自动截断小数部分</td></tr><tr><td>float(x)</td><td>将 x 转换为一个浮点数</td></tr><tr><td>str(x)</td><td>将对象  x  转换为字符串</td></tr><tr><td>bool(x)</td><td>将对象 x 转换成为布尔值</td></tr></tbody></table><h3 id="1）转换成为整数"><a href="#1）转换成为整数" class="headerlink" title="1）转换成为整数"></a>1）转换成为整数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 转换为整数int</span><span class="token comment"># 字符串str-->整数int</span><span class="token comment"># 纯数字的字符串</span>s <span class="token operator">=</span> <span class="token string">'2024'</span>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 浮点数float-->整数int</span>s1 <span class="token operator">=</span> <span class="token number">2.23</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 布尔bool-->整数int</span>s2<span class="token punctuation">,</span> s3 <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""&lt;class 'str'> &lt;class 'int'>21 0"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 123.456 和 12ab 字符串，都包含非法字符，不能被转换成为整数，会报错</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">"123.456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">"12ab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h4><p>Python语言支持二进制、八进制、十六进制以及十进制的数字表示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">12</span>  <span class="token comment"># 默认数字是十进制</span>b <span class="token operator">=</span> <span class="token number">0b11101</span>   <span class="token comment"># 以0b开头的数字是二进制</span>c <span class="token operator">=</span> <span class="token number">0o12</span>  <span class="token comment"># 以 0o 开头的数字是八进制</span>d <span class="token operator">=</span> <span class="token number">0x1A</span>  <span class="token comment"># 以 0x 开头的数字是十六进制</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><p>不同进制的数字之间可以通过一定的计算规则相互转换。</p><p>使用 int() 函数进行类型转换时，还可以传入两个参数，第二个参数用来表示进制。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">"21"</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 17.八进制的21</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">"F0"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 240.十六进制的F0</span><span class="token triple-quoted-string string">"""以下写法会报错。八进制里允许的最大值是7,所以 29 不是一个合法的八进制数print(int("29",8))"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）转换成为浮点数"><a href="#2）转换成为浮点数" class="headerlink" title="2）转换成为浮点数"></a>2）转换成为浮点数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 转换为浮点数float</span><span class="token comment"># str-->float</span>s <span class="token operator">=</span> <span class="token string">'324.6'</span> <span class="token comment"># 有没有小数点都可以</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># int-->float</span>n <span class="token operator">=</span> <span class="token number">2024</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># bool-->float</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""324.62024.01.0 0.0"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3）转换成为字符串"><a href="#3）转换成为字符串" class="headerlink" title="3）转换成为字符串"></a>3）转换成为字符串</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 转换为字符串str</span><span class="token comment"># int-->str</span>n <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># float -->str</span>f <span class="token operator">=</span> <span class="token number">5.3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># bool --> str</span>a <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""5&lt;class 'str'>5.3&lt;class 'str'>&lt;class 'bool'>&lt;class 'str'>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4）转换成为布尔值"><a href="#4）转换成为布尔值" class="headerlink" title="4）转换成为布尔值"></a>4）转换成为布尔值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 转换为布尔bool</span><span class="token comment"># str-->bool</span>s <span class="token operator">=</span> <span class="token string">'0'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>s1 <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment"># 空串</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># int-->bool</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># float-->bool</span>f<span class="token operator">=</span><span class="token number">0.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""TrueFalseFalseFalse"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、其他类型转换（了解）"><a href="#6、其他类型转换（了解）" class="headerlink" title="6、其他类型转换（了解）"></a>6、其他类型转换（了解）</h2><table><thead><tr><th>eval(str)</th><th>用来计算在字符串中的有效Python表达式，并返回一个对象</th></tr></thead><tbody><tr><td>chr(x)</td><td>将一个整数转换为一个Unicode字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为它的ASCII整数值</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转换为一个八进制字符串</td></tr><tr><td>bin(x)</td><td>将一个整数转换为一个二进制字符串</td></tr><tr><td>tuple(s)</td><td>将序列 s 转换为一个元组</td></tr><tr><td>list(s )</td><td>将序列 s 转换为一个列表</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、Python标识符和关键字</title>
      <link href="/2024/06/25/python/%E5%9B%9B%E3%80%81Python%E6%A0%87%E8%AF%86%E7%AC%A6%E5%92%8C%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2024/06/25/python/%E5%9B%9B%E3%80%81Python%E6%A0%87%E8%AF%86%E7%AC%A6%E5%92%8C%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="四、Python-标示符和关键字"><a href="#四、Python-标示符和关键字" class="headerlink" title="四、Python 标示符和关键字"></a>四、Python 标示符和关键字</h1><h2 id="1、标示符"><a href="#1、标示符" class="headerlink" title="1、标示符"></a>1、标示符</h2><p>​计算机编程语言中，标示符是用户编程时使用的名字，用于给变量、常量、函数、语句块等命名，以建立起名称与使用之间的关系。</p><blockquote><p>名字需要有 <strong>见名知义</strong> 的效果</p></blockquote><h2 id="2、命名规则"><a href="#2、命名规则" class="headerlink" title="2、命名规则"></a>2、命名规则</h2><ol><li>标示符由字母、下划线和数字组成</li><li>不能以数字开头</li><li>严格区分大小写</li><li>不能与关键字重名</li></ol><h2 id="3、命名规则"><a href="#3、命名规则" class="headerlink" title="3、命名规则"></a>3、命名规则</h2><p>命名规则 可以被视为一种 惯例，并无绝对与强制。目的是为了 增加代码的识别和可读性。</p><h3 id="命名法"><a href="#命名法" class="headerlink" title="_ 命名法"></a>_ 命名法</h3><p>在 Python 中，如果 变量名 需要由 二个 或 多个单词 组成时，可以按照以下方式命名：</p><ul><li>每个单词都使用小写字母</li><li>单词与单词之间使用 _下划线 连接</li><li>例如：first_name、last_name、qq_number、qq_password</li></ul><h3 id="驼峰命名法"><a href="#驼峰命名法" class="headerlink" title="驼峰命名法"></a>驼峰命名法</h3><p>当 变量名 是由2个或多个单词组成时，还可以利用驼峰命名法来命名。</p><ul><li>小驼峰式命名法（lower camel case）： 第一个单词以小写字母开始，后续单词的首字母大写，例如：myName、aDog</li><li>大驼峰式命名法（upper camel case）： 每一个单词的首字母都采用大写字母，例如：FirstName、LastName.</li></ul><p>还有一种命名法是用下划线“_”来连接所有的单词，比如send_buf. Python的命令规则遵循PEP8标准：</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>变量名，函数名和文件名全小写，使用下划线连接； </li><li>类名遵守大驼峰命名法； </li><li>常量名全大写；</li></ul><h2 id="4、关键字"><a href="#4、关键字" class="headerlink" title="4、关键字"></a>4、关键字</h2><p>关键字的概念：一些具有特殊功能的标识符，这就是所谓的关键字。</p><ul><li>关键字就是在 Python 内部已经使用的标识符</li><li>关键字具有特殊的功能和含义</li><li>开发者不允许定义和关键字相同的名字的标示符</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> keyword<span class="token keyword">print</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span><span class="token comment"># ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、Python变量</title>
      <link href="/2024/06/25/python/%E4%B8%89%E3%80%81Python%E5%8F%98%E9%87%8F/"/>
      <url>/2024/06/25/python/%E4%B8%89%E3%80%81Python%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="三、Python-变量"><a href="#三、Python-变量" class="headerlink" title="三、Python 变量"></a>三、Python 变量</h1><p>​在编程语言中，<strong>变量是数据的载体</strong>，<strong>简单来说就是一块保存数据的内存空间，空间里面放着变量的值，变量的值可以被读取和修改，这是所有计算和控制的基础</strong>。计算机能处理的数据有很多种类型，最常见的就是数值，除了数值之外还有文本、图形、音频、视频等各种各样的数据。这里我们先了解几种常用的数据类型。</p><ul><li>整型（int）：Python中可以处理任意大小的整数，而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是256）的表示法。</li><li>浮点型（float）：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</li><li>字符串型（str）：字符串是以单引号或双引号括起来的任意文本，比如<code>&#39;hello&#39;</code>和<code>&quot;hello&quot;</code>。</li><li>布尔型（bool）：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>。</li></ul><h2 id="1、变量的定义"><a href="#1、变量的定义" class="headerlink" title="1、变量的定义"></a>1、变量的定义</h2><p>​对于重复使用，并且经常需要修改的数据，可以定义为变量，来提高编程效率。定义变量后可以使用变量名来访问变量值。</p><p>​定义变量的语法为: <code>变量名 = 变量值</code></p><blockquote><p>注意：</p><p>1、&#x3D; 两边要留一个空格</p><p>2、变量必须先定义后使用</p></blockquote><h2 id="2、变量命名规则"><a href="#2、变量命名规则" class="headerlink" title="2、变量命名规则"></a>2、变量命名规则</h2><p>​在 Python 中，变量的命名需要遵循以下这些规则，这些规则又分为必须遵守的硬性规则和建议遵守的非硬性规则。</p><p>硬性规则：</p><ul><li>规则1：变量名由<strong>字母</strong>、数字和<strong>下划线</strong>构成，数字不能开头</li><li>规则2：<strong>大小写敏感</strong>，简单的说就是大写的A和小写的a是两个不同的变量。</li><li>规则3：不要使用关键字或者保留字</li></ul><p>非硬性规则：</p><ul><li>规则1：变量名通常使用小写英文字母，多个单词用下划线进行连接。</li><li>规则2：受保护的变量用单个下划线开头（后面会讲到）。</li><li>​规则3：私有的变量用两个下划线开头（后面会讲到）。</li></ul><p>给变量（事实上应该是所有的标识符）命名时，都要做到<strong>见名知意</strong>。</p><p>补充说明变量:</p><ul><li>变量名：我们可以理解为箱子，箱子里面放的就是右侧的值。当需要使用变量值，就把对应的箱子拿来。</li><li>变量即是可以变化的量，可以随时进行修改。</li><li>程序就是用来处理数据的，而变量就是用来存储数据的。</li></ul><h2 id="3、变量的使用"><a href="#3、变量的使用" class="headerlink" title="3、变量的使用"></a>3、变量的使用</h2><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">45</span>          <span class="token comment"># 变量a保存了45</span>c <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token comment"># 变量c保存了布尔类型的值：True</span><span class="token comment"># 多个变量的值相同</span>num1 <span class="token operator">=</span> num2 <span class="token operator">=</span> num3 <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 多个变量的值不同，元组赋值</span>a，b <span class="token operator">=</span> <span class="token number">10</span>，<span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的a,b,c,d就是我们声明的变量，等号后面就是变量中存的值。</p><h3 id="变量的修改"><a href="#变量的修改" class="headerlink" title="变量的修改"></a>变量的修改</h3><p>创建变量后，可以在代码中重新赋值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">year <span class="token operator">=</span> <span class="token number">2023</span><span class="token keyword">print</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span>  <span class="token comment"># 2023</span>year <span class="token operator">=</span> <span class="token number">2024</span><span class="token keyword">print</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span>  <span class="token comment"># 2024</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不同类型的变量也可以进行修改、重新赋值，与类型无关。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">money <span class="token operator">=</span> <span class="token number">10</span>money <span class="token operator">=</span> <span class="token string">'10元'</span><span class="token keyword">print</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span>  <span class="token comment"># 10元  正常运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4、常量"><a href="#4、常量" class="headerlink" title="4、常量"></a>4、常量</h2><p>1、程序在运行的过程中，值永远不会发生改变的量称之为常量。</p><p>2、python没有专门的常量类型，一般约定俗成使用<strong>大写</strong>表示常量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 圆周率</span>PI <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token comment"># 我的生日</span>MY_BIRTHDAY <span class="token operator">=</span> <span class="token string">'2024-01-09'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、查看数据类型"><a href="#5、查看数据类型" class="headerlink" title="5、查看数据类型"></a>5、查看数据类型</h2><p>​在 python 中，只要定义了一个变量，而且它有数据，那么它的类型就已经确定了，不需要咱们开发者主动的去说明它的类型，系统会自动辨别。也就是说在使用的时候 **”变量没有类型，数据才有类型”**。</p><p>​如果临时想要查看一个变量存储的数据类型，使用 **<code>type</code>(变量的名字)**，来查看变量存储的数据类型。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">100</span>   b <span class="token operator">=</span> <span class="token string">"123"</span> c <span class="token operator">=</span> <span class="token number">1.8</span>d <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252156344" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、Python注释</title>
      <link href="/2024/06/25/python/%E4%BA%8C%E3%80%81Python%E6%B3%A8%E9%87%8A/"/>
      <url>/2024/06/25/python/%E4%BA%8C%E3%80%81Python%E6%B3%A8%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="二、Python-注释"><a href="#二、Python-注释" class="headerlink" title="二、Python 注释"></a>二、Python 注释</h1><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><p>​注释是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性。当然，我们也可以将源代码中暂时不需要运行的代码段通过注释来去掉，这样当你需要重新使用这些代码的时候，去掉注释符号就可以了。</p><p>简单的说，<strong>注释会让代码更容易看懂但不会影响程序的执行结果</strong>。</p><h2 id="2、分类"><a href="#2、分类" class="headerlink" title="2、分类"></a>2、分类</h2><h3 id="2-1、块注释"><a href="#2-1、块注释" class="headerlink" title="2.1、块注释"></a>2.1、块注释</h3><ol><li>以 <code>#</code> 开始，一直到本行结束都是注释</li><li>为了保证代码的可读性，**# 后面建议先添加一个空格**，然后再编写相应的说明文字（PEP8）</li><li>注释不会运行</li><li>代码是给机器执行用的，注释是给人看的，方便阅读代码时，能够快速的了解代码的功能</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 块注释</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我在学习python'</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2、行内注释"><a href="#2-2、行内注释" class="headerlink" title="2.2、行内注释"></a>2.2、行内注释</h3><ol><li>以<code>#</code>开始，一直到本行结束都是注释</li><li>与代码写在同一行</li><li><code># </code>前面至少有两个空格</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我在学习python'</span><span class="token punctuation">)</span>  <span class="token comment"># 与代码同行,前面至少有两个空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3、多行注释"><a href="#2-3、多行注释" class="headerlink" title="2.3、多行注释"></a>2.3、多行注释</h3><ol><li>如果希望编写的注释信息很多，一行无法显示，就可以使用多行注释</li><li><strong>多行注释</strong>：三个引号开头，三个引号结尾。我们称之为多行注释。<ul><li>以<code>&#39;&#39;&#39;</code>开始，并以<code>&#39;&#39;&#39;</code> 结束</li><li>以<code>&quot;&quot;&quot;</code>开始，并以<code>&quot;&quot;&quot;</code> 结束</li></ul></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 多行注释</span><span class="token comment"># 1.使用三个单引号</span><span class="token triple-quoted-string string">'''中间的任何内容都是注释，可以有多行但中间不能再有三个单引号'''</span><span class="token comment"># 2.使用三个双引号</span><span class="token triple-quoted-string string">"""中间都是注释内容，但不能出现三个双引号"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、使用规范"><a href="#3、使用规范" class="headerlink" title="3、使用规范"></a>3、使用规范</h2><ol><li>注释不是越多越好，对于一目了然的代码，不需要添加注释</li><li>对于 复杂的操作，应该在操作开始前写上若干行注释</li><li>对于 不是一目了然的代码，应在其行尾添加注释</li><li>绝不要描述代码，假设阅读代码的人比你更懂 Python，他只是不知道你的代码要做什么</li></ol><h2 id="4、输入输出函数"><a href="#4、输入输出函数" class="headerlink" title="4、输入输出函数"></a>4、输入输出函数</h2><h3 id="4-1、print-：输出-打印指定内容"><a href="#4-1、print-：输出-打印指定内容" class="headerlink" title="4.1、print()：输出&#x2F;打印指定内容"></a>4.1、print()：输出&#x2F;打印指定内容</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>objects<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> flush<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="逗号的使用"><a href="#逗号的使用" class="headerlink" title="逗号的使用"></a>逗号的使用</h4><ol><li>想要在一行中打印多个内容，可以在print()函数中使用逗号隔开多个内容</li><li>变量、数字、字符串都可以</li><li>注意使用英文的逗号</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在一行中打印多个内容</span>year <span class="token operator">=</span> <span class="token number">2024</span><span class="token keyword">print</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token string">'年，我要减肥'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token string">'年，我要读100本书'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token string">'年，我要去10个城市旅游'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="seq"><a href="#seq" class="headerlink" title="seq"></a>seq</h4><p>设置多个内容之间的分隔符，默认分隔符空格</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">year <span class="token operator">=</span> <span class="token number">2024</span><span class="token keyword">print</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token string">"年，我要减肥"</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="end"><a href="#end" class="headerlink" title="end"></a>end</h4><p>end：设置结束符，默认结束符’\n’</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">year <span class="token operator">=</span> <span class="token number">2024</span><span class="token keyword">print</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token string">"年，我要读100本书"</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token string">"年，我要去10个城市旅游"</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h4><p>如果希望输出文字信息的同时，一起输出 数据，就需要使用到 格式化操作符</p><ul><li>% 被称为 格式化操作符，专门用于处理字符串中的格式</li><li>包含 % 的字符串，被称为 格式化字符串</li></ul><ul><li>% 和不同的 字符 连用，不同类型的数据 需要使用 不同的格式化字符</li></ul><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252156646.png" alt="image-20240612225920229"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">month <span class="token operator">=</span> <span class="token number">2</span>day <span class="token operator">=</span> <span class="token number">20</span>weather <span class="token operator">=</span> <span class="token string">"晴"</span>temp <span class="token operator">=</span> <span class="token number">19.5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"今天是 %02d 月 %d 日, 天气%s，温度%.1f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>month<span class="token punctuation">,</span> day<span class="token punctuation">,</span> weather<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2、input-函数：输入指定内容"><a href="#4-2、input-函数：输入指定内容" class="headerlink" title="4.2、input()函数：输入指定内容"></a>4.2、input()函数：输入指定内容</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">变量 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"提示信息："</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>所谓 输入，就是用 代码 获取 用户 通过 键盘 输入的信息;</li><li>用户输入的 任何内容 Python 都认为是一个 字符串;</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、Python介绍</title>
      <link href="/2024/06/25/python/%E4%B8%80%E3%80%81Python%E4%BB%8B%E7%BB%8D/"/>
      <url>/2024/06/25/python/%E4%B8%80%E3%80%81Python%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Python-介绍"><a href="#一、Python-介绍" class="headerlink" title="一、Python 介绍"></a>一、Python 介绍</h1><h2 id="1、Python-语言介绍"><a href="#1、Python-语言介绍" class="headerlink" title="1、Python 语言介绍"></a>1、Python 语言介绍</h2><h3 id="一、什么是Python？"><a href="#一、什么是Python？" class="headerlink" title="一、什么是Python？"></a>一、什么是Python？</h3><p>Python就是一门<strong>解释型</strong>的编程语言，而且是现在世界上最流行的编程语言之一。 语言排行榜：<a href="https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252148836.png" alt="image-20240606234958678"></p><h3 id="二、Python发展背景"><a href="#二、Python发展背景" class="headerlink" title="二、Python发展背景"></a>二、Python发展背景</h3><ul><li>Python的作者，Guido von Rossum（吉多·范·罗苏姆)，荷兰人。1982年，吉多从阿姆斯特丹大学获得了数学和计算机硕士学位。然而，尽管他算得上是一位数学家，但他更加享受计算机带来的乐趣。用他的话说，虽然拥有数学和计算机双料资质，他总趋向于做计算机相关的工作，并热衷于做任何和编程相关的事情。</li><li>在那个时候，吉多接触并使用过诸如Pascal、C、Fortran等语言。这些语言的基本设计原则是让机器能更快运行。在80年代，虽然IBM和苹果已经掀起了个人电脑浪潮，但这些个人电脑的配置很低。比如早期的Macintosh，只有8MHz的CPU主频和128KB的RAM，一个大的数组就能占满内存。所有的编译器的核心是做优化，以便让程序能够运行。为了增进效率，语言也迫使程序员像计算机一样思考，以便能写出更符合机器口味的程序。在那个时代，程序员恨不得用手榨取计算机每一寸的能力。有人甚至认为C语言的指针是在浪费内存。至于动态类型，内存自动管理，面向对象…… 别想了，那会让你的电脑陷入瘫痪。</li><li>这种编程方式让吉多感到苦恼。吉多知道如何用C语言写出一个功能，但整个编写过程需要耗费大量的时间，即使他已经准确的知道了如何实现。他的另一个选择是shell。Bourne Shell作为UNIX系统的解释器已经长期存在。UNIX的管理员们常常用shell去写一些简单的脚本，以进行一些系统维护的工作，比如定期备份、文件系统管理等等。shell可以像胶水一样，将UNIX下的许多功能连接在一起。许多C语言下上百行的程序，在shell下只用几行就可以完成。然而，shell的本质是调用命令。它并不是一个真正的语言。比如说，shell没有数值型的数据类型，加法运算都很复杂。总之，shell不能全面的调动计算机的功能。</li><li>吉多希望有一种语言，这种语言能够像C语言那样，能够全面调用计算机的功能接口，又可以像shell那样，可以轻松的编程。ABC语言让吉多看到希望。ABC是由荷兰的数学和计算机研究所开发的。吉多在该研究所工作，并参与到ABC语言的开发。ABC语言以教学为目的。与当时的大部分语言不同，ABC语言的目标是“让用户感觉更好”。ABC语言希望让语言变得容易阅读，容易使用，容易记忆，容易学习，并以此来激发人们学习编程的兴趣。比如下面是一段来自Wikipedia的ABC程序，这个程序用于统计文本中出现的词的总数：</li></ul><pre class="line-numbers language-abc" data-language="abc"><code class="language-abc">HOW TO RETURN words document:      PUT &#123;&#125; IN collection      FOR line IN document:         FOR word IN split line:            IF word not.in collection:               INSERT word IN collection      RETURN collection<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HOW TO用于定义一个函数。一个Python程序员应该很容易理解这段程序。ABC语言使用冒号和缩进来表示程序块，行尾没有分号。for和if结构中也没有括号() 。赋值采用的是PUT，而不是更常见的等号。这些改动让ABC程序读起来像一段文字。</li><li>尽管ABC已经具备了良好的可读性和易用性，ABC语言最终没有流行起来。在当时，ABC语言编译器需要比较高配置的电脑才能运行。而这些电脑的使用者通常精通计算机，他们更多考虑程序的效率，而非它的学习难度。除了硬件上的困难外，ABC语言的设计也存在一些致命的问题：<ul><li>可拓展性差。ABC语言不是模块化语言。如果想在ABC语言中增加功能，比如对图形化的支持，就必须改动很多地方。</li><li>不能直接进行IO。ABC语言不能直接操作文件系统。尽管你可以通过诸如文本流的方式导入数据，但ABC无法直接读写文 件。输入输出的困难对于计算机语言来说是致命的。你能想像一个打不开车门的跑车么？</li><li>过度革新。ABC用自然语言的方式来表达程序的意义，比如上面程序中的HOW TO 。然而对于程序员来说，他们更习惯 用function或者define来定义一个函数。同样，程序员更习惯用等号来分配变量。尽管ABC语言很特别，但学习难度 也很大。</li><li>传播困难。ABC编译器很大，必须被保存在磁带上。当时吉多在访问的时候，就必须有一个大磁带来给别人安装ABC编译器。这样，ABC语言就很难快速传播。</li></ul></li><li>1989年，为了打发圣诞节假期，吉多开始写Python语言的编译器。Python这个名字，来自吉多所挚爱的电视剧Monty Python’s Flying Circus。他希望这个新的叫做Python的语言，能符合他的理想：创造一种C和shell之间，功能全面，易学易用，可拓展的语言。吉多作为一个语言设计爱好者，已经有过设计语言的尝试。这一次，也不过是一次纯粹的hacking行为。</li></ul><h3 id="三、Python语言的诞生"><a href="#三、Python语言的诞生" class="headerlink" title="三、Python语言的诞生"></a>三、Python语言的诞生</h3><ul><li><p>1991年，第一个Python编译器诞生。它是用C语言实现的，并能够调用C语言的库文件。从一出生，Python已经具有了 ：类，函数，异常处理，包含表和词典在内的核心数据类型，以及模块为基础的拓展系统。</p></li><li><p>Python语法很多来自C，但又受到ABC语言的强烈影响。来自ABC语言的一些规定直到今天还富有争议，比如强制缩进。 但这些语法规定让Python容易读。另一方面，Python聪明的选择服从一些惯例，特别是C语言的惯例，比如回归等号赋值。吉多认为，如果“常识”上确立的东西，没有必要过度纠结。</p></li><li><p>Python从一开始就特别在意可拓展性。Python可以在多个层次上拓展。从高层上，你可以直接引入. py文件。在底层，你可以引用C语言的库。Python程序员可以快速的使用Python写. py文件作为拓展模块。但当性能是考虑的重要因素时，Python程序员可以深入底层，写C程序，编译为.so文件引入到Python中使用。Python就好像是使用钢构建房一样，先规定好大的框架。而程序员可以在此框架下相当自由的拓展或更改。</p></li><li><p>最初的Python完全由吉多本人开发。Python得到吉多同事的欢迎。他们迅速的反馈使用意见，并参与到Python的改进。吉多和一些同事构成Python的核心团队。他们将自己大部分的业余时间用于hack Python。随后，Python拓 展到研究所之外。Python将许多机器层面上的细节隐藏，交给编译器处理，并凸显出逻辑层面的编程思考。Python程 序员可以花更多的时间用于思考程序的逻辑，而不是具体的实现细节。这一特征吸引了广大的程序员，Python开始流行。</p></li><li><p>计算机硬件越来越强大，Python又容易使用，所以许多人开始转向Python。吉多维护了一个mail list，Python用户就通过邮件进行交流。Python用户来自许多领域，有不同的背景，对Python也有不同的需求。Python相当的开放，又容 易拓展，所以当用户不满足于现有功能，很容易对Python进行拓展或改造。随后，这些用户将改动发给吉多，并由吉多决定是否将新的特征加入到Python或者标准库中。如果代码能被纳入Python自身或者标准库，这将极大的荣誉。由于吉多至高无上的决定权，他因此被称为“终身的仁慈独裁者”。2018年7月12日，在完成PEP（Python Enhancement Proposals）572后，吉多决定退出Python核心决策层。</p></li><li><p>Python以及其标准库的功能强大。这些是整个社区的贡献。Python的开发者来自不同领域，他们将不同领域的优点带给Python。比如Python标准库中的正则表达是参考Perl，而lambda, map, filter, reduce等函数参考了Lisp。Python本身的一些功能以及大部分的标准库来自于社区。Python的社 区不断扩大，进而拥有了自己的newsgroup，网站，以及基金。从Python 2.0开始，Python也从mail list的开发方式，转为完全开源的开发方式。社区气氛已经形成，工作被整个社区分担，Python也获得了更加高速的发展。</p></li><li><p>到今天，Python的框架已经确立。Python语言以对象为核心组织代码，支持多种编程范式，采用动态类型，自动进行内存回收。Python支持解释运行，并能调用C库进行拓展。Python有强大的标准库。由于标准库的体系已经稳定，所以Python的生态系统开始拓展到第三方包。这些包，如Django、web.py、wxpython、numpy、matplotlib、PIL，将Python升级成了物种丰富的热带雨林。</p></li><li><p>Python崇尚优美、清晰、简单，是一个优秀并广泛使用的语言。Python在TIOBE排行榜中排行第八，它是Google的第三大开发语言，Dropbox的基础语言，豆瓣的服务器语言。Python的发展史可以作为一个代表，带给我许多启示。</p></li><li><p>在Python的开发过程中，社区起到了重要的作用。吉多自认为自己不是全能型的程序员，所以他只负责制订框架。如果问题太复杂，他会选择绕过去，也就是cut the corner。这些问题最终由社区中的其他人解决。社区中的人才是异常丰富的，就连创建网站，筹集基金这样与开发稍远的事情，也有人乐意于处理。如今的项目开发越来越复杂，越来越庞大，合作以及开放的心态成为项目最终成功的关键。</p></li><li><p>Python从其他语言中学到了很多，无论是已经进入历史的ABC，还是依然在使用的C和Perl，以及许多没有列出的其他 语言。可以说，Python的成功代表了它所有借鉴的语言的成功。同样，Ruby借鉴了Python，它的成功也代表了Python某些方面的成功。每个语言都是混合体，都有它优秀的地方，但也有各种各样的缺陷。同时，一个语言“好与不好”的评判，往往受制于平台、硬件、时代等等外部原因，程序员经历过许多语言之争。</p></li></ul><h3 id="四、关键点常识"><a href="#四、关键点常识" class="headerlink" title="四、关键点常识"></a>四、关键点常识</h3><ul><li>Python是从ABC发展起来，并且结合了Unix shell和C语言的习惯。</li><li>Python的解释器如今有多个语言实现，我们常用的是CPython（官方版本的C语言实现），其他还有Jython（可以运行在Java平台）、IronPython（可以运行在.NET和Mono平台）、PyPy（Python实现的，支持JIT即时编译）</li><li>Python目前有两个版本，Python2和Python3，最新版分别为2.7.16和3.7.3（截止至2019年4月）</li></ul><h3 id="五、Python-优缺点"><a href="#五、Python-优缺点" class="headerlink" title="五、Python 优缺点"></a>五、Python 优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>简单：Python是一种代表简单主义思想的语言。阅读一个良好的Python程序就感觉像是在读英语一样，尽管这个英语的要求非常严格！Python的这种伪代码本质是它最大的优点之一。它使你能够专注于解决问题而不是去搞明白语言本身。</li><li>易学：就如同你即将看到的一样，Python极其容易上手。前面已经提到了，Python有极其简单的语法。</li><li>免费、开源：Python是FLOSS（自由&#x2F;开放源码软件）之一。简单地说，你可以自由地发布这个软件的拷贝、阅读它的源代码、对它做改动、把它的一部分用于新的自由软件中。FLOSS是基于一个团体分享知识的概念。这是为什么Python如此优秀的原因之一——它是由一群希望看到一个更加优秀的Python的人创造并经常改进着的。</li><li>高层语言：当你用Python语言编写程序的时候，你无需考虑诸如如何管理你的程序使用的内存一类的底层细节。</li><li>可移植性：由于它的开源本质，Python已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。如果你小心地避免使用依赖于系统的特性，那么你的所有Python程序无需修改就可以在下述任何平台上面运行。这些平台包括Linux、Windows、FreeBSD、Macintosh、Solaris、OS&#x2F;2、Amiga、AROS、AS&#x2F;400、BeOS、OS&#x2F;390、z&#x2F;OS、Palm OS、QNX、VMS、Psion、Acom RISC OS、VxWorks、PlayStation、Sharp Zaurus、Windows CE甚至还有PocketPC、Symbian以及Google基于linux开发的Android平台！</li><li>面向对象：Python既支持面向过程的编程也支持面向对象的编程。在“面向过程”的语言中，程序是由过程或仅仅是可重用代码的函数构建起来的。在“面向对象”的语言中，程序是由数据和功能组合而成的对象构建起来的。与其他主要的语言如C++和Java相比，Python以一种非常强大又简单的方式实现面向对象编程。</li><li>可扩展性：如果你需要你的一段关键代码运行得更快或者希望某些算法不公开，你可以把你的部分程序用C或C++编写，然后在你的Python程序中使用它们。</li><li>规范的代码：Python采用强制缩进的方式使得代码具有极佳的可读性。</li><li>解释型语言：一个用编译型语言比如C或C++写的程序可以从源文件（即C或C++语言）转换到一个你的计算机使用的语言（二进制代码，即0和1）。这个过程通过编译器和不同的标记、选项完成。当你运行你的程序的时候，连接&#x2F;转载器软件把你的程序从硬盘复制到内存中并且运行。而Python语言写的程序不需要编译成二进制代码。你可以直接从源代码运行程序。在计算机内部，Python解释器把源代码转换成称为字节码的中间形式，然后再把它翻译成计算机使用的机器语言并运行。事实上，由于你不再需要担心如何编译程序，如何确保连接转载正确的库等等，所有这一切使得使用Python更加简单。由于你只需要把你的Python程序拷贝到另外一台计算机上，它就可以工作了，这也使得你的Python程序更加易于移植。</li><li>丰富的库：Python标准库确实很庞大。它可以帮助你处理各种工作，包括正则表达式、文档生成、单元测试、线程、数据库、网页浏览器、CGI、FTP、电子邮件、XML、XML-RPC、HTML、WAV文件、密码系统、GUI（图形用户界面）、Tk和其他与系统有关的操作。记住，只要安装了Python，所有这些功能都是可用的。这被称作Python的“功能齐全”理念。除了标准库以外，还有许多其他高质量的库，如wxPython、Twisted和Python图像库等等。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>Python语言非常完善，没有明显的短板和缺点，唯一的缺点就是执行效率慢，这个是解释型语言所通有的，同时这个缺点也将被计算机越来越强大的性能所弥补。</p><h3 id="六、Python的设计哲学"><a href="#六、Python的设计哲学" class="headerlink" title="六、Python的设计哲学"></a>六、Python的设计哲学</h3><p>Python的设计哲学总结起来就是：</p><ul><li>优雅</li><li>明确：<ul><li>用一种方法，最好是只有一种方法来做一件事</li><li>如果面临多种选择，Python开发者一般会拒绝花俏的语法，而选择明确没有或很少有歧义的语法</li></ul></li><li>简单：代码像纯英文一样便于理解。</li></ul><p>在Python的交互编程终端里输入<code>import this</code> 可以查看原文。下面是Python设计哲学原文及翻译：</p><pre class="line-numbers language-none"><code class="language-none">Beautiful is better than ugly. 优美胜于丑陋Explicit is better than implicit. 明了胜于晦涩Simple is better than complex. 简单胜过复杂Complex is better than complicated. 复杂胜过凌乱Flat is better than nested.　　　　　　扁平胜于嵌套Sparse is better than dense. 　　　　 间隔胜于紧凑Readability counts.　　　　　　　　　　 可读性很重要Special cases aren&#39;t special enough to break the rules. 即使假借特例的实用性之名，也不违背这些规则Although practicality beats purity.　　　虽然实用性次于纯度Errors should never pass silently.　　　 错误不应该被无声的忽略Unless explicitly silenced.　　　　　　　 除非明确的沉默　　　　　　　In the face of ambiguity, refuse the temptation to guess. 当存在多种可能时，不要尝试去猜测There should be one-- and preferably only one --obvious way to do it. 应该有一个，最好只有一个，明显能做到这一点Although that way may not be obvious at first unless you&#39;re Dutch.虽然这种 方式可能不容易，除非你是python之父Now is better than never. 现在做总比不做好Although never is often better than *right* now. 虽然过去从未比现在好If the implementation is hard to explain, it&#39;s a bad idea. 如果这个实现不容易解释，那么它肯定是坏主意If the implementation is easy to explain, it may be a good idea. 如果这个实现容易解释，那么它很可能是个好主意Namespaces are one honking great idea -- let&#39;s do more of those! 命名空间是一种绝妙的理念，应当多加利用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、Python应用场景"><a href="#七、Python应用场景" class="headerlink" title="七、Python应用场景"></a>七、Python应用场景</h3><ul><li><strong>Web应用开发</strong></li></ul><p>Python经常被用于Web开发。比如，通过mod_wsgi模块，Apache可以运行用Python编写的Web程序。Python定义了WSGI标准应用接口来协调Http服务器与基于Python的Web程序之间的通信。一些Web框架，如Django,TurboGears,web2py,Zope等，可以让程序员轻松地开发和管理复杂的Web程序。</p><ul><li><strong>操作系统管理、服务器运维的自动化脚本</strong></li></ul><p>在很多操作系统里，Python是标准的系统组件。 大多数Linux发行版以及NetBSD、OpenBSD和Mac OS X都集成了Python，可以在终端下直接运行Python。有一些Linux发行版的安装器使用Python语言编写，比如Ubuntu的Ubiquity安装器,Red Hat Linux和Fedora的Anaconda安装器。Gentoo Linux使用Python来编写它的Portage包管理系统。Python标准库包含了多个调用操作系统功能的库。通过pywin32这个第三方软件 包，Python能够访问Windows的COM服务及其它Windows API。使用IronPython，Python程序能够直接调用.Net Framework。一般说来，Python编写的系统管理脚本在可读性、性能、代码重用度、扩展性几方面都优于普通的shell脚本。</p><ul><li><strong>网络爬虫</strong></li></ul><p>Python有大量的HTTP请求处理库和HTML解析库，并且有成熟高效的爬虫框架Scrapy和分布式解决方案scrapy-redis，在爬虫的应用方面非常广泛。</p><ul><li><strong>科学计算</strong></li></ul><p>NumPy、SciPy、Pandas、Matplotlib可以让Python程序员编写科学计算程序。</p><ul><li><strong>桌面软件</strong></li></ul><p>PyQt、PySide、wxPython、PyGTK是Python快速开发桌面应用程序的利器。</p><ul><li><strong>服务器软件（网络软件）</strong></li></ul><p>Python对于各种网络协议的支持很完善，因此经常被用于编写服务器软件、网络爬虫。第三方库Twisted支持异步网络编程和多数标准的网络协议(包含客户端和服务器)，并且提供了多种工具，被广泛用于编写高性能的服务器软件。</p><ul><li><strong>游戏</strong></li></ul><p>很多游戏使用C++编写图形显示等高性能模块，而使用Python或者Lua编写游戏的逻辑、服务器。相较于Python，Lua的功能更简单、体积更小；而Python则支持更多的特性和数据类型。</p><p>Google、NASA、Facebook都在内部大量地使用Python。</p><h2 id="2、安装配置-Python"><a href="#2、安装配置-Python" class="headerlink" title="2、安装配置 Python"></a>2、安装配置 Python</h2><p>想要进行 Python 开发，首先需要下载和配置Python解释器。</p><h3 id="下载-Python"><a href="#下载-Python" class="headerlink" title="下载 Python"></a>下载 Python</h3><ul><li>访问Python 官网: <a href="https://www.python.org/">https://www.python.org/</a></li><li>点击 downloads 按钮，在下拉框中选择系统类型(windows&#x2F;Mac OS&#x2F;Linux等)</li><li>选择下载最新版本的Python</li></ul><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252149086.png" alt="img"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252149797.png" alt="image-20230403232911008"></p><p>对于Windows操作系统，可以下载“executable installer”。</p><h3 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h3><p>双击运行刚才下载的安装程序，会打开Python环境的安装向导。在执行安装向导的时候，记得勾选“<code>Add Python 3.x to PATH</code>”选项，这个选项会帮助我们将Python的解释器添加到PATH环境变量中（不理解没关系，照做就行），具体的步骤如下图所示。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252150675" alt="图片"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252150035" alt="图片"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252150043" alt="图片"></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252150380" alt="图片"></p><h3 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h3><ul><li><p>点击电脑左下角开始按钮，输入<code>cmd</code> 进入到windows的命令行模式。</p></li><li><p>在命令行中输入Python,正确显示Python版本，即表示Python安装成功 <img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252150870.png" alt="img"></p></li><li><p>如果在命令行中输入python出现如下错误 </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252150286.png" alt="img"> 可能是因为在安装 Python 的过程中没有勾选 <code>Add Python 3.X to PATH</code> 选项，此时需要手动对 Python 进行配置。</p></li></ul><h3 id="手动配置-Python"><a href="#手动配置-Python" class="headerlink" title="手动配置 Python"></a>手动配置 Python</h3><p>注意：如果在安装过程中，已经勾选了 <code>Add Python 3.X to PATH</code>选项，并且在<code>cmd</code> 命令模式下输入<code>python</code>指令不报错，就不需要再手动的配置Python.</p><ul><li><p>右键<code>此电脑</code> –&gt; 选择 <code>属性</code> </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252151342.png" alt="img"></p></li><li><p>选择<code>高级系统设置</code>–&gt;<code>环境变量</code>–&gt;找到并且双击<code>Path</code> </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252151305.png" alt="img"></p></li><li><p>双击<code>Path</code>,在弹框里点击新建，找到Python的安装目录，把路径添加进去 </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252151235.png" alt="img"></p></li><li><p>这里新添加的路径 <code>C:\Users\chris\AppData\Local\Programs\Python\Python37</code> 是Python安装好以后，<code>Python.exe</code> 这个可执行文件所在的目录。 </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252151999.png" alt="img"></p></li></ul><h2 id="3、pip-的使用"><a href="#3、pip-的使用" class="headerlink" title="3、pip 的使用"></a>3、pip 的使用</h2><p>pip 是一个现代的，通用的 Python 包管理工具。提供了对 Python 包的查找、下载、安装、卸载的功能，便于我们对 Python 的资源包进行管理。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在安装 Python 时，会自动下载并且安装pip。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li><p>在 windows 命令行里，输入 <code>pip -V</code> 可以查看 pip 的版本。 </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252151823.png" alt="img"></p></li><li><p>如果在命令行里，运行<code>pip -V</code>,出现如下提示: </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252151764.png" alt="img"> 可能是因为在安装 python 的过程中未勾选 <code>Add Python 3.X to PATH</code> 选项，需要手动的配置 pip 的环境变量。</p></li><li><p>右键<code>此电脑</code>–&gt;<code>环境变量</code>–&gt;找到并且双击<code>Path</code>–&gt;在弹窗里点击新建–&gt;找到pip的安装目录，把路径添加进去。 </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252151851.png" alt="img"></p></li><li><p>这里新添加的路径  <code>C:\Users\chris\AppData\Local\Programs\Python\Python37\Scripts</code> 是 Python 安装好以后，<code>pip.exe</code>  这个可执行文件所在的目录。 </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252152337.png" alt="img"></p></li></ul><h3 id="使用-pip-管理-Python-包"><a href="#使用-pip-管理-Python-包" class="headerlink" title="使用 pip 管理 Python 包"></a>使用 pip 管理 Python 包</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252152694.png" alt="image-20230405000344455"></p><ul><li>pip install <code>&lt;包名&gt;</code> 安装指定的包</li><li>pip uninstall <code>&lt;包名&gt;</code> 删除指定的包</li><li>pip list 显示已经安装的包</li><li>pip freeze 显示已经安装的包，并且以指定的格式显示</li><li>pip install -r required.txt 安装required.txt文件里列出的安装包</li></ul><h3 id="修改-pip-下载源"><a href="#修改-pip-下载源" class="headerlink" title="修改 pip 下载源"></a>修改 pip 下载源</h3><p>运行pip install 命令会从网站上下载指定的python包，默认是从 <code>https://files.pythonhosted.org/</code> 网站上下载。这是个国外的网站，遇到网络情况不好的时候，可能会下载失败，我们可以通过命令，修改 pip 现在软件时的源。 格式:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> 包名 <span class="token parameter variable">-i</span> 国内源地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例: <code>pip install flask -i https://pypi.mirrors.ustc.edu.cn/simple/</code> 就是从中国科技大学 (ustc) 的服务器上下载 flask(基于 python 的第三方 web 框架)</p><p>国内常用的 pip 下载源列表:</p><ul><li>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></li><li>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></li><li>豆瓣(douban) <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></li><li>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a></li><li>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a></li><li>豆瓣：<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></li></ul><p>note：新版ubuntu要求使用https源，要注意。</p><p><strong>例如：pip3 install -i <a href="https://pypi.doubanio.com/simple/">https://pypi.doubanio.com/simple/</a> 包名</strong></p><h4 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h4><p><code>pip -i 库名 下载源</code>，将下载的库保存到<code>Lib/site-packages</code>中。</p><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> requests <span class="token parameter variable">-i</span> http://pypi.douban.com/simple/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252152281.png" alt="image-20230405003900931"></p><blockquote><p>安装成功后执行pip仍报错，提示pip要升级，执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-m</span> pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="永久使用"><a href="#永久使用" class="headerlink" title="永久使用"></a>永久使用</h4><p>1）Linux 下，修改 <code>~/.pip/pip.conf</code> (没有就创建一个文件夹及文件。文件夹要加“.”，表示是隐藏文件夹)，内容如下：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">global</span><span class="token punctuation">]</span></span><span class="token key attr-name">index-url</span> <span class="token punctuation">=</span> <span class="token value attr-value">http://pypi.douban.com/simple/</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">install</span><span class="token punctuation">]</span></span><span class="token key attr-name">trusted-host</span> <span class="token punctuation">=</span> <span class="token value attr-value">pypi.douban.com</span><span class="token key attr-name">timeout</span> <span class="token punctuation">=</span> <span class="token value attr-value">6000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）windows 下，需要创建一个 pip 目录，再新建文件 pip.ini。相关步骤如下：</p><ul><li><p>在资源管理器的地址栏输入<code>%appdata%</code>后回车,打开 appdata 文件夹</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252152928.png" alt="image-20230405005857993"></p></li><li><p>新建一个 pip 文件夹，在 pip 文件夹里面新建一个配置文件 <code>pip.ini</code></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252152227.png" alt="image-20230405010028182"></p></li><li><p>在配置文件中写入如下内容后保存即可：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">global</span><span class="token punctuation">]</span></span><span class="token key attr-name">index-url</span> <span class="token punctuation">=</span> <span class="token value attr-value">http://pypi.douban.com/simple/</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">install</span><span class="token punctuation">]</span></span><span class="token key attr-name">trusted-host</span> <span class="token punctuation">=</span> <span class="token value attr-value">pypi.douban.com</span><span class="token key attr-name">timeout</span> <span class="token punctuation">=</span> <span class="token value attr-value">6000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在次执行 <code>pip install 库名</code>，就回去上面设置的数据源中查照并下载，如下图：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252152074.png" alt="image-20230405010244625"></p></li></ul><h2 id="4、PyCharm-开发工具"><a href="#4、PyCharm-开发工具" class="headerlink" title="4、PyCharm 开发工具"></a>4、PyCharm 开发工具</h2><p>​IDE的概念 IDE(Integrated Development Environment)又被称为<strong>集成开发环境</strong>。说白了，就是有一款图形化界面的软件，它集成了编辑代码，编译代码，分析代码，执行代码以及调试代码等功能。在我们Python开发中，最常用的IDE是Pycharm.</p><p>​pycharm由捷克公司JetBrains开发的一款IDE,提供代码分析、图形化调试器，集成测试器、集成版本控制系统等，主要用来编写Python代码。</p><p>​下面就简单介绍下PyCharm的下载、安装与使用：</p><h3 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h3><p>下载地址:<a href="http://www.jetbrains.com/pycharm/download">http://www.jetbrains.com/pycharm/download</a></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252153512" alt="图片"></p><ol><li>选择自己对应的操作系统，点击Download，就可以下载了。注：默认是最新版本，选择Other version下载其他版本。</li><li>下载完成后可以直接安装了。安装步骤依次下一步就可以。</li></ol><p>安装完成之后会有一个配置设置，选择下面的就可以了。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252153801.png" alt="图片"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>运行Pycharm,选择<code>Create New Project</code>,创建一个新的Python工程。 </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252153822.png" alt="img"></p></li><li><p>选择’Pure Python’创建一个新的纯Python工程项目，<code>Location</code>表示该项目的保存路径，<code>Interpreter</code> 用来指定Python解释器的版本。 </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252153822.png" alt="img"></p></li><li><p>右击项目，选择<code>New</code>，再选择<code>Python File</code> </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252154253.png" alt="img"></p></li><li><p>在弹出的对话框中输入的文件名<code>HelloPython</code>，点击OK，表示创建一个Python程序的文本文件，文本文件后缀名默认.py </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252154700.png" alt="img"></p></li><li><p>在新建的<code>HelloPython.py</code>文件里，输入以下代码，并在空白处右键选择<code>Run</code>运行，表示输出一段<code>hello world</code>字符串。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252154687.png" alt="img"></p></li><li><p>运行成功后，Pycharm Console窗口将显示我们的输出结果。 </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252154484.png" alt="img"></p></li></ol><p><strong>print()</strong> 方法用于打印输出，Python最常见的一个函数。使用时就是将要打印的内容放到print的括号里面。</p><ul><li>使用 PyCharm 下载库</li></ul><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252155013.png" alt="image-20230405172858727"></p><h2 id="5、交互式编程"><a href="#5、交互式编程" class="headerlink" title="5、交互式编程"></a>5、交互式编程</h2><p>简单说来，就是直接在终端中运行解释器，而不使用文件名的方式来执行文件。这种交互式的编程环境，我们也可以称之为 REPL,即读取 (Read) 输入的内容，执行 (Eval) 用户输入的指令，打印 (Print) 执行结果,然后进行循环 (Loop)，Python 支持交互式编程。</p><h3 id="一、Python的交互式编程"><a href="#一、Python的交互式编程" class="headerlink" title="一、Python的交互式编程"></a>一、Python的交互式编程</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252155220.png" alt="img"></p><h3 id="二、Pycharm-里进入交互式编程"><a href="#二、Pycharm-里进入交互式编程" class="headerlink" title="二、Pycharm 里进入交互式编程"></a>二、Pycharm 里进入交互式编程</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252155461.png" alt="img"></p><h3 id="三、IPython-的安装和使用"><a href="#三、IPython-的安装和使用" class="headerlink" title="三、IPython 的安装和使用"></a>三、IPython 的安装和使用</h3><p>pyton自带的交互式编程，功能不够强大，例如，不能实现语法高亮，自动换行等功能。可以使用第三方的包IPython(Interactive Python)，来对自带的Python shell进行功能扩展。</p><h4 id="安装-IPython"><a href="#安装-IPython" class="headerlink" title="安装 IPython"></a>安装 IPython</h4><p>使用 pip 命令，可以快速的安装 IPython.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> ipython<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252155040.png" alt="image-20230405105708728"></p><h4 id="使用-IPython"><a href="#使用-IPython" class="headerlink" title="使用 IPython"></a>使用 IPython</h4><p>在命令行中输入 ipython 即可进入到 ipython 交互式编程。</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252155556.png" alt="image-20230405105801060"></p><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/luyaguo/pictures-guo/main/python-base/202406252156247.png" alt="img"></p><h3 id="四、交互式编程的优缺点"><a href="#四、交互式编程的优缺点" class="headerlink" title="四、交互式编程的优缺点"></a>四、交互式编程的优缺点</h3><ul><li>优点：</li></ul><p>适合于学习&#x2F;验证 Python 语法或者局部代码</p><ul><li>缺点：<ul><li>代码不能保存</li><li>不适合运行太大的程序</li></ul></li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发规范</title>
      <link href="/2024/06/22/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
      <url>/2024/06/22/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="一、命名规范"><a href="#一、命名规范" class="headerlink" title="一、命名规范"></a>一、命名规范</h1><p>常用的命名规范：</p><ul><li>camelCase（小驼峰式命名法 —— 首字母小写）</li><li>PascalCase（大驼峰式命名法 —— 首字母大写）</li><li>kebab-case（短横线连接式）</li><li>Snake （下划线连接式）</li></ul><h2 id="1-1-项目文件命名"><a href="#1-1-项目文件命名" class="headerlink" title="1.1 项目文件命名"></a>1.1 项目文件命名</h2><h3 id="1-1-1-项目名"><a href="#1-1-1-项目名" class="headerlink" title="1.1.1 项目名"></a>1.1.1 项目名</h3><p>全部采用小写方式， 以短横线分隔。例：my-project-name。</p><h3 id="1-1-2-目录名"><a href="#1-1-2-目录名" class="headerlink" title="1.1.2 目录名"></a>1.1.2 目录名</h3><p>参照项目命名规则，有复数结构时，要采用复数命名法。例：docs、assets、components、directives、mixins、utils、views。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">my-project-name/ |- BuildScript // 流水线部署文件目录 |- docs           // 项目的细化文档目录（可选） |- nginx          // 部署在容器上前端项目 nginx 代理文件目录 |- node_modules   // 下载的依赖包 |- public // 静态页面目录 |- index.html // 项目入口 |- src            // 源码目录 |- api        // http 请求目录 |- assets     // 静态资源目录，这里的资源会被wabpack构建 |- icon   // icon 存放目录 |- img    // 图片存放目录 |- js     // 公共 js 文件目录 |- scss   // 公共样式 scss 存放目录 |- frame.scss   // 入口文件 |- global.scss  // 公共样式 |- reset.scss   // 重置样式 |- components     // 组件 |- plugins        // 插件 |- router         // 路由 |- routes         // 详细的路由拆分目录（可选） |- index.js |- store          // 全局状态管理 |- utils          // 工具存放目录 |- request.js // 公共请求工具 |- views          // 页面存放目录 |- App.vue        // 根组件 |- main.js        // 入口文件 |- tests          // 测试用例 |- .browserslistrc// 浏览器兼容配置文件 |- .editorconfig  // 编辑器配置文件 |- .eslintignore  // eslint 忽略规则 |- .eslintrc.js   // eslint 规则 |- .gitignore     // git 忽略规则 |- babel.config.js // babel 规则 |- Dockerfile // Docker 部署文件 |- jest.config.js |- package-lock.json |- package.json // 依赖 |- README.md // 项目 README |- vue.config.js // webpack 配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-3-图像文件名"><a href="#1-1-3-图像文件名" class="headerlink" title="1.1.3 图像文件名"></a>1.1.3 图像文件名</h3><p>全部采用小写方式， 优先选择单个单词命名，多个单词命名以下划线分隔。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">banner_sina.gifmenu_aboutus.gifmenutitle_news.giflogo_police.giflogo_national.gifpic_people.jpgpic_TV.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-4-HTML-文件名"><a href="#1-1-4-HTML-文件名" class="headerlink" title="1.1.4 HTML 文件名"></a>1.1.4 HTML 文件名</h3><p>全部采用小写方式， 优先选择单个单词命名，多个单词命名以下划线分隔。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">|- error_report.html|- success_report.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-1-5-CSS-文件名"><a href="#1-1-5-CSS-文件名" class="headerlink" title="1.1.5 CSS 文件名"></a>1.1.5 CSS 文件名</h3><p>全部采用小写方式， 优先选择单个单词命名，多个单词命名以短横线分隔。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">|- normalize.less|- base.less|- date-picker.scss|- input-number.scss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-6-JavaScript-文件名"><a href="#1-1-6-JavaScript-文件名" class="headerlink" title="1.1.6 JavaScript 文件名"></a>1.1.6 JavaScript 文件名</h3><p>全部采用小写方式， 优先选择单个单词命名，多个单词命名以短横线分隔。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">|- index.js|- plugin.js|- util.js|- date-util.js|- account-model.js|- collapse-transition.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><em>上述规则可以快速记忆为“静态文件下划线，编译文件短横线”。</em></p></blockquote><h2 id="1-2-Vue-组件命名"><a href="#1-2-Vue-组件命名" class="headerlink" title="1.2 Vue 组件命名"></a>1.2 Vue 组件命名</h2><h3 id="1-2-1-单文件组件名"><a href="#1-2-1-单文件组件名" class="headerlink" title="1.2.1 单文件组件名"></a>1.2.1 单文件组件名</h3><p>文件扩展名为 .vue 的 single-file components (单文件组件)。单文件组件名应该始终是单词大写开头 (PascalCase)。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">components/|- MyComponent.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2-2-单例组件名"><a href="#1-2-2-单例组件名" class="headerlink" title="1.2.2 单例组件名"></a>1.2.2 单例组件名</h3><p>只拥有单个活跃实例的组件应该以 The 前缀命名，以示其唯一性。<br>这不意味着组件只可用于一个单页面，而是<em>每个页面</em>只使用一次。这些组件永远不接受任何 prop，因为它们是为你的应用定制的。如果你发现有必要添加 prop，那就表明这实际上是一个可复用的组件，<em>只是目前</em>在每个页面里只使用一次。<br>比如，头部和侧边栏组件几乎在每个页面都会使用，不接受 prop，该组件是专门为该应用所定制的。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">components/|- TheHeading.vue|- TheSidebar.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-3-基础组件名"><a href="#1-2-3-基础组件名" class="headerlink" title="1.2.3 基础组件名"></a>1.2.3 基础组件名</h3><blockquote><p><em>基础组件：不包含业务，独立、具体功能的基础组件，比如日期选择器、模态框等。这类组件作为项目的基础控件，会被大量使用，因此组件的 API 进行过高强度的抽象，可以通过不同配置实现不同的功能。</em></p></blockquote><p>应用特定样式和约定的基础组件(也就是展示类的、无逻辑的或无状态、不掺杂业务逻辑的组件) 应该全部以一个特定的前缀开头 —— Base。基础组件在一个页面内可使用多次，在不同页面内也可复用，是高可复用组件。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">components/|- BaseButton.vue|- BaseTable.vue|- BaseIcon.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-4-业务组件"><a href="#1-2-4-业务组件" class="headerlink" title="1.2.4 业务组件"></a>1.2.4 业务组件</h3><blockquote><p><em>业务组件：它不像基础组件只包含某个功能，而是在业务中被多个页面复用的（具有可复用性），它与基础组件的区别是，业务组件只在当前项目中会用到，不具有通用性，而且会包含一些业务，比如数据请求；而基础组件不含业务，在任何项目中都可以使用，功能单一，比如一个具有数据校验功能的输入框。</em></p></blockquote><p>掺杂了复杂业务的组件（拥有自身 data、prop 的相关处理）即业务组件应该以 Custom 前缀命名。业务组件在一个页面内比如：某个页面内有一个卡片列表，而样式和逻辑跟业务紧密相关的卡片就是业务组件。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">components/|- CustomCard.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2-5-紧密耦合的组件名"><a href="#1-2-5-紧密耦合的组件名" class="headerlink" title="1.2.5 紧密耦合的组件名"></a>1.2.5 紧密耦合的组件名</h3><p>和父组件紧密耦合的子组件应该以父组件名作为前缀命名。 因为编辑器通常会按字母顺序组织文件，所以这样做可以把相关联的文件排在一起。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">components/|- TodoList.vue|- TodoListItem.vue|- TodoListItemButton.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-6-组件名中单词顺序"><a href="#1-2-6-组件名中单词顺序" class="headerlink" title="1.2.6 组件名中单词顺序"></a>1.2.6 组件名中单词顺序</h3><p>组件名应该以高级别的 (通常是一般化描述的) 单词开头，以描述性的修饰词结尾。 因为编辑器通常会按字母顺序组织文件，所以现在组件之间的重要关系一目了然。如下组件主要是用于搜索和设置功能。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">components/|- SearchButtonClear.vue|- SearchButtonRun.vue|- SearchInputQuery.vue|- SearchInputExcludeGlob.vue|- SettingsCheckboxTerms.vue|- SettingsCheckboxLaunchOnStartup.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有另一种多级目录的方式，把所有的搜索组件放到“search”目录，把所有的设置组件放到“settings”目录。我们只推荐在非常大型 (如有 100+ 个组件) 的应用下才考虑这么做，因为在多级目录间找来找去，要比在单个 components 目录下滚动查找要花费更多的精力。</p><h3 id="1-2-7-完整单词的组件名"><a href="#1-2-7-完整单词的组件名" class="headerlink" title="1.2.7 完整单词的组件名"></a>1.2.7 完整单词的组件名</h3><p>组件名应该倾向于完整单词而不是缩写。 编辑器中的自动补全已经让书写长命名的代价非常之低了，而其带来的明确性却是非常宝贵的。不常用的缩写尤其应该避免。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">components/|- StudentDashboardSettings.vue|- UserProfileOptions.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1-3-代码参数命名"><a href="#1-3-代码参数命名" class="headerlink" title="1.3 代码参数命名"></a>1.3 代码参数命名</h2><h3 id="1-3-1-name"><a href="#1-3-1-name" class="headerlink" title="1.3.1 name"></a>1.3.1 name</h3><p>组件名应该始终是多个单词，应该始终是 PascalCase 的。 根组件 App 以及 、 之类的 Vue 内置组件除外。这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">export default &#123;  name: 'ToDoList', // ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-2-prop"><a href="#1-3-2-prop" class="headerlink" title="1.3.2 prop"></a>1.3.2 prop</h3><p>在声明 prop 的时候，其命名应该始终使用 camelCase，而在模板和 JSX 中应该始终使用 kebab-case。我们单纯的遵循每个语言的约定，在 JavaScript 中更自然的是 camelCase。而在 HTML 中则是 kebab-case。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;WelcomeMessage greeting-text="hi"/><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'MyComponent'</span><span class="token punctuation">,</span> <span class="token comment">// ...</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">greetingText</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'syncing'</span><span class="token punctuation">,</span> <span class="token string">'synced'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-3-router"><a href="#1-3-3-router" class="headerlink" title="1.3.3 router"></a>1.3.3 router</h3><p>Vue Router Path 命名采用 kebab-case 格式。 用 Snake（如：&#x2F;user_info）或 camelCase（如：&#x2F;userInfo)的单词会被当成一个单词，搜索引擎无法区分语义。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">// bad&#123;  path: '/user_info', // user_info 当成一个单词  name: 'UserInfo',  component: UserInfo,  meta: &#123;    title: ' - 用户',    desc: '' &#125;&#125;,// good&#123;  path: '/user-info', // 能解析成 user info  name: 'UserInfo',  component: UserInfo,  meta: &#123;    title: ' - 用户',    desc: '' &#125;&#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-4-模板中组件"><a href="#1-3-4-模板中组件" class="headerlink" title="1.3.4 模板中组件"></a>1.3.4 模板中组件</h3><p>对于绝大多数项目来说，在单文件组件和字符串模板中组件名应该总是 PascalCase 的，但是在 DOM 模板中总是 kebab-case 的。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- 在单文件组件和字符串模板中 --> &lt;MyComponent/>&lt;!-- 在 DOM 模板中 --> &lt;my-component>&lt;/my-component><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-5-自闭合组件"><a href="#1-3-5-自闭合组件" class="headerlink" title="1.3.5 自闭合组件"></a>1.3.5 自闭合组件</h3><p>在单文件组件、字符串模板和 JSX 中没有内容的组件应该是自闭合的——但在 DOM 模板里永远不要这样做。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- 在单文件组件和字符串模板中 -->&lt;MyComponent/>&lt;!-- 在所有地方 -->&lt;my-component>&lt;/my-component><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-6-变量"><a href="#1-3-6-变量" class="headerlink" title="1.3.6 变量"></a>1.3.6 变量</h3><ul><li>命名方法：camelCase</li><li>命名规范：类型 + 对象描述或属性的方式</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">// badvar getTitle = "LoginTable"// goodlet tableTitle = "LoginTable"let mySchool = "我的学校"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-7-常量"><a href="#1-3-7-常量" class="headerlink" title="1.3.7 常量"></a>1.3.7 常量</h3><ul><li>命名方法：全部大写下划线分割</li><li>命名规范：使用大写字母和下划线来组合命名，下划线用以分割单词</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">const MAX_COUNT = 10 const URL = 'http://test.host.com' <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-3-8-方法"><a href="#1-3-8-方法" class="headerlink" title="1.3.8 方法"></a>1.3.8 方法</h3><ul><li>命名方法：camelCase</li><li>命名规范：统一使用动词或者动词 + 名词形式</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">// 1、普通情况下，使用动词 + 名词形式// badgo、nextPage、show、open、login// goodjumpPage、openCarInfoDialog// 2、请求数据方法，以 data 结尾// badtakeData、confirmData、getList、postForm// goodgetListData、postFormData// 3、单个动词的情况init、refresh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>动词</th><th>含义</th><th>返回值</th></tr></thead><tbody><tr><td>can</td><td>判断是否可执行某个动作 (权 )</td><td>函数返回一个布尔值。true：可执行；false：不可执行；</td></tr><tr><td>has</td><td>判断是否含有某个值</td><td>函数返回一个布尔值。true：含有此值；false：不含有此值；</td></tr><tr><td>is</td><td>判断是否为某个值</td><td>函数返回一个布尔值。true：为某个值；false：不为某个值；</td></tr><tr><td>get</td><td>获取某个值</td><td>函数返回一个非布尔值</td></tr><tr><td>set</td><td>设置某个值</td><td>无返回值、返回是否设置成功或者返回链式对象</td></tr></tbody></table><h3 id="1-3-9-自定义事件"><a href="#1-3-9-自定义事件" class="headerlink" title="1.3.9 自定义事件"></a>1.3.9 自定义事件</h3><p>自定义事件应始终使用 kebab-case 的事件名。<br>不同于组件和 prop，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">this.$emit('my-event')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;MyComponent @my-event="handleDoSomething" /><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不同于组件和 prop，事件名不会被用作一个 JavaScript 变量名或 property 名，所以就没有理由使用 camelCase 或 PascalCase 了。并且 v-on 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，所以 v-on:myEvent 将会变成 v-on:myevent——导致 myEvent 不可能被监听到。</p><ul><li>原生事件参考列表<br>由原生事件可发现其使用方式如下：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;div  @blur="toggleHeaderBlur"  @focus="toggleHeaderFocus"  @click="toggleMenu"  @keydown.esc="handleKeydown"  @keydown.enter="handleKeydown"  @keydown.up.prevent="handleKeydown"  @keydown.down.prevent="handleKeydown"  @keydown.tab="handleKeydown"  @keydown.delete="handleKeydown"  @mouseenter="hasMouseHoverHead = true"  @mouseleave="hasMouseHoverHead = false">&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而为了区分<em>原生事件</em>和<em>自定义事件</em>在 Vue 中的使用，建议除了多单词事件名使用 kebab-case 的情况下，命名还需遵守为 on + 动词 的形式，如下：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- 父组件 -->&lt;div  @on-search="handleSearch"  @on-clear="handleClear"  @on-clickoutside="handleClickOutside">&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">// 子组件export default &#123;  methods: &#123;    handleTriggerItem () &#123; this.$emit('on-clear') &#125; &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-10-事件方法"><a href="#1-3-10-事件方法" class="headerlink" title="1.3.10 事件方法"></a>1.3.10 事件方法</h3><ul><li>命名方法：camelCase</li><li>命名规范：handle + 名称（可选）+ 动词</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;template> &lt;div    @click.native.stop="handleItemClick()"    @mouseenter.native.stop="handleItemHover()"> &lt;/div>&lt;/template>&lt;script>export default &#123;  methods: &#123;    handleItemClick () &#123; //... &#125;,    handleItemHover () &#123; //... &#125; &#125;&#125;&lt;/script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、代码规范"><a href="#二、代码规范" class="headerlink" title="二、代码规范"></a>二、代码规范</h1><h2 id="2-1-Vue"><a href="#2-1-Vue" class="headerlink" title="2.1 Vue"></a>2.1 Vue</h2><h3 id="2-1-1-代码结构"><a href="#2-1-1-代码结构" class="headerlink" title="2.1.1 代码结构"></a>2.1.1 代码结构</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;template> &lt;div id="my-component"> &lt;DemoComponent /> &lt;/div>&lt;/template>&lt;script>import DemoComponent from '../components/DemoComponent'export default &#123;  name: 'MyComponent',  components: &#123; DemoComponent &#125;,  mixins: [],  props: &#123;&#125;,  data () &#123; return &#123;&#125; &#125;,  computed: &#123;&#125;,  watch: &#123;&#125;  created () &#123;&#125;,  mounted () &#123;&#125;,  destroyed () &#123;&#125;,  methods: &#123;&#125;,&#125;&lt;/script>&lt;style lang="scss" scoped>#my-component &#123;&#125;&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-2-data"><a href="#2-1-2-data" class="headerlink" title="2.1.2 data"></a>2.1.2 data</h3><p>组件的 data 必须是一个函数。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">// In a .vue fileexport default &#123;  data () &#123; return &#123;      foo: 'bar' &#125; &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-3-prop"><a href="#2-1-3-prop" class="headerlink" title="2.1.3 prop"></a>2.1.3 prop</h3><p>Prop 定义应该尽量详细。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">[</span> <span class="token string">'syncing'</span><span class="token punctuation">,</span>  <span class="token string">'synced'</span><span class="token punctuation">,</span> <span class="token string">'version-conflict'</span><span class="token punctuation">,</span> <span class="token string">'error'</span> <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-4-computed"><a href="#2-1-4-computed" class="headerlink" title="2.1.4 computed"></a>2.1.4 computed</h3><p>应该把复杂计算属性分割为尽可能多的更简单的属性。 小的、专注的计算属性减少了信息使用时的假设性限制，所以需求变更时也用不着那么多重构了。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">// badcomputed: &#123;   price: function () &#123;  var basePrice = this.manufactureCost / (1 - this.profitMargin)  return (       basePrice -       basePrice * (this.discountPercent || 0)  )  &#125; &#125;// goodcomputed: &#123;  basePrice: function () &#123; return this.manufactureCost / (1 - this.profitMargin) &#125;,  discount: function () &#123; return this.basePrice * (this.discountPercent || 0) &#125;,  finalPrice: function () &#123; return this.basePrice - this.discount &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-5-为-v-for-设置键值"><a href="#2-1-5-为-v-for-设置键值" class="headerlink" title="2.1.5 为 v-for 设置键值"></a>2.1.5 为 v-for 设置键值</h3><p>在组件上必须用 key 搭配 v-for，以便维护内部组件及其子树的状态。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;ul> &lt;li v-for="todo in todos"    :key="todo.id">      &#123;&#123; todo.text &#125;&#125; &lt;/li>&lt;/ul><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-6-v-if-和-v-for-互斥"><a href="#2-1-6-v-if-和-v-for-互斥" class="headerlink" title="2.1.6 v-if 和 v-for 互斥"></a>2.1.6 v-if 和 v-for 互斥</h3><p>永远不要把 v-if 和 v-for 同时用在同一个元素上。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- bad：控制台报错 -->&lt;ul> &lt;li v-for="user in users" v-if="shouldShowUsers"    :key="user.id">      &#123;&#123; user.name &#125;&#125; &lt;/li>&lt;/ul><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般我们在两种常见的情况下会倾向于这样做：</p><ul><li>为了过滤一个列表中的项目 (比如 v-for&#x3D;”user in users” v-if&#x3D;”user.isActive”)。在这种情形下，请将 users 替换为一个计算属性 (比如 activeUsers)，让其返回过滤后的列表。</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">computed: &#123;  activeUsers: function () &#123; return this.users.filter((user) => &#123; return user.isActive &#125;) &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;ul> &lt;li v-for="user in activeUsers"    :key="user.id">      &#123;&#123; user.name &#125;&#125; &lt;/li>&lt;/ul><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>为了避免渲染本应该被隐藏的列表 (比如 v-for&#x3D;”user in users” v-if&#x3D;”shouldShowUsers”)。这种情形下，请将 v-if 移动至容器元素上 (比如 ul, ol)。</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- bad -->&lt;ul> &lt;li v-for="user in users" v-if="shouldShowUsers"    :key="user.id">      &#123;&#123; user.name &#125;&#125; &lt;/li>&lt;/ul>&lt;!-- good -->&lt;ul v-if="shouldShowUsers"> &lt;li v-for="user in users"    :key="user.id">      &#123;&#123; user.name &#125;&#125; &lt;/li>&lt;/ul><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-7-多个-attribute-的元素"><a href="#2-1-7-多个-attribute-的元素" class="headerlink" title="2.1.7 多个 attribute 的元素"></a>2.1.7 多个 attribute 的元素</h3><p>多个 attribute 的元素应该分多行撰写，每个 attribute 一行。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- bad -->&lt;img src="https://vuejs.org/images/logo.png" alt="Vue Logo">&lt;MyComponent foo="a" bar="b" baz="c"/><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- good -->&lt;img src="https://vuejs.org/images/logo.png" alt="Vue Logo">&lt;MyComponent foo="a" bar="b" baz="c"/><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-8-模板中简单的表达式"><a href="#2-1-8-模板中简单的表达式" class="headerlink" title="2.1.8 模板中简单的表达式"></a>2.1.8 模板中简单的表达式</h3><p>组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法。<br>复杂表达式会让你的模板变得不那么声明式。我们应该尽量描述应该出现的是什么，而非如何计算那个值。而且计算属性和方法使得代码可以重用。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">// bad&#123;&#123;  fullName.split(' ').map((word) => &#123; return word[0].toUpperCase() + word.slice(1) &#125;).join(' ')&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更好的做法：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- 在模板中 -->&#123;&#123; normalizedFullName &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">// 复杂表达式已经移入一个计算属性computed: &#123;  normalizedFullName: function () &#123; return this.fullName.split(' ').map(function (word) &#123; return word[0].toUpperCase() + word.slice(1) &#125;).join(' ') &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-9-带引号的-attribute-值"><a href="#2-1-9-带引号的-attribute-值" class="headerlink" title="2.1.9 带引号的 attribute 值"></a>2.1.9 带引号的 attribute 值</h3><p>非空 HTML 特性值应该始终带双引号。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- bad -->&lt;input type=text>&lt;AppSidebar :style=&#123;width:sidebarWidth+'px'&#125;><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- good -->&lt;input type="text">&lt;AppSidebar :style="&#123; width: sidebarWidth + 'px' &#125;"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-1-10-指令缩写"><a href="#2-1-10-指令缩写" class="headerlink" title="2.1.10 指令缩写"></a>2.1.10 指令缩写</h3><ul><li>用 : 表示 v-bind:</li><li>用 @ 表示 v-on:</li><li>用 # 表示 v-slot:</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;input  :value="newTodoText"  :placeholder="newTodoInstructions">&lt;input  @input="onInput"  @focus="onFocus">&lt;template #header> &lt;h1>Here might be a page title&lt;/h1>&lt;/template>&lt;template #footer> &lt;p>Here's some contact info&lt;/p>&lt;/template><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-HTML"><a href="#2-2-HTML" class="headerlink" title="2.2 HTML"></a>2.2 HTML</h2><h3 id="2-2-1-文件模板"><a href="#2-2-1-文件模板" class="headerlink" title="2.2.1 文件模板"></a>2.2.1 文件模板</h3><p>HTML5 文件模板：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!DOCTYPE html> &lt;html lang="zh-CN"> &lt;head> &lt;meta charset="UTF-8"> &lt;title>HTML5标准模版&lt;/title> &lt;/head> &lt;body> &lt;/body>&lt;/html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>移动端：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!DOCTYPE html>&lt;html lang="zh-CN">&lt;head> &lt;meta charset="UTF-8"> &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no"> &lt;meta name="format-detection" content="telephone=no"> &lt;title>移动端HTML模版&lt;/title> &lt;!-- S DNS预解析 --> &lt;link rel="dns-prefetch" href=""> &lt;!-- E DNS预解析 --> &lt;!-- S 线上样式页面片，开发请直接取消注释引用 --> &lt;!-- #include virtual="" --> &lt;!-- E 线上样式页面片 --> &lt;!-- S 本地调试，根据开发模式选择调试方式，请开发删除 --> &lt;link rel="stylesheet" href="css/index.css"> &lt;!-- /本地调试方式 --> &lt;link rel="stylesheet" href="http://srcPath/index.css"> &lt;!-- /开发机调试方式 --> &lt;!-- E 本地调试 -->&lt;/head>&lt;body>&lt;/body>&lt;/html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PC 端：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!DOCTYPE html>&lt;html lang="zh-CN">&lt;head> &lt;meta charset="UTF-8"> &lt;meta name="keywords" content="your keywords"> &lt;meta name="description" content="your description"> &lt;meta name="author" content="author,email address"> &lt;meta name="robots" content="index,follow"> &lt;meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1"> &lt;meta name="renderer" content="ie-stand"> &lt;title>PC端HTML模版&lt;/title> &lt;!-- S DNS预解析 --> &lt;link rel="dns-prefetch" href=""> &lt;!-- E DNS预解析 --> &lt;!-- S 线上样式页面片，开发请直接取消注释引用 --> &lt;!-- #include virtual="" --> &lt;!-- E 线上样式页面片 --> &lt;!-- S 本地调试，根据开发模式选择调试方式，请开发删除 --> &lt;link rel="stylesheet" href="css/index.css"> &lt;!-- /本地调试方式 --> &lt;link rel="stylesheet" href="http://srcPath/index.css"> &lt;!-- /开发机调试方式 --> &lt;!-- E 本地调试 -->&lt;/head>&lt;body>&lt;/body>&lt;/html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-2-元素及标签闭合"><a href="#2-2-2-元素及标签闭合" class="headerlink" title="2.2.2 元素及标签闭合"></a>2.2.2 元素及标签闭合</h3><p>HTML 元素共有以下5种：</p><ul><li>空元素：area、base、br、col、command、embed、hr、img、input、keygen、link、meta、param、source、track、wbr</li><li>原始文本元素：script、style</li><li>RCDATA 元素：textarea、title</li><li>外来元素：来自 MathML 命名空间和 SVG 命名空间的元素</li><li>常规元素：其他 HTML 允许的元素都称为常规元素<br>为了能让浏览器更好的解析代码以及能让代码具有更好的可读性，有如下约定：</li><li>所有具有开始标签和结束标签的元素都要写上起止标签，某些允许省略开始标签或和束标签的元素亦都要写上。</li><li>空元素标签都不加 “&#x2F;” 字符。</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- good -->&lt;div> &lt;h1>我是h1标题&lt;/h1> &lt;p>我是一段文字，我有始有终，浏览器能正确解析&lt;/p>&lt;/div>&lt;br data-tomark-pass>&lt;!-- bad -->&lt;div> &lt;h1>我是h1标题&lt;/h1> &lt;p>我是一段文字，我有始无终，浏览器亦能正确解析&lt;/div>&lt;br/><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-3-代码嵌套"><a href="#2-2-3-代码嵌套" class="headerlink" title="2.2.3 代码嵌套"></a>2.2.3 代码嵌套</h3><p>元素嵌套规范，每个块状元素独立一行，内联元素可选。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- good -->&lt;div> &lt;h1>&lt;/h1> &lt;p>&lt;/p>&lt;/div> &lt;p>&lt;span>&lt;/span>&lt;span>&lt;/span>&lt;/p>&lt;!-- bad -->&lt;div> &lt;h1>&lt;/h1>&lt;p>&lt;/p>&lt;/div> &lt;p>  &lt;span>&lt;/span> &lt;span>&lt;/span>&lt;/p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>段落元素与标题元素只能嵌套内联元素。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- good -->&lt;h1>&lt;span>&lt;/span>&lt;/h1>&lt;p>&lt;span>&lt;/span>&lt;span>&lt;/span>&lt;/p>&lt;!-- bad -->&lt;h1>&lt;div>&lt;/div>&lt;/h1>&lt;p>&lt;div>&lt;/div>&lt;div>&lt;/div>&lt;/p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-CSS"><a href="#2-3-CSS" class="headerlink" title="2.3 CSS"></a>2.3 CSS</h2><h3 id="2-3-1-样式文件"><a href="#2-3-1-样式文件" class="headerlink" title="2.3.1 样式文件"></a>2.3.1 样式文件</h3><p>样式文件必须写上 <a href="https://link.zhihu.com/?target=https://github.com/charset">@charset</a> 规则，并且一定要在样式文件的第一行首个字符位置开始写，编码名用 “UTF-8”。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">@charset "UTF-8";.jdc &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">/* @charset规则不在文件首行首个字符开始 */@charset "UTF-8";.jdc &#123;&#125;/* @charset规则没有用小写 */@CHARSET "UTF-8";.jdc &#123;&#125;/* 无@charset规则 */.jdc &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-2-代码格式化"><a href="#2-3-2-代码格式化" class="headerlink" title="2.3.2 代码格式化"></a>2.3.2 代码格式化</h3><p>样式书写一般有两种：一种是紧凑格式 （Compact），一种是展开格式（Expanded）。</p><ul><li>推荐：展开格式（Expanded）</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  display: block;  width: 50px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：紧凑格式 （Compact）</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123; display: block; width: 50px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-3-代码大小写"><a href="#2-3-3-代码大小写" class="headerlink" title="2.3.3 代码大小写"></a>2.3.3 代码大小写</h3><p>样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  display: block;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.JDC &#123;  DISPLAY: BLOCK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-4-代码易读性"><a href="#2-3-4-代码易读性" class="headerlink" title="2.3.4 代码易读性"></a>2.3.4 代码易读性</h3><ol><li>左括号与类名之间一个空格，冒号与属性值之间一个空格。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  width: 100%;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc&#123;  width:100%;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>逗号分隔的取值，逗号之后一个空格。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  box-shadow: 1px 1px 1px #333, 2px 2px 2px #ccc;&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  box-shadow: 1px 1px 1px #333,2px 2px 2px #ccc;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>为单个 CSS 选择器或新声明开启新行。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc, .jdc_logo, .jdc_hd &#123;  color: #ff0;&#125;.nav&#123;  color: #fff;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc, .jdc_logo, .jdc_hd &#123;  color: #ff0;&#125;.nav&#123;  color: #fff;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>颜色值 rgb() rgba() hsl() hsla() rect() 中不需有空格，且取值不要带有不必要的 0。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  color: rgba(255,255,255,.5);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  color: rgba( 255, 255, 255, 0.5 );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>属性值十六进制数值能用简写的尽量用简写。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  color: #fff;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  color: #ffffff;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>不要为 0 指明单位。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  margin: 0 10px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  margin: 0px 10px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-5-属性值引号"><a href="#2-3-5-属性值引号" class="headerlink" title="2.3.5 属性值引号"></a>2.3.5 属性值引号</h3><p>CSS 属性值需要用到引号时，统一使用单引号。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;font-family: ‘Hiragino Sans GB’;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  font-family: "Hiragino Sans GB";&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-6-属性书写建议"><a href="#2-3-6-属性书写建议" class="headerlink" title="2.3.6 属性书写建议"></a>2.3.6 属性书写建议</h3><p>建议遵循以下顺序：</p><ol><li>布局定位属性：display &#x2F; position &#x2F; float &#x2F; clear &#x2F; visibility &#x2F; overflow</li><li>自身属性：width &#x2F; height &#x2F; margin &#x2F; padding &#x2F; border &#x2F; background</li><li>文本属性：color &#x2F; font &#x2F; text-decoration &#x2F; text-align &#x2F; vertical-align &#x2F; white- space &#x2F; break-word</li><li>其他属性（CSS3）：content &#x2F; cursor &#x2F; border-radius &#x2F; box-shadow &#x2F; text-shadow &#x2F; background: linear-gradient …</li></ol><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123;  display: block;  position: relative; float: left;  width: 100px;  height: 100px;  margin: 0 10px;  padding: 20px 0;  font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;  color: #333;  background: rgba(0,0,0,.5); -webkit-border-radius: 10px; -moz-border-radius: 10px; -o-border-radius: 10px; -ms-border-radius: 10px;  border-radius: 10px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-7-CSS3-浏览器私有前缀"><a href="#3-3-7-CSS3-浏览器私有前缀" class="headerlink" title="3.3.7 CSS3 浏览器私有前缀"></a>3.3.7 CSS3 浏览器私有前缀</h3><p>CSS3 浏览器私有前缀在前，标准前缀在后。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">.jdc &#123; -webkit-border-radius: 10px; -moz-border-radius: 10px; -o-border-radius: 10px; -ms-border-radius: 10px;  border-radius: 10px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-JavaScript"><a href="#2-4-JavaScript" class="headerlink" title="2.4 JavaScript"></a>2.4 JavaScript</h3><h3 id="2-4-1-单行代码块"><a href="#2-4-1-单行代码块" class="headerlink" title="2.4.1 单行代码块"></a>2.4.1 单行代码块</h3><p>在单行代码块中使用空格。</p><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">function foo () &#123;return true&#125;if (foo) &#123;bar = 0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">function foo () &#123; return true &#125;if (foo) &#123; bar = 0 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-4-2-大括号风格"><a href="#2-4-2-大括号风格" class="headerlink" title="2.4.2 大括号风格"></a>2.4.2 大括号风格</h3><p>在编程过程中，大括号风格与缩进风格紧密联系，用来描述大括号相对代码块位置的方法有很多。在 JavaScript 中，主要有三种风格，如下：</p><ul><li>【推荐】One True Brace Style</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">if (foo) &#123;  bar()&#125; else &#123;  baz()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Stroustrup</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">if (foo) &#123;  bar()&#125;else &#123;  baz()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Allman</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">if (foo)&#123;  bar()&#125;else&#123;  baz()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-3-代码中的空格"><a href="#2-4-3-代码中的空格" class="headerlink" title="2.4.3 代码中的空格"></a>2.4.3 代码中的空格</h3><ol><li>逗号前后的空格可以提高代码的可读性，团队约定在逗号后面使用空格，逗号前面不加空格。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">var foo = 1, bar = 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">var foo = 1,bar = 2var foo = 1 , bar = 2var foo = 1 ,bar = 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>对象字面量的键和值之间不能存在空格，且要求对象字面量的冒号和值之间存在一个空格。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">var obj = &#123; 'foo': 'haha' &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">var obj = &#123; 'foo' : 'haha' &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>代码块前要添加空格。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">if (a) &#123;  b()&#125;function a () &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">if (a)&#123;  b()&#125;function a ()&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>函数声明括号前要加空格。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">function func (x) &#123; // ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">function func(x) &#123; // ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>在函数调用时，禁止使用空格。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">fn()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">fn ()fn()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在操作符前后都需要添加空格。</li></ol><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">var sum = 1 + 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">var sum = 1+2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="三、注释规范"><a href="#三、注释规范" class="headerlink" title="三、注释规范"></a>三、注释规范</h1><p>注释的目的：</p><ul><li>提高代码的可读性，从而提高代码的可维护性<br>注释的原则：</li><li>如无必要，勿增注释 ( As short as possible )</li><li>如有必要，尽量详尽 ( As long as necessary )</li></ul><h2 id="3-1-HTML-文件注释"><a href="#3-1-HTML-文件注释" class="headerlink" title="3.1 HTML 文件注释"></a>3.1 HTML 文件注释</h2><h3 id="3-1-1-单行注释"><a href="#3-1-1-单行注释" class="headerlink" title="3.1.1 单行注释"></a>3.1.1 单行注释</h3><p>一般用于简单的描述，如某些状态描述、属性描述等。<br>注释内容前后各一个空格字符，注释位于要注释代码的上面，单独占一行。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- Comment Text -->&lt;div>...&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>不推荐</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;div>...&lt;/div>&lt;!-- Comment Text -->&lt;div>&lt;!-- Comment Text -->  ...&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-2-模块注释"><a href="#3-1-2-模块注释" class="headerlink" title="3.1.2 模块注释"></a>3.1.2 模块注释</h3><p>一般用于描述模块的名称以及模块开始与结束的位置。<br>注释内容前后各一个空格字符，模块与模块之间相隔一行。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- S Comment Text A --> &lt;div class="mod_a">  ...&lt;/div>&lt;!-- E Comment Text A -->&lt;!-- S Comment Text B --> &lt;div class="mod_b">  ...&lt;/div>&lt;!-- E Comment Text B --><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不推荐</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- S Comment Text A -->&lt;div class="mod_a">  ...&lt;/div>&lt;!-- E Comment Text A -->&lt;!-- S Comment Text B --> &lt;div class="mod_b">  ...&lt;/div>&lt;!-- E Comment Text B --><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-3-嵌套模块注释"><a href="#3-1-3-嵌套模块注释" class="headerlink" title="3.1.3 嵌套模块注释"></a>3.1.3 嵌套模块注释</h3><p>当模块注释内再出现模块注释的时候，为了突出主要模块，嵌套模块不再使用。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- S Comment Text -->&lt;!-- E Comment Text --><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而改用</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- /Comment Text --><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注释写在模块结尾标签底部，单独一行。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;!-- S Comment Text A -->&lt;div class="mod_a"> &lt;div class="mod_b">        ... &lt;/div> &lt;!-- /mod_b --> &lt;div class="mod_c">     ... &lt;/div> &lt;!-- /mod_c -->&lt;/div>&lt;!-- E Comment Text A --><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-CSS-文件注释"><a href="#3-2-CSS-文件注释" class="headerlink" title="3.2 CSS 文件注释"></a>3.2 CSS 文件注释</h2><h3 id="3-2-1-单行注释"><a href="#3-2-1-单行注释" class="headerlink" title="3.2.1 单行注释"></a>3.2.1 单行注释</h3><p>注释内容第一个字符和最后一个字符都是一个空格字符，单独占一行，行与行之间相隔一行。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">/* Comment Text */ .jdc &#123;&#125; /* Comment Text */ .jdc &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">/*Comment Text*/.jdc &#123;  display: block;&#125;.jdc &#123;  display: block;/*Comment Text*/&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-2-模块注释"><a href="#3-2-2-模块注释" class="headerlink" title="3.2.2 模块注释"></a>3.2.2 模块注释</h3><p>注释内容第一个字符和最后一个字符都是一个空格字符，&#x2F; <em>与 模块信息描述占一行，多个横线分隔符 - 与</em> &#x2F; 占一行，行与行之间相隔两行。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">/* Module A---------------------------------------------------------------- */.mod_a &#123;&#125;/* Module B---------------------------------------------------------------- */.mod_b &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">/* Module A ---------------------------------------------------- */.mod_a &#123;&#125;/* Module B ---------------------------------------------------- */.mod_b &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-3-文件注释"><a href="#3-2-3-文件注释" class="headerlink" title="3.2.3 文件注释"></a>3.2.3 文件注释</h3><p>在样式文件编码声明 <a href="https://link.zhihu.com/?target=https://github.com/charset">@charset</a> 语句下面注明页面名称、作者、创建日期等信息。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">写文章撤销重做清除格式标题加粗斜体列表目录引用分割线代码块注释图片视频链接公式表格附件文档历史版本更多一、命名规范常用的命名规范：camelCase（小驼峰式命名法 —— 首字母小写）PascalCase（大驼峰式命名法 —— 首字母大写）kebab-case（短横线连接式）Snake （下划线连接式）1.1 项目文件命名1.1.1 项目名全部采用小写方式， 以短横线分隔。例：my-project-name。1.1.2 目录名参照项目命名规则，有复数结构时，要采用复数命名法。例：docs、assets、components、directives、mixins、utils、views。my-project-name/|- BuildScript // 流水线部署文件目录|- docs           // 项目的细化文档目录（可选）|- nginx          // 部署在容器上前端项目 nginx 代理文件目录|- node_modules   // 下载的依赖包|- public // 静态页面目录 |- index.html // 项目入口|- src            // 源码目录 |- api        // http 请求目录 |- assets     // 静态资源目录，这里的资源会被wabpack构建 |- icon   // icon 存放目录 |- img    // 图片存放目录 |- js     // 公共 js 文件目录 |- scss   // 公共样式 scss 存放目录 |- frame.scss   // 入口文件 |- global.scss  // 公共样式 |- reset.scss   // 重置样式 |- components     // 组件 |- plugins        // 插件 |- router         // 路由 |- routes         // 详细的路由拆分目录（可选） |- index.js |- store          // 全局状态管理 |- utils          // 工具存放目录 |- request.js // 公共请求工具 |- views          // 页面存放目录 |- App.vue        // 根组件 |- main.js        // 入口文件 |- tests          // 测试用例 |- .browserslistrc// 浏览器兼容配置文件 |- .editorconfig  // 编辑器配置文件 |- .eslintignore  // eslint 忽略规则 |- .eslintrc.js   // eslint 规则 |- .gitignore     // git 忽略规则 |- babel.config.js // babel 规则 |- Dockerfile // Docker 部署文件 |- jest.config.js |- package-lock.json |- package.json // 依赖 |- README.md // 项目 README |- vue.config.js // webpack 配置1.1.3 图像文件名全部采用小写方式， 优先选择单个单词命名，多个单词命名以下划线分隔。banner_sina.gifmenu_aboutus.gifmenutitle_news.giflogo_police.giflogo_national.gifpic_people.jpgpic_TV.jpg1.1.4 HTML 文件名全部采用小写方式， 优先选择单个单词命名，多个单词命名以下划线分隔。|- error_report.html|- success_report.html1.1.5 CSS 文件名全部采用小写方式， 优先选择单个单词命名，多个单词命名以短横线分隔。|- normalize.less|- base.less|- date-picker.scss|- input-number.scss1.1.6 JavaScript 文件名全部采用小写方式， 优先选择单个单词命名，多个单词命名以短横线分隔。|- index.js|- plugin.js|- util.js|- date-util.js|- account-model.js|- collapse-transition.js上述规则可以快速记忆为“静态文件下划线，编译文件短横线”。1.2 Vue 组件命名1.2.1 单文件组件名文件扩展名为 .vue 的 single-file components (单文件组件)。单文件组件名应该始终是单词大写开头 (PascalCase)。components/|- MyComponent.vue1.2.2 单例组件名只拥有单个活跃实例的组件应该以 The 前缀命名，以示其唯一性。这不意味着组件只可用于一个单页面，而是每个页面只使用一次。这些组件永远不接受任何 prop，因为它们是为你的应用定制的。如果你发现有必要添加 prop，那就表明这实际上是一个可复用的组件，只是目前在每个页面里只使用一次。比如，头部和侧边栏组件几乎在每个页面都会使用，不接受 prop，该组件是专门为该应用所定制的。components/|- TheHeading.vue|- TheSidebar.vue1.2.3 基础组件名基础组件：不包含业务，独立、具体功能的基础组件，比如日期选择器、模态框等。这类组件作为项目的基础控件，会被大量使用，因此组件的 API 进行过高强度的抽象，可以通过不同配置实现不同的功能。应用特定样式和约定的基础组件(也就是展示类的、无逻辑的或无状态、不掺杂业务逻辑的组件) 应该全部以一个特定的前缀开头 —— Base。基础组件在一个页面内可使用多次，在不同页面内也可复用，是高可复用组件。components/|- BaseButton.vue|- BaseTable.vue|- BaseIcon.vue1.2.4 业务组件业务组件：它不像基础组件只包含某个功能，而是在业务中被多个页面复用的（具有可复用性），它与基础组件的区别是，业务组件只在当前项目中会用到，不具有通用性，而且会包含一些业务，比如数据请求；而基础组件不含业务，在任何项目中都可以使用，功能单一，比如一个具有数据校验功能的输入框。掺杂了复杂业务的组件（拥有自身 data、prop 的相关处理）即业务组件应该以 Custom 前缀命名。业务组件在一个页面内比如：某个页面内有一个卡片列表，而样式和逻辑跟业务紧密相关的卡片就是业务组件。components/|- CustomCard.vue1.2.5 紧密耦合的组件名和父组件紧密耦合的子组件应该以父组件名作为前缀命名。 因为编辑器通常会按字母顺序组织文件，所以这样做可以把相关联的文件排在一起。components/|- TodoList.vue|- TodoListItem.vue|- TodoListItemButton.vue1.2.6 组件名中单词顺序组件名应该以高级别的 (通常是一般化描述的) 单词开头，以描述性的修饰词结尾。 因为编辑器通常会按字母顺序组织文件，所以现在组件之间的重要关系一目了然。如下组件主要是用于搜索和设置功能。components/|- SearchButtonClear.vue|- SearchButtonRun.vue|- SearchInputQuery.vue|- SearchInputExcludeGlob.vue|- SettingsCheckboxTerms.vue|- SettingsCheckboxLaunchOnStartup.vue还有另一种多级目录的方式，把所有的搜索组件放到“search”目录，把所有的设置组件放到“settings”目录。我们只推荐在非常大型 (如有 100+ 个组件) 的应用下才考虑这么做，因为在多级目录间找来找去，要比在单个 components 目录下滚动查找要花费更多的精力。1.2.7 完整单词的组件名组件名应该倾向于完整单词而不是缩写。 编辑器中的自动补全已经让书写长命名的代价非常之低了，而其带来的明确性却是非常宝贵的。不常用的缩写尤其应该避免。components/|- StudentDashboardSettings.vue|- UserProfileOptions.vue1.3 代码参数命名1.3.1 name组件名应该始终是多个单词，应该始终是 PascalCase 的。 根组件 App 以及 、 之类的 Vue 内置组件除外。这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。export default &#123;  name: 'ToDoList', // ...&#125;1.3.2 prop在声明 prop 的时候，其命名应该始终使用 camelCase，而在模板和 JSX 中应该始终使用 kebab-case。我们单纯的遵循每个语言的约定，在 JavaScript 中更自然的是 camelCase。而在 HTML 中则是 kebab-case。&lt;WelcomeMessage greeting-text="hi"/>export default &#123;  name: 'MyComponent', // ...  props: &#123;    greetingText: &#123;      type: String,      required: true,      validator: function (value) &#123; return ['syncing', 'synced',].indexOf(value) !== -1 &#125; &#125; &#125;&#125;1.3.3 routerVue Router Path 命名采用 kebab-case 格式。 用 Snake（如：/user_info）或 camelCase（如：/userInfo)的单词会被当成一个单词，搜索引擎无法区分语义。// bad&#123;  path: '/user_info', // user_info 当成一个单词  name: 'UserInfo',  component: UserInfo,  meta: &#123;    title: ' - 用户',    desc: '' &#125;&#125;,// good&#123;  path: '/user-info', // 能解析成 user info  name: 'UserInfo',  component: UserInfo,  meta: &#123;    title: ' - 用户',    desc: '' &#125;&#125;,1.3.4 模板中组件对于绝大多数项目来说，在单文件组件和字符串模板中组件名应该总是 PascalCase 的，但是在 DOM 模板中总是 kebab-case 的。&lt;!-- 在单文件组件和字符串模板中 --> &lt;MyComponent/>&lt;!-- 在 DOM 模板中 --> &lt;my-component>&lt;/my-component>1.3.5 自闭合组件在单文件组件、字符串模板和 JSX 中没有内容的组件应该是自闭合的——但在 DOM 模板里永远不要这样做。&lt;!-- 在单文件组件和字符串模板中 -->&lt;MyComponent/>&lt;!-- 在所有地方 -->&lt;my-component>&lt;/my-component>1.3.6 变量命名方法：camelCase命名规范：类型 + 对象描述或属性的方式// badvar getTitle = "LoginTable"// goodlet tableTitle = "LoginTable"let mySchool = "我的学校"1.3.7 常量命名方法：全部大写下划线分割命名规范：使用大写字母和下划线来组合命名，下划线用以分割单词const MAX_COUNT = 10 const URL = 'http://test.host.com' 1.3.8 方法命名方法：camelCase命名规范：统一使用动词或者动词 + 名词形式// 1、普通情况下，使用动词 + 名词形式// badgo、nextPage、show、open、login// goodjumpPage、openCarInfoDialog// 2、请求数据方法，以 data 结尾// badtakeData、confirmData、getList、postForm// goodgetListData、postFormData// 3、单个动词的情况init、refresh动词含义返回值can判断是否可执行某个动作 (权 )函数返回一个布尔值。true：可执行；false：不可执行；has判断是否含有某个值函数返回一个布尔值。true：含有此值；false：不含有此值；is判断是否为某个值函数返回一个布尔值。true：为某个值；false：不为某个值；get获取某个值函数返回一个非布尔值set设置某个值无返回值、返回是否设置成功或者返回链式对象1.3.9 自定义事件自定义事件应始终使用 kebab-case 的事件名。不同于组件和 prop，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。this.$emit('my-event')&lt;MyComponent @my-event="handleDoSomething" />不同于组件和 prop，事件名不会被用作一个 JavaScript 变量名或 property 名，所以就没有理由使用 camelCase 或 PascalCase 了。并且 v-on 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，所以 v-on:myEvent 将会变成 v-on:myevent——导致 myEvent 不可能被监听到。原生事件参考列表由原生事件可发现其使用方式如下：&lt;div  @blur="toggleHeaderBlur"  @focus="toggleHeaderFocus"  @click="toggleMenu"  @keydown.esc="handleKeydown"  @keydown.enter="handleKeydown"  @keydown.up.prevent="handleKeydown"  @keydown.down.prevent="handleKeydown"  @keydown.tab="handleKeydown"  @keydown.delete="handleKeydown"  @mouseenter="hasMouseHoverHead = true"  @mouseleave="hasMouseHoverHead = false">&lt;/div>而为了区分原生事件和自定义事件在 Vue 中的使用，建议除了多单词事件名使用 kebab-case 的情况下，命名还需遵守为 on + 动词 的形式，如下：&lt;!-- 父组件 -->&lt;div  @on-search="handleSearch"  @on-clear="handleClear"  @on-clickoutside="handleClickOutside">&lt;/div>// 子组件export default &#123;  methods: &#123;    handleTriggerItem () &#123; this.$emit('on-clear') &#125; &#125;&#125;1.3.10 事件方法命名方法：camelCase命名规范：handle + 名称（可选）+ 动词&lt;template> &lt;div    @click.native.stop="handleItemClick()"    @mouseenter.native.stop="handleItemHover()"> &lt;/div>&lt;/template>&lt;script>export default &#123;  methods: &#123;    handleItemClick () &#123; //... &#125;,    handleItemHover () &#123; //... &#125; &#125;&#125;&lt;/script>二、代码规范2.1 Vue2.1.1 代码结构&lt;template> &lt;div id="my-component"> &lt;DemoComponent /> &lt;/div>&lt;/template>&lt;script>import DemoComponent from '../components/DemoComponent'export default &#123;  name: 'MyComponent',  components: &#123; DemoComponent &#125;,  mixins: [],  props: &#123;&#125;,  data () &#123; return &#123;&#125; &#125;,  computed: &#123;&#125;,  watch: &#123;&#125;  created () &#123;&#125;,  mounted () &#123;&#125;,  destroyed () &#123;&#125;,  methods: &#123;&#125;,&#125;&lt;/script>&lt;style lang="scss" scoped>#my-component &#123;&#125;&lt;/style>2.1.2 data组件的 data 必须是一个函数。// In a .vue fileexport default &#123;  data () &#123; return &#123;      foo: 'bar' &#125; &#125;&#125;2.1.3 propProp 定义应该尽量详细。export default &#123;  props: &#123;    status: &#123;      type: String,      required: true,      validator: function (value) &#123; return [ 'syncing',  'synced', 'version-conflict', 'error' ].indexOf(value) !== -1 &#125; &#125; &#125;&#125;2.1.4 computed应该把复杂计算属性分割为尽可能多的更简单的属性。 小的、专注的计算属性减少了信息使用时的假设性限制，所以需求变更时也用不着那么多重构了。// badcomputed: &#123;   price: function () &#123;  var basePrice = this.manufactureCost / (1 - this.profitMargin)  return (       basePrice -       basePrice * (this.discountPercent || 0)  )  &#125; &#125;// goodcomputed: &#123;  basePrice: function () &#123; return this.manufactureCost / (1 - this.profitMargin) &#125;,  discount: function () &#123; return this.basePrice * (this.discountPercent || 0) &#125;,  finalPrice: function () &#123; return this.basePrice - this.discount &#125;&#125;2.1.5 为 v-for 设置键值在组件上必须用 key 搭配 v-for，以便维护内部组件及其子树的状态。&lt;ul> &lt;li v-for="todo in todos"    :key="todo.id">      &#123;&#123; todo.text &#125;&#125; &lt;/li>&lt;/ul>2.1.6 v-if 和 v-for 互斥永远不要把 v-if 和 v-for 同时用在同一个元素上。&lt;!-- bad：控制台报错 -->&lt;ul> &lt;li v-for="user in users" v-if="shouldShowUsers"    :key="user.id">      &#123;&#123; user.name &#125;&#125; &lt;/li>&lt;/ul>一般我们在两种常见的情况下会倾向于这样做：为了过滤一个列表中的项目 (比如 v-for=”user in users” v-if=”user.isActive”)。在这种情形下，请将 users 替换为一个计算属性 (比如 activeUsers)，让其返回过滤后的列表。computed: &#123;  activeUsers: function () &#123; return this.users.filter((user) => &#123; return user.isActive &#125;) &#125;&#125;&lt;ul> &lt;li v-for="user in activeUsers"    :key="user.id">      &#123;&#123; user.name &#125;&#125; &lt;/li>&lt;/ul>为了避免渲染本应该被隐藏的列表 (比如 v-for=”user in users” v-if=”shouldShowUsers”)。这种情形下，请将 v-if 移动至容器元素上 (比如 ul, ol)。&lt;!-- bad -->&lt;ul> &lt;li v-for="user in users" v-if="shouldShowUsers"    :key="user.id">      &#123;&#123; user.name &#125;&#125; &lt;/li>&lt;/ul>&lt;!-- good -->&lt;ul v-if="shouldShowUsers"> &lt;li v-for="user in users"    :key="user.id">      &#123;&#123; user.name &#125;&#125; &lt;/li>&lt;/ul>2.1.7 多个 attribute 的元素多个 attribute 的元素应该分多行撰写，每个 attribute 一行。&lt;!-- bad -->&lt;img src="https://vuejs.org/images/logo.png" alt="Vue Logo">&lt;MyComponent foo="a" bar="b" baz="c"/>&lt;!-- good -->&lt;img src="https://vuejs.org/images/logo.png" alt="Vue Logo">&lt;MyComponent foo="a" bar="b" baz="c"/>2.1.8 模板中简单的表达式组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法。复杂表达式会让你的模板变得不那么声明式。我们应该尽量描述应该出现的是什么，而非如何计算那个值。而且计算属性和方法使得代码可以重用。// bad&#123;&#123;  fullName.split(' ').map((word) => &#123; return word[0].toUpperCase() + word.slice(1) &#125;).join(' ')&#125;&#125;更好的做法：&lt;!-- 在模板中 -->&#123;&#123; normalizedFullName &#125;&#125;// 复杂表达式已经移入一个计算属性computed: &#123;  normalizedFullName: function () &#123; return this.fullName.split(' ').map(function (word) &#123; return word[0].toUpperCase() + word.slice(1) &#125;).join(' ') &#125;&#125;2.1.9 带引号的 attribute 值非空 HTML 特性值应该始终带双引号。&lt;!-- bad -->&lt;input type=text>&lt;AppSidebar :style=&#123;width:sidebarWidth+'px'&#125;>&lt;!-- good -->&lt;input type="text">&lt;AppSidebar :style="&#123; width: sidebarWidth + 'px' &#125;">2.1.10 指令缩写用 : 表示 v-bind:用 @ 表示 v-on:用 # 表示 v-slot:&lt;input  :value="newTodoText"  :placeholder="newTodoInstructions">&lt;input  @input="onInput"  @focus="onFocus">&lt;template #header> &lt;h1>Here might be a page title&lt;/h1>&lt;/template>&lt;template #footer> &lt;p>Here's some contact info&lt;/p>&lt;/template>2.2 HTML2.2.1 文件模板HTML5 文件模板：&lt;!DOCTYPE html> &lt;html lang="zh-CN"> &lt;head> &lt;meta charset="UTF-8"> &lt;title>HTML5标准模版&lt;/title> &lt;/head> &lt;body> &lt;/body>&lt;/html>移动端：&lt;!DOCTYPE html>&lt;html lang="zh-CN">&lt;head> &lt;meta charset="UTF-8"> &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no"> &lt;meta name="format-detection" content="telephone=no"> &lt;title>移动端HTML模版&lt;/title> &lt;!-- S DNS预解析 --> &lt;link rel="dns-prefetch" href=""> &lt;!-- E DNS预解析 --> &lt;!-- S 线上样式页面片，开发请直接取消注释引用 --> &lt;!-- #include virtual="" --> &lt;!-- E 线上样式页面片 --> &lt;!-- S 本地调试，根据开发模式选择调试方式，请开发删除 --> &lt;link rel="stylesheet" href="css/index.css"> &lt;!-- /本地调试方式 --> &lt;link rel="stylesheet" href="http://srcPath/index.css"> &lt;!-- /开发机调试方式 --> &lt;!-- E 本地调试 -->&lt;/head>&lt;body>&lt;/body>&lt;/html>PC 端：&lt;!DOCTYPE html>&lt;html lang="zh-CN">&lt;head> &lt;meta charset="UTF-8"> &lt;meta name="keywords" content="your keywords"> &lt;meta name="description" content="your description"> &lt;meta name="author" content="author,email address"> &lt;meta name="robots" content="index,follow"> &lt;meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1"> &lt;meta name="renderer" content="ie-stand"> &lt;title>PC端HTML模版&lt;/title> &lt;!-- S DNS预解析 --> &lt;link rel="dns-prefetch" href=""> &lt;!-- E DNS预解析 --> &lt;!-- S 线上样式页面片，开发请直接取消注释引用 --> &lt;!-- #include virtual="" --> &lt;!-- E 线上样式页面片 --> &lt;!-- S 本地调试，根据开发模式选择调试方式，请开发删除 --> &lt;link rel="stylesheet" href="css/index.css"> &lt;!-- /本地调试方式 --> &lt;link rel="stylesheet" href="http://srcPath/index.css"> &lt;!-- /开发机调试方式 --> &lt;!-- E 本地调试 -->&lt;/head>&lt;body>&lt;/body>&lt;/html>2.2.2 元素及标签闭合HTML 元素共有以下5种：空元素：area、base、br、col、command、embed、hr、img、input、keygen、link、meta、param、source、track、wbr原始文本元素：script、styleRCDATA 元素：textarea、title外来元素：来自 MathML 命名空间和 SVG 命名空间的元素常规元素：其他 HTML 允许的元素都称为常规元素为了能让浏览器更好的解析代码以及能让代码具有更好的可读性，有如下约定：所有具有开始标签和结束标签的元素都要写上起止标签，某些允许省略开始标签或和束标签的元素亦都要写上。空元素标签都不加 “/” 字符。&lt;!-- good -->&lt;div> &lt;h1>我是h1标题&lt;/h1> &lt;p>我是一段文字，我有始有终，浏览器能正确解析&lt;/p>&lt;/div>&lt;br data-tomark-pass>&lt;!-- bad -->&lt;div> &lt;h1>我是h1标题&lt;/h1> &lt;p>我是一段文字，我有始无终，浏览器亦能正确解析&lt;/div>&lt;br/>2.2.3 代码嵌套元素嵌套规范，每个块状元素独立一行，内联元素可选。&lt;!-- good -->&lt;div> &lt;h1>&lt;/h1> &lt;p>&lt;/p>&lt;/div> &lt;p>&lt;span>&lt;/span>&lt;span>&lt;/span>&lt;/p>&lt;!-- bad -->&lt;div> &lt;h1>&lt;/h1>&lt;p>&lt;/p>&lt;/div> &lt;p>  &lt;span>&lt;/span> &lt;span>&lt;/span>&lt;/p>段落元素与标题元素只能嵌套内联元素。&lt;!-- good -->&lt;h1>&lt;span>&lt;/span>&lt;/h1>&lt;p>&lt;span>&lt;/span>&lt;span>&lt;/span>&lt;/p>&lt;!-- bad -->&lt;h1>&lt;div>&lt;/div>&lt;/h1>&lt;p>&lt;div>&lt;/div>&lt;div>&lt;/div>&lt;/p>2.3 CSS2.3.1 样式文件样式文件必须写上 @charset 规则，并且一定要在样式文件的第一行首个字符位置开始写，编码名用 “UTF-8”。推荐：@charset "UTF-8";.jdc &#123;&#125;不推荐：/* @charset规则不在文件首行首个字符开始 */@charset "UTF-8";.jdc &#123;&#125;/* @charset规则没有用小写 */@CHARSET "UTF-8";.jdc &#123;&#125;/* 无@charset规则 */.jdc &#123;&#125;2.3.2 代码格式化样式书写一般有两种：一种是紧凑格式 （Compact），一种是展开格式（Expanded）。推荐：展开格式（Expanded）.jdc &#123;  display: block;  width: 50px;&#125;不推荐：紧凑格式 （Compact）.jdc &#123; display: block; width: 50px;&#125;2.3.3 代码大小写样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写。推荐：.jdc &#123;  display: block;&#125;不推荐：.JDC &#123;  DISPLAY: BLOCK;&#125;2.3.4 代码易读性左括号与类名之间一个空格，冒号与属性值之间一个空格。推荐：.jdc &#123;  width: 100%;&#125;不推荐：.jdc&#123;  width:100%;&#125;逗号分隔的取值，逗号之后一个空格。推荐：.jdc &#123;  box-shadow: 1px 1px 1px #333, 2px 2px 2px #ccc;&#125; 不推荐：.jdc &#123;  box-shadow: 1px 1px 1px #333,2px 2px 2px #ccc;&#125;为单个 CSS 选择器或新声明开启新行。推荐：.jdc, .jdc_logo, .jdc_hd &#123;  color: #ff0;&#125;.nav&#123;  color: #fff;&#125;不推荐：.jdc, .jdc_logo, .jdc_hd &#123;  color: #ff0;&#125;.nav&#123;  color: #fff;&#125;颜色值 rgb() rgba() hsl() hsla() rect() 中不需有空格，且取值不要带有不必要的 0。推荐：.jdc &#123;  color: rgba(255,255,255,.5);&#125;不推荐：.jdc &#123;  color: rgba( 255, 255, 255, 0.5 );&#125;属性值十六进制数值能用简写的尽量用简写。推荐：.jdc &#123;  color: #fff;&#125;不推荐：.jdc &#123;  color: #ffffff;&#125;不要为 0 指明单位。推荐：.jdc &#123;  margin: 0 10px;&#125;不推荐：.jdc &#123;  margin: 0px 10px;&#125;2.3.5 属性值引号CSS 属性值需要用到引号时，统一使用单引号。推荐：.jdc &#123;font-family: ‘Hiragino Sans GB’;&#125;不推荐：.jdc &#123;  font-family: "Hiragino Sans GB";&#125;2.3.6 属性书写建议建议遵循以下顺序：布局定位属性：display / position / float / clear / visibility / overflow自身属性：width / height / margin / padding / border / background文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background: linear-gradient ….jdc &#123;  display: block;  position: relative; float: left;  width: 100px;  height: 100px;  margin: 0 10px;  padding: 20px 0;  font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;  color: #333;  background: rgba(0,0,0,.5); -webkit-border-radius: 10px; -moz-border-radius: 10px; -o-border-radius: 10px; -ms-border-radius: 10px;  border-radius: 10px;&#125;3.3.7 CSS3 浏览器私有前缀CSS3 浏览器私有前缀在前，标准前缀在后。.jdc &#123; -webkit-border-radius: 10px; -moz-border-radius: 10px; -o-border-radius: 10px; -ms-border-radius: 10px;  border-radius: 10px;&#125;2.4 JavaScript2.4.1 单行代码块在单行代码块中使用空格。不推荐：function foo () &#123;return true&#125;if (foo) &#123;bar = 0&#125;推荐：function foo () &#123; return true &#125;if (foo) &#123; bar = 0 &#125;2.4.2 大括号风格在编程过程中，大括号风格与缩进风格紧密联系，用来描述大括号相对代码块位置的方法有很多。在 JavaScript 中，主要有三种风格，如下：【推荐】One True Brace Styleif (foo) &#123;  bar()&#125; else &#123;  baz()&#125;Stroustrupif (foo) &#123;  bar()&#125;else &#123;  baz()&#125;Allmanif (foo)&#123;  bar()&#125;else&#123;  baz()&#125;2.4.3 代码中的空格逗号前后的空格可以提高代码的可读性，团队约定在逗号后面使用空格，逗号前面不加空格。推荐：var foo = 1, bar = 2不推荐：var foo = 1,bar = 2var foo = 1 , bar = 2var foo = 1 ,bar = 2对象字面量的键和值之间不能存在空格，且要求对象字面量的冒号和值之间存在一个空格。推荐：var obj = &#123; 'foo': 'haha' &#125;不推荐：var obj = &#123; 'foo' : 'haha' &#125;代码块前要添加空格。推荐：if (a) &#123;  b()&#125;function a () &#123;&#125;不推荐：if (a)&#123;  b()&#125;function a ()&#123;&#125;函数声明括号前要加空格。推荐：function func (x) &#123; // ...&#125;不推荐：function func(x) &#123; // ...&#125;在函数调用时，禁止使用空格。推荐：fn()不推荐：fn ()fn()在操作符前后都需要添加空格。推荐：var sum = 1 + 2不推荐：var sum = 1+2三、注释规范注释的目的：提高代码的可读性，从而提高代码的可维护性注释的原则：如无必要，勿增注释 ( As short as possible )如有必要，尽量详尽 ( As long as necessary )3.1 HTML 文件注释3.1.1 单行注释一般用于简单的描述，如某些状态描述、属性描述等。注释内容前后各一个空格字符，注释位于要注释代码的上面，单独占一行。推荐：&lt;!-- Comment Text -->&lt;div>...&lt;/div>不推荐&lt;div>...&lt;/div>&lt;!-- Comment Text -->&lt;div>&lt;!-- Comment Text -->  ...&lt;/div>3.1.2 模块注释一般用于描述模块的名称以及模块开始与结束的位置。注释内容前后各一个空格字符，模块与模块之间相隔一行。推荐：&lt;!-- S Comment Text A --> &lt;div class="mod_a">  ...&lt;/div>&lt;!-- E Comment Text A -->&lt;!-- S Comment Text B --> &lt;div class="mod_b">  ...&lt;/div>&lt;!-- E Comment Text B -->不推荐&lt;!-- S Comment Text A -->&lt;div class="mod_a">  ...&lt;/div>&lt;!-- E Comment Text A -->&lt;!-- S Comment Text B --> &lt;div class="mod_b">  ...&lt;/div>&lt;!-- E Comment Text B -->3.1.3 嵌套模块注释当模块注释内再出现模块注释的时候，为了突出主要模块，嵌套模块不再使用。&lt;!-- S Comment Text -->&lt;!-- E Comment Text -->而改用&lt;!-- /Comment Text -->注释写在模块结尾标签底部，单独一行。&lt;!-- S Comment Text A -->&lt;div class="mod_a"> &lt;div class="mod_b">        ... &lt;/div> &lt;!-- /mod_b --> &lt;div class="mod_c">     ... &lt;/div> &lt;!-- /mod_c -->&lt;/div>&lt;!-- E Comment Text A -->3.2 CSS 文件注释3.2.1 单行注释注释内容第一个字符和最后一个字符都是一个空格字符，单独占一行，行与行之间相隔一行。推荐：/* Comment Text */ .jdc &#123;&#125; /* Comment Text */ .jdc &#123;&#125;不推荐：/*Comment Text*/.jdc &#123;  display: block;&#125;.jdc &#123;  display: block;/*Comment Text*/&#125;3.2.2 模块注释注释内容第一个字符和最后一个字符都是一个空格字符，/ 与 模块信息描述占一行，多个横线分隔符 - 与 / 占一行，行与行之间相隔两行。推荐：/* Module A---------------------------------------------------------------- */.mod_a &#123;&#125;/* Module B---------------------------------------------------------------- */.mod_b &#123;&#125;不推荐：/* Module A ---------------------------------------------------- */.mod_a &#123;&#125;/* Module B ---------------------------------------------------- */.mod_b &#123;&#125;3.2.3 文件注释在样式文件编码声明 @charset 语句下面注明页面名称、作者、创建日期等信息。et "UTF-8";/** * @desc File Info * @author Author Name * @date 2015-10-10 */3.3 JavaScript 文件注释3.3.1 单行注释单行注释使用 //，注释应单独一行写在被注释对象的上方，不要追加在某条语句的后面。推荐：// is current tabconst active = true不推荐：const active = true // is current tab注释行的上方需要有一个空行（除非注释行上方是一个块的顶部），以增加可读性。推荐：function getType () &#123;   console.log('fetching type...') // set the default type to 'no type' const type = this.type || 'no type' return type&#125;// 注释行上面是一个块的顶部时不需要空行function getType () &#123;  // set the default type to 'no type' const type = this.type || 'no type'  return type&#125;不推荐：function getType () &#123;   console.log('fetching type...') // set the default type to 'no type' const type = this.type || 'no type' return type&#125;3.3.2 多行注释多行注释使用 /* … /，而不是多行的 //。推荐：/** * make() returns a new element * based on the passed-in tag name */function make (tag) &#123; // ... return element&#125;不推荐：// make() returns a new element// based on the passed in tag namefunction make (tag) &#123; // ... return element&#125;3.3.3 注释空格注释内容和注释符之间需要有一个空格，以增加可读性。eslint: spaced-comment。推荐：// is current tabconst active = true/** * make() returns a new element * based on the passed-in tag name */function make(tag) &#123;  // ... return element&#125;不推荐：//is current tabconst active = true/** *make() returns a new element *based on the passed-in tag name */function make(tag) &#123;  // ... return element&#125;3.3.4 特殊标记有时我们发现某个可能的 bug，但因为一些原因还没法修复；或者某个地方还有一些待完成的功能，这时我们需要使用相应的特殊标记注释来告知未来的自己或合作者。常用的特殊标记有两种：// FIXME : 说明问题是什么// TODO : 说明还要做什么或者问题的解决方案class Calculator extends Abacus &#123;  constructor () &#123; super () // FIXME: shouldn’t use a global here      total = 0 // TODO: total should be configurable by an options param this.total = 0 &#125;&#125;3.3.5 文档类注释文档类注释，如函数、类、文件、事件等；都使用 jsdoc 规范。/** * Book类，代表一个书本. * @constructor * @param &#123;string&#125; title - 书本的标题. * @param &#123;string&#125; author - 书本的作者. */function Book (title, author) &#123; this.title = title this.author = author&#125;Book.prototype = &#123; /**   * 获取书本的标题   * @returns &#123;string|*&#125;   */  getTitle: function () &#123; return this.title &#125;, /**   * 设置书本的页数   * @param pageNum &#123;number&#125; 页数   */  setPageNum: function (pageNum) &#123; this.pageNum=pageNum &#125;&#125;3.3.6 注释工具ESLint 是当下最流行的 JS 代码检查工具，ESLint 中有一些注释相关的规则，用户可选择开启：valid-jsdocrequire-jsdocno-warning-commentscapitalized-commentsline-comment-positionlines-around-commentmultiline-comment-styleno-inline-commentsspaced-comment四、其它缩进换行请使用两个空格。大型团队多人协作项目推荐 JavaScript 代码末尾加分号。小型个人创新练手项目可尝试使用 JavaScript 代码末尾不加分号的风格，更加清爽简练。发布设置添加封面添加文章封面图片上传格式支持 JPEG、JPG、PNG投稿至问题未选择创作声明无声明*文章话题添加话题发布设置字数：22448Markdown 语法识别中草稿保存中…预览发布&#123;"fetchRoot":&#123;"www":"https:\u002F\u002Fwww.zhihu.com","api":"https:\u002F\u002Fapi.zhihu.com","lens":"https:\u002F\u002Flens.zhihu.com","zhuanlan":"https:\u002F\u002Fzhuanlan.zhihu.com\u002Fapi\u002F","walletpay":"https:\u002F\u002Fwalletpay.zhihu.com","captcha":"https:\u002F\u002Fcaptcha.zhihu.com","vzuu":"https:\u002F\u002Fv.vzuu.com","openapi":"https:\u002F\u002Fopenapi.zhihu.com","svip":"https:\u002F\u002Fsvip.zhihu.com"&#125;,"host":"zhihu.com","protocol":"https:","wwwHost":"www.zhihu.com","videoHost":"video.zhihu.com","zhuanlanHost":"zhuanlan.zhihu.com","allowSignUp":true,"refreshValidityPeriod":"30","release":"966-eb94742e","currentEntry":"column","isMobileEntry":false,"apollo":&#123;"env":"prod","globalSilence":"","ncgModeSign":"3f8e56febda4fb3bbea72e379d76de1e","topstory_rec_adp":"1","editor_adapt_native":"0","content_publish_pin":"1","test_canary":"member|0-100,1-0","use_new_player":"member|0-0,1-100","player_vendor":"member|0-0,1-100,2-0","use_hevc":"member|0-0,1-100","upload_use_signature":"member|0-0,1-100","use_backdrop_blur":"member|0-0,1-100","article_title_imagex":"member|0-0,1-100","play_station":"member|0-0,1-100","contentItem_cover_imagex":"member|0-50,1-50"&#125;&#125;&#123;"initialState":&#123;"common":&#123;"ask":&#123;&#125;&#125;,"loading":&#123;"global":&#123;"count":0&#125;,"local":&#123;"env\u002FgetIpinfo\u002F":false&#125;&#125;,"entities":&#123;"users":&#123;"0f89728969245f477116bc433d5d0ad0":&#123;"uid":1663655962757169200,"userType":"people","id":"0f89728969245f477116bc433d5d0ad0"&#125;&#125;,"questions":&#123;&#125;,"answers":&#123;&#125;,"articles":&#123;&#125;,"columns":&#123;&#125;,"topics":&#123;&#125;,"roundtables":&#123;&#125;,"favlists":&#123;&#125;,"comments":&#123;&#125;,"notifications":&#123;&#125;,"ebooks":&#123;&#125;,"activities":&#123;&#125;,"feeds":&#123;&#125;,"pins":&#123;&#125;,"promotions":&#123;&#125;,"drafts":&#123;&#125;,"chats":&#123;&#125;,"posts":&#123;&#125;,"zvideos":&#123;&#125;,"zvideoContributions":&#123;&#125;,"briefs":&#123;&#125;,"eduCourses":&#123;&#125;&#125;,"currentUser":"0f89728969245f477116bc433d5d0ad0","account":&#123;"unlockTicketStatus":false,"unlockTicket":null,"challenge":[],"errorStatus":false,"message":"","isFetching":false,"accountInfo":&#123;&#125;,"urlToken":&#123;"loading":false&#125;,"cardUserInfo":&#123;"vipInfo":&#123;&#125;&#125;,"handleWidget":&#123;&#125;,"widgetList":[],"userWidgetId":""&#125;,"settings":&#123;"socialBind":null,"inboxMsg":null,"notification":&#123;&#125;,"email":&#123;&#125;,"privacyFlag":null,"blockedUsers":&#123;"isFetching":false,"paging":&#123;"pageNo":1,"pageSize":6&#125;,"data":[]&#125;,"blockedFollowees":&#123;"isFetching":false,"paging":&#123;"pageNo":1,"pageSize":6&#125;,"data":[]&#125;,"ignoredTopics":&#123;"isFetching":false,"paging":&#123;"pageNo":1,"pageSize":6&#125;,"data":[]&#125;,"restrictedTopics":null,"laboratory":&#123;&#125;&#125;,"notification":&#123;&#125;,"people":&#123;"profileStatus":&#123;&#125;,"activitiesByUser":&#123;&#125;,"answersByUser":&#123;&#125;,"answersSortByVotesByUser":&#123;&#125;,"answersIncludedByUser":&#123;&#125;,"votedAnswersByUser":&#123;&#125;,"thankedAnswersByUser":&#123;&#125;,"voteAnswersByUser":&#123;&#125;,"thankAnswersByUser":&#123;&#125;,"topicAnswersByUser":&#123;&#125;,"zvideosByUser":&#123;&#125;,"articlesByUser":&#123;&#125;,"articlesSortByVotesByUser":&#123;&#125;,"articlesIncludedByUser":&#123;&#125;,"pinsByUser":&#123;&#125;,"questionsByUser":&#123;&#125;,"commercialQuestionsByUser":&#123;&#125;,"favlistsByUser":&#123;&#125;,"followingByUser":&#123;&#125;,"followersByUser":&#123;&#125;,"mutualsByUser":&#123;&#125;,"followingColumnsByUser":&#123;&#125;,"followingQuestionsByUser":&#123;&#125;,"followingFavlistsByUser":&#123;&#125;,"followingTopicsByUser":&#123;&#125;,"publicationsByUser":&#123;&#125;,"columnsByUser":&#123;&#125;,"allFavlistsByUser":&#123;&#125;,"brands":null,"creationsByUser":&#123;&#125;,"creationsSortByVotesByUser":&#123;&#125;,"creationsFeed":&#123;&#125;,"infinity":&#123;&#125;,"batchUsers":&#123;&#125;,"profileInfinity":null&#125;,"env":&#123;"ab":&#123;"config":&#123;"params":[],"experiments":[],"chains":[],"encodedParams":"CgInBxIBAA=="&#125;,"triggers":&#123;&#125;&#125;,"abV2":&#123;"config":&#123;"paramMap":&#123;"pc_mou_cre_remove":&#123;"value":"1","abId":"rl-mou_create_remove-1"&#125;,"in_editor_title":&#123;"value":"1","abId":"rl-pineditor_title-1"&#125;,"ws_pin_contentpub":&#123;"value":"0"&#125;,"pm_noanonymity_A":&#123;"value":"1","abId":"rl-Noanonymity_B-1"&#125;,"ws_platform_new":&#123;"value":"1","abId":"author_platform-1"&#125;,"ws_pre_guess_his":&#123;"value":"0","abId":"pre_guess_his-0"&#125;&#125;,"abMap":&#123;"rl-mou_create_remove-1":&#123;"abId":"rl-mou_create_remove-1","layerId":"rl-mou_create_remove","diversionType":2&#125;,"rl-pineditor_title-1":&#123;"abId":"rl-pineditor_title-1","layerId":"rl-pineditor_title","diversionType":2&#125;,"rl-Noanonymity_B-1":&#123;"abId":"rl-Noanonymity_B-1","layerId":"rl-Noanonymity_B","diversionType":2&#125;,"author_platform-1":&#123;"abId":"author_platform-1","layerId":"author_platform_layer","diversionType":2&#125;,"pre_guess_his-0":&#123;"abId":"pre_guess_his-0","layerId":"web_standard_domain_layer17","diversionType":2&#125;&#125;&#125;,"triggers":&#123;&#125;&#125;,"userAgent":&#123;"Edge":false,"IE":false,"Wechat":false,"Weibo":false,"QQ":false,"MQQBrowser":false,"Qzone":false,"Mobile":false,"Android":false,"iOS":false,"isAppleDevice":false,"Zhihu":false,"ZhihuHybrid":false,"isBot":false,"Tablet":false,"UC":false,"Quark":false,"Sogou":false,"Qihoo":false,"Baidu":false,"BaiduApp":false,"Safari":false,"GoogleBot":false,"AndroidDaily":false,"iOSDaily":false,"WxMiniProgram":false,"BaiduMiniProgram":false,"QQMiniProgram":false,"JDMiniProgram":false,"isWebView":false,"isMiniProgram":false,"origin":"Mozilla\u002F5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\u002F537.36 (KHTML, like Gecko) Chrome\u002F116.0.0.0 Safari\u002F537.36 Edg\u002F116.0.1938.69"&#125;,"appViewConfig":&#123;&#125;,"ctx":&#123;"path":"\u002Fwrite","query":&#123;&#125;,"href":"http:\u002F\u002Fzhuanlan.zhihu.com\u002Fwrite","host":"zhuanlan.zhihu.com"&#125;,"trafficSource":"production","edition":&#123;"beijing":true,"baidu":false,"sogou":false,"baiduBeijing":false,"sogouBeijing":false,"sogouInput":false,"oppoSearch":false,"baiduSearch":false,"googleSearch":false,"shenma":false,"miniProgram":false,"xiaomi":false,"huaweiSearch":false&#125;,"theme":"light","appHeaderTheme":&#123;"current":"normal","disable":true,"normal":&#123;"bgColor":"GBK99A"&#125;,"custom":&#123;"bgColor":"GBK99A"&#125;&#125;,"enableShortcut":true,"referer":"https:\u002F\u002Fzhuanlan.zhihu.com\u002Fp\u002F638330080","xUDId":"AIBYIoHZzhWPTkVTA6nmsrVXlj4iL5-g4dk=","mode":"ssr","conf":&#123;&#125;,"xTrafficFreeOrigin":"","ipInfo":&#123;"cityName":"北京","countryName":"中国","regionName":"北京","countryCode":"CN"&#125;,"logged":true,"vars":&#123;"passThroughHeaders":&#123;&#125;&#125;&#125;,"me":&#123;"columnContributions":[]&#125;,"label":&#123;&#125;,"ecommerce":&#123;&#125;,"comments":&#123;"pagination":&#123;&#125;,"collapsed":&#123;&#125;,"reverse":&#123;&#125;,"reviewing":&#123;&#125;,"conversation":&#123;&#125;,"parent":&#123;&#125;&#125;,"commentsV2":&#123;"stickers":[],"commentWithPicPermission":&#123;&#125;,"notificationsComments":&#123;&#125;,"pagination":&#123;&#125;,"collapsed":&#123;&#125;,"reverse":&#123;&#125;,"reviewing":&#123;&#125;,"conversation":&#123;&#125;,"conversationMore":&#123;&#125;,"parent":&#123;&#125;&#125;,"pushNotifications":&#123;"default":&#123;"isFetching":false,"isDrained":false,"ids":[]&#125;,"follow":&#123;"isFetching":false,"isDrained":false,"ids":[]&#125;,"vote_thank":&#123;"isFetching":false,"isDrained":false,"ids":[]&#125;,"currentTab":"default","notificationsCount":&#123;"default":0,"follow":0,"vote_thank":0&#125;&#125;,"messages":&#123;"data":&#123;&#125;,"currentTab":"common","messageCount":0&#125;,"register":&#123;"registerValidateSucceeded":null,"registerValidateErrors":&#123;&#125;,"registerConfirmError":null,"sendDigitsError":null,"registerConfirmSucceeded":null&#125;,"login":&#123;"loginUnregisteredError":false,"loginBindWechatError":false,"loginConfirmError":null,"sendDigitsError":null,"needSMSIdentify":false,"validateDigitsError":false,"loginConfirmSucceeded":null,"qrcodeLoginToken":"","qrcodeLoginScanStatus":0,"qrcodeLoginError":null,"qrcodeLoginReturnNewToken":false&#125;,"switches":&#123;&#125;,"captcha":&#123;"captchaNeeded":false,"captchaValidated":false&#125;,"sms":&#123;"supportedCountries":[]&#125;,"chat":&#123;"chats":&#123;&#125;,"inbox":&#123;"recents":&#123;"isFetching":false,"isDrained":false,"isPrevDrained":false,"result":[],"next":null,"key":null&#125;,"strangers":&#123;"isFetching":false,"isDrained":false,"isPrevDrained":false,"result":[],"next":null,"key":null&#125;,"friends":&#123;"isFetching":false,"isDrained":false,"isPrevDrained":false,"result":[],"next":null,"key":null&#125;,"search":&#123;"isFetching":false,"isDrained":false,"isPrevDrained":false,"result":[],"next":null,"key":null&#125;,"config":&#123;"newCount":0,"strangerMessageSwitch":false,"strangerMessageUnread":false,"friendCount":0&#125;&#125;,"global":&#123;"isChatMqttExisted":false&#125;&#125;,"emoticons":&#123;"emoticonGroupList":[],"emoticonGroupDetail":&#123;&#125;&#125;,"creator":&#123;"tools":&#123;"question":&#123;"invitationCount":&#123;"questionFolloweeCount":0,"questionTotalCount":0&#125;&#125;,"recommend":&#123;"recommendTimes":&#123;&#125;&#125;&#125;,"explore":&#123;&#125;,"levelUpperLimit":10,"mcn":&#123;&#125;,"mcnManage":&#123;&#125;,"tasks":&#123;&#125;,"announcement":&#123;&#125;,"creatorsRecommendInfo":&#123;&#125;&#125;,"creators":&#123;"common":&#123;"applyStatus":&#123;&#125;,"rightsStatus":&#123;&#125;&#125;,"bayesDomains":&#123;"status":&#123;&#125;,"options":&#123;"topDomains":null,"allDomains":null,"editable":0&#125;,"contents":null&#125;,"school":&#123;"tabs":[],"contents":[],"banner":null,"entities":&#123;&#125;&#125;,"faq":&#123;"tabs":[],"article":&#123;&#125;&#125;,"knowledgeIncome":&#123;&#125;,"safeguardRights":&#123;&#125;,"analytics":&#123;"all":&#123;&#125;,"answer":&#123;&#125;,"zvideo":&#123;&#125;,"article":&#123;&#125;,"pin":&#123;&#125;,"singleContent":&#123;&#125;&#125;,"account":&#123;"growthLevel":&#123;&#125;&#125;,"KMResource":&#123;&#125;,"training":&#123;&#125;,"ToolsQuestion":&#123;"goodatTopics":[]&#125;,"ToolsHotspot":&#123;"domains":[]&#125;,"ToolsRecommend":&#123;&#125;,"ToolsCustomPromotion":&#123;"itemLists":&#123;&#125;,"baseInfo":&#123;&#125;&#125;,"ToolsSearchQuestion":&#123;&#125;,"editorSetting":&#123;&#125;,"MCNManage":&#123;&#125;,"knowledgeTasks":&#123;&#125;,"incomeAnalysis":&#123;"income":&#123;"aggregation":&#123;&#125;&#125;&#125;,"creationManage":&#123;"editModal":&#123;"status":false&#125;&#125;,"activity":&#123;&#125;,"announcement":&#123;&#125;,"home":&#123;"currentCreatorUrlToken":null,"rights":[],"newRights":[],"scoreInfo":&#123;&#125;,"menusShowControlByServer":&#123;"bVipRecomend":false,"creationRelationship":false&#125;,"newTasks":&#123;"creatorTask":&#123;"tasks":[],"des":[]&#125;&#125;,"bannerList":[],"recentlyCreated":[],"homecard":&#123;&#125;&#125;,"videoSupport":&#123;"textBenefit":&#123;&#125;&#125;,"videoDistribution":&#123;&#125;,"profilePoster":&#123;"creatorPosterConfig":&#123;&#125;,"creatorPosterData":&#123;&#125;&#125;&#125;,"answers":&#123;"voters":&#123;&#125;,"copyrightApplicants":&#123;&#125;,"favlists":&#123;&#125;,"newAnswer":&#123;&#125;,"entityWords":&#123;&#125;,"concernedUpvoters":&#123;&#125;,"simpleConcernedUpvoters":&#123;&#125;,"paidContent":&#123;&#125;,"settings":&#123;&#125;&#125;,"recommendation":&#123;"homeRecommendations":[]&#125;,"shareTexts":&#123;&#125;,"articles":&#123;"voters":&#123;&#125;,"concernedUpvoters":&#123;&#125;&#125;,"previewPost":&#123;&#125;,"favlists":&#123;"relations":&#123;&#125;&#125;,"columns":&#123;"voters":&#123;&#125;&#125;,"reward":&#123;"answer":&#123;&#125;,"article":&#123;&#125;,"question":&#123;&#125;&#125;,"video":&#123;"data":&#123;&#125;,"shareVideoDetail":&#123;&#125;,"last":&#123;&#125;&#125;,"topstory":&#123;"recommend":&#123;"isFetching":false,"isDrained":false,"afterId":0,"items":[],"next":null&#125;,"follow":&#123;"isFetching":false,"isDrained":false,"afterId":0,"items":[],"next":null&#125;,"followWonderful":&#123;"isFetching":false,"isDrained":false,"afterId":0,"items":[],"next":null&#125;,"sidebar":null,"announcement":&#123;&#125;,"hotList":[],"guestFeeds":&#123;"isFetching":false,"isDrained":false,"afterId":0,"items":[],"next":null&#125;,"followExtra":&#123;"isNewUser":null,"isFetched":false,"followCount":0,"followers":[]&#125;,"hotDaily":&#123;"data":[],"paging":&#123;&#125;&#125;,"hotHighlight":&#123;"isFetching":false,"isDrained":false,"data":[],"paging":&#123;&#125;&#125;,"banner":&#123;&#125;,"commercialBanner":&#123;"show":false,"banner":&#123;&#125;,"trackData":&#123;&#125;&#125;,"video":&#123;"items":[],"next":null,"isLoading":false,"isDrained":false&#125;&#125;,"readStatus":&#123;&#125;,"column":&#123;&#125;,"requestColumn":&#123;"categories":[],"error":null&#125;,"articleContribution":&#123;"contributeRequests":[],"deleteContributeIdList":[],"handledContributeIdList":[],"recommendedColumns":[],"pinnedColumns":[],"sentContributeRequestsIdList":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]&#125;,"columnContribution":&#123;"contributeRequests":[],"autoInviteEnabled":false,"recommendedContributors":[],"contributionInvitation":null&#125;,"draftHistory":&#123;"history":&#123;&#125;,"drafts":&#123;&#125;&#125;,"upload":&#123;&#125;,"articleDraft":&#123;"titleImage":"","titleImageSize":&#123;&#125;,"isTitleImageFullScreen":false,"canTitleImageFullScreen":false,"title":"","titleImageUploading":false,"error":"","content":"","draftLoading":false,"updating":false,"globalLoading":false,"pendingVideo":&#123;"resource":null,"error":null&#125;,"deleteFail":&#123;"fail":false&#125;,"recommendTopics":[],"selectedColumn":0,"articleDisclaimers":[]&#125;,"articleDrafts":&#123;"isDrained":false,"isLoading":false,"items":[]&#125;,"columnAutocomplete":&#123;"users":[],"friends":[]&#125;,"columnCollection":&#123;&#125;,"userProfit":&#123;"permission":&#123;"permissionStatus":&#123;"zhiZixuan":0,"recommend":-1,"task":0,"plugin":0,"infinity":0&#125;,"visible":false&#125;,"linkCardLimit":0&#125;,"mcn":&#123;"bindInfo":&#123;&#125;,"memberCategoryList":[],"producerList":[],"categoryList":[],"lists":&#123;&#125;,"banners":&#123;&#125;,"protocolStatus":&#123;"isAgreedNew":true,"isAgreedOld":true&#125;,"probationCountdownDays":0&#125;,"zvideos":&#123;"campaignVideoList":&#123;&#125;,"campaigns":&#123;&#125;,"tagoreCategory":[],"recommendations":&#123;&#125;,"insertable":&#123;&#125;,"recruit":&#123;"form":&#123;"platform":"","nickname":"","followerCount":"","domain":"","contact":""&#125;,"submited":false,"ranking":[]&#125;,"qyActivityData":&#123;&#125;,"talkActivityData":&#123;&#125;,"party2022ActivityData":&#123;&#125;,"batchVideos":&#123;&#125;,"contribution":&#123;"selectedContribution":null,"campaign":null,"configs":&#123;&#125;,"contributionLists":&#123;&#125;,"recommendQuestions":&#123;"isLoading":true,"paging":&#123;"isEnd":false,"isStart":true,"totals":0&#125;,"data":[]&#125;,"questionSearchResults":&#123;"isLoading":true,"paging":&#123;"isEnd":false,"isStart":true,"totals":0&#125;,"data":[]&#125;&#125;,"creationReferences":&#123;&#125;,"zvideoCollection":&#123;&#125;,"zvideoGrant":&#123;&#125;,"collectData":&#123;"isFetching":false,"list":[]&#125;,"videoSource":&#123;"isLoaded":false&#125;&#125;,"republish":&#123;&#125;,"commentPermission":&#123;&#125;,"creatorRightStatus":&#123;"list":[]&#125;,"adPromotion":&#123;"answer":&#123;&#125;,"article":&#123;&#125;&#125;&#125;,"fetchHost":"www.zhihu.com","subAppName":"column","spanName":"WritePage","canaryConfig":&#123;"test_canary":"0","use_new_player":"1","player_vendor":"1","use_hevc":"1","upload_use_signature":"1","use_backdrop_blur":"1","article_title_imagex":"1","play_station":"1"&#125;&#125;想来知乎工作？请发送邮件到 jobs@zhihu.comF-8";/** * @desc File Info * @author Author Name * @date 2015-10-10 */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-JavaScript-文件注释"><a href="#3-3-JavaScript-文件注释" class="headerlink" title="3.3 JavaScript 文件注释"></a>3.3 JavaScript 文件注释</h2><h3 id="3-3-1-单行注释"><a href="#3-3-1-单行注释" class="headerlink" title="3.3.1 单行注释"></a>3.3.1 单行注释</h3><p>单行注释使用 &#x2F;&#x2F;，注释应单独一行写在被注释对象的上方，不要追加在某条语句的后面。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">// is current tabconst active = true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">const active = true // is current tab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注释行的上方需要有一个空行（除非注释行上方是一个块的顶部），以增加可读性。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">function getType () &#123;   console.log('fetching type...') // set the default type to 'no type' const type = this.type || 'no type' return type&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">// 注释行上面是一个块的顶部时不需要空行function getType () &#123;  // set the default type to 'no type' const type = this.type || 'no type'  return type&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">function getType () &#123;   console.log('fetching type...') // set the default type to 'no type' const type = this.type || 'no type' return type&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-2-多行注释"><a href="#3-3-2-多行注释" class="headerlink" title="3.3.2 多行注释"></a>3.3.2 多行注释</h3><p>多行注释使用 &#x2F;** …* &#x2F;，而不是多行的 &#x2F;&#x2F;。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">/** * make() returns a new element * based on the passed-in tag name */function make (tag) &#123; // ... return element&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">// make() returns a new element// based on the passed in tag namefunction make (tag) &#123; // ... return element&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-3-注释空格"><a href="#3-3-3-注释空格" class="headerlink" title="3.3.3 注释空格"></a>3.3.3 注释空格</h3><p>注释内容和注释符之间需要有一个空格，以增加可读性。eslint: spaced-comment。</p><ul><li>推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">// is current tabconst active = true/** * make() returns a new element * based on the passed-in tag name */function make(tag) &#123;  // ... return element&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不推荐：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">//is current tabconst active = true/** *make() returns a new element *based on the passed-in tag name */function make(tag) &#123;  // ... return element&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-4-特殊标记"><a href="#3-3-4-特殊标记" class="headerlink" title="3.3.4 特殊标记"></a>3.3.4 特殊标记</h3><p>有时我们发现某个可能的 bug，但因为一些原因还没法修复；或者某个地方还有一些待完成的功能，这时我们需要使用相应的特殊标记注释来告知未来的自己或合作者。常用的特殊标记有两种：</p><ul><li>&#x2F;&#x2F; FIXME : 说明问题是什么</li><li>&#x2F;&#x2F; TODO : 说明还要做什么或者问题的解决方案</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">class Calculator extends Abacus &#123;  constructor () &#123; super () // FIXME: shouldn’t use a global here      total = 0 // TODO: total should be configurable by an options param this.total = 0 &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-5-文档类注释"><a href="#3-3-5-文档类注释" class="headerlink" title="3.3.5 文档类注释"></a>3.3.5 文档类注释</h3><p>文档类注释，如函数、类、文件、事件等；都使用 jsdoc 规范。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">/** * Book类，代表一个书本. * @constructor * @param &#123;string&#125; title - 书本的标题. * @param &#123;string&#125; author - 书本的作者. */function Book (title, author) &#123; this.title = title this.author = author&#125;Book.prototype = &#123; /**   * 获取书本的标题   * @returns &#123;string|*&#125;   */  getTitle: function () &#123; return this.title &#125;, /**   * 设置书本的页数   * @param pageNum &#123;number&#125; 页数   */  setPageNum: function (pageNum) &#123; this.pageNum=pageNum &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-6-注释工具"><a href="#3-3-6-注释工具" class="headerlink" title="3.3.6 注释工具"></a>3.3.6 注释工具</h3><p>ESLint 是当下最流行的 JS 代码检查工具，ESLint 中有一些注释相关的规则，用户可选择开启：</p><ul><li>valid-jsdoc</li><li>require-jsdoc</li><li>no-warning-comments</li><li>capitalized-comments</li><li>line-comment-position</li><li>lines-around-comment</li><li>multiline-comment-style</li><li>no-inline-comments</li><li>spaced-comment</li></ul><h1 id="四、其它"><a href="#四、其它" class="headerlink" title="四、其它"></a>四、其它</h1><ul><li>缩进换行请使用两个空格。</li><li>大型团队多人协作项目推荐 JavaScript 代码末尾加分号。</li><li>小型个人创新练手项目可尝试使用 JavaScript 代码末尾不加分号的风格，更加清爽简练。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/22/hello-world/"/>
      <url>/2024/05/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="New-Post"><a href="#New-Post" class="headerlink" title="New Post"></a>New Post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new post <span class="token parameter variable">-p</span> maven/一、Maven介绍 <span class="token string">"Maven"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
